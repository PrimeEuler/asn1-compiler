/* Generated By:JJTree&JavaCC: Do not edit this line. AsnParserTokenManager.java */
package parser;
import java.io.*;
import java.util.*;
import gen.*;

/** Token Manager. */
public class AsnParserTokenManager implements AsnParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x21200000000L) != 0L || (active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 85;
            return 15;
         }
         if ((active0 & 0xfffffdedf0000000L) != 0L || (active1 & 0xffdffL) != 0L)
         {
            jjmatchedKind = 85;
            return 35;
         }
         return -1;
      case 1:
         if ((active0 & 0x1000000000L) != 0L || (active1 & 0x40L) != 0L)
            return 35;
         if ((active0 & 0xffffffeff0000000L) != 0L || (active1 & 0xffdbfL) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 1;
            return 35;
         }
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 1;
            return 14;
         }
         return -1;
      case 2:
         if ((active1 & 0x200L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 2;
            }
            return 13;
         }
         if ((active0 & 0x6004012080000000L) != 0L || (active1 & 0x100L) != 0L)
            return 35;
         if ((active0 & 0x9ffbfecf70000000L) != 0L || (active1 & 0xffcbfL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 2;
            }
            return 35;
         }
         return -1;
      case 3:
         if ((active0 & 0x8400800410000000L) != 0L || (active1 & 0x3L) != 0L)
            return 35;
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 3;
            return 12;
         }
         if ((active0 & 0x1bfb7ecb60000000L) != 0L || (active1 & 0xffdbcL) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 3;
            return 35;
         }
         return -1;
      case 4:
         if ((active1 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 3;
            }
            return 27;
         }
         if ((active0 & 0x3000200000000L) != 0L || (active1 & 0x88000L) != 0L)
            return 35;
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 4;
            return 0;
         }
         if ((active0 & 0x1bf87ec960000000L) != 0L || (active1 & 0x77d3cL) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 4;
            return 35;
         }
         return -1;
      case 5:
         if ((active0 & 0x8100000000L) != 0L || (active1 & 0x11c10L) != 0L)
            return 35;
         if ((active0 & 0x1bf87e4860000000L) != 0L || (active1 & 0x660acL) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 5;
            return 35;
         }
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active1 & 0x100L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 4;
            }
            return 27;
         }
         return -1;
      case 6:
         if ((active0 & 0x300440060000000L) != 0L || (active1 & 0x28L) != 0L)
            return 35;
         if ((active1 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 5;
            }
            return 27;
         }
         if ((active0 & 0x18f83a4800000000L) != 0L || (active1 & 0x66184L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 6;
            return 35;
         }
         return -1;
      case 7:
         if ((active1 & 0x60000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 6;
            }
            return 27;
         }
         if ((active0 & 0x890024800000000L) != 0L)
            return 35;
         if ((active0 & 0x1068380000000000L) != 0L || (active1 & 0x6384L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 7;
            return 35;
         }
         return -1;
      case 8:
         if ((active0 & 0x20180000000000L) != 0L || (active1 & 0x4004L) != 0L)
            return 35;
         if ((active0 & 0x1048200000000000L) != 0L || (active1 & 0x62380L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 8;
            }
            return 35;
         }
         return -1;
      case 9:
         if ((active0 & 0x1040080000000000L) != 0L)
            return 35;
         if ((active0 & 0x8200000000000L) != 0L || (active1 & 0x62380L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 9;
            return 35;
         }
         return -1;
      case 10:
         if ((active1 & 0x60180L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 10;
            return 35;
         }
         if ((active0 & 0x8200000000000L) != 0L || (active1 & 0x2200L) != 0L)
            return 35;
         return -1;
      case 11:
         if ((active1 & 0x40180L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 11;
            return 35;
         }
         if ((active1 & 0x20000L) != 0L)
            return 35;
         return -1;
      case 12:
         if ((active1 & 0x80L) != 0L)
            return 35;
         if ((active1 & 0x40100L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 12;
            return 35;
         }
         return -1;
      case 13:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 13;
            return 35;
         }
         if ((active1 & 0x100L) != 0L)
            return 35;
         return -1;
      case 14:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 14;
            return 35;
         }
         return -1;
      case 15:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 15;
            return 35;
         }
         return -1;
      case 16:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 16;
            return 35;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 18);
      case 41:
         return jjStopAtPos(0, 19);
      case 44:
         return jjStopAtPos(0, 15);
      case 45:
         jjmatchedKind = 23;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
      case 46:
         return jjStopAtPos(0, 14);
      case 48:
         return jjStopAtPos(0, 13);
      case 58:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 26);
      case 60:
         return jjStopAtPos(0, 22);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x20210000000000L, 0x810L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x20000a0000000L, 0x40L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x1000088000000000L, 0x4L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x8040000000000L, 0x32020L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x1d4000000000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x1L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0xa00004040000000L, 0x8000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x6000000000000000L, 0x80100L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x21200000000L, 0x200L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x88L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x4000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x8000002900000000L, 0x1400L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x800010000000L, 0x40000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 91:
         return jjStopAtPos(0, 20);
      case 93:
         return jjStopAtPos(0, 21);
      case 123:
         return jjStopAtPos(0, 16);
      case 124:
         return jjStopAtPos(0, 25);
      case 125:
         return jjStopAtPos(0, 17);
      default :
         return jjMoveNfa_0(16, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 58:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x4001000010000000L, active1, 0x80000L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x210L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0x800L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x40a042800000000L, active1, 0x56020L);
      case 70:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 36, 35);
         break;
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0xa000000080000000L, active1, 0x20102L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x200004000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x844110040000000L, active1, 0x8000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000080020000000L, active1, 0x4L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x220000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000L, active1, 0x9L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0x1000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000400000000L, active1, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x190000000000000L, active1, 0L);
      case 89:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 70, 35);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 24);
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x1000L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x80800L);
      case 68:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 35);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x8040000000000L, active1, 0x14020L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000010000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x500000000000L, active1, 0L);
      case 74:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000400000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0x4L);
      case 78:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x500L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x8020000000L, active1, 0x1L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x310204000000000L, active1, 0L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x22010L);
      case 84:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 35);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 35);
         return jjMoveStringLiteralDfa3_0(active0, 0xa0020240000000L, active1, 0x2L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x40800000000000L, active1, 0x80L);
      case 88:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 62, 35);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000L);
      case 89:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 35);
         break;
      case 90:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000L);
      case 69:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 35);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000240000000L, active1, 0xca10L);
      case 72:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 35);
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0xa028100000000L, active1, 0x20L);
      case 76:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 35);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x810204020000000L, active1, 0L);
      case 77:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x320000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0x20004L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000L);
      case 83:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0x88L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x41400L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0x100L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0x500000000000L, active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000400000000000L, active1, 0x10400L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0x200L);
      case 69:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0x40100820000000L, active1, 0x8L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x10204000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000100000000L, active1, 0x30L);
      case 79:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 83, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0xa0000000000L, active1, 0x4L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x380000000000000L, active1, 0x6000L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x900L);
      case 84:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 35);
         break;
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x800040000000000L, active1, 0x41000L);
      case 88:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 79, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100L);
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000020000000L, active1, 0x60000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x10204000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 35);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L, active1, 0x4020L);
      case 71:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 35);
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x1008000000000000L, active1, 0x2080L);
      case 76:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 80, 35);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x800a0800000000L, active1, 0xcL);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x40100000000000L, active1, 0L);
      case 83:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 35);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 76, 35);
         break;
      case 84:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 35);
         return jjMoveStringLiteralDfa6_0(active0, 0x300400000000000L, active1, 0x200L);
      case 88:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200L);
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0xc0220000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0L);
      case 68:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 69, 35);
         break;
      case 69:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 35);
         return jjMoveStringLiteralDfa7_0(active0, 0x800080000000000L, active1, 0x4L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x10004000000000L, active1, 0x100L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000L);
      case 78:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 35);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0x4080L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000L);
      case 82:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 35);
         break;
      case 83:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 35);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 35);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L);
      case 84:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 35);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 67, 35);
         return jjMoveStringLiteralDfa7_0(active0, 0x28000000000000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x60000L);
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000L);
      case 69:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 35);
         break;
      case 70:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x1028000000000000L, active1, 0L);
      case 76:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 41, 35);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 35);
         break;
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L, active1, 0x104L);
      case 83:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 35);
         break;
      case 84:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 38, 35);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 35);
         return jjMoveStringLiteralDfa8_0(active0, 0x40200000000000L, active1, 0x2200L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 67:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 53, 35);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000L);
      case 69:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 78, 35);
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100L);
      case 72:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L, active1, 0x2080L);
      case 76:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 44, 35);
         break;
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L, active1, 0L);
      case 84:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 54, 35);
         break;
      case 71:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 60, 35);
         break;
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20100L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L, active1, 0x80L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000L, active1, 0x42000L);
      case 80:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200L);
      case 83:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 43, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 69:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(10, 73, 35);
         break;
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80L);
      case 78:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 45, 35);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(10, 77, 35);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x60100L);
      case 83:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 51, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1);
      return 11;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa12_0(active1, 0x100L);
      case 84:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(11, 81, 35);
         return jjMoveStringLiteralDfa12_0(active1, 0x80L);
      case 86:
         return jjMoveStringLiteralDfa12_0(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1);
}
static private int jjMoveStringLiteralDfa12_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(10, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1);
      return 12;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa13_0(active1, 0x40000L);
      case 84:
         return jjMoveStringLiteralDfa13_0(active1, 0x100L);
      case 89:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(12, 71, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1);
}
static private int jjMoveStringLiteralDfa13_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(11, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1);
      return 13;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa14_0(active1, 0x40000L);
      case 89:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(13, 72, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1);
}
static private int jjMoveStringLiteralDfa14_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1);
      return 14;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa15_0(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1);
}
static private int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1);
      return 15;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa16_0(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1);
}
static private int jjMoveStringLiteralDfa16_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1);
      return 16;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa17_0(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1);
}
static private int jjMoveStringLiteralDfa17_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1);
      return 17;
   }
   switch(curChar)
   {
      case 78:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(17, 82, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 35;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(27);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(27);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(27);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  else if ((0x100002600L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 45)
                     jjCheckNAdd(27);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(27);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(27);
                  break;
               case 16:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAdd(21);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(27);
                  break;
               case 17:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 18:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if (curChar == 34 && kind > 11)
                     kind = 11;
                  break;
               case 20:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(21);
                  break;
               case 23:
                  if (curChar == 45)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 26:
                  if (curChar == 45)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(26, 27);
                  break;
               case 28:
                  if (curChar == 39)
                     jjCheckNAddStates(0, 3);
                  break;
               case 29:
                  if ((0x3000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 31);
                  break;
               case 31:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 34);
                  break;
               case 34:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 35:
               case 27:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(26, 27);
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  if (curChar == 84)
                     jjAddStates(4, 5);
                  break;
               case 14:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  if (curChar == 74)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAddTwoStates(23, 24);
                  }
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 12:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 82 && kind > 8)
                     kind = 8;
                  break;
               case 3:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 18:
                  jjAddStates(6, 7);
                  break;
               case 22:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 25:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(26, 27);
                  break;
               case 30:
                  if (curChar == 66 && kind > 9)
                     kind = 9;
                  break;
               case 32:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 33:
                  if (curChar == 72 && kind > 10)
                     kind = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(6, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 35 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(1, 0);
}
static private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if (curChar == 45 && kind > 6)
                     kind = 6;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   29, 31, 32, 34, 1, 11, 18, 19, 32, 34, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\60", "\56", "\54", "\173", "\175", "\50", "\51", "\133", "\135", "\74", "\55", 
"\72\72\75", "\174", "\73", "\72", "\124\101\107\123", "\102\117\117\114\105\101\116", 
"\111\116\124\105\107\105\122", "\102\111\124", "\123\124\122\111\116\107", "\117\103\124\105\124", 
"\116\125\114\114", "\123\105\121\125\105\116\103\105", "\117\106", "\123\105\124", 
"\111\115\120\114\111\103\111\124", "\103\110\117\111\103\105", "\101\116\131", 
"\117\120\124\111\117\116\101\114", "\104\105\106\101\125\114\124", "\103\117\115\120\117\116\105\116\124\123", 
"\125\116\111\126\105\122\123\101\114", "\101\120\120\114\111\103\101\124\111\117\116", 
"\120\122\111\126\101\124\105", "\124\122\125\105", "\106\101\114\123\105", "\102\105\107\111\116", 
"\105\116\104", "\104\105\106\111\116\111\124\111\117\116\123", 
"\105\130\120\114\111\103\111\124", "\101\125\124\117\115\101\124\111\103", 
"\105\116\125\115\105\122\101\124\105\104", "\105\130\124\105\122\116\101\114", "\105\130\120\117\122\124\123", 
"\111\115\120\117\122\124\123", "\122\105\101\114", "\111\116\103\114\125\104\105\123", 
"\103\117\116\124\101\111\116\111\116\107", "\115\111\116", "\115\101\130", "\123\111\132\105", "\106\122\117\115", 
"\127\111\124\110", "\103\117\115\120\117\116\105\116\124", "\120\122\105\123\105\116\124", 
"\101\102\123\105\116\124", "\104\105\106\111\116\105\104", "\102\131", 
"\120\114\125\123\55\111\116\106\111\116\111\124\131", "\115\111\116\125\123\55\111\116\106\111\116\111\124\131", 
"\117\102\112\105\103\124\55\124\131\120\105", "\123\131\116\124\101\130", "\101\103\103\105\123\123", 
"\123\124\101\124\125\123", "\104\105\123\103\122\111\120\124\111\117\116", 
"\122\105\106\105\122\105\116\103\105", "\111\116\104\105\130", "\104\105\106\126\101\114", 
"\104\111\123\120\114\101\131\55\110\111\116\124", "\124\105\130\124\125\101\114\55\103\117\116\126\105\116\124\111\117\116", 
"\115\101\103\122\117", null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "WithinASNComment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0x3fffffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x60L, 0x0L, 
};
static final long[] jjtoMore = {
   0x80L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[35];
static private final int[] jjstateSet = new int[70];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public AsnParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public AsnParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 35; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
