     RFC4210 DEFINITIONS EXPLICIT TAGS ::=

     BEGIN

     -- EXPORTS ALL --

--     IMPORTS

--         Certificate, CertificateList, Extensions, AlgorithmIdentifier,
--         UTF8String 
--                FROM PKIX1Explicit88 {iso(1) identified-organization(3)
--                dod(6) internet(1) security(5) mechanisms(5) pkix(7)
--                id-mod(0) id-pkix1-explicit-88(1)}

--         GeneralName, KeyIdentifier
--                FROM PKIX1Implicit88 {iso(1) identified-organization(3)
--                dod(6) internet(1) security(5) mechanisms(5) pkix(7)
--                id-mod(0) id-pkix1-implicit-88(2)}

--         CertTemplate, PKIPublicationInfo, EncryptedValue, CertId,
--         CertReqMessages
--                FROM PKIXCRMF-2005 {iso(1) identified-organization(3)
--                dod(6) internet(1) security(5) mechanisms(5) pkix(7)
--                id-mod(0) id-mod-crmf2005(36)}

         -- see also the behavioral clarifications to CRMF codified in
         -- Appendix C of this specification

--         CertificationRequest
--                FROM PKCS-10 {iso(1) member-body(2)
--                              us(840) rsadsi(113549)
--                              pkcs(1) pkcs-10(10) modules(1) pkcs-10(1)}

         -- (specified in RFC 2986 with 1993 ASN.1 syntax and IMPLICIT
         -- tags).  Alternatively, implementers may directly include
         -- the [PKCS10] syntax in this module





--         ;


   -- X.400 address syntax starts here

     ORAddress ::= SEQUENCE {
        built-in-standard-attributes BuiltInStandardAttributes,
        built-in-domain-defined-attributes
                   BuiltInDomainDefinedAttributes OPTIONAL,
   -- see also teletex-domain-defined-attributes
          extension-attributes ExtensionAttributes OPTIONAL }

-- Built-in Standard Attributes

BuiltInStandardAttributes ::= SEQUENCE {
   country-name                  CountryName OPTIONAL,
   administration-domain-name    AdministrationDomainName OPTIONAL,
   network-address           [0] IMPLICIT NetworkAddress OPTIONAL,
     -- see also extended-network-address
   terminal-identifier       [1] IMPLICIT TerminalIdentifier OPTIONAL,
   private-domain-name       [2] PrivateDomainName OPTIONAL,
   organization-name         [3] IMPLICIT OrganizationName OPTIONAL,
     -- see also teletex-organization-name
   numeric-user-identifier   [4] IMPLICIT NumericUserIdentifier
                                 OPTIONAL,
   personal-name             [5] IMPLICIT PersonalName OPTIONAL,
     -- see also teletex-personal-name
   organizational-unit-names [6] IMPLICIT OrganizationalUnitNames
                                 OPTIONAL }
     -- see also teletex-organizational-unit-names

CountryName ::= [APPLICATION 1] CHOICE {
   x121-dcc-code         NumericString
                           (SIZE (ub-country-name-numeric-length)),
   iso-3166-alpha2-code  PrintableString
                           (SIZE (ub-country-name-alpha-length)) }

AdministrationDomainName ::= [APPLICATION 2] CHOICE {
   numeric   NumericString   (SIZE (0..ub-domain-name-length)),
   printable PrintableString (SIZE (0..ub-domain-name-length)) }

NetworkAddress ::= X121Address  -- see also extended-network-address

X121Address ::= NumericString (SIZE (1..ub-x121-address-length))

TerminalIdentifier ::= PrintableString (SIZE (1..ub-terminal-id-length))

PrivateDomainName ::= CHOICE {
   numeric   NumericString   (SIZE (1..ub-domain-name-length)),
   printable PrintableString (SIZE (1..ub-domain-name-length)) }

OrganizationName ::= PrintableString
                            (SIZE (1..ub-organization-name-length))
  -- see also teletex-organization-name

NumericUserIdentifier ::= NumericString
                            (SIZE (1..ub-numeric-user-id-length))


PersonalName ::= SET {
   surname     [0] IMPLICIT PrintableString
                    (SIZE (1..ub-surname-length)),
   given-name  [1] IMPLICIT PrintableString
                    (SIZE (1..ub-given-name-length)) OPTIONAL,
   initials    [2] IMPLICIT PrintableString
                    (SIZE (1..ub-initials-length)) OPTIONAL,
   generation-qualifier [3] IMPLICIT PrintableString
                    (SIZE (1..ub-generation-qualifier-length))
                    OPTIONAL }
  -- see also teletex-personal-name

OrganizationalUnitNames ::= SEQUENCE SIZE (1..ub-organizational-units)
                             OF OrganizationalUnitName
  -- see also teletex-organizational-unit-names

OrganizationalUnitName ::= PrintableString (SIZE
                    (1..ub-organizational-unit-name-length))



-- Built-in Domain-defined Attributes

   BuiltInDomainDefinedAttributes ::= SEQUENCE SIZE
                    (1..ub-domain-defined-attributes) OF
                    BuiltInDomainDefinedAttribute

BuiltInDomainDefinedAttribute ::= SEQUENCE {
   type PrintableString (SIZE
                   (1..ub-domain-defined-attribute-type-length)),
   value PrintableString (SIZE
                   (1..ub-domain-defined-attribute-value-length)) }



-- Extension Attributes

      ExtensionAttributes ::= SET SIZE (1..ub-extension-attributes) OF
               ExtensionAttribute

      ExtensionAttribute ::=  SEQUENCE {
          extension-attribute-type [0] IMPLICIT INTEGER
                   (0..ub-extension-attributes),
          extension-attribute-value [1]
                   ANY DEFINED BY extension-attribute-type }


     -- Upper Bounds
ub-name INTEGER ::= 32768
ub-common-name INTEGER ::= 64
ub-locality-name INTEGER ::= 128
ub-state-name INTEGER ::= 128
ub-organization-name INTEGER ::= 64
ub-organizational-unit-name INTEGER ::= 64
ub-title INTEGER ::= 64
ub-serial-number INTEGER ::= 64
ub-match INTEGER ::= 128
ub-emailaddress-length INTEGER ::= 255
ub-common-name-length INTEGER ::= 64
ub-country-name-alpha-length INTEGER ::= 2
ub-country-name-numeric-length INTEGER ::= 3
ub-domain-defined-attributes INTEGER ::= 4
ub-domain-defined-attribute-type-length INTEGER ::= 8
ub-domain-defined-attribute-value-length INTEGER ::= 128
ub-domain-name-length INTEGER ::= 16
ub-extension-attributes INTEGER ::= 256
ub-e163-4-number-length INTEGER ::= 15
ub-e163-4-sub-address-length INTEGER ::= 40
ub-generation-qualifier-length INTEGER ::= 3
ub-given-name-length INTEGER ::= 16
ub-initials-length INTEGER ::= 5
ub-integer-options INTEGER ::= 256
ub-numeric-user-id-length INTEGER ::= 32
ub-organization-name-length INTEGER ::= 64
ub-organizational-unit-name-length INTEGER ::= 32
ub-organizational-units INTEGER ::= 4
ub-pds-name-length INTEGER ::= 16
ub-pds-parameter-length INTEGER ::= 30
ub-pds-physical-address-lines INTEGER ::= 6
ub-postal-code-length INTEGER ::= 16
ub-pseudonym INTEGER ::= 128
ub-surname-length INTEGER ::= 40
ub-terminal-id-length INTEGER ::= 24
ub-unformatted-address-length INTEGER ::= 180
ub-x121-address-length INTEGER ::= 16



-- UNIVERSAL Types defined in 1993 and 1998 ASN.1
-- and required by this specification

   UniversalString ::= [UNIVERSAL 28] IMPLICIT OCTET STRING
        -- UniversalString is defined in ASN.1:1993

   BMPString ::= [UNIVERSAL 30] IMPLICIT OCTET STRING
      -- BMPString is the subtype of UniversalString and models
      -- the Basic Multilingual Plane of ISO/IEC 10646

   UTF8String ::= [UNIVERSAL 12] IMPLICIT OCTET STRING
      -- The content of this type conforms to RFC 3629.



      -- Certificate 

	Certificate  ::=  SEQUENCE  {
           tbsCertificate       TBSCertificate,
       	   signatureAlgorithm   AlgorithmIdentifier,
           signatureValue       BIT STRING 
    }    

        TBSCertificate  ::=  SEQUENCE  {
           version         [0]  EXPLICIT Version DEFAULT v1,
           serialNumber         CertificateSerialNumber,
           signature            AlgorithmIdentifier,
           issuer               Name,
           validity             Validity,
           subject              Name,
           subjectPublicKeyInfo SubjectPublicKeyInfo,
           issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
                             -- If present, version MUST be v2 or v3
           subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
                             -- If present, version MUST be v2 or v3
           extensions      [3]  EXPLICIT Extensions OPTIONAL
                             -- If present, version MUST be v3
    }


         Version  ::= INTEGER  {  v1(0), v2(1), v3(2)  }

         CertificateSerialNumber  ::=  INTEGER

         Validity ::= SEQUENCE {
            notBefore      Time,
            notAfter       Time }

         Time ::= CHOICE {
            utcTime        UTCTime,
            generalTime    GeneralizedTime }
           
         UniqueIdentifier  ::=  BIT STRING

         SubjectPublicKeyInfo  ::=  SEQUENCE  {
             algorithm            AlgorithmIdentifier,
             subjectPublicKey     BIT STRING  }

         Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension

         Extension  ::=  SEQUENCE  {
             extnID      OBJECT IDENTIFIER,
             critical    BOOLEAN DEFAULT FALSE,
             extnValue   OCTET STRING
                    -- contains the DER encoding of an ASN.1 value
                    -- corresponding to the extension type identified
                    -- by extnID
        }


         AlgorithmIdentifier  ::=  SEQUENCE  {
            algorithm               OBJECT IDENTIFIER,
            parameters              ANY DEFINED BY algorithm OPTIONAL  }

         
        
         Name ::= CHOICE { -- only one possibility for now --
            rdnSequence  RDNSequence }

         RDNSequence ::= SEQUENCE OF RelativeDistinguishedName

         RelativeDistinguishedName ::= SET SIZE (1..MAX) OF AttributeTypeAndValue

         AttributeTypeAndValue ::= SEQUENCE {
             type     AttributeType,
             value    AttributeValue }

         AttributeType ::= OBJECT IDENTIFIER

         AttributeValue ::= ANY -- DEFINED BY AttributeType

         DirectoryString ::= CHOICE {
             teletexString           TeletexString (SIZE (1..MAX)),
             printableString         PrintableString (SIZE (1..MAX)),
             universalString         UniversalString (SIZE (1..MAX)),
             utf8String              UTF8String (SIZE (1..MAX)),
             bmpString               BMPString (SIZE (1..MAX)) }
    



            
      -- CertificateList

          CertificateList  ::=  SEQUENCE  {
             tbsCertList          TBSCertList,
             signatureAlgorithm   AlgorithmIdentifier,
             signatureValue       BIT STRING  }

          TBSCertList  ::=  SEQUENCE  {
             version                 Version OPTIONAL,
                                     -- if present, MUST be v2
            signature               AlgorithmIdentifier,
             issuer                  Name,
            thisUpdate              Time,
            nextUpdate              Time OPTIONAL,
             revokedCertificates     SEQUENCE OF SEQUENCE  {
                                          userCertificate         CertificateSerialNumber,
                                          revocationDate          Time,
                                          crlEntryExtensions      Extensions OPTIONAL
                                      -- if present, version MUST be v2
                                           }  OPTIONAL,
            crlExtensions        [0]  EXPLICIT Extensions OPTIONAL
                                      -- if present, version MUST be v2
                    }


            KeyIdentifier ::= OCTET STRING




           -- GeneralNames


            GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName

            GeneralName ::= CHOICE {
                otherName                       [0]     OtherName,
                rfc822Name                      [1]     IA5String,
                dNSName                         [2]     IA5String,
                x400Address                     [3]     ORAddress,
                directoryName                   [4]     Name,
                ediPartyName                    [5]     EDIPartyName,
                uniformResourceIdentifier       [6]     IA5String,
                iPAddress                       [7]     OCTET STRING,
                registeredID                    [8]     OBJECT IDENTIFIER }

           OtherName ::= SEQUENCE {
                type-id    OBJECT IDENTIFIER,
                value      [0] EXPLICIT ANY DEFINED BY type-id }

           EDIPartyName ::= SEQUENCE {
                 nameAssigner            [0]     DirectoryString OPTIONAL,
                 partyName               [1]     DirectoryString }




           -- CertReqMessages


             CertReqMessages ::= SEQUENCE SIZE (1..MAX) OF CertReqMsg

                 CertReqMsg ::= SEQUENCE {
                 certReq   CertRequest,
                 popo       ProofOfPossession  OPTIONAL,
      -- content depends upon key type
                 regInfo   SEQUENCE SIZE(1..MAX) OF AttributeTypeAndValue OPTIONAL
   }



           -- Proof Of Possession

           ProofOfPossession ::= CHOICE {
                raVerified        [0] NULL,
                signature         [1] POPOSigningKey,
                keyEncipherment   [2] POPOPrivKey,
                keyAgreement      [3] POPOPrivKey }



           -- POPOSigningKey


          POPOSigningKey ::= SEQUENCE {
               poposkInput         [0] POPOSigningKeyInput OPTIONAL,
               algorithmIdentifier     AlgorithmIdentifier,
               signature               BIT STRING }


        POPOSigningKeyInput ::= SEQUENCE {
               authInfo            CHOICE {
                        sender              [0] GeneralName,
           -- used only if an authenticated identity has been
           -- established for the sender (e.g., a DN from a
           -- previously-issued and currently-valid certificate)
                        publicKeyMAC        PKMACValue },
           -- used if no authenticated GeneralName currently exists for
           -- the sender; publicKeyMAC contains a password-based MAC
           -- on the DER-encoded value of publicKey
               publicKey           SubjectPublicKeyInfo }  -- from CertTemplate
  
           PKMACValue ::= SEQUENCE {
               algId  AlgorithmIdentifier,
               value  BIT STRING }


         --  POPOPrivKey

          POPOPrivKey ::= CHOICE {
              thisMessage       [0] BIT STRING,   -- deprecated
              subsequentMessage [1] SubsequentMessage,
              dhMAC             [2] BIT STRING,   -- deprecated
              agreeMAC          [3] PKMACValue,
              encryptedKey      [4] EnvelopedData }

        SubsequentMessage ::= INTEGER {
               encrCert (0),
               challengeResp (1) }



        -- Enveloped Data

        EnvelopedData ::= SEQUENCE {
              version CMSVersion,
              originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
              recipientInfos RecipientInfos,
              encryptedContentInfo EncryptedContentInfo,
              unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }



        CMSVersion ::= INTEGER { v0(0), v1(1), v2(2), v3(3), v4(4), v5(5) }

        --  OriginatorInfo

        OriginatorInfo ::= SEQUENCE {
              certs [0] IMPLICIT CertificateSet OPTIONAL,
              crls [1] IMPLICIT RevocationInfoChoices OPTIONAL }

       -- RecipientInfos

        RecipientInfos ::= SET SIZE (1..MAX) OF RecipientInfo
         
       -- EncryptedContentInfo

        EncryptedContentInfo ::= SEQUENCE {
             contentType ContentType,
             contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,
             encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL }

        EncryptedContent ::= OCTET STRING

        UnprotectedAttributes ::= SET SIZE (1..MAX) OF Attribute

        RecipientInfo ::= CHOICE {
            ktri KeyTransRecipientInfo,
            kari [1] KeyAgreeRecipientInfo,
            kekri [2] KEKRecipientInfo,
            pwri [3] PasswordRecipientInfo,
            ori [4] OtherRecipientInfo }


        EncryptedKey ::= OCTET STRING

        KeyTransRecipientInfo ::= SEQUENCE {
       	    version CMSVersion,  -- always set to 0 or 2
            rid RecipientIdentifier,
            keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
            encryptedKey EncryptedKey }

       RecipientIdentifier ::= CHOICE {
            issuerAndSerialNumber IssuerAndSerialNumber,
            subjectKeyIdentifier [0] SubjectKeyIdentifier }

       KeyAgreeRecipientInfo ::= SEQUENCE {
           version CMSVersion,  -- always set to 3
           originator [0] EXPLICIT OriginatorIdentifierOrKey,
           ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,
           keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
           recipientEncryptedKeys RecipientEncryptedKeys }    


       OriginatorIdentifierOrKey ::= CHOICE {
           issuerAndSerialNumber IssuerAndSerialNumber,
           subjectKeyIdentifier [0] SubjectKeyIdentifier,
           originatorKey [1] OriginatorPublicKey }
 
      OriginatorPublicKey ::= SEQUENCE {
          algorithm AlgorithmIdentifier,
          publicKey BIT STRING }

       RecipientEncryptedKeys ::= SEQUENCE OF RecipientEncryptedKey

       RecipientEncryptedKey ::= SEQUENCE {
          rid KeyAgreeRecipientIdentifier,
          encryptedKey EncryptedKey }
 
       KeyAgreeRecipientIdentifier ::= CHOICE {
          issuerAndSerialNumber IssuerAndSerialNumber,
          rKeyId [0] IMPLICIT RecipientKeyIdentifier }
 
       RecipientKeyIdentifier ::= SEQUENCE {
         subjectKeyIdentifier SubjectKeyIdentifier,
         date GeneralizedTime OPTIONAL,
         other OtherKeyAttribute OPTIONAL }

        SubjectKeyIdentifier ::= OCTET STRING

    KEKRecipientInfo ::= SEQUENCE {
      version CMSVersion,  -- always set to 4
      kekid KEKIdentifier,
      keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
      encryptedKey EncryptedKey }

    KEKIdentifier ::= SEQUENCE {
       keyIdentifier OCTET STRING,
       date GeneralizedTime OPTIONAL,
       other OtherKeyAttribute OPTIONAL }

    PasswordRecipientInfo ::= SEQUENCE {
       version CMSVersion,   -- always set to 0
       keyDerivationAlgorithm [0] KeyDerivationAlgorithmIdentifier
                                OPTIONAL,
       keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
       encryptedKey EncryptedKey }

    OtherRecipientInfo ::= SEQUENCE {
       oriType OBJECT IDENTIFIER,
       oriValue ANY DEFINED BY oriType }

     KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
     KeyDerivationAlgorithmIdentifier ::= AlgorithmIdentifier

     RevocationInfoChoices ::= SET OF RevocationInfoChoice

     RevocationInfoChoice ::= CHOICE {
          crl CertificateList,
          other [1] IMPLICIT OtherRevocationInfoFormat }


     OtherRevocationInfoFormat ::= SEQUENCE {
          otherRevInfoFormat OBJECT IDENTIFIER,
          otherRevInfo ANY DEFINED BY otherRevInfoFormat }
  
     CertificateSet ::= SET OF CertificateChoices

     CertificateChoices ::= CHOICE {
          certificate Certificate,
          extendedCertificate [0] IMPLICIT ExtendedCertificate,  -- Obsolete
          v1AttrCert [1] IMPLICIT AttributeCertificateV1,        -- Obsolete
          v2AttrCert [2] IMPLICIT AttributeCertificateV2,
          other [3] IMPLICIT OtherCertificateFormat }

     AttributeCertificateV2 ::= AttributeCertificate
     

     OtherCertificateFormat ::= SEQUENCE {
          otherCertFormat OBJECT IDENTIFIER,
          otherCert ANY DEFINED BY otherCertFormat }


     IssuerAndSerialNumber ::= SEQUENCE {
          issuer Name,
          serialNumber CertificateSerialNumber }


      UserKeyingMaterial ::= OCTET STRING


     OtherKeyAttribute ::= SEQUENCE {
           keyAttrId OBJECT IDENTIFIER,
           keyAttr ANY DEFINED BY keyAttrId OPTIONAL }

     ExtendedCertificate ::= SEQUENCE {
          extendedCertificateInfo ExtendedCertificateInfo,
          signatureAlgorithm SignatureAlgorithmIdentifier,
          signature Signature }

   SignatureAlgorithmIdentifier ::= AlgorithmIdentifier

   Signature ::= BIT STRING

     ExtendedCertificateInfo ::= SEQUENCE {
       version CMSVersion,
       certificate Certificate,
       attributes UnauthAttributes }


     AttributeCertificateV1 ::= SEQUENCE {
         acInfo AttributeCertificateInfoV1,
         signatureAlgorithm AlgorithmIdentifier,
         signature BIT STRING }

    AttributeCertificateInfoV1 ::= SEQUENCE {
          version AttCertVersionV1 DEFAULT v1,
          subject CHOICE {
                  baseCertificateID [0] IssuerSerial,
         -- associated with a Public Key Certificate
                  subjectName [1] GeneralNames },
         -- associated with a name
                  issuer GeneralNames,
                  signature AlgorithmIdentifier,
                  serialNumber CertificateSerialNumber,
                  attCertValidityPeriod AttCertValidityPeriod,
                  attributes SEQUENCE OF Attribute,
                  issuerUniqueID UniqueIdentifier OPTIONAL,
                  extensions Extensions OPTIONAL }

   AttCertVersionV1 ::= INTEGER { v1(0) }

   UnauthAttributes ::= SET SIZE (1..MAX) OF Attribute

   ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier

   ContentType ::= OBJECT IDENTIFIER

   IssuerSerial  ::=  SEQUENCE {
         issuer         GeneralNames,
         serial         CertificateSerialNumber,
         issuerUID      UniqueIdentifier OPTIONAL
            }

    AttCertValidityPeriod  ::= SEQUENCE {
        notBeforeTime  GeneralizedTime,
        notAfterTime   GeneralizedTime
            }


        AttributeCertificate ::= SEQUENCE {
              acinfo               AttributeCertificateInfo,
              signatureAlgorithm   AlgorithmIdentifier,
              signatureValue       BIT STRING
             }

        AttributeCertificateInfo ::= SEQUENCE {
                 version              AttCertVersion, -- version is v2
                 holder               Holder,
                 issuer               AttCertIssuer,
                 signature            AlgorithmIdentifier,
                 serialNumber         CertificateSerialNumber,
                 attrCertValidityPeriod   AttCertValidityPeriod,
                 attributes           SEQUENCE OF Attribute,
                 issuerUniqueID       UniqueIdentifier OPTIONAL,
                 extensions           Extensions OPTIONAL
            }



           AttCertVersion ::= INTEGER { v2(1) }

           Holder ::= SEQUENCE {
                  baseCertificateID   [0] IssuerSerial OPTIONAL,
                           -- the issuer and serial number of
                           -- the holder's Public Key Certificate


                  entityName          [1] GeneralNames OPTIONAL,
                           -- the name of the claimant or role
                  objectDigestInfo    [2] ObjectDigestInfo OPTIONAL
                           -- used to directly authenticate the holder,
                           -- for example, an executable
            }

           ObjectDigestInfo ::= SEQUENCE {
                 digestedObjectType  ENUMERATED {
                         publicKey            (0),
                         publicKeyCert        (1),
                         otherObjectTypes     (2) },
                                 -- otherObjectTypes MUST NOT
                                 -- be used in this profile
                 otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,
                 digestAlgorithm     AlgorithmIdentifier,
                 objectDigest        BIT STRING
            }


            AttCertIssuer ::= CHOICE {
                 v1Form   GeneralNames,  -- MUST NOT be used in this
                                         -- profile
                 v2Form   [0] V2Form     -- v2 only
            }

            V2Form ::= SEQUENCE {
                 issuerName            GeneralNames  OPTIONAL,
                 baseCertificateID     [0] IssuerSerial  OPTIONAL,
                 objectDigestInfo      [1] ObjectDigestInfo  OPTIONAL
                   -- issuerName MUST be present in this profile
                   -- baseCertificateID and objectDigestInfo MUST NOT
                   -- be present in this profile
            }


       --  CertRequest


             CertRequest ::= SEQUENCE {
                  certReqId     INTEGER,        -- ID for matching request and reply
                  certTemplate  CertTemplate, --Selected fields of cert to be issued
                  controls      Controls OPTIONAL } -- Attributes affecting issuance

             Controls  ::= SEQUENCE SIZE(1..MAX) OF AttributeTypeAndValue

             CertTemplate ::= SEQUENCE {
                  version      [0] Version               OPTIONAL,
                  serialNumber [1] INTEGER               OPTIONAL,
                  signingAlg   [2] AlgorithmIdentifier   OPTIONAL,
                  issuer       [3] Name                  OPTIONAL,
                  validity     [4] OptionalValidity      OPTIONAL,
                  subject      [5] Name                  OPTIONAL,
                  publicKey    [6] SubjectPublicKeyInfo  OPTIONAL,
                  issuerUID    [7] UniqueIdentifier      OPTIONAL,
                  subjectUID   [8] UniqueIdentifier      OPTIONAL,
                  extensions   [9] Extensions            OPTIONAL }

             OptionalValidity ::= SEQUENCE {
                  notBefore  [0] Time OPTIONAL,
                  notAfter   [1] Time OPTIONAL } --at least one must be present


             CertId ::= SEQUENCE {
                  issuer           GeneralName,
                  serialNumber     INTEGER
              }


             PKIPublicationInfo ::= SEQUENCE {
                 action     INTEGER { dontPublish (0),pleasePublish (1) },
                 pubInfos  SEQUENCE SIZE (1..MAX) OF SinglePubInfo OPTIONAL }

             SinglePubInfo ::= SEQUENCE {
                 pubMethod    INTEGER {
                             dontCare    (0),
                             x500        (1),
                             web         (2),
                             ldap        (3) },
                 pubLocation  GeneralName OPTIONAL }

    --  CertificationRequestInfo

             CertificationRequestInfo ::= SEQUENCE {
                version       INTEGER,
                subject       Name,
                subjectPKInfo SubjectPublicKeyInfo,
                attributes    [0] Attributes
                }


             Attributes ::= SET OF Attribute


             Attribute  ::= SEQUENCE {
                 type      AttributeType,
                 values    SET OF AttributeValue
                 }


    -- CertificationRequest

             CertificationRequest ::= SEQUENCE {
                 certificationRequestInfo CertificationRequestInfo,
                 signatureAlgorithm AlgorithmIdentifier,
                 signature BIT STRING
                    }

    --  EncryptedValue

            EncryptedValue ::= SEQUENCE {
                 intendedAlg   [0] AlgorithmIdentifier  OPTIONAL,
      -- the intended algorithm for which the value will be used
                 symmAlg       [1] AlgorithmIdentifier  OPTIONAL,
      -- the symmetric algorithm used to encrypt the value
                 encSymmKey    [2] BIT STRING           OPTIONAL,
      -- the (encrypted) symmetric key used to encrypt the value
                 keyAlg        [3] AlgorithmIdentifier  OPTIONAL,
      -- algorithm used to encrypt the symmetric key
                 valueHint     [4] OCTET STRING         OPTIONAL,
      -- a brief description or identifier of the encValue content
      -- (may be meaningful only to the sending entity, and used only
      -- if EncryptedValue might be re-examined by the sending entity
      -- in the future)
                encValue       BIT STRING }


   -- the rest of the module contains locally-defined OIDs and
   -- constructs




   -- CMPCertificate



      CMPCertificate ::= CHOICE {
         x509v3PKCert        Certificate
      }
   -- This syntax, while bits-on-the-wire compatible with the
   -- standard X.509 definition of "Certificate", allows the
   -- possibility of future certificate types (such as X.509
   -- attribute certificates, WAP WTLS certificates, or other kinds
   -- of certificates) within this certificate management protocol,
   -- should a need ever arise to support such generality.  Those
   -- implementations that do not foresee a need to ever support
   -- other certificate types MAY, if they wish, comment out the
   -- above structure and "un-comment" the following one prior to
   -- compiling this ASN.1 module.  (Note that interoperability
   -- with implementations that don't do this will be unaffected by
   -- this change.)

   -- CMPCertificate ::= Certificate


    --  PKIMessage

      PKIMessage ::= SEQUENCE {
         header           PKIHeader,
         body             PKIBody,
         protection   [0] PKIProtection OPTIONAL,
         extraCerts   [1] SEQUENCE SIZE (1..MAX) OF CMPCertificate
                          OPTIONAL
     }

     PKIMessages ::= SEQUENCE SIZE (1..MAX) OF PKIMessage


    -- PKIHeader

     PKIHeader ::= SEQUENCE {
         pvno                INTEGER     { cmp1999(1), cmp2000(2) },
         sender              GeneralName,
         -- identifies the sender
         recipient           GeneralName,
         -- identifies the intended recipient
         messageTime     [0] GeneralizedTime         OPTIONAL,
         -- time of production of this message (used when sender
         -- believes that the transport will be "suitable"; i.e.,
         -- that the time will still be meaningful upon receipt)
         protectionAlg   [1] AlgorithmIdentifier     OPTIONAL,
         -- algorithm used for calculation of protection bits
         senderKID       [2] KeyIdentifier           OPTIONAL,
         recipKID        [3] KeyIdentifier           OPTIONAL,
         -- to identify specific keys used for protection

         transactionID   [4] OCTET STRING            OPTIONAL,
         -- identifies the transaction; i.e., this will be the same in
         -- corresponding request, response, certConf, and PKIConf
         -- messages
         senderNonce     [5] OCTET STRING            OPTIONAL,
         recipNonce      [6] OCTET STRING            OPTIONAL,
         -- nonces used to provide replay protection, senderNonce
         -- is inserted by the creator of this message; recipNonce
         -- is a nonce previously inserted in a related message by
         -- the intended recipient of this message
         freeText        [7] PKIFreeText             OPTIONAL,
         -- this may be used to indicate context-specific instructions
         -- (this field is intended for human consumption)
         generalInfo     [8] SEQUENCE SIZE (1..MAX) OF
                                InfoTypeAndValue     OPTIONAL
         -- this may be used to convey context-specific information
         -- (this field not primarily intended for human consumption)
     }

     PKIFreeText ::= SEQUENCE SIZE (1..MAX) OF UTF8String
         -- text encoded as UTF-8 String [RFC3629] (note: each
         -- UTF8String MAY include an [RFC3066] language tag
         -- to indicate the language of the contained text
         -- see [RFC2482] for details)



     -- PKIBody

     PKIBody ::= CHOICE {       -- message-specific body elements
         ir       [0]  CertReqMessages,        --Initialization Request
         ip       [1]  CertRepMessage,         --Initialization Response
         cr       [2]  CertReqMessages,        --Certification Request
         cp       [3]  CertRepMessage,         --Certification Response
         p10cr    [4]  CertificationRequest,   --imported from [PKCS10]
         popdecc  [5]  POPODecKeyChallContent, --pop Challenge
         popdecr  [6]  POPODecKeyRespContent,  --pop Response
         kur      [7]  CertReqMessages,        --Key Update Request
         kup      [8]  CertRepMessage,         --Key Update Response
         krr      [9]  CertReqMessages,        --Key Recovery Request
         krp      [10] KeyRecRepContent,       --Key Recovery Response
         rr       [11] RevReqContent,          --Revocation Request
         rp       [12] RevRepContent,          --Revocation Response
         ccr      [13] CertReqMessages,        --Cross-Cert. Request
         ccp      [14] CertRepMessage,         --Cross-Cert. Response
         ckuann   [15] CAKeyUpdAnnContent,     --CA Key Update Ann.
         cann     [16] CertAnnContent,         --Certificate Ann.
         rann     [17] RevAnnContent,          --Revocation Ann.
         crlann   [18] CRLAnnContent,          --CRL Announcement
         pkiconf  [19] PKIConfirmContent,      --Confirmation
         genm     [21] GenMsgContent,          --General Message
         genp     [22] GenRepContent,          --General Response
         error    [23] ErrorMsgContent,        --Error Message
         certConf [24] CertConfirmContent,     --Certificate confirm
         pollReq  [25] PollReqContent,         --Polling request
         pollRep  [26] PollRepContent          --Polling response
     }

        NestedMessageContent ::= PKIMessages

     PKIProtection ::= BIT STRING

     ProtectedPart ::= SEQUENCE {
         header    PKIHeader,
         body      PKIBody
     }

     id-PasswordBasedMac OBJECT IDENTIFIER ::= {1 2 840 113533 7 66 13}
     PBMParameter ::= SEQUENCE {
         salt                OCTET STRING,
         -- note:  implementations MAY wish to limit acceptable sizes
         -- of this string to values appropriate for their environment
         -- in order to reduce the risk of denial-of-service attacks
         owf                 AlgorithmIdentifier,
         -- AlgId for a One-Way Function (SHA-1 recommended)
         iterationCount      INTEGER,
         -- number of times the OWF is applied
         -- note:  implementations MAY wish to limit acceptable sizes
         -- of this integer to values appropriate for their environment
         -- in order to reduce the risk of denial-of-service attacks
         mac                 AlgorithmIdentifier
         -- the MAC AlgId (e.g., DES-MAC, Triple-DES-MAC [PKCS11],
     }   -- or HMAC [RFC2104, RFC2202])

     id-DHBasedMac OBJECT IDENTIFIER ::= {1 2 840 113533 7 66 30}
     DHBMParameter ::= SEQUENCE {
         owf                 AlgorithmIdentifier,
         -- AlgId for a One-Way Function (SHA-1 recommended)
         mac                 AlgorithmIdentifier
         -- the MAC AlgId (e.g., DES-MAC, Triple-DES-MAC [PKCS11],
     }   -- or HMAC [RFC2104, RFC2202])


     

     PKIStatus ::= INTEGER {
         accepted                (0),
         -- you got exactly what you asked for
         grantedWithMods        (1),
         -- you got something like what you asked for; the
         -- requester is responsible for ascertaining the differences
         rejection              (2),
         -- you don't get it, more information elsewhere in the message
         waiting                (3),
         -- the request body part has not yet been processed; expect to
         -- hear more later (note: proper handling of this status
         -- response MAY use the polling req/rep PKIMessages specified
         -- in Section 5.3.22; alternatively, polling in the underlying
         -- transport layer MAY have some utility in this regard)
         revocationWarning      (4),
         -- this message contains a warning that a revocation is
         -- imminent
         revocationNotification (5),
         -- notification that a revocation has occurred
         keyUpdateWarning       (6)
         -- update already done for the oldCertId specified in
         -- CertReqMsg
     }



     PKIFailureInfo ::= BIT STRING {
     -- since we can fail in more than one way!
     -- More codes may be added in the future if/when required.
         badAlg              (0),
         -- unrecognized or unsupported Algorithm Identifier
         badMessageCheck     (1),
         -- integrity check failed (e.g., signature did not verify)
         badRequest          (2),
         -- transaction not permitted or supported
         badTime             (3),
         -- messageTime was not sufficiently close to the system time,
         -- as defined by local policy
         badCertId           (4),
         -- no certificate could be found matching the provided criteria
         badDataFormat       (5),
         -- the data submitted has the wrong format
         wrongAuthority      (6),
         -- the authority indicated in the request is different from the
         -- one creating the response token
         incorrectData       (7),
         -- the requester's data is incorrect (for notary services)
         missingTimeStamp    (8),
         -- when the timestamp is missing but should be there
         -- (by policy)
         badPOP              (9),
         -- the proof-of-possession failed
         certRevoked         (10),
            -- the certificate has already been revoked
         certConfirmed       (11),
            -- the certificate has already been confirmed
         wrongIntegrity      (12),
            -- invalid integrity, password based instead of signature or
            -- vice versa
         badRecipientNonce   (13),
            -- invalid recipient nonce, either missing or wrong value
         timeNotAvailable    (14),
            -- the TSA's time source is not available
         unacceptedPolicy    (15),
            -- the requested TSA policy is not supported by the TSA.
         unacceptedExtension (16),
            -- the requested extension is not supported by the TSA.
         addInfoNotAvailable (17),
            -- the additional information requested could not be
            -- understood or is not available
         badSenderNonce      (18),
            -- invalid sender nonce, either missing or wrong size
         badCertTemplate     (19),
            -- invalid cert. template or missing mandatory information
         signerNotTrusted    (20),
            -- signer of the message unknown or not trusted
         transactionIdInUse  (21),
            -- the transaction identifier is already in use
         unsupportedVersion  (22),
            -- the version of the message is not supported
         notAuthorized       (23),
            -- the sender was not authorized to make the preceding
            -- request or perform the preceding action
         systemUnavail       (24),
         -- the request cannot be handled due to system unavailability
         systemFailure       (25),
         -- the request cannot be handled due to system failure
         duplicateCertReq    (26)
         -- certificate cannot be issued because a duplicate
         -- certificate already exists
     }


     PKIStatusInfo ::= SEQUENCE {
         status        PKIStatus,
         statusString  PKIFreeText     OPTIONAL,
         failInfo      PKIFailureInfo  OPTIONAL
     }

     OOBCert ::= CMPCertificate

     OOBCertHash ::= SEQUENCE {
         hashAlg     [0] AlgorithmIdentifier     OPTIONAL,
         certId      [1] CertId                  OPTIONAL,
         hashVal         BIT STRING

         -- hashVal is calculated over the DER encoding of the
         -- self-signed certificate with the identifier certID.
     }



     POPODecKeyChallContent ::= SEQUENCE OF Challenge
     -- One Challenge per encryption key certification request (in the
     -- same order as these requests appear in CertReqMessages).


     Challenge ::= SEQUENCE {
         owf                 AlgorithmIdentifier  OPTIONAL,

         -- MUST be present in the first Challenge; MAY be omitted in
         -- any subsequent Challenge in POPODecKeyChallContent (if
         -- omitted, then the owf used in the immediately preceding
         -- Challenge is to be used).

         witness             OCTET STRING,
         -- the result of applying the one-way function (owf) to a
         -- randomly-generated INTEGER, A.  [Note that a different
         -- INTEGER MUST be used for each Challenge.]
         challenge           OCTET STRING
         -- the encryption (under the public key for which the cert.
         -- request is being made) of Rand, where Rand is specified as
         --   Rand ::= SEQUENCE {
         --                int      INTEGER,
         --       - the randomly-generated INTEGER A (above)
         --                sender   GeneralName
         --       - the sender's name (as included in PKIHeader)
         --                     }
     }

     POPODecKeyRespContent ::= SEQUENCE OF INTEGER
     -- One INTEGER per encryption key certification request (in the
     -- same order as these requests appear in CertReqMessages).  The
     -- retrieved INTEGER A (above) is returned to the sender of the
     -- corresponding Challenge.



   -- CertRepMessage

     CertRepMessage ::= SEQUENCE {
         caPubs       [1] SEQUENCE SIZE (1..MAX) OF CMPCertificate
                          OPTIONAL,
         response         SEQUENCE OF CertResponse
     }

    
     CertResponse ::= SEQUENCE {
         certReqId           INTEGER,
         -- to match this response with corresponding request (a value
         -- of -1 is to be used if certReqId is not specified in the
         -- corresponding request)





         status              PKIStatusInfo,
         certifiedKeyPair    CertifiedKeyPair    OPTIONAL,
         rspInfo             OCTET STRING        OPTIONAL
         -- analogous to the id-regInfo-utf8Pairs string defined
         -- for regInfo in CertReqMsg [CRMF]
     }

     CertifiedKeyPair ::= SEQUENCE {
         certOrEncCert       CertOrEncCert,
         privateKey      [0] EncryptedValue      OPTIONAL,
         -- see [CRMF] for comment on encoding
         publicationInfo [1] PKIPublicationInfo  OPTIONAL
     }

     CertOrEncCert ::= CHOICE {
         certificate     [0] CMPCertificate,
         encryptedCert   [1] EncryptedValue
     }

     KeyRecRepContent ::= SEQUENCE {
         status                  PKIStatusInfo,
         newSigCert          [0] CMPCertificate OPTIONAL,
         caCerts             [1] SEQUENCE SIZE (1..MAX) OF
                                             CMPCertificate OPTIONAL,
         keyPairHist         [2] SEQUENCE SIZE (1..MAX) OF
                                             CertifiedKeyPair OPTIONAL
     }

     RevReqContent ::= SEQUENCE OF RevDetails

     RevDetails ::= SEQUENCE {
         certDetails         CertTemplate,
         -- allows requester to specify as much as they can about
         -- the cert. for which revocation is requested
         -- (e.g., for cases in which serialNumber is not available)
         crlEntryDetails     Extensions       OPTIONAL
         -- requested crlEntryExtensions
     }

     RevRepContent ::= SEQUENCE {
         status       SEQUENCE SIZE (1..MAX) OF PKIStatusInfo,
         -- in same order as was sent in RevReqContent
         revCerts [0] SEQUENCE SIZE (1..MAX) OF CertId
                                             OPTIONAL,
         -- IDs for which revocation was requested
         -- (same order as status)
         crls     [1] SEQUENCE SIZE (1..MAX) OF CertificateList
                                             OPTIONAL




         -- the resulting CRLs (there may be more than one)
     }

     CAKeyUpdAnnContent ::= SEQUENCE {
         oldWithNew   CMPCertificate, -- old pub signed with new priv
         newWithOld   CMPCertificate, -- new pub signed with old priv
         newWithNew   CMPCertificate  -- new pub signed with new priv
     }

     CertAnnContent ::= CMPCertificate

     RevAnnContent ::= SEQUENCE {
         status              PKIStatus,
         certId              CertId,
         willBeRevokedAt     GeneralizedTime,
         badSinceDate        GeneralizedTime,
         crlDetails          Extensions  OPTIONAL
         -- extra CRL details (e.g., crl number, reason, location, etc.)
     }

     CRLAnnContent ::= SEQUENCE OF CertificateList

     CertConfirmContent ::= SEQUENCE OF CertStatus

     CertStatus ::= SEQUENCE {
        certHash    OCTET STRING,
        -- the hash of the certificate, using the same hash algorithm
        -- as is used to create and verify the certificate signature
        certReqId   INTEGER,
        -- to match this confirmation with the corresponding req/rep
        statusInfo  PKIStatusInfo OPTIONAL
     }

     PKIConfirmContent ::= NULL

     InfoTypeAndValue ::= SEQUENCE {
         infoType               OBJECT IDENTIFIER,
         infoValue              ANY DEFINED BY infoType  OPTIONAL
     }
     -- Example InfoTypeAndValue contents include, but are not limited
     -- to, the following (un-comment in this ASN.1 module and use as
     -- appropriate for a given environment):
     --
     --   id-it-caProtEncCert    OBJECT IDENTIFIER ::= {id-it 1}
     --      CAProtEncCertValue      ::= CMPCertificate
     --   id-it-signKeyPairTypes OBJECT IDENTIFIER ::= {id-it 2}
     --      SignKeyPairTypesValue   ::= SEQUENCE OF AlgorithmIdentifier
     --   id-it-encKeyPairTypes  OBJECT IDENTIFIER ::= {id-it 3}

     --      EncKeyPairTypesValue    ::= SEQUENCE OF AlgorithmIdentifier
     --   id-it-preferredSymmAlg OBJECT IDENTIFIER ::= {id-it 4}
     --      PreferredSymmAlgValue   ::= AlgorithmIdentifier
     --   id-it-caKeyUpdateInfo  OBJECT IDENTIFIER ::= {id-it 5}
     --      CAKeyUpdateInfoValue    ::= CAKeyUpdAnnContent
     --   id-it-currentCRL       OBJECT IDENTIFIER ::= {id-it 6}
     --      CurrentCRLValue         ::= CertificateList
     --   id-it-unsupportedOIDs  OBJECT IDENTIFIER ::= {id-it 7}
     --      UnsupportedOIDsValue    ::= SEQUENCE OF OBJECT IDENTIFIER
     --   id-it-keyPairParamReq  OBJECT IDENTIFIER ::= {id-it 10}
     --      KeyPairParamReqValue    ::= OBJECT IDENTIFIER
     --   id-it-keyPairParamRep  OBJECT IDENTIFIER ::= {id-it 11}
     --      KeyPairParamRepValue    ::= AlgorithmIdentifer
     --   id-it-revPassphrase    OBJECT IDENTIFIER ::= {id-it 12}
     --      RevPassphraseValue      ::= EncryptedValue
     --   id-it-implicitConfirm  OBJECT IDENTIFIER ::= {id-it 13}
     --      ImplicitConfirmValue    ::= NULL
     --   id-it-confirmWaitTime  OBJECT IDENTIFIER ::= {id-it 14}
     --      ConfirmWaitTimeValue    ::= GeneralizedTime
     --   id-it-origPKIMessage   OBJECT IDENTIFIER ::= {id-it 15}
     --      OrigPKIMessageValue     ::= PKIMessages
     --   id-it-suppLangTags     OBJECT IDENTIFIER ::= {id-it 16}
     --      SuppLangTagsValue       ::= SEQUENCE OF UTF8String
     --
     -- where
     --
     --   id-pkix OBJECT IDENTIFIER ::= {
     --      iso(1) identified-organization(3)
     --      dod(6) internet(1) security(5) mechanisms(5) pkix(7)}
     -- and
     --   id-it   OBJECT IDENTIFIER ::= {id-pkix 4}
     --
     --
     -- This construct MAY also be used to define new PKIX Certificate
     -- Management Protocol request and response messages, or general-
     -- purpose (e.g., announcement) messages for future needs or for
     -- specific environments.

     GenMsgContent ::= SEQUENCE OF InfoTypeAndValue

     -- May be sent by EE, RA, or CA (depending on message content).
     -- The OPTIONAL infoValue parameter of InfoTypeAndValue will
     -- typically be omitted for some of the examples given above.
     -- The receiver is free to ignore any contained OBJ. IDs that it
     -- does not recognize. If sent from EE to CA, the empty set
     -- indicates that the CA may send
     -- any/all information that it wishes.


     GenRepContent ::= SEQUENCE OF InfoTypeAndValue
     -- Receiver MAY ignore any contained OIDs that it does not
     -- recognize.

     ErrorMsgContent ::= SEQUENCE {
         pKIStatusInfo          PKIStatusInfo,
         errorCode              INTEGER           OPTIONAL,
         -- implementation-specific error codes
         errorDetails           PKIFreeText       OPTIONAL
         -- implementation-specific error details
     }

     PollReqContent ::= SEQUENCE OF SEQUENCE {
         certReqId              INTEGER
     }

     PollRepContent ::= SEQUENCE OF SEQUENCE {
         certReqId              INTEGER,
         checkAfter             INTEGER,  -- time in seconds
         reason                 PKIFreeText OPTIONAL
     }

END
