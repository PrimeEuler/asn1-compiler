#include <ASN1Types.hh>

namespace asn1
{

namespace generated
{

void DL_DCCH_Message::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityCheckInfo::ValueType v;
      _integrityCheckInfo_Type.read(reader, v);
      value.set_integrityCheckInfo(v);
   }
   {
      asn1::generated::DL_DCCH_MessageType::ValueType v;
      _message_Type.read(reader, v);
      value.set_message(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_DCCH_Message::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityCheckInfo_Type.write(writer, value.get_integrityCheckInfo());
   _message_Type.write(writer, value.get_message());

   writer.writeSequenceEnd();
}


void DL-DCCH-MessageType::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_activeSetUpdate_Type)
   {
      asn1::generated::ActiveSetUpdate::ValueType v;
      _activeSetUpdate_Type.read(reader, v);
      value.set_activeSetUpdate(v);
   }
   else if (choosenType == &_assistanceDataDelivery_Type)
   {
      asn1::generated::AssistanceDataDelivery::ValueType v;
      _assistanceDataDelivery_Type.read(reader, v);
      value.set_assistanceDataDelivery(v);
   }
   else if (choosenType == &_cellChangeOrderFromUTRAN_Type)
   {
      asn1::generated::CellChangeOrderFromUTRAN::ValueType v;
      _cellChangeOrderFromUTRAN_Type.read(reader, v);
      value.set_cellChangeOrderFromUTRAN(v);
   }
   else if (choosenType == &_cellUpdateConfirm_Type)
   {
      asn1::generated::CellUpdateConfirm::ValueType v;
      _cellUpdateConfirm_Type.read(reader, v);
      value.set_cellUpdateConfirm(v);
   }
   else if (choosenType == &_counterCheck_Type)
   {
      asn1::generated::CounterCheck::ValueType v;
      _counterCheck_Type.read(reader, v);
      value.set_counterCheck(v);
   }
   else if (choosenType == &_downlinkDirectTransfer_Type)
   {
      asn1::generated::DownlinkDirectTransfer::ValueType v;
      _downlinkDirectTransfer_Type.read(reader, v);
      value.set_downlinkDirectTransfer(v);
   }
   else if (choosenType == &_handoverFromUTRANCommand-GSM_Type)
   {
      asn1::generated::HandoverFromUTRANCommand_GSM::ValueType v;
      _handoverFromUTRANCommand_GSM_Type.read(reader, v);
      value.set_handoverFromUTRANCommand_GSM(v);
   }
   else if (choosenType == &_handoverFromUTRANCommand-CDMA2000_Type)
   {
      asn1::generated::HandoverFromUTRANCommand_CDMA2000::ValueType v;
      _handoverFromUTRANCommand_CDMA2000_Type.read(reader, v);
      value.set_handoverFromUTRANCommand_CDMA2000(v);
   }
   else if (choosenType == &_measurementControl_Type)
   {
      asn1::generated::MeasurementControl::ValueType v;
      _measurementControl_Type.read(reader, v);
      value.set_measurementControl(v);
   }
   else if (choosenType == &_pagingType2_Type)
   {
      asn1::generated::PagingType2::ValueType v;
      _pagingType2_Type.read(reader, v);
      value.set_pagingType2(v);
   }
   else if (choosenType == &_physicalChannelReconfiguration_Type)
   {
      asn1::generated::PhysicalChannelReconfiguration::ValueType v;
      _physicalChannelReconfiguration_Type.read(reader, v);
      value.set_physicalChannelReconfiguration(v);
   }
   else if (choosenType == &_physicalSharedChannelAllocation_Type)
   {
      asn1::generated::PhysicalSharedChannelAllocation::ValueType v;
      _physicalSharedChannelAllocation_Type.read(reader, v);
      value.set_physicalSharedChannelAllocation(v);
   }
   else if (choosenType == &_radioBearerReconfiguration_Type)
   {
      asn1::generated::RadioBearerReconfiguration::ValueType v;
      _radioBearerReconfiguration_Type.read(reader, v);
      value.set_radioBearerReconfiguration(v);
   }
   else if (choosenType == &_radioBearerRelease_Type)
   {
      asn1::generated::RadioBearerRelease::ValueType v;
      _radioBearerRelease_Type.read(reader, v);
      value.set_radioBearerRelease(v);
   }
   else if (choosenType == &_radioBearerSetup_Type)
   {
      asn1::generated::RadioBearerSetup::ValueType v;
      _radioBearerSetup_Type.read(reader, v);
      value.set_radioBearerSetup(v);
   }
   else if (choosenType == &_rrcConnectionRelease_Type)
   {
      asn1::generated::RRCConnectionRelease::ValueType v;
      _rrcConnectionRelease_Type.read(reader, v);
      value.set_rrcConnectionRelease(v);
   }
   else if (choosenType == &_securityModeCommand_Type)
   {
      asn1::generated::SecurityModeCommand::ValueType v;
      _securityModeCommand_Type.read(reader, v);
      value.set_securityModeCommand(v);
   }
   else if (choosenType == &_signallingConnectionRelease_Type)
   {
      asn1::generated::SignallingConnectionRelease::ValueType v;
      _signallingConnectionRelease_Type.read(reader, v);
      value.set_signallingConnectionRelease(v);
   }
   else if (choosenType == &_transportChannelReconfiguration_Type)
   {
      asn1::generated::TransportChannelReconfiguration::ValueType v;
      _transportChannelReconfiguration_Type.read(reader, v);
      value.set_transportChannelReconfiguration(v);
   }
   else if (choosenType == &_transportFormatCombinationControl_Type)
   {
      asn1::generated::TransportFormatCombinationControl::ValueType v;
      _transportFormatCombinationControl_Type.read(reader, v);
      value.set_transportFormatCombinationControl(v);
   }
   else if (choosenType == &_ueCapabilityEnquiry_Type)
   {
      asn1::generated::UECapabilityEnquiry::ValueType v;
      _ueCapabilityEnquiry_Type.read(reader, v);
      value.set_ueCapabilityEnquiry(v);
   }
   else if (choosenType == &_ueCapabilityInformationConfirm_Type)
   {
      asn1::generated::UECapabilityInformationConfirm::ValueType v;
      _ueCapabilityInformationConfirm_Type.read(reader, v);
      value.set_ueCapabilityInformationConfirm(v);
   }
   else if (choosenType == &_uplinkPhysicalChannelControl_Type)
   {
      asn1::generated::UplinkPhysicalChannelControl::ValueType v;
      _uplinkPhysicalChannelControl_Type.read(reader, v);
      value.set_uplinkPhysicalChannelControl(v);
   }
   else if (choosenType == &_uraUpdateConfirm_Type)
   {
      asn1::generated::URAUpdateConfirm::ValueType v;
      _uraUpdateConfirm_Type.read(reader, v);
      value.set_uraUpdateConfirm(v);
   }
   else if (choosenType == &_utranMobilityInformation_Type)
   {
      asn1::generated::UTRANMobilityInformation::ValueType v;
      _utranMobilityInformation_Type.read(reader, v);
      value.set_utranMobilityInformation(v);
   }
   else if (choosenType == &_handoverFromUTRANCommand-GERANIu_Type)
   {
      asn1::generated::HandoverFromUTRANCommand_GERANIu::ValueType v;
      _handoverFromUTRANCommand_GERANIu_Type.read(reader, v);
      value.set_handoverFromUTRANCommand_GERANIu(v);
   }
   else if (choosenType == &_mbmsModifiedServicesInformation_Type)
   {
      asn1::generated::MBMSModifiedServicesInformation::ValueType v;
      _mbmsModifiedServicesInformation_Type.read(reader, v);
      value.set_mbmsModifiedServicesInformation(v);
   }
   else if (choosenType == &_spare5_Type)
   {
      asn1::NullType::ValueType v;
      _spare5_Type.read(reader, v);
      value.set_spare5(v);
   }
   else if (choosenType == &_spare4_Type)
   {
      asn1::NullType::ValueType v;
      _spare4_Type.read(reader, v);
      value.set_spare4(v);
   }
   else if (choosenType == &_spare3_Type)
   {
      asn1::NullType::ValueType v;
      _spare3_Type.read(reader, v);
      value.set_spare3(v);
   }
   else if (choosenType == &_spare2_Type)
   {
      asn1::NullType::ValueType v;
      _spare2_Type.read(reader, v);
      value.set_spare2(v);
   }
   else if (choosenType == &_spare1_Type)
   {
      asn1::NullType::ValueType v;
      _spare1_Type.read(reader, v);
      value.set_spare1(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _activeSetUpdate_Type.toString() + ", " + _assistanceDataDelivery_Type.toString() + ", " + _cellChangeOrderFromUTRAN_Type.toString() + ", " + _cellUpdateConfirm_Type.toString() + ", " + _counterCheck_Type.toString() + ", " + _downlinkDirectTransfer_Type.toString() + ", " + _handoverFromUTRANCommand-GSM_Type.toString() + ", " + _handoverFromUTRANCommand-CDMA2000_Type.toString() + ", " + _measurementControl_Type.toString() + ", " + _pagingType2_Type.toString() + ", " + _physicalChannelReconfiguration_Type.toString() + ", " + _physicalSharedChannelAllocation_Type.toString() + ", " + _radioBearerReconfiguration_Type.toString() + ", " + _radioBearerRelease_Type.toString() + ", " + _radioBearerSetup_Type.toString() + ", " + _rrcConnectionRelease_Type.toString() + ", " + _securityModeCommand_Type.toString() + ", " + _signallingConnectionRelease_Type.toString() + ", " + _transportChannelReconfiguration_Type.toString() + ", " + _transportFormatCombinationControl_Type.toString() + ", " + _ueCapabilityEnquiry_Type.toString() + ", " + _ueCapabilityInformationConfirm_Type.toString() + ", " + _uplinkPhysicalChannelControl_Type.toString() + ", " + _uraUpdateConfirm_Type.toString() + ", " + _utranMobilityInformation_Type.toString() + ", " + _handoverFromUTRANCommand-GERANIu_Type.toString() + ", " + _mbmsModifiedServicesInformation_Type.toString() + ", " + _spare5_Type.toString() + ", " + _spare4_Type.toString() + ", " + _spare3_Type.toString() + ", " + _spare2_Type.toString() + ", " + _spare1_Type.toString());
   }
}

void DL-DCCH-MessageType::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_activeSetUpdate_Choosen())
      _activeSetUpdate_Type.write(writer, value.get_activeSetUpdate());
   else if (value.has_assistanceDataDelivery_Choosen())
      _assistanceDataDelivery_Type.write(writer, value.get_assistanceDataDelivery());
   else if (value.has_cellChangeOrderFromUTRAN_Choosen())
      _cellChangeOrderFromUTRAN_Type.write(writer, value.get_cellChangeOrderFromUTRAN());
   else if (value.has_cellUpdateConfirm_Choosen())
      _cellUpdateConfirm_Type.write(writer, value.get_cellUpdateConfirm());
   else if (value.has_counterCheck_Choosen())
      _counterCheck_Type.write(writer, value.get_counterCheck());
   else if (value.has_downlinkDirectTransfer_Choosen())
      _downlinkDirectTransfer_Type.write(writer, value.get_downlinkDirectTransfer());
   else if (value.has_handoverFromUTRANCommand-GSM_Choosen())
      _handoverFromUTRANCommand-GSM_Type.write(writer, value.get_handoverFromUTRANCommand-GSM());
   else if (value.has_handoverFromUTRANCommand-CDMA2000_Choosen())
      _handoverFromUTRANCommand-CDMA2000_Type.write(writer, value.get_handoverFromUTRANCommand-CDMA2000());
   else if (value.has_measurementControl_Choosen())
      _measurementControl_Type.write(writer, value.get_measurementControl());
   else if (value.has_pagingType2_Choosen())
      _pagingType2_Type.write(writer, value.get_pagingType2());
   else if (value.has_physicalChannelReconfiguration_Choosen())
      _physicalChannelReconfiguration_Type.write(writer, value.get_physicalChannelReconfiguration());
   else if (value.has_physicalSharedChannelAllocation_Choosen())
      _physicalSharedChannelAllocation_Type.write(writer, value.get_physicalSharedChannelAllocation());
   else if (value.has_radioBearerReconfiguration_Choosen())
      _radioBearerReconfiguration_Type.write(writer, value.get_radioBearerReconfiguration());
   else if (value.has_radioBearerRelease_Choosen())
      _radioBearerRelease_Type.write(writer, value.get_radioBearerRelease());
   else if (value.has_radioBearerSetup_Choosen())
      _radioBearerSetup_Type.write(writer, value.get_radioBearerSetup());
   else if (value.has_rrcConnectionRelease_Choosen())
      _rrcConnectionRelease_Type.write(writer, value.get_rrcConnectionRelease());
   else if (value.has_securityModeCommand_Choosen())
      _securityModeCommand_Type.write(writer, value.get_securityModeCommand());
   else if (value.has_signallingConnectionRelease_Choosen())
      _signallingConnectionRelease_Type.write(writer, value.get_signallingConnectionRelease());
   else if (value.has_transportChannelReconfiguration_Choosen())
      _transportChannelReconfiguration_Type.write(writer, value.get_transportChannelReconfiguration());
   else if (value.has_transportFormatCombinationControl_Choosen())
      _transportFormatCombinationControl_Type.write(writer, value.get_transportFormatCombinationControl());
   else if (value.has_ueCapabilityEnquiry_Choosen())
      _ueCapabilityEnquiry_Type.write(writer, value.get_ueCapabilityEnquiry());
   else if (value.has_ueCapabilityInformationConfirm_Choosen())
      _ueCapabilityInformationConfirm_Type.write(writer, value.get_ueCapabilityInformationConfirm());
   else if (value.has_uplinkPhysicalChannelControl_Choosen())
      _uplinkPhysicalChannelControl_Type.write(writer, value.get_uplinkPhysicalChannelControl());
   else if (value.has_uraUpdateConfirm_Choosen())
      _uraUpdateConfirm_Type.write(writer, value.get_uraUpdateConfirm());
   else if (value.has_utranMobilityInformation_Choosen())
      _utranMobilityInformation_Type.write(writer, value.get_utranMobilityInformation());
   else if (value.has_handoverFromUTRANCommand-GERANIu_Choosen())
      _handoverFromUTRANCommand-GERANIu_Type.write(writer, value.get_handoverFromUTRANCommand-GERANIu());
   else if (value.has_mbmsModifiedServicesInformation_Choosen())
      _mbmsModifiedServicesInformation_Type.write(writer, value.get_mbmsModifiedServicesInformation());
   else if (value.has_spare5_Choosen())
      _spare5_Type.write(writer, value.get_spare5());
   else if (value.has_spare4_Choosen())
      _spare4_Type.write(writer, value.get_spare4());
   else if (value.has_spare3_Choosen())
      _spare3_Type.write(writer, value.get_spare3());
   else if (value.has_spare2_Choosen())
      _spare2_Type.write(writer, value.get_spare2());
   else if (value.has_spare1_Choosen())
      _spare1_Type.write(writer, value.get_spare1());
}


void UL_DCCH_Message::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityCheckInfo::ValueType v;
      _integrityCheckInfo_Type.read(reader, v);
      value.set_integrityCheckInfo(v);
   }
   {
      asn1::generated::UL_DCCH_MessageType::ValueType v;
      _message_Type.read(reader, v);
      value.set_message(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_DCCH_Message::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityCheckInfo_Type.write(writer, value.get_integrityCheckInfo());
   _message_Type.write(writer, value.get_message());

   writer.writeSequenceEnd();
}


void UL-DCCH-MessageType::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_activeSetUpdateComplete_Type)
   {
      asn1::generated::ActiveSetUpdateComplete::ValueType v;
      _activeSetUpdateComplete_Type.read(reader, v);
      value.set_activeSetUpdateComplete(v);
   }
   else if (choosenType == &_activeSetUpdateFailure_Type)
   {
      asn1::generated::ActiveSetUpdateFailure::ValueType v;
      _activeSetUpdateFailure_Type.read(reader, v);
      value.set_activeSetUpdateFailure(v);
   }
   else if (choosenType == &_cellChangeOrderFromUTRANFailure_Type)
   {
      asn1::generated::CellChangeOrderFromUTRANFailure::ValueType v;
      _cellChangeOrderFromUTRANFailure_Type.read(reader, v);
      value.set_cellChangeOrderFromUTRANFailure(v);
   }
   else if (choosenType == &_counterCheckResponse_Type)
   {
      asn1::generated::CounterCheckResponse::ValueType v;
      _counterCheckResponse_Type.read(reader, v);
      value.set_counterCheckResponse(v);
   }
   else if (choosenType == &_handoverToUTRANComplete_Type)
   {
      asn1::generated::HandoverToUTRANComplete::ValueType v;
      _handoverToUTRANComplete_Type.read(reader, v);
      value.set_handoverToUTRANComplete(v);
   }
   else if (choosenType == &_initialDirectTransfer_Type)
   {
      asn1::generated::InitialDirectTransfer::ValueType v;
      _initialDirectTransfer_Type.read(reader, v);
      value.set_initialDirectTransfer(v);
   }
   else if (choosenType == &_handoverFromUTRANFailure_Type)
   {
      asn1::generated::HandoverFromUTRANFailure::ValueType v;
      _handoverFromUTRANFailure_Type.read(reader, v);
      value.set_handoverFromUTRANFailure(v);
   }
   else if (choosenType == &_measurementControlFailure_Type)
   {
      asn1::generated::MeasurementControlFailure::ValueType v;
      _measurementControlFailure_Type.read(reader, v);
      value.set_measurementControlFailure(v);
   }
   else if (choosenType == &_measurementReport_Type)
   {
      asn1::generated::MeasurementReport::ValueType v;
      _measurementReport_Type.read(reader, v);
      value.set_measurementReport(v);
   }
   else if (choosenType == &_physicalChannelReconfigurationComplete_Type)
   {
      asn1::generated::PhysicalChannelReconfigurationComplete::ValueType v;
      _physicalChannelReconfigurationComplete_Type.read(reader, v);
      value.set_physicalChannelReconfigurationComplete(v);
   }
   else if (choosenType == &_physicalChannelReconfigurationFailure_Type)
   {
      asn1::generated::PhysicalChannelReconfigurationFailure::ValueType v;
      _physicalChannelReconfigurationFailure_Type.read(reader, v);
      value.set_physicalChannelReconfigurationFailure(v);
   }
   else if (choosenType == &_radioBearerReconfigurationComplete_Type)
   {
      asn1::generated::RadioBearerReconfigurationComplete::ValueType v;
      _radioBearerReconfigurationComplete_Type.read(reader, v);
      value.set_radioBearerReconfigurationComplete(v);
   }
   else if (choosenType == &_radioBearerReconfigurationFailure_Type)
   {
      asn1::generated::RadioBearerReconfigurationFailure::ValueType v;
      _radioBearerReconfigurationFailure_Type.read(reader, v);
      value.set_radioBearerReconfigurationFailure(v);
   }
   else if (choosenType == &_radioBearerReleaseComplete_Type)
   {
      asn1::generated::RadioBearerReleaseComplete::ValueType v;
      _radioBearerReleaseComplete_Type.read(reader, v);
      value.set_radioBearerReleaseComplete(v);
   }
   else if (choosenType == &_radioBearerReleaseFailure_Type)
   {
      asn1::generated::RadioBearerReleaseFailure::ValueType v;
      _radioBearerReleaseFailure_Type.read(reader, v);
      value.set_radioBearerReleaseFailure(v);
   }
   else if (choosenType == &_radioBearerSetupComplete_Type)
   {
      asn1::generated::RadioBearerSetupComplete::ValueType v;
      _radioBearerSetupComplete_Type.read(reader, v);
      value.set_radioBearerSetupComplete(v);
   }
   else if (choosenType == &_radioBearerSetupFailure_Type)
   {
      asn1::generated::RadioBearerSetupFailure::ValueType v;
      _radioBearerSetupFailure_Type.read(reader, v);
      value.set_radioBearerSetupFailure(v);
   }
   else if (choosenType == &_rrcConnectionReleaseComplete_Type)
   {
      asn1::generated::RRCConnectionReleaseComplete::ValueType v;
      _rrcConnectionReleaseComplete_Type.read(reader, v);
      value.set_rrcConnectionReleaseComplete(v);
   }
   else if (choosenType == &_rrcConnectionSetupComplete_Type)
   {
      asn1::generated::RRCConnectionSetupComplete::ValueType v;
      _rrcConnectionSetupComplete_Type.read(reader, v);
      value.set_rrcConnectionSetupComplete(v);
   }
   else if (choosenType == &_rrcStatus_Type)
   {
      asn1::generated::RRCStatus::ValueType v;
      _rrcStatus_Type.read(reader, v);
      value.set_rrcStatus(v);
   }
   else if (choosenType == &_securityModeComplete_Type)
   {
      asn1::generated::SecurityModeComplete::ValueType v;
      _securityModeComplete_Type.read(reader, v);
      value.set_securityModeComplete(v);
   }
   else if (choosenType == &_securityModeFailure_Type)
   {
      asn1::generated::SecurityModeFailure::ValueType v;
      _securityModeFailure_Type.read(reader, v);
      value.set_securityModeFailure(v);
   }
   else if (choosenType == &_signallingConnectionReleaseIndication_Type)
   {
      asn1::generated::SignallingConnectionReleaseIndication::ValueType v;
      _signallingConnectionReleaseIndication_Type.read(reader, v);
      value.set_signallingConnectionReleaseIndication(v);
   }
   else if (choosenType == &_transportChannelReconfigurationComplete_Type)
   {
      asn1::generated::TransportChannelReconfigurationComplete::ValueType v;
      _transportChannelReconfigurationComplete_Type.read(reader, v);
      value.set_transportChannelReconfigurationComplete(v);
   }
   else if (choosenType == &_transportChannelReconfigurationFailure_Type)
   {
      asn1::generated::TransportChannelReconfigurationFailure::ValueType v;
      _transportChannelReconfigurationFailure_Type.read(reader, v);
      value.set_transportChannelReconfigurationFailure(v);
   }
   else if (choosenType == &_transportFormatCombinationControlFailure_Type)
   {
      asn1::generated::TransportFormatCombinationControlFailure::ValueType v;
      _transportFormatCombinationControlFailure_Type.read(reader, v);
      value.set_transportFormatCombinationControlFailure(v);
   }
   else if (choosenType == &_ueCapabilityInformation_Type)
   {
      asn1::generated::UECapabilityInformation::ValueType v;
      _ueCapabilityInformation_Type.read(reader, v);
      value.set_ueCapabilityInformation(v);
   }
   else if (choosenType == &_uplinkDirectTransfer_Type)
   {
      asn1::generated::UplinkDirectTransfer::ValueType v;
      _uplinkDirectTransfer_Type.read(reader, v);
      value.set_uplinkDirectTransfer(v);
   }
   else if (choosenType == &_utranMobilityInformationConfirm_Type)
   {
      asn1::generated::UTRANMobilityInformationConfirm::ValueType v;
      _utranMobilityInformationConfirm_Type.read(reader, v);
      value.set_utranMobilityInformationConfirm(v);
   }
   else if (choosenType == &_utranMobilityInformationFailure_Type)
   {
      asn1::generated::UTRANMobilityInformationFailure::ValueType v;
      _utranMobilityInformationFailure_Type.read(reader, v);
      value.set_utranMobilityInformationFailure(v);
   }
   else if (choosenType == &_mbmsModificationRequest_Type)
   {
      asn1::generated::MBMSModificationRequest::ValueType v;
      _mbmsModificationRequest_Type.read(reader, v);
      value.set_mbmsModificationRequest(v);
   }
   else if (choosenType == &_spare1_Type)
   {
      asn1::NullType::ValueType v;
      _spare1_Type.read(reader, v);
      value.set_spare1(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _activeSetUpdateComplete_Type.toString() + ", " + _activeSetUpdateFailure_Type.toString() + ", " + _cellChangeOrderFromUTRANFailure_Type.toString() + ", " + _counterCheckResponse_Type.toString() + ", " + _handoverToUTRANComplete_Type.toString() + ", " + _initialDirectTransfer_Type.toString() + ", " + _handoverFromUTRANFailure_Type.toString() + ", " + _measurementControlFailure_Type.toString() + ", " + _measurementReport_Type.toString() + ", " + _physicalChannelReconfigurationComplete_Type.toString() + ", " + _physicalChannelReconfigurationFailure_Type.toString() + ", " + _radioBearerReconfigurationComplete_Type.toString() + ", " + _radioBearerReconfigurationFailure_Type.toString() + ", " + _radioBearerReleaseComplete_Type.toString() + ", " + _radioBearerReleaseFailure_Type.toString() + ", " + _radioBearerSetupComplete_Type.toString() + ", " + _radioBearerSetupFailure_Type.toString() + ", " + _rrcConnectionReleaseComplete_Type.toString() + ", " + _rrcConnectionSetupComplete_Type.toString() + ", " + _rrcStatus_Type.toString() + ", " + _securityModeComplete_Type.toString() + ", " + _securityModeFailure_Type.toString() + ", " + _signallingConnectionReleaseIndication_Type.toString() + ", " + _transportChannelReconfigurationComplete_Type.toString() + ", " + _transportChannelReconfigurationFailure_Type.toString() + ", " + _transportFormatCombinationControlFailure_Type.toString() + ", " + _ueCapabilityInformation_Type.toString() + ", " + _uplinkDirectTransfer_Type.toString() + ", " + _utranMobilityInformationConfirm_Type.toString() + ", " + _utranMobilityInformationFailure_Type.toString() + ", " + _mbmsModificationRequest_Type.toString() + ", " + _spare1_Type.toString());
   }
}

void UL-DCCH-MessageType::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_activeSetUpdateComplete_Choosen())
      _activeSetUpdateComplete_Type.write(writer, value.get_activeSetUpdateComplete());
   else if (value.has_activeSetUpdateFailure_Choosen())
      _activeSetUpdateFailure_Type.write(writer, value.get_activeSetUpdateFailure());
   else if (value.has_cellChangeOrderFromUTRANFailure_Choosen())
      _cellChangeOrderFromUTRANFailure_Type.write(writer, value.get_cellChangeOrderFromUTRANFailure());
   else if (value.has_counterCheckResponse_Choosen())
      _counterCheckResponse_Type.write(writer, value.get_counterCheckResponse());
   else if (value.has_handoverToUTRANComplete_Choosen())
      _handoverToUTRANComplete_Type.write(writer, value.get_handoverToUTRANComplete());
   else if (value.has_initialDirectTransfer_Choosen())
      _initialDirectTransfer_Type.write(writer, value.get_initialDirectTransfer());
   else if (value.has_handoverFromUTRANFailure_Choosen())
      _handoverFromUTRANFailure_Type.write(writer, value.get_handoverFromUTRANFailure());
   else if (value.has_measurementControlFailure_Choosen())
      _measurementControlFailure_Type.write(writer, value.get_measurementControlFailure());
   else if (value.has_measurementReport_Choosen())
      _measurementReport_Type.write(writer, value.get_measurementReport());
   else if (value.has_physicalChannelReconfigurationComplete_Choosen())
      _physicalChannelReconfigurationComplete_Type.write(writer, value.get_physicalChannelReconfigurationComplete());
   else if (value.has_physicalChannelReconfigurationFailure_Choosen())
      _physicalChannelReconfigurationFailure_Type.write(writer, value.get_physicalChannelReconfigurationFailure());
   else if (value.has_radioBearerReconfigurationComplete_Choosen())
      _radioBearerReconfigurationComplete_Type.write(writer, value.get_radioBearerReconfigurationComplete());
   else if (value.has_radioBearerReconfigurationFailure_Choosen())
      _radioBearerReconfigurationFailure_Type.write(writer, value.get_radioBearerReconfigurationFailure());
   else if (value.has_radioBearerReleaseComplete_Choosen())
      _radioBearerReleaseComplete_Type.write(writer, value.get_radioBearerReleaseComplete());
   else if (value.has_radioBearerReleaseFailure_Choosen())
      _radioBearerReleaseFailure_Type.write(writer, value.get_radioBearerReleaseFailure());
   else if (value.has_radioBearerSetupComplete_Choosen())
      _radioBearerSetupComplete_Type.write(writer, value.get_radioBearerSetupComplete());
   else if (value.has_radioBearerSetupFailure_Choosen())
      _radioBearerSetupFailure_Type.write(writer, value.get_radioBearerSetupFailure());
   else if (value.has_rrcConnectionReleaseComplete_Choosen())
      _rrcConnectionReleaseComplete_Type.write(writer, value.get_rrcConnectionReleaseComplete());
   else if (value.has_rrcConnectionSetupComplete_Choosen())
      _rrcConnectionSetupComplete_Type.write(writer, value.get_rrcConnectionSetupComplete());
   else if (value.has_rrcStatus_Choosen())
      _rrcStatus_Type.write(writer, value.get_rrcStatus());
   else if (value.has_securityModeComplete_Choosen())
      _securityModeComplete_Type.write(writer, value.get_securityModeComplete());
   else if (value.has_securityModeFailure_Choosen())
      _securityModeFailure_Type.write(writer, value.get_securityModeFailure());
   else if (value.has_signallingConnectionReleaseIndication_Choosen())
      _signallingConnectionReleaseIndication_Type.write(writer, value.get_signallingConnectionReleaseIndication());
   else if (value.has_transportChannelReconfigurationComplete_Choosen())
      _transportChannelReconfigurationComplete_Type.write(writer, value.get_transportChannelReconfigurationComplete());
   else if (value.has_transportChannelReconfigurationFailure_Choosen())
      _transportChannelReconfigurationFailure_Type.write(writer, value.get_transportChannelReconfigurationFailure());
   else if (value.has_transportFormatCombinationControlFailure_Choosen())
      _transportFormatCombinationControlFailure_Type.write(writer, value.get_transportFormatCombinationControlFailure());
   else if (value.has_ueCapabilityInformation_Choosen())
      _ueCapabilityInformation_Type.write(writer, value.get_ueCapabilityInformation());
   else if (value.has_uplinkDirectTransfer_Choosen())
      _uplinkDirectTransfer_Type.write(writer, value.get_uplinkDirectTransfer());
   else if (value.has_utranMobilityInformationConfirm_Choosen())
      _utranMobilityInformationConfirm_Type.write(writer, value.get_utranMobilityInformationConfirm());
   else if (value.has_utranMobilityInformationFailure_Choosen())
      _utranMobilityInformationFailure_Type.write(writer, value.get_utranMobilityInformationFailure());
   else if (value.has_mbmsModificationRequest_Choosen())
      _mbmsModificationRequest_Type.write(writer, value.get_mbmsModificationRequest());
   else if (value.has_spare1_Choosen())
      _spare1_Type.write(writer, value.get_spare1());
}


void DL_CCCH_Message::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityCheckInfo::ValueType v;
      _integrityCheckInfo_Type.read(reader, v);
      value.set_integrityCheckInfo(v);
   }
   {
      asn1::generated::DL_CCCH_MessageType::ValueType v;
      _message_Type.read(reader, v);
      value.set_message(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_CCCH_Message::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityCheckInfo_Type.write(writer, value.get_integrityCheckInfo());
   _message_Type.write(writer, value.get_message());

   writer.writeSequenceEnd();
}


void DL-CCCH-MessageType::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_cellUpdateConfirm_Type)
   {
      asn1::generated::CellUpdateConfirm_CCCH::ValueType v;
      _cellUpdateConfirm_Type.read(reader, v);
      value.set_cellUpdateConfirm(v);
   }
   else if (choosenType == &_rrcConnectionReject_Type)
   {
      asn1::generated::RRCConnectionReject::ValueType v;
      _rrcConnectionReject_Type.read(reader, v);
      value.set_rrcConnectionReject(v);
   }
   else if (choosenType == &_rrcConnectionRelease_Type)
   {
      asn1::generated::RRCConnectionRelease_CCCH::ValueType v;
      _rrcConnectionRelease_Type.read(reader, v);
      value.set_rrcConnectionRelease(v);
   }
   else if (choosenType == &_rrcConnectionSetup_Type)
   {
      asn1::generated::RRCConnectionSetup::ValueType v;
      _rrcConnectionSetup_Type.read(reader, v);
      value.set_rrcConnectionSetup(v);
   }
   else if (choosenType == &_uraUpdateConfirm_Type)
   {
      asn1::generated::URAUpdateConfirm_CCCH::ValueType v;
      _uraUpdateConfirm_Type.read(reader, v);
      value.set_uraUpdateConfirm(v);
   }
   else if (choosenType == &_spare3_Type)
   {
      asn1::NullType::ValueType v;
      _spare3_Type.read(reader, v);
      value.set_spare3(v);
   }
   else if (choosenType == &_spare2_Type)
   {
      asn1::NullType::ValueType v;
      _spare2_Type.read(reader, v);
      value.set_spare2(v);
   }
   else if (choosenType == &_spare1_Type)
   {
      asn1::NullType::ValueType v;
      _spare1_Type.read(reader, v);
      value.set_spare1(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _cellUpdateConfirm_Type.toString() + ", " + _rrcConnectionReject_Type.toString() + ", " + _rrcConnectionRelease_Type.toString() + ", " + _rrcConnectionSetup_Type.toString() + ", " + _uraUpdateConfirm_Type.toString() + ", " + _spare3_Type.toString() + ", " + _spare2_Type.toString() + ", " + _spare1_Type.toString());
   }
}

void DL-CCCH-MessageType::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_cellUpdateConfirm_Choosen())
      _cellUpdateConfirm_Type.write(writer, value.get_cellUpdateConfirm());
   else if (value.has_rrcConnectionReject_Choosen())
      _rrcConnectionReject_Type.write(writer, value.get_rrcConnectionReject());
   else if (value.has_rrcConnectionRelease_Choosen())
      _rrcConnectionRelease_Type.write(writer, value.get_rrcConnectionRelease());
   else if (value.has_rrcConnectionSetup_Choosen())
      _rrcConnectionSetup_Type.write(writer, value.get_rrcConnectionSetup());
   else if (value.has_uraUpdateConfirm_Choosen())
      _uraUpdateConfirm_Type.write(writer, value.get_uraUpdateConfirm());
   else if (value.has_spare3_Choosen())
      _spare3_Type.write(writer, value.get_spare3());
   else if (value.has_spare2_Choosen())
      _spare2_Type.write(writer, value.get_spare2());
   else if (value.has_spare1_Choosen())
      _spare1_Type.write(writer, value.get_spare1());
}


void UL_CCCH_Message::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityCheckInfo::ValueType v;
      _integrityCheckInfo_Type.read(reader, v);
      value.set_integrityCheckInfo(v);
   }
   {
      asn1::generated::UL_CCCH_MessageType::ValueType v;
      _message_Type.read(reader, v);
      value.set_message(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_CCCH_Message::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityCheckInfo_Type.write(writer, value.get_integrityCheckInfo());
   _message_Type.write(writer, value.get_message());

   writer.writeSequenceEnd();
}


void UL-CCCH-MessageType::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_cellUpdate_Type)
   {
      asn1::generated::CellUpdate::ValueType v;
      _cellUpdate_Type.read(reader, v);
      value.set_cellUpdate(v);
   }
   else if (choosenType == &_rrcConnectionRequest_Type)
   {
      asn1::generated::RRCConnectionRequest::ValueType v;
      _rrcConnectionRequest_Type.read(reader, v);
      value.set_rrcConnectionRequest(v);
   }
   else if (choosenType == &_uraUpdate_Type)
   {
      asn1::generated::URAUpdate::ValueType v;
      _uraUpdate_Type.read(reader, v);
      value.set_uraUpdate(v);
   }
   else if (choosenType == &_spare_Type)
   {
      asn1::NullType::ValueType v;
      _spare_Type.read(reader, v);
      value.set_spare(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _cellUpdate_Type.toString() + ", " + _rrcConnectionRequest_Type.toString() + ", " + _uraUpdate_Type.toString() + ", " + _spare_Type.toString());
   }
}

void UL-CCCH-MessageType::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_cellUpdate_Choosen())
      _cellUpdate_Type.write(writer, value.get_cellUpdate());
   else if (value.has_rrcConnectionRequest_Choosen())
      _rrcConnectionRequest_Type.write(writer, value.get_rrcConnectionRequest());
   else if (value.has_uraUpdate_Choosen())
      _uraUpdate_Type.write(writer, value.get_uraUpdate());
   else if (value.has_spare_Choosen())
      _spare_Type.write(writer, value.get_spare());
}


void PCCH_Message::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PCCH_MessageType::ValueType v;
      _message_Type.read(reader, v);
      value.set_message(v);
   }

   reader.readSequenceEnd(*this);
}

void PCCH_Message::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _message_Type.write(writer, value.get_message());

   writer.writeSequenceEnd();
}


void PCCH-MessageType::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_pagingType1_Type)
   {
      asn1::generated::PagingType1::ValueType v;
      _pagingType1_Type.read(reader, v);
      value.set_pagingType1(v);
   }
   else if (choosenType == &_spare_Type)
   {
      asn1::NullType::ValueType v;
      _spare_Type.read(reader, v);
      value.set_spare(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _pagingType1_Type.toString() + ", " + _spare_Type.toString());
   }
}

void PCCH-MessageType::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_pagingType1_Choosen())
      _pagingType1_Type.write(writer, value.get_pagingType1());
   else if (value.has_spare_Choosen())
      _spare_Type.write(writer, value.get_spare());
}


void DL_SHCCH_Message::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_SHCCH_MessageType::ValueType v;
      _message_Type.read(reader, v);
      value.set_message(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_SHCCH_Message::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _message_Type.write(writer, value.get_message());

   writer.writeSequenceEnd();
}


void DL-SHCCH-MessageType::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_physicalSharedChannelAllocation_Type)
   {
      asn1::generated::PhysicalSharedChannelAllocation::ValueType v;
      _physicalSharedChannelAllocation_Type.read(reader, v);
      value.set_physicalSharedChannelAllocation(v);
   }
   else if (choosenType == &_spare_Type)
   {
      asn1::NullType::ValueType v;
      _spare_Type.read(reader, v);
      value.set_spare(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _physicalSharedChannelAllocation_Type.toString() + ", " + _spare_Type.toString());
   }
}

void DL-SHCCH-MessageType::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_physicalSharedChannelAllocation_Choosen())
      _physicalSharedChannelAllocation_Type.write(writer, value.get_physicalSharedChannelAllocation());
   else if (value.has_spare_Choosen())
      _spare_Type.write(writer, value.get_spare());
}


void UL_SHCCH_Message::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_SHCCH_MessageType::ValueType v;
      _message_Type.read(reader, v);
      value.set_message(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_SHCCH_Message::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _message_Type.write(writer, value.get_message());

   writer.writeSequenceEnd();
}


void UL-SHCCH-MessageType::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_puschCapacityRequest_Type)
   {
      asn1::generated::PUSCHCapacityRequest::ValueType v;
      _puschCapacityRequest_Type.read(reader, v);
      value.set_puschCapacityRequest(v);
   }
   else if (choosenType == &_spare_Type)
   {
      asn1::NullType::ValueType v;
      _spare_Type.read(reader, v);
      value.set_spare(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _puschCapacityRequest_Type.toString() + ", " + _spare_Type.toString());
   }
}

void UL-SHCCH-MessageType::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_puschCapacityRequest_Choosen())
      _puschCapacityRequest_Type.write(writer, value.get_puschCapacityRequest());
   else if (value.has_spare_Choosen())
      _spare_Type.write(writer, value.get_spare());
}


void BCCH_FACH_Message::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::BCCH_FACH_MessageType::ValueType v;
      _message_Type.read(reader, v);
      value.set_message(v);
   }

   reader.readSequenceEnd(*this);
}

void BCCH_FACH_Message::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _message_Type.write(writer, value.get_message());

   writer.writeSequenceEnd();
}


void BCCH-FACH-MessageType::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_systemInformation_Type)
   {
      asn1::generated::SystemInformation_FACH::ValueType v;
      _systemInformation_Type.read(reader, v);
      value.set_systemInformation(v);
   }
   else if (choosenType == &_systemInformationChangeIndication_Type)
   {
      asn1::generated::SystemInformationChangeIndication::ValueType v;
      _systemInformationChangeIndication_Type.read(reader, v);
      value.set_systemInformationChangeIndication(v);
   }
   else if (choosenType == &_spare2_Type)
   {
      asn1::NullType::ValueType v;
      _spare2_Type.read(reader, v);
      value.set_spare2(v);
   }
   else if (choosenType == &_spare1_Type)
   {
      asn1::NullType::ValueType v;
      _spare1_Type.read(reader, v);
      value.set_spare1(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _systemInformation_Type.toString() + ", " + _systemInformationChangeIndication_Type.toString() + ", " + _spare2_Type.toString() + ", " + _spare1_Type.toString());
   }
}

void BCCH-FACH-MessageType::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_systemInformation_Choosen())
      _systemInformation_Type.write(writer, value.get_systemInformation());
   else if (value.has_systemInformationChangeIndication_Choosen())
      _systemInformationChangeIndication_Type.write(writer, value.get_systemInformationChangeIndication());
   else if (value.has_spare2_Choosen())
      _spare2_Type.write(writer, value.get_spare2());
   else if (value.has_spare1_Choosen())
      _spare1_Type.write(writer, value.get_spare1());
}


void BCCH_BCH_Message::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SystemInformation_BCH::ValueType v;
      _message_Type.read(reader, v);
      value.set_message(v);
   }

   reader.readSequenceEnd(*this);
}

void BCCH_BCH_Message::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _message_Type.write(writer, value.get_message());

   writer.writeSequenceEnd();
}


void MCCH_Message::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MCCH_MessageType::ValueType v;
      _message_Type.read(reader, v);
      value.set_message(v);
   }

   reader.readSequenceEnd(*this);
}

void MCCH_Message::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _message_Type.write(writer, value.get_message());

   writer.writeSequenceEnd();
}


void MCCH-MessageType::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_mbmsAccessInformation_Type)
   {
      asn1::generated::MBMSAccessInformation::ValueType v;
      _mbmsAccessInformation_Type.read(reader, v);
      value.set_mbmsAccessInformation(v);
   }
   else if (choosenType == &_mbmsCommonPTMRBInformation_Type)
   {
      asn1::generated::MBMSCommonPTMRBInformation::ValueType v;
      _mbmsCommonPTMRBInformation_Type.read(reader, v);
      value.set_mbmsCommonPTMRBInformation(v);
   }
   else if (choosenType == &_mbmsCurrentCellPTMRBInformation_Type)
   {
      asn1::generated::MBMSCurrentCellPTMRBInformation::ValueType v;
      _mbmsCurrentCellPTMRBInformation_Type.read(reader, v);
      value.set_mbmsCurrentCellPTMRBInformation(v);
   }
   else if (choosenType == &_mbmsGeneralInformation_Type)
   {
      asn1::generated::MBMSGeneralInformation::ValueType v;
      _mbmsGeneralInformation_Type.read(reader, v);
      value.set_mbmsGeneralInformation(v);
   }
   else if (choosenType == &_mbmsModifiedServicesInformation_Type)
   {
      asn1::generated::MBMSModifiedServicesInformation::ValueType v;
      _mbmsModifiedServicesInformation_Type.read(reader, v);
      value.set_mbmsModifiedServicesInformation(v);
   }
   else if (choosenType == &_mbmsNeighbouringCellPTMRBInformation_Type)
   {
      asn1::generated::MBMSNeighbouringCellPTMRBInformation::ValueType v;
      _mbmsNeighbouringCellPTMRBInformation_Type.read(reader, v);
      value.set_mbmsNeighbouringCellPTMRBInformation(v);
   }
   else if (choosenType == &_mbmsUnmodifiedServicesInformation_Type)
   {
      asn1::generated::MBMSUnmodifiedServicesInformation::ValueType v;
      _mbmsUnmodifiedServicesInformation_Type.read(reader, v);
      value.set_mbmsUnmodifiedServicesInformation(v);
   }
   else if (choosenType == &_spare9_Type)
   {
      asn1::NullType::ValueType v;
      _spare9_Type.read(reader, v);
      value.set_spare9(v);
   }
   else if (choosenType == &_spare8_Type)
   {
      asn1::NullType::ValueType v;
      _spare8_Type.read(reader, v);
      value.set_spare8(v);
   }
   else if (choosenType == &_spare7_Type)
   {
      asn1::NullType::ValueType v;
      _spare7_Type.read(reader, v);
      value.set_spare7(v);
   }
   else if (choosenType == &_spare6_Type)
   {
      asn1::NullType::ValueType v;
      _spare6_Type.read(reader, v);
      value.set_spare6(v);
   }
   else if (choosenType == &_spare5_Type)
   {
      asn1::NullType::ValueType v;
      _spare5_Type.read(reader, v);
      value.set_spare5(v);
   }
   else if (choosenType == &_spare4_Type)
   {
      asn1::NullType::ValueType v;
      _spare4_Type.read(reader, v);
      value.set_spare4(v);
   }
   else if (choosenType == &_spare3_Type)
   {
      asn1::NullType::ValueType v;
      _spare3_Type.read(reader, v);
      value.set_spare3(v);
   }
   else if (choosenType == &_spare2_Type)
   {
      asn1::NullType::ValueType v;
      _spare2_Type.read(reader, v);
      value.set_spare2(v);
   }
   else if (choosenType == &_spare1_Type)
   {
      asn1::NullType::ValueType v;
      _spare1_Type.read(reader, v);
      value.set_spare1(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _mbmsAccessInformation_Type.toString() + ", " + _mbmsCommonPTMRBInformation_Type.toString() + ", " + _mbmsCurrentCellPTMRBInformation_Type.toString() + ", " + _mbmsGeneralInformation_Type.toString() + ", " + _mbmsModifiedServicesInformation_Type.toString() + ", " + _mbmsNeighbouringCellPTMRBInformation_Type.toString() + ", " + _mbmsUnmodifiedServicesInformation_Type.toString() + ", " + _spare9_Type.toString() + ", " + _spare8_Type.toString() + ", " + _spare7_Type.toString() + ", " + _spare6_Type.toString() + ", " + _spare5_Type.toString() + ", " + _spare4_Type.toString() + ", " + _spare3_Type.toString() + ", " + _spare2_Type.toString() + ", " + _spare1_Type.toString());
   }
}

void MCCH-MessageType::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_mbmsAccessInformation_Choosen())
      _mbmsAccessInformation_Type.write(writer, value.get_mbmsAccessInformation());
   else if (value.has_mbmsCommonPTMRBInformation_Choosen())
      _mbmsCommonPTMRBInformation_Type.write(writer, value.get_mbmsCommonPTMRBInformation());
   else if (value.has_mbmsCurrentCellPTMRBInformation_Choosen())
      _mbmsCurrentCellPTMRBInformation_Type.write(writer, value.get_mbmsCurrentCellPTMRBInformation());
   else if (value.has_mbmsGeneralInformation_Choosen())
      _mbmsGeneralInformation_Type.write(writer, value.get_mbmsGeneralInformation());
   else if (value.has_mbmsModifiedServicesInformation_Choosen())
      _mbmsModifiedServicesInformation_Type.write(writer, value.get_mbmsModifiedServicesInformation());
   else if (value.has_mbmsNeighbouringCellPTMRBInformation_Choosen())
      _mbmsNeighbouringCellPTMRBInformation_Type.write(writer, value.get_mbmsNeighbouringCellPTMRBInformation());
   else if (value.has_mbmsUnmodifiedServicesInformation_Choosen())
      _mbmsUnmodifiedServicesInformation_Type.write(writer, value.get_mbmsUnmodifiedServicesInformation());
   else if (value.has_spare9_Choosen())
      _spare9_Type.write(writer, value.get_spare9());
   else if (value.has_spare8_Choosen())
      _spare8_Type.write(writer, value.get_spare8());
   else if (value.has_spare7_Choosen())
      _spare7_Type.write(writer, value.get_spare7());
   else if (value.has_spare6_Choosen())
      _spare6_Type.write(writer, value.get_spare6());
   else if (value.has_spare5_Choosen())
      _spare5_Type.write(writer, value.get_spare5());
   else if (value.has_spare4_Choosen())
      _spare4_Type.write(writer, value.get_spare4());
   else if (value.has_spare3_Choosen())
      _spare3_Type.write(writer, value.get_spare3());
   else if (value.has_spare2_Choosen())
      _spare2_Type.write(writer, value.get_spare2());
   else if (value.has_spare1_Choosen())
      _spare1_Type.write(writer, value.get_spare1());
}


void MSCH_Message::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MSCH_MessageType::ValueType v;
      _message_Type.read(reader, v);
      value.set_message(v);
   }

   reader.readSequenceEnd(*this);
}

void MSCH_Message::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _message_Type.write(writer, value.get_message());

   writer.writeSequenceEnd();
}


void MSCH-MessageType::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_mbmsSchedulingInformation_Type)
   {
      asn1::generated::MBMSSchedulingInformation::ValueType v;
      _mbmsSchedulingInformation_Type.read(reader, v);
      value.set_mbmsSchedulingInformation(v);
   }
   else if (choosenType == &_spare3_Type)
   {
      asn1::NullType::ValueType v;
      _spare3_Type.read(reader, v);
      value.set_spare3(v);
   }
   else if (choosenType == &_spare2_Type)
   {
      asn1::NullType::ValueType v;
      _spare2_Type.read(reader, v);
      value.set_spare2(v);
   }
   else if (choosenType == &_spare1_Type)
   {
      asn1::NullType::ValueType v;
      _spare1_Type.read(reader, v);
      value.set_spare1(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _mbmsSchedulingInformation_Type.toString() + ", " + _spare3_Type.toString() + ", " + _spare2_Type.toString() + ", " + _spare1_Type.toString());
   }
}

void MSCH-MessageType::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_mbmsSchedulingInformation_Choosen())
      _mbmsSchedulingInformation_Type.write(writer, value.get_mbmsSchedulingInformation());
   else if (value.has_spare3_Choosen())
      _spare3_Type.write(writer, value.get_spare3());
   else if (value.has_spare2_Choosen())
      _spare2_Type.write(writer, value.get_spare2());
   else if (value.has_spare1_Choosen())
      _spare1_Type.write(writer, value.get_spare1());
}


void ActiveSetUpdate::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_activeSetUpdate-r3_INTERNAL_asn1__generated__ActiveSetUpdate_r3_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_activeSetUpdate-r3-add-ext_INTERNAL__v4b0NonCriticalExtensions_INTERNAL__SequenceType_activeSetUpdate-v4b0ext_INTERNAL_asn1__generated__ActiveSetUpdate_v4b0ext_IEs_v590NonCriticalExtensions_INTERNAL__SequenceType_activeSetUpdate-v590ext_INTERNAL_asn1__generated__ActiveSetUpdate_v590ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_activeSetUpdate-v690ext_INTERNAL_asn1__generated__ActiveSetUpdate_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__ChoiceType_r6_INTERNAL__SequenceType_activeSetUpdate-r6_INTERNAL_asn1__generated__ActiveSetUpdate_r6_IEs_activeSetUpdate-r6-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void ActiveSetUpdate::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void ActiveSetUpdate_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _dummy2_Type.read(reader, v);
      value.set_dummy2(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _newU_RNTI_Type.read(reader, v);
      value.set_newU_RNTI(v);
   }
   {
      asn1::generated::CN_InformationInfo::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo::ValueType v;
      _dummy3_Type.read(reader, v);
      value.set_dummy3(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::RL_AdditionInformationList::ValueType v;
      _rl_AdditionInformationList_Type.read(reader, v);
      value.set_rl_AdditionInformationList(v);
   }
   {
      asn1::generated::RL_RemovalInformationList::ValueType v;
      _rl_RemovalInformationList_Type.read(reader, v);
      value.set_rl_RemovalInformationList(v);
   }
   {
      asn1::generated::TX_DiversityMode::ValueType v;
      _tx_DiversityMode_Type.read(reader, v);
      value.set_tx_DiversityMode(v);
   }
   {
      asn1::generated::SSDT_Information::ValueType v;
      _dummy4_Type.read(reader, v);
      value.set_dummy4(v);
   }

   reader.readSequenceEnd(*this);
}

void ActiveSetUpdate_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _dummy_Type.write(writer, value.get_dummy());
   _dummy2_Type.write(writer, value.get_dummy2());
   _activationTime_Type.write(writer, value.get_activationTime());
   _newU_RNTI_Type.write(writer, value.get_newU_RNTI());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _dummy3_Type.write(writer, value.get_dummy3());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _rl_AdditionInformationList_Type.write(writer, value.get_rl_AdditionInformationList());
   _rl_RemovalInformationList_Type.write(writer, value.get_rl_RemovalInformationList());
   _tx_DiversityMode_Type.write(writer, value.get_tx_DiversityMode());
   _dummy4_Type.write(writer, value.get_dummy4());

   writer.writeSequenceEnd();
}


void ActiveSetUpdate_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SSDT_UL::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::CellIdentity_PerRL_List::ValueType v;
      _cell_id_PerRL_List_Type.read(reader, v);
      value.set_cell_id_PerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void ActiveSetUpdate_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dummy_Type.write(writer, value.get_dummy());
   _cell_id_PerRL_List_Type.write(writer, value.get_cell_id_PerRL_List());

   writer.writeSequenceEnd();
}


void ActiveSetUpdate_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DPC_Mode::ValueType v;
      _dpc_Mode_Type.read(reader, v);
      value.set_dpc_Mode(v);
   }
   {
      asn1::generated::DL_TPC_PowerOffsetPerRL_List::ValueType v;
      _dl_TPC_PowerOffsetPerRL_List_Type.read(reader, v);
      value.set_dl_TPC_PowerOffsetPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void ActiveSetUpdate_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dpc_Mode_Type.write(writer, value.get_dpc_Mode());
   _dl_TPC_PowerOffsetPerRL_List_Type.write(writer, value.get_dl_TPC_PowerOffsetPerRL_List());

   writer.writeSequenceEnd();
}


void ActiveSetUpdate_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PLMN_Identity::ValueType v;
      _primary_plmn_Identity_Type.read(reader, v);
      value.set_primary_plmn_Identity(v);
   }

   reader.readSequenceEnd(*this);
}

void ActiveSetUpdate_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _primary_plmn_Identity_Type.write(writer, value.get_primary_plmn_Identity());

   writer.writeSequenceEnd();
}


void ActiveSetUpdate_r6_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _newU_RNTI_Type.read(reader, v);
      value.set_newU_RNTI(v);
   }
   {
      asn1::generated::H_RNTI::ValueType v;
      _newH_RNTI_Type.read(reader, v);
      value.set_newH_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newPrimary_E_RNTI_Type.read(reader, v);
      value.set_newPrimary_E_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newSecondary_E_RNTI_Type.read(reader, v);
      value.set_newSecondary_E_RNTI(v);
   }
   {
      asn1::generated::CN_InformationInfo_r6::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::RL_AdditionInformationList_r6::ValueType v;
      _rl_AdditionInformationList_Type.read(reader, v);
      value.set_rl_AdditionInformationList(v);
   }
   {
      asn1::generated::RL_RemovalInformationList::ValueType v;
      _rl_RemovalInformationList_Type.read(reader, v);
      value.set_rl_RemovalInformationList(v);
   }
   {
      asn1::generated::TX_DiversityMode::ValueType v;
      _tx_DiversityMode_Type.read(reader, v);
      value.set_tx_DiversityMode(v);
   }
   {
      asn1::generated::DPC_Mode::ValueType v;
      _dpc_Mode_Type.read(reader, v);
      value.set_dpc_Mode(v);
   }
   {
      asn1::generated::Serving_HSDSCH_CellInformation::ValueType v;
      _serving_HSDSCH_CellInformation_Type.read(reader, v);
      value.set_serving_HSDSCH_CellInformation(v);
   }
   {
      asn1::generated::E_DCH_ReconfigurationInfo::ValueType v;
      _e_dch_ReconfigurationInfo_Type.read(reader, v);
      value.set_e_dch_ReconfigurationInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void ActiveSetUpdate_r6_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _activationTime_Type.write(writer, value.get_activationTime());
   _newU_RNTI_Type.write(writer, value.get_newU_RNTI());
   _newH_RNTI_Type.write(writer, value.get_newH_RNTI());
   _newPrimary_E_RNTI_Type.write(writer, value.get_newPrimary_E_RNTI());
   _newSecondary_E_RNTI_Type.write(writer, value.get_newSecondary_E_RNTI());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _rl_AdditionInformationList_Type.write(writer, value.get_rl_AdditionInformationList());
   _rl_RemovalInformationList_Type.write(writer, value.get_rl_RemovalInformationList());
   _tx_DiversityMode_Type.write(writer, value.get_tx_DiversityMode());
   _dpc_Mode_Type.write(writer, value.get_dpc_Mode());
   _serving_HSDSCH_CellInformation_Type.write(writer, value.get_serving_HSDSCH_CellInformation());
   _e_dch_ReconfigurationInfo_Type.write(writer, value.get_e_dch_ReconfigurationInfo());

   writer.writeSequenceEnd();
}


void ActiveSetUpdateComplete::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::IntegrityProtActivationInfo::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::RB_ActivationTimeInfoList::ValueType v;
      _dummy2_Type.read(reader, v);
      value.set_dummy2(v);
   }
   {
      asn1::generated::UL_CounterSynchronisationInfo::ValueType v;
      _dummy3_Type.read(reader, v);
      value.set_dummy3(v);
   }
   {
      _INTERNAL__SequenceType_activeSetUpdateComplete-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void ActiveSetUpdateComplete::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _dummy_Type.write(writer, value.get_dummy());
   _dummy2_Type.write(writer, value.get_dummy2());
   _dummy3_Type.write(writer, value.get_dummy3());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void ActiveSetUpdateFailure::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::FailureCauseWithProtErr::ValueType v;
      _failureCause_Type.read(reader, v);
      value.set_failureCause(v);
   }
   {
      _INTERNAL__SequenceType_activeSetUpdateFailure-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void ActiveSetUpdateFailure::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _failureCause_Type.write(writer, value.get_failureCause());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void AssistanceDataDelivery::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_assistanceDataDelivery-r3_INTERNAL_asn1__generated__AssistanceDataDelivery_r3_IEs_v3a0NonCriticalExtensions_INTERNAL__SequenceType_assistanceDataDelivery-v3a0ext_INTERNAL_asn1__generated__AssistanceDataDelivery_v3a0ext_laterNonCriticalExtensions_INTERNAL__SequenceType_assistanceDataDelivery-r3-add-ext_INTERNAL__v4b0NonCriticalExtensions_INTERNAL__SequenceType_assistanceDataDelivery-v4b0ext_INTERNAL_asn1__generated__AssistanceDataDelivery_v4b0ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void AssistanceDataDelivery::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void AssistanceDataDelivery_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::UE_Positioning_GPS_AssistanceData::ValueType v;
      _ue_positioning_GPS_AssistanceData_Type.read(reader, v);
      value.set_ue_positioning_GPS_AssistanceData(v);
   }
   {
      asn1::generated::UE_Positioning_OTDOA_AssistanceData_UEB::ValueType v;
      _ue_positioning_OTDOA_AssistanceData_UEB_Type.read(reader, v);
      value.set_ue_positioning_OTDOA_AssistanceData_UEB(v);
   }

   reader.readSequenceEnd(*this);
}

void AssistanceDataDelivery_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _ue_positioning_GPS_AssistanceData_Type.write(writer, value.get_ue_positioning_GPS_AssistanceData());
   _ue_positioning_OTDOA_AssistanceData_UEB_Type.write(writer, value.get_ue_positioning_OTDOA_AssistanceData_UEB());

   writer.writeSequenceEnd();
}


void AssistanceDataDelivery_v3a0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SFN_Offset_Validity::ValueType v;
      _sfn_Offset_Validity_Type.read(reader, v);
      value.set_sfn_Offset_Validity(v);
   }

   reader.readSequenceEnd(*this);
}

void AssistanceDataDelivery_v3a0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sfn_Offset_Validity_Type.write(writer, value.get_sfn_Offset_Validity());

   writer.writeSequenceEnd();
}


void AssistanceDataDelivery_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_OTDOA_AssistanceData_r4ext::ValueType v;
      _ue_Positioning_OTDOA_AssistanceData_r4ext_Type.read(reader, v);
      value.set_ue_Positioning_OTDOA_AssistanceData_r4ext(v);
   }

   reader.readSequenceEnd(*this);
}

void AssistanceDataDelivery_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_Positioning_OTDOA_AssistanceData_r4ext_Type.write(writer, value.get_ue_Positioning_OTDOA_AssistanceData_r4ext());

   writer.writeSequenceEnd();
}


void CellChangeOrderFromUTRAN::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_cellChangeOrderFromUTRAN-IEs_INTERNAL_asn1__generated__CellChangeOrderFromUTRAN_r3_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_cellChangeOrderFromUTRAN-r3-add-ext_INTERNAL__v590NonCriticalExtensions_INTERNAL__SequenceType_cellChangeOrderFromUTRAN-v590ext_INTERNAL_asn1__generated__CellChangeOrderFromUTRAN_v590ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void CellChangeOrderFromUTRAN::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void CellChangeOrderFromUTRAN_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::RAB_InformationList::ValueType v;
      _rab_InformationList_Type.read(reader, v);
      value.set_rab_InformationList(v);
   }
   {
      asn1::generated::InterRAT_TargetCellDescription::ValueType v;
      _interRAT_TargetCellDescription_Type.read(reader, v);
      value.set_interRAT_TargetCellDescription(v);
   }

   reader.readSequenceEnd(*this);
}

void CellChangeOrderFromUTRAN_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _dummy_Type.write(writer, value.get_dummy());
   _activationTime_Type.write(writer, value.get_activationTime());
   _rab_InformationList_Type.write(writer, value.get_rab_InformationList());
   _interRAT_TargetCellDescription_Type.write(writer, value.get_interRAT_TargetCellDescription());

   writer.writeSequenceEnd();
}


void CellChangeOrderFromUTRAN_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_sI_INTERNAL_asn1__generated__GERAN_SystemInformation_pSI_INTERNAL_asn1__generated__GERAN_SystemInformation::ValueType v;
      _geran_SystemInfoType_Type.read(reader, v);
      value.set_geran_SystemInfoType(v);
   }

   reader.readSequenceEnd(*this);
}

void CellChangeOrderFromUTRAN_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _geran_SystemInfoType_Type.write(writer, value.get_geran_SystemInfoType());

   writer.writeSequenceEnd();
}


void CellChangeOrderFromUTRANFailure::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_cellChangeOrderFromUTRANFailure-r3_INTERNAL_asn1__generated__CellChangeOrderFromUTRANFailure_r3_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_cellChangeOrderFromUTRANFailure-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_dummy_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _dummy_Type.toString());
   }
}

void CellChangeOrderFromUTRANFailure::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_dummy_Choosen())
      _dummy_Type.write(writer, value.get_dummy());
}


void CellChangeOrderFromUTRANFailure_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::InterRAT_ChangeFailureCause::ValueType v;
      _interRAT_ChangeFailureCause_Type.read(reader, v);
      value.set_interRAT_ChangeFailureCause(v);
   }

   reader.readSequenceEnd(*this);
}

void CellChangeOrderFromUTRANFailure_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _dummy_Type.write(writer, value.get_dummy());
   _interRAT_ChangeFailureCause_Type.write(writer, value.get_interRAT_ChangeFailureCause());

   writer.writeSequenceEnd();
}


void CellUpdate::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::U_RNTI::ValueType v;
      _u_RNTI_Type.read(reader, v);
      value.set_u_RNTI(v);
   }
   {
      asn1::generated::STARTList::ValueType v;
      _startList_Type.read(reader, v);
      value.set_startList(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _am_RLC_ErrorIndicationRb2_3or4_Type.read(reader, v);
      value.set_am_RLC_ErrorIndicationRb2_3or4(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _am_RLC_ErrorIndicationRb5orAbove_Type.read(reader, v);
      value.set_am_RLC_ErrorIndicationRb5orAbove(v);
   }
   {
      asn1::generated::CellUpdateCause::ValueType v;
      _cellUpdateCause_Type.read(reader, v);
      value.set_cellUpdateCause(v);
   }
   {
      asn1::generated::FailureCauseWithProtErrTrId::ValueType v;
      _failureCause_Type.read(reader, v);
      value.set_failureCause(v);
   }
   {
      asn1::generated::Rb_timer_indicator::ValueType v;
      _rb_timer_indicator_Type.read(reader, v);
      value.set_rb_timer_indicator(v);
   }
   {
      asn1::generated::MeasuredResultsOnRACH::ValueType v;
      _measuredResultsOnRACH_Type.read(reader, v);
      value.set_measuredResultsOnRACH(v);
   }
   {
      _INTERNAL__SequenceType_cellUpdate-r3-add-ext_INTERNAL__v590NonCriticalExtensions_INTERNAL__SequenceType_cellUpdate-v590ext_INTERNAL_asn1__generated__CellUpdate_v590ext_v690NonCriticalExtensions_INTERNAL__SequenceType_cellUpdate-v690ext_INTERNAL_asn1__generated__CellUpdate_v690ext_IEs_v7xyNonCriticalExtensions_INTERNAL__SequenceType_cellUpdate-v7xyext_INTERNAL_asn1__generated__CellUpdate_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void CellUpdate::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _u_RNTI_Type.write(writer, value.get_u_RNTI());
   _startList_Type.write(writer, value.get_startList());
   _am_RLC_ErrorIndicationRb2_3or4_Type.write(writer, value.get_am_RLC_ErrorIndicationRb2_3or4());
   _am_RLC_ErrorIndicationRb5orAbove_Type.write(writer, value.get_am_RLC_ErrorIndicationRb5orAbove());
   _cellUpdateCause_Type.write(writer, value.get_cellUpdateCause());
   _failureCause_Type.write(writer, value.get_failureCause());
   _rb_timer_indicator_Type.write(writer, value.get_rb_timer_indicator());
   _measuredResultsOnRACH_Type.write(writer, value.get_measuredResultsOnRACH());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void CellUpdate_v590ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::EstablishmentCause::ValueType v;
      _establishmentCause_Type.read(reader, v);
      value.set_establishmentCause(v);
   }

   reader.readSequenceEnd(*this);
}

void CellUpdate_v590ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _establishmentCause_Type.write(writer, value.get_establishmentCause());

   writer.writeSequenceEnd();
}


void CellUpdate_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CellUpdateCause_ext::ValueType v;
      _cellUpdateCause_ext_Type.read(reader, v);
      value.set_cellUpdateCause_ext(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _trafficVolumeIndicator_Type.read(reader, v);
      value.set_trafficVolumeIndicator(v);
   }
   {
      asn1::generated::MeasuredResultsOnRACHinterFreq::ValueType v;
      _measuredResultsOnRACHinterFreq_Type.read(reader, v);
      value.set_measuredResultsOnRACHinterFreq(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _reconfigurationStatusIndicator_Type.read(reader, v);
      value.set_reconfigurationStatusIndicator(v);
   }

   reader.readSequenceEnd(*this);
}

void CellUpdate_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cellUpdateCause_ext_Type.write(writer, value.get_cellUpdateCause_ext());
   _trafficVolumeIndicator_Type.write(writer, value.get_trafficVolumeIndicator());
   _measuredResultsOnRACHinterFreq_Type.write(writer, value.get_measuredResultsOnRACHinterFreq());
   _reconfigurationStatusIndicator_Type.write(writer, value.get_reconfigurationStatusIndicator());

   writer.writeSequenceEnd();
}


void CellUpdate_v7xyext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__EnumeratedType::ValueType v;
      _csCallType_Type.read(reader, v);
      value.set_csCallType(v);
   }

   reader.readSequenceEnd(*this);
}

void CellUpdate_v7xyext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _csCallType_Type.write(writer, value.get_csCallType());

   writer.writeSequenceEnd();
}


void CellUpdateConfirm::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_cellUpdateConfirm-r3_INTERNAL_asn1__generated__CellUpdateConfirm_r3_IEs_v3a0NonCriticalExtensions_INTERNAL__SequenceType_cellUpdateConfirm-v3a0ext_INTERNAL_asn1__generated__CellUpdateConfirm_v3a0ext_laterNonCriticalExtensions_INTERNAL__SequenceType_cellUpdateConfirm-r3-add-ext_INTERNAL__v4b0NonCriticalExtensions_INTERNAL__SequenceType_cellUpdateConfirm-v4b0ext_INTERNAL_asn1__generated__CellUpdateConfirm_v4b0ext_IEs_v590NonCriticalExtenstions_INTERNAL__SequenceType_cellUpdateConfirm-v590ext_INTERNAL_asn1__generated__CellUpdateConfirm_v590ext_IEs_v5d0NonCriticalExtenstions_INTERNAL__SequenceType_cellUpdateConfirm-v5d0ext_INTERNAL_asn1__generated__CellUpdateConfirm_v5d0ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_cellUpdateConfirm-v690ext_INTERNAL_asn1__generated__CellUpdateConfirm_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__ChoiceType_r4_INTERNAL__SequenceType_cellUpdateConfirm-r4_INTERNAL_asn1__generated__CellUpdateConfirm_r4_IEs_v4d0NonCriticalExtensions_INTERNAL__SequenceType_cellUpdateConfirm-r4-add-ext_INTERNAL__v590NonCriticalExtenstions_INTERNAL__SequenceType_cellUpdateConfirm-v590ext_INTERNAL_asn1__generated__CellUpdateConfirm_v590ext_IEs_v5d0NonCriticalExtenstions_INTERNAL__SequenceType_cellUpdateConfirm-v5d0ext_INTERNAL_asn1__generated__CellUpdateConfirm_v5d0ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_cellUpdateConfirm-v690ext_INTERNAL_asn1__generated__CellUpdateConfirm_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r5_INTERNAL__SequenceType_cellUpdateConfirm-r5_INTERNAL_asn1__generated__CellUpdateConfirm_r5_IEs_cellUpdateConfirm-r5-add-ext_INTERNAL__v5d0NonCriticalExtenstions_INTERNAL__SequenceType_cellUpdateConfirm-v5d0ext_INTERNAL_asn1__generated__CellUpdateConfirm_v5d0ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_cellUpdateConfirm-v690ext_INTERNAL_asn1__generated__CellUpdateConfirm_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r6_INTERNAL__SequenceType_cellUpdateConfirm-r6_INTERNAL_asn1__generated__CellUpdateConfirm_r6_IEs_cellUpdateConfirm-r6-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r7_INTERNAL__SequenceType_cellUpdateConfirm-r7_INTERNAL_asn1__generated__CellUpdateConfirm_r7_IEs_cellUpdateConfirm-r7-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void CellUpdateConfirm::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void CellUpdateConfirm_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _rlc_Re_establishIndicatorRb2_3or4_Type.read(reader, v);
      value.set_rlc_Re_establishIndicatorRb2_3or4(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _rlc_Re_establishIndicatorRb5orAbove_Type.read(reader, v);
      value.set_rlc_Re_establishIndicatorRb5orAbove(v);
   }
   {
      asn1::generated::CN_InformationInfo::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::RB_InformationReleaseList::ValueType v;
      _rb_InformationReleaseList_Type.read(reader, v);
      value.set_rb_InformationReleaseList(v);
   }
   {
      asn1::generated::RB_InformationReconfigList::ValueType v;
      _rb_InformationReconfigList_Type.read(reader, v);
      value.set_rb_InformationReconfigList(v);
   }
   {
      asn1::generated::RB_InformationAffectedList::ValueType v;
      _rb_InformationAffectedList_Type.read(reader, v);
      value.set_rb_InformationAffectedList(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_DeletedTransChInfoList::ValueType v;
      _ul_deletedTransChInfoList_Type.read(reader, v);
      value.set_ul_deletedTransChInfoList(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__CPCH_SetID_dummy2_INTERNAL_asn1__generated__DRAC_StaticInformationList_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificTransChInfo_Type.read(reader, v);
      value.set_modeSpecificTransChInfo(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_DeletedTransChInfoList::ValueType v;
      _dl_DeletedTransChInfoList_Type.read(reader, v);
      value.set_dl_DeletedTransChInfoList(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_ChannelRequirement::ValueType v;
      _ul_ChannelRequirement_Type.read(reader, v);
      value.set_ul_ChannelRequirement(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__DL_PDSCH_Information_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificPhysChInfo_Type.read(reader, v);
      value.set_modeSpecificPhysChInfo(v);
   }
   {
      asn1::generated::DL_CommonInformation::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void CellUpdateConfirm_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _rlc_Re_establishIndicatorRb2_3or4_Type.write(writer, value.get_rlc_Re_establishIndicatorRb2_3or4());
   _rlc_Re_establishIndicatorRb5orAbove_Type.write(writer, value.get_rlc_Re_establishIndicatorRb5orAbove());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _rb_InformationReleaseList_Type.write(writer, value.get_rb_InformationReleaseList());
   _rb_InformationReconfigList_Type.write(writer, value.get_rb_InformationReconfigList());
   _rb_InformationAffectedList_Type.write(writer, value.get_rb_InformationAffectedList());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_deletedTransChInfoList_Type.write(writer, value.get_ul_deletedTransChInfoList());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _modeSpecificTransChInfo_Type.write(writer, value.get_modeSpecificTransChInfo());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_DeletedTransChInfoList_Type.write(writer, value.get_dl_DeletedTransChInfoList());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_ChannelRequirement_Type.write(writer, value.get_ul_ChannelRequirement());
   _modeSpecificPhysChInfo_Type.write(writer, value.get_modeSpecificPhysChInfo());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void CellUpdateConfirm_v3a0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }

   reader.readSequenceEnd(*this);
}

void CellUpdateConfirm_v3a0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());

   writer.writeSequenceEnd();
}


void CellUpdateConfirm_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SSDT_UL::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::CellIdentity_PerRL_List::ValueType v;
      _cell_id_PerRL_List_Type.read(reader, v);
      value.set_cell_id_PerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void CellUpdateConfirm_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dummy_Type.write(writer, value.get_dummy());
   _cell_id_PerRL_List_Type.write(writer, value.get_cell_id_PerRL_List());

   writer.writeSequenceEnd();
}


void CellUpdateConfirm_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_TPC_PowerOffsetPerRL_List::ValueType v;
      _dl_TPC_PowerOffsetPerRL_List_Type.read(reader, v);
      value.set_dl_TPC_PowerOffsetPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void CellUpdateConfirm_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_TPC_PowerOffsetPerRL_List_Type.write(writer, value.get_dl_TPC_PowerOffsetPerRL_List());

   writer.writeSequenceEnd();
}


void CellUpdateConfirm_v5d0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PDCP_ROHC_TargetMode::ValueType v;
      _pdcp_ROHC_TargetMode_Type.read(reader, v);
      value.set_pdcp_ROHC_TargetMode(v);
   }

   reader.readSequenceEnd(*this);
}

void CellUpdateConfirm_v5d0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pdcp_ROHC_TargetMode_Type.write(writer, value.get_pdcp_ROHC_TargetMode());

   writer.writeSequenceEnd();
}


void CellUpdateConfirm_r4_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _rlc_Re_establishIndicatorRb2_3or4_Type.read(reader, v);
      value.set_rlc_Re_establishIndicatorRb2_3or4(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _rlc_Re_establishIndicatorRb5orAbove_Type.read(reader, v);
      value.set_rlc_Re_establishIndicatorRb5orAbove(v);
   }
   {
      asn1::generated::CN_InformationInfo::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::RB_InformationReleaseList::ValueType v;
      _rb_InformationReleaseList_Type.read(reader, v);
      value.set_rb_InformationReleaseList(v);
   }
   {
      asn1::generated::RB_InformationReconfigList_r4::ValueType v;
      _rb_InformationReconfigList_Type.read(reader, v);
      value.set_rb_InformationReconfigList(v);
   }
   {
      asn1::generated::RB_InformationAffectedList::ValueType v;
      _rb_InformationAffectedList_Type.read(reader, v);
      value.set_rb_InformationAffectedList(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo_r4::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_DeletedTransChInfoList::ValueType v;
      _ul_deletedTransChInfoList_Type.read(reader, v);
      value.set_ul_deletedTransChInfoList(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__CPCH_SetID_dummy2_INTERNAL_asn1__generated__DRAC_StaticInformationList_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificTransChInfo_Type.read(reader, v);
      value.set_modeSpecificTransChInfo(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo_r4::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_DeletedTransChInfoList::ValueType v;
      _dl_DeletedTransChInfoList_Type.read(reader, v);
      value.set_dl_DeletedTransChInfoList(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList_r4::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_ChannelRequirement_r4::ValueType v;
      _ul_ChannelRequirement_Type.read(reader, v);
      value.set_ul_ChannelRequirement(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__DL_PDSCH_Information_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificPhysChInfo_Type.read(reader, v);
      value.set_modeSpecificPhysChInfo(v);
   }
   {
      asn1::generated::DL_CommonInformation_r4::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r4::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void CellUpdateConfirm_r4_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _rlc_Re_establishIndicatorRb2_3or4_Type.write(writer, value.get_rlc_Re_establishIndicatorRb2_3or4());
   _rlc_Re_establishIndicatorRb5orAbove_Type.write(writer, value.get_rlc_Re_establishIndicatorRb5orAbove());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _rb_InformationReleaseList_Type.write(writer, value.get_rb_InformationReleaseList());
   _rb_InformationReconfigList_Type.write(writer, value.get_rb_InformationReconfigList());
   _rb_InformationAffectedList_Type.write(writer, value.get_rb_InformationAffectedList());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_deletedTransChInfoList_Type.write(writer, value.get_ul_deletedTransChInfoList());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _modeSpecificTransChInfo_Type.write(writer, value.get_modeSpecificTransChInfo());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_DeletedTransChInfoList_Type.write(writer, value.get_dl_DeletedTransChInfoList());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_ChannelRequirement_Type.write(writer, value.get_ul_ChannelRequirement());
   _modeSpecificPhysChInfo_Type.write(writer, value.get_modeSpecificPhysChInfo());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void CellUpdateConfirm_r5_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::H_RNTI::ValueType v;
      _new_H_RNTI_Type.read(reader, v);
      value.set_new_H_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _rlc_Re_establishIndicatorRb2_3or4_Type.read(reader, v);
      value.set_rlc_Re_establishIndicatorRb2_3or4(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _rlc_Re_establishIndicatorRb5orAbove_Type.read(reader, v);
      value.set_rlc_Re_establishIndicatorRb5orAbove(v);
   }
   {
      asn1::generated::CN_InformationInfo::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::RB_InformationReleaseList::ValueType v;
      _rb_InformationReleaseList_Type.read(reader, v);
      value.set_rb_InformationReleaseList(v);
   }
   {
      asn1::generated::RB_InformationReconfigList_r5::ValueType v;
      _rb_InformationReconfigList_Type.read(reader, v);
      value.set_rb_InformationReconfigList(v);
   }
   {
      asn1::generated::RB_InformationAffectedList_r5::ValueType v;
      _rb_InformationAffectedList_Type.read(reader, v);
      value.set_rb_InformationAffectedList(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo_r5::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo_r4::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_DeletedTransChInfoList::ValueType v;
      _ul_deletedTransChInfoList_Type.read(reader, v);
      value.set_ul_deletedTransChInfoList(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__CPCH_SetID_dummy2_INTERNAL_asn1__generated__DRAC_StaticInformationList_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificTransChInfo_Type.read(reader, v);
      value.set_modeSpecificTransChInfo(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo_r4::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_DeletedTransChInfoList_r5::ValueType v;
      _dl_DeletedTransChInfoList_Type.read(reader, v);
      value.set_dl_DeletedTransChInfoList(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList_r5::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_ChannelRequirement_r5::ValueType v;
      _ul_ChannelRequirement_Type.read(reader, v);
      value.set_ul_ChannelRequirement(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__DL_PDSCH_Information_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificPhysChInfo_Type.read(reader, v);
      value.set_modeSpecificPhysChInfo(v);
   }
   {
      asn1::generated::DL_HSPDSCH_Information::ValueType v;
      _dl_HSPDSCH_Information_Type.read(reader, v);
      value.set_dl_HSPDSCH_Information(v);
   }
   {
      asn1::generated::DL_CommonInformation_r5::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r5::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void CellUpdateConfirm_r5_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _new_H_RNTI_Type.write(writer, value.get_new_H_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _rlc_Re_establishIndicatorRb2_3or4_Type.write(writer, value.get_rlc_Re_establishIndicatorRb2_3or4());
   _rlc_Re_establishIndicatorRb5orAbove_Type.write(writer, value.get_rlc_Re_establishIndicatorRb5orAbove());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _rb_InformationReleaseList_Type.write(writer, value.get_rb_InformationReleaseList());
   _rb_InformationReconfigList_Type.write(writer, value.get_rb_InformationReconfigList());
   _rb_InformationAffectedList_Type.write(writer, value.get_rb_InformationAffectedList());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_deletedTransChInfoList_Type.write(writer, value.get_ul_deletedTransChInfoList());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _modeSpecificTransChInfo_Type.write(writer, value.get_modeSpecificTransChInfo());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_DeletedTransChInfoList_Type.write(writer, value.get_dl_DeletedTransChInfoList());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_ChannelRequirement_Type.write(writer, value.get_ul_ChannelRequirement());
   _modeSpecificPhysChInfo_Type.write(writer, value.get_modeSpecificPhysChInfo());
   _dl_HSPDSCH_Information_Type.write(writer, value.get_dl_HSPDSCH_Information());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void CellUpdateConfirm_r6_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::H_RNTI::ValueType v;
      _new_H_RNTI_Type.read(reader, v);
      value.set_new_H_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newPrimary_E_RNTI_Type.read(reader, v);
      value.set_newPrimary_E_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newSecondary_E_RNTI_Type.read(reader, v);
      value.set_newSecondary_E_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _rlc_Re_establishIndicatorRb2_3or4_Type.read(reader, v);
      value.set_rlc_Re_establishIndicatorRb2_3or4(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _rlc_Re_establishIndicatorRb5orAbove_Type.read(reader, v);
      value.set_rlc_Re_establishIndicatorRb5orAbove(v);
   }
   {
      asn1::generated::CN_InformationInfo_r6::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::RB_InformationReleaseList::ValueType v;
      _rb_InformationReleaseList_Type.read(reader, v);
      value.set_rb_InformationReleaseList(v);
   }
   {
      asn1::generated::RB_InformationReconfigList_r6::ValueType v;
      _rb_InformationReconfigList_Type.read(reader, v);
      value.set_rb_InformationReconfigList(v);
   }
   {
      asn1::generated::RB_InformationAffectedList_r6::ValueType v;
      _rb_InformationAffectedList_Type.read(reader, v);
      value.set_rb_InformationAffectedList(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo_r5::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::PDCP_ROHC_TargetMode::ValueType v;
      _pdcp_ROHC_TargetMode_Type.read(reader, v);
      value.set_pdcp_ROHC_TargetMode(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo_r4::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_DeletedTransChInfoList_r6::ValueType v;
      _ul_deletedTransChInfoList_Type.read(reader, v);
      value.set_ul_deletedTransChInfoList(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList_r6::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo_r4::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_DeletedTransChInfoList_r5::ValueType v;
      _dl_DeletedTransChInfoList_Type.read(reader, v);
      value.set_dl_DeletedTransChInfoList(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList_r5::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_DPCH_Info_r6::ValueType v;
      _ul_DPCH_Info_Type.read(reader, v);
      value.set_ul_DPCH_Info(v);
   }
   {
      asn1::generated::UL_EDCH_Information_r6::ValueType v;
      _ul_EDCH_Information_Type.read(reader, v);
      value.set_ul_EDCH_Information(v);
   }
   {
      asn1::generated::DL_HSPDSCH_Information_r6::ValueType v;
      _dl_HSPDSCH_Information_Type.read(reader, v);
      value.set_dl_HSPDSCH_Information(v);
   }
   {
      asn1::generated::DL_CommonInformation_r6::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r6::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }
   {
      asn1::generated::MBMS_PL_ServiceRestrictInfo_r6::ValueType v;
      _mbms_PL_ServiceRestrictInfo_Type.read(reader, v);
      value.set_mbms_PL_ServiceRestrictInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CellUpdateConfirm_r6_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _new_H_RNTI_Type.write(writer, value.get_new_H_RNTI());
   _newPrimary_E_RNTI_Type.write(writer, value.get_newPrimary_E_RNTI());
   _newSecondary_E_RNTI_Type.write(writer, value.get_newSecondary_E_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _rlc_Re_establishIndicatorRb2_3or4_Type.write(writer, value.get_rlc_Re_establishIndicatorRb2_3or4());
   _rlc_Re_establishIndicatorRb5orAbove_Type.write(writer, value.get_rlc_Re_establishIndicatorRb5orAbove());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _rb_InformationReleaseList_Type.write(writer, value.get_rb_InformationReleaseList());
   _rb_InformationReconfigList_Type.write(writer, value.get_rb_InformationReconfigList());
   _rb_InformationAffectedList_Type.write(writer, value.get_rb_InformationAffectedList());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _pdcp_ROHC_TargetMode_Type.write(writer, value.get_pdcp_ROHC_TargetMode());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_deletedTransChInfoList_Type.write(writer, value.get_ul_deletedTransChInfoList());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_DeletedTransChInfoList_Type.write(writer, value.get_dl_DeletedTransChInfoList());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_DPCH_Info_Type.write(writer, value.get_ul_DPCH_Info());
   _ul_EDCH_Information_Type.write(writer, value.get_ul_EDCH_Information());
   _dl_HSPDSCH_Information_Type.write(writer, value.get_dl_HSPDSCH_Information());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());
   _mbms_PL_ServiceRestrictInfo_Type.write(writer, value.get_mbms_PL_ServiceRestrictInfo());

   writer.writeSequenceEnd();
}


void CellUpdateConfirm_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PLMN_Identity::ValueType v;
      _primary_plmn_Identity_Type.read(reader, v);
      value.set_primary_plmn_Identity(v);
   }
   {
      asn1::generated::HARQ_Preamble_Mode::ValueType v;
      _harq_Preamble_Mode_Type.read(reader, v);
      value.set_harq_Preamble_Mode(v);
   }
   {
      asn1::generated::BEACON_PL_Est::ValueType v;
      _beaconPLEst_Type.read(reader, v);
      value.set_beaconPLEst(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _postVerificationPeriod_Type.read(reader, v);
      value.set_postVerificationPeriod(v);
   }
   {
      asn1::generated::DHS_Sync::ValueType v;
      _dhs_sync_Type.read(reader, v);
      value.set_dhs_sync(v);
   }
   {
      asn1::generated::MBMS_PL_ServiceRestrictInfo_r6::ValueType v;
      _mbms_PL_ServiceRestrictInfo_Type.read(reader, v);
      value.set_mbms_PL_ServiceRestrictInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CellUpdateConfirm_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _primary_plmn_Identity_Type.write(writer, value.get_primary_plmn_Identity());
   _harq_Preamble_Mode_Type.write(writer, value.get_harq_Preamble_Mode());
   _beaconPLEst_Type.write(writer, value.get_beaconPLEst());
   _postVerificationPeriod_Type.write(writer, value.get_postVerificationPeriod());
   _dhs_sync_Type.write(writer, value.get_dhs_sync());
   _mbms_PL_ServiceRestrictInfo_Type.write(writer, value.get_mbms_PL_ServiceRestrictInfo());

   writer.writeSequenceEnd();
}


void CellUpdateConfirm_r7_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::H_RNTI::ValueType v;
      _new_H_RNTI_Type.read(reader, v);
      value.set_new_H_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newPrimary_E_RNTI_Type.read(reader, v);
      value.set_newPrimary_E_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newSecondary_E_RNTI_Type.read(reader, v);
      value.set_newSecondary_E_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _rlc_Re_establishIndicatorRb2_3or4_Type.read(reader, v);
      value.set_rlc_Re_establishIndicatorRb2_3or4(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _rlc_Re_establishIndicatorRb5orAbove_Type.read(reader, v);
      value.set_rlc_Re_establishIndicatorRb5orAbove(v);
   }
   {
      asn1::generated::CN_InformationInfo_r6::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::RB_InformationReleaseList::ValueType v;
      _rb_InformationReleaseList_Type.read(reader, v);
      value.set_rb_InformationReleaseList(v);
   }
   {
      asn1::generated::RB_InformationReconfigList_r6::ValueType v;
      _rb_InformationReconfigList_Type.read(reader, v);
      value.set_rb_InformationReconfigList(v);
   }
   {
      asn1::generated::RB_InformationAffectedList_r6::ValueType v;
      _rb_InformationAffectedList_Type.read(reader, v);
      value.set_rb_InformationAffectedList(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo_r5::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::PDCP_ROHC_TargetMode::ValueType v;
      _pdcp_ROHC_TargetMode_Type.read(reader, v);
      value.set_pdcp_ROHC_TargetMode(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo_r4::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_DeletedTransChInfoList_r6::ValueType v;
      _ul_deletedTransChInfoList_Type.read(reader, v);
      value.set_ul_deletedTransChInfoList(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList_r6::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo_r4::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_DeletedTransChInfoList_r5::ValueType v;
      _dl_DeletedTransChInfoList_Type.read(reader, v);
      value.set_dl_DeletedTransChInfoList(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList_r5::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_DPCH_Info_r7::ValueType v;
      _ul_DPCH_Info_Type.read(reader, v);
      value.set_ul_DPCH_Info(v);
   }
   {
      asn1::generated::UL_EDCH_Information_r6::ValueType v;
      _ul_EDCH_Information_Type.read(reader, v);
      value.set_ul_EDCH_Information(v);
   }
   {
      asn1::generated::DL_HSPDSCH_Information_r7::ValueType v;
      _dl_HSPDSCH_Information_Type.read(reader, v);
      value.set_dl_HSPDSCH_Information(v);
   }
   {
      asn1::generated::DL_CommonInformation_r7::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r7::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }
   {
      asn1::generated::MBMS_PL_ServiceRestrictInfo_r6::ValueType v;
      _mbms_PL_ServiceRestrictInfo_Type.read(reader, v);
      value.set_mbms_PL_ServiceRestrictInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CellUpdateConfirm_r7_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _new_H_RNTI_Type.write(writer, value.get_new_H_RNTI());
   _newPrimary_E_RNTI_Type.write(writer, value.get_newPrimary_E_RNTI());
   _newSecondary_E_RNTI_Type.write(writer, value.get_newSecondary_E_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _rlc_Re_establishIndicatorRb2_3or4_Type.write(writer, value.get_rlc_Re_establishIndicatorRb2_3or4());
   _rlc_Re_establishIndicatorRb5orAbove_Type.write(writer, value.get_rlc_Re_establishIndicatorRb5orAbove());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _rb_InformationReleaseList_Type.write(writer, value.get_rb_InformationReleaseList());
   _rb_InformationReconfigList_Type.write(writer, value.get_rb_InformationReconfigList());
   _rb_InformationAffectedList_Type.write(writer, value.get_rb_InformationAffectedList());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _pdcp_ROHC_TargetMode_Type.write(writer, value.get_pdcp_ROHC_TargetMode());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_deletedTransChInfoList_Type.write(writer, value.get_ul_deletedTransChInfoList());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_DeletedTransChInfoList_Type.write(writer, value.get_dl_DeletedTransChInfoList());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_DPCH_Info_Type.write(writer, value.get_ul_DPCH_Info());
   _ul_EDCH_Information_Type.write(writer, value.get_ul_EDCH_Information());
   _dl_HSPDSCH_Information_Type.write(writer, value.get_dl_HSPDSCH_Information());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());
   _mbms_PL_ServiceRestrictInfo_Type.write(writer, value.get_mbms_PL_ServiceRestrictInfo());

   writer.writeSequenceEnd();
}


void CellUpdateConfirm-CCCH::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_u-RNTI_INTERNAL_asn1__generated__U_RNTI_cellUpdateConfirm-r3_INTERNAL_asn1__generated__CellUpdateConfirm_r3_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_cellUpdateConfirm-CCCH-r3-add-ext_INTERNAL__v4b0NonCriticalExtensions_INTERNAL__SequenceType_cellUpdateConfirm-v4b0ext_INTERNAL_asn1__generated__CellUpdateConfirm_v4b0ext_IEs_v590NonCriticalExtensions_INTERNAL__SequenceType_cellUpdateConfirm-v590ext_INTERNAL_asn1__generated__CellUpdateConfirm_v590ext_IEs_v5d0NonCriticalExtenstions_INTERNAL__SequenceType_cellUpdateConfirm-v5d0ext_INTERNAL_asn1__generated__CellUpdateConfirm_v5d0ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_cellUpdateConfirm-v690ext_INTERNAL_asn1__generated__CellUpdateConfirm_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_u-RNTI_INTERNAL_asn1__generated__U_RNTI_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__ChoiceType_r4_INTERNAL__SequenceType_cellUpdateConfirm-r4_INTERNAL_asn1__generated__CellUpdateConfirm_r4_IEs_v4d0NonCriticalExtensions_INTERNAL__SequenceType_cellUpdateConfirm-CCCH-r4-add-ext_INTERNAL__v590NonCriticalExtensions_INTERNAL__SequenceType_cellUpdateConfirm-v590ext_INTERNAL_asn1__generated__CellUpdateConfirm_v590ext_IEs_v5d0NonCriticalExtenstions_INTERNAL__SequenceType_cellUpdateConfirm-v5d0ext_INTERNAL_asn1__generated__CellUpdateConfirm_v5d0ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_cellUpdateConfirm-v690ext_INTERNAL_asn1__generated__CellUpdateConfirm_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r5_INTERNAL__SequenceType_cellUpdateConfirm-r5_INTERNAL_asn1__generated__CellUpdateConfirm_r5_IEs_cellUpdateConfirm-CCCH-r5-add-ext_INTERNAL__v5d0NonCriticalExtenstions_INTERNAL__SequenceType_cellUpdateConfirm-v5d0ext_INTERNAL_asn1__generated__CellUpdateConfirm_v5d0ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_cellUpdateConfirm-v690ext_INTERNAL_asn1__generated__CellUpdateConfirm_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r6_INTERNAL__SequenceType_cellUpdateConfirm-r6_INTERNAL_asn1__generated__CellUpdateConfirm_r6_IEs_cellUpdateConfirm-r6-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r7_INTERNAL__SequenceType_cellUpdateConfirm-r7_INTERNAL_asn1__generated__CellUpdateConfirm_r7_IEs_cellUpdateConfirm-r7-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void CellUpdateConfirm-CCCH::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void CounterCheck::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_counterCheck-r3_INTERNAL_asn1__generated__CounterCheck_r3_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_counterCheck-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void CounterCheck::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void CounterCheck_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::RB_COUNT_C_MSB_InformationList::ValueType v;
      _rb_COUNT_C_MSB_InformationList_Type.read(reader, v);
      value.set_rb_COUNT_C_MSB_InformationList(v);
   }

   reader.readSequenceEnd(*this);
}

void CounterCheck_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _rb_COUNT_C_MSB_InformationList_Type.write(writer, value.get_rb_COUNT_C_MSB_InformationList());

   writer.writeSequenceEnd();
}


void CounterCheckResponse::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::RB_COUNT_C_InformationList::ValueType v;
      _rb_COUNT_C_InformationList_Type.read(reader, v);
      value.set_rb_COUNT_C_InformationList(v);
   }
   {
      _INTERNAL__SequenceType_counterCheckResponse-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void CounterCheckResponse::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _rb_COUNT_C_InformationList_Type.write(writer, value.get_rb_COUNT_C_InformationList());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void DownlinkDirectTransfer::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_downlinkDirectTransfer-r3_INTERNAL_asn1__generated__DownlinkDirectTransfer_r3_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_downlinkDirectTransfer-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void DownlinkDirectTransfer::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void DownlinkDirectTransfer_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _cn_DomainIdentity_Type.read(reader, v);
      value.set_cn_DomainIdentity(v);
   }
   {
      asn1::generated::NAS_Message::ValueType v;
      _nas_Message_Type.read(reader, v);
      value.set_nas_Message(v);
   }

   reader.readSequenceEnd(*this);
}

void DownlinkDirectTransfer_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _cn_DomainIdentity_Type.write(writer, value.get_cn_DomainIdentity());
   _nas_Message_Type.write(writer, value.get_nas_Message());

   writer.writeSequenceEnd();
}


void HandoverToUTRANCommand::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_handoverToUTRANCommand-r3_INTERNAL_asn1__generated__HandoverToUTRANCommand_r3_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_criticalExtensions_Type)
   {
      _INTERNAL__ChoiceType_r4_INTERNAL__SequenceType_handoverToUTRANCommand-r4_INTERNAL_asn1__generated__HandoverToUTRANCommand_r4_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r5_INTERNAL__SequenceType_handoverToUTRANCommand-r5_INTERNAL_asn1__generated__HandoverToUTRANCommand_r5_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r6_INTERNAL__SequenceType_handoverToUTRANCommand-r6_INTERNAL_asn1__generated__HandoverToUTRANCommand_r6_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r7_INTERNAL__SequenceType_handoverToUTRANCommand-r7_INTERNAL_asn1__generated__HandoverToUTRANCommand_r7_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _criticalExtensions_Type.read(reader, v);
      value.set_criticalExtensions(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _criticalExtensions_Type.toString());
   }
}

void HandoverToUTRANCommand::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_criticalExtensions_Choosen())
      _criticalExtensions_Type.write(writer, value.get_criticalExtensions());
}


void HandoverToUTRANCommand_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::U_RNTI_Short::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::CipheringAlgorithm::ValueType v;
      _cipheringAlgorithm_Type.read(reader, v);
      value.set_cipheringAlgorithm(v);
   }
   {
      _INTERNAL__ChoiceType_complete_INTERNAL__SequenceType_srb-InformationSetupList_INTERNAL_asn1__generated__SRB_InformationSetupList_rab-InformationSetupList_INTERNAL_asn1__generated__RAB_InformationSetupList_ul-CommonTransChInfo_INTERNAL_asn1__generated__UL_CommonTransChInfo_ul-AddReconfTransChInfoList_INTERNAL_asn1__generated__UL_AddReconfTransChInfoList_dl-CommonTransChInfo_INTERNAL_asn1__generated__DL_CommonTransChInfo_dl-AddReconfTransChInfoList_INTERNAL_asn1__generated__DL_AddReconfTransChInfoList_ul-DPCH-Info_INTERNAL_asn1__generated__UL_DPCH_Info_modeSpecificInfo_INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__DL_PDSCH_Information_dummy2_INTERNAL_asn1__generated__CPCH_SetInfo_tdd_INTERNAL_asn1__NullType_dl-CommonInformation_INTERNAL_asn1__generated__DL_CommonInformation_dl-InformationPerRL-List_INTERNAL_asn1__generated__DL_InformationPerRL_List_frequencyInfo_INTERNAL_asn1__generated__FrequencyInfo_preconfiguration_INTERNAL__SequenceType_preConfigMode_INTERNAL__ChoiceType_predefinedConfigIdentity_INTERNAL_asn1__generated__PredefinedConfigIdentity_defaultConfig_INTERNAL__SequenceType_defaultConfigMode_INTERNAL_asn1__generated__DefaultConfigMode_defaultConfigIdentity_INTERNAL_asn1__generated__DefaultConfigIdentity_rab-Info_INTERNAL_asn1__generated__RAB_Info_Post_modeSpecificInfo_INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_ul-DPCH-Info_INTERNAL_asn1__generated__UL_DPCH_InfoPostFDD_dl-CommonInformationPost_INTERNAL_asn1__generated__DL_CommonInformationPost_dl-InformationPerRL-List_INTERNAL_asn1__generated__DL_InformationPerRL_ListPostFDD_frequencyInfo_INTERNAL_asn1__generated__FrequencyInfoFDD_tdd_INTERNAL__SequenceType_ul-DPCH-Info_INTERNAL_asn1__generated__UL_DPCH_InfoPostTDD_dl-CommonInformationPost_INTERNAL_asn1__generated__DL_CommonInformationPost_dl-InformationPerRL_INTERNAL_asn1__generated__DL_InformationPerRL_PostTDD_frequencyInfo_INTERNAL_asn1__generated__FrequencyInfoTDD_primaryCCPCH-TX-Power_INTERNAL_asn1__generated__PrimaryCCPCH_TX_Power::ValueType v;
      _specificationMode_Type.read(reader, v);
      value.set_specificationMode(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }

   reader.readSequenceEnd(*this);
}

void HandoverToUTRANCommand_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _dummy_Type.write(writer, value.get_dummy());
   _cipheringAlgorithm_Type.write(writer, value.get_cipheringAlgorithm());
   _specificationMode_Type.write(writer, value.get_specificationMode());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());

   writer.writeSequenceEnd();
}


void HandoverToUTRANCommand_r4_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::U_RNTI_Short::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::CipheringAlgorithm::ValueType v;
      _cipheringAlgorithm_Type.read(reader, v);
      value.set_cipheringAlgorithm(v);
   }
   {
      _INTERNAL__ChoiceType_complete_INTERNAL__SequenceType_srb-InformationSetupList_INTERNAL_asn1__generated__SRB_InformationSetupList_rab-InformationSetupList_INTERNAL_asn1__generated__RAB_InformationSetupList_r4_ul-CommonTransChInfo_INTERNAL_asn1__generated__UL_CommonTransChInfo_r4_ul-AddReconfTransChInfoList_INTERNAL_asn1__generated__UL_AddReconfTransChInfoList_dl-CommonTransChInfo_INTERNAL_asn1__generated__DL_CommonTransChInfo_r4_dl-AddReconfTransChInfoList_INTERNAL_asn1__generated__DL_AddReconfTransChInfoList_r4_ul-DPCH-Info_INTERNAL_asn1__generated__UL_DPCH_Info_r4_modeSpecificInfo_INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__DL_PDSCH_Information_dummy2_INTERNAL_asn1__generated__CPCH_SetInfo_tdd_INTERNAL_asn1__NullType_dl-CommonInformation_INTERNAL_asn1__generated__DL_CommonInformation_r4_dl-InformationPerRL-List_INTERNAL_asn1__generated__DL_InformationPerRL_List_r4_frequencyInfo_INTERNAL_asn1__generated__FrequencyInfo_preconfiguration_INTERNAL__SequenceType_preConfigMode_INTERNAL__ChoiceType_predefinedConfigIdentity_INTERNAL_asn1__generated__PredefinedConfigIdentity_defaultConfig_INTERNAL__SequenceType_defaultConfigMode_INTERNAL_asn1__generated__DefaultConfigMode_defaultConfigIdentity_INTERNAL_asn1__generated__DefaultConfigIdentity_r4_rab-Info_INTERNAL_asn1__generated__RAB_Info_Post_modeSpecificInfo_INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_ul-DPCH-Info_INTERNAL_asn1__generated__UL_DPCH_InfoPostFDD_dl-CommonInformationPost_INTERNAL_asn1__generated__DL_CommonInformationPost_dl-InformationPerRL-List_INTERNAL_asn1__generated__DL_InformationPerRL_ListPostFDD_frequencyInfo_INTERNAL_asn1__generated__FrequencyInfoFDD_tdd_INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_ul-DPCH-Info_INTERNAL_asn1__generated__UL_DPCH_InfoPostTDD_dl-InformationPerRL_INTERNAL_asn1__generated__DL_InformationPerRL_PostTDD_frequencyInfo_INTERNAL_asn1__generated__FrequencyInfoTDD_primaryCCPCH-TX-Power_INTERNAL_asn1__generated__PrimaryCCPCH_TX_Power_tdd128_INTERNAL__SequenceType_ul-DPCH-Info_INTERNAL_asn1__generated__UL_DPCH_InfoPostTDD_LCR_r4_dl-InformationPerRL_INTERNAL_asn1__generated__DL_InformationPerRL_PostTDD_LCR_r4_frequencyInfo_INTERNAL_asn1__generated__FrequencyInfoTDD_primaryCCPCH-TX-Power_INTERNAL_asn1__generated__PrimaryCCPCH_TX_Power::ValueType v;
      _specificationMode_Type.read(reader, v);
      value.set_specificationMode(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }

   reader.readSequenceEnd(*this);
}

void HandoverToUTRANCommand_r4_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _cipheringAlgorithm_Type.write(writer, value.get_cipheringAlgorithm());
   _specificationMode_Type.write(writer, value.get_specificationMode());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());

   writer.writeSequenceEnd();
}


void HandoverToUTRANCommand_r5_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::U_RNTI_Short::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::CipheringAlgorithm::ValueType v;
      _cipheringAlgorithm_Type.read(reader, v);
      value.set_cipheringAlgorithm(v);
   }
   {
      _INTERNAL__ChoiceType_complete_INTERNAL__SequenceType_srb-InformationSetupList_INTERNAL_asn1__generated__SRB_InformationSetupList_r5_rab-InformationSetupList_INTERNAL_asn1__generated__RAB_InformationSetupList_r5_ul-CommonTransChInfo_INTERNAL_asn1__generated__UL_CommonTransChInfo_r4_ul-AddReconfTransChInfoList_INTERNAL_asn1__generated__UL_AddReconfTransChInfoList_dl-CommonTransChInfo_INTERNAL_asn1__generated__DL_CommonTransChInfo_r4_dl-AddReconfTransChInfoList_INTERNAL_asn1__generated__DL_AddReconfTransChInfoList_r5_ul-DPCH-Info_INTERNAL_asn1__generated__UL_DPCH_Info_r5_modeSpecificInfo_INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__DL_PDSCH_Information_dummy2_INTERNAL_asn1__generated__CPCH_SetInfo_tdd_INTERNAL_asn1__NullType_dl-CommonInformation_INTERNAL_asn1__generated__DL_CommonInformation_r4_dl-InformationPerRL-List_INTERNAL_asn1__generated__DL_InformationPerRL_List_r5_frequencyInfo_INTERNAL_asn1__generated__FrequencyInfo_preconfiguration_INTERNAL__SequenceType_preConfigMode_INTERNAL__ChoiceType_predefinedConfigIdentity_INTERNAL_asn1__generated__PredefinedConfigIdentity_defaultConfig_INTERNAL__SequenceType_defaultConfigMode_INTERNAL_asn1__generated__DefaultConfigMode_defaultConfigIdentity_INTERNAL_asn1__generated__DefaultConfigIdentity_r5_rab-Info_INTERNAL_asn1__generated__RAB_Info_Post_modeSpecificInfo_INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_ul-DPCH-Info_INTERNAL_asn1__generated__UL_DPCH_InfoPostFDD_dl-CommonInformationPost_INTERNAL_asn1__generated__DL_CommonInformationPost_dl-InformationPerRL-List_INTERNAL_asn1__generated__DL_InformationPerRL_ListPostFDD_frequencyInfo_INTERNAL_asn1__generated__FrequencyInfoFDD_tdd_INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_ul-DPCH-Info_INTERNAL_asn1__generated__UL_DPCH_InfoPostTDD_dl-InformationPerRL_INTERNAL_asn1__generated__DL_InformationPerRL_PostTDD_frequencyInfo_INTERNAL_asn1__generated__FrequencyInfoTDD_primaryCCPCH-TX-Power_INTERNAL_asn1__generated__PrimaryCCPCH_TX_Power_tdd128_INTERNAL__SequenceType_ul-DPCH-Info_INTERNAL_asn1__generated__UL_DPCH_InfoPostTDD_LCR_r4_dl-InformationPerRL_INTERNAL_asn1__generated__DL_InformationPerRL_PostTDD_LCR_r4_frequencyInfo_INTERNAL_asn1__generated__FrequencyInfoTDD_primaryCCPCH-TX-Power_INTERNAL_asn1__generated__PrimaryCCPCH_TX_Power::ValueType v;
      _specificationMode_Type.read(reader, v);
      value.set_specificationMode(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }

   reader.readSequenceEnd(*this);
}

void HandoverToUTRANCommand_r5_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _cipheringAlgorithm_Type.write(writer, value.get_cipheringAlgorithm());
   _specificationMode_Type.write(writer, value.get_specificationMode());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());

   writer.writeSequenceEnd();
}


void HandoverToUTRANCommand_r6_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::U_RNTI_Short::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::CipheringAlgorithm::ValueType v;
      _cipheringAlgorithm_Type.read(reader, v);
      value.set_cipheringAlgorithm(v);
   }
   {
      _INTERNAL__ChoiceType_complete_INTERNAL__SequenceType_srb-InformationSetupList_INTERNAL_asn1__generated__SRB_InformationSetupList_r6_rab-InformationSetupList_INTERNAL_asn1__generated__RAB_InformationSetupList_r6_ul-CommonTransChInfo_INTERNAL_asn1__generated__UL_CommonTransChInfo_r4_ul-AddReconfTransChInfoList_INTERNAL_asn1__generated__UL_AddReconfTransChInfoList_r6_dl-CommonTransChInfo_INTERNAL_asn1__generated__DL_CommonTransChInfo_r4_dl-AddReconfTransChInfoList_INTERNAL_asn1__generated__DL_AddReconfTransChInfoList_r5_ul-DPCH-Info_INTERNAL_asn1__generated__UL_DPCH_Info_r6_ul-EDCH-Information_INTERNAL_asn1__generated__UL_EDCH_Information_r6_dl-HSPDSCH-Information_INTERNAL_asn1__generated__DL_HSPDSCH_Information_r6_dl-CommonInformation_INTERNAL_asn1__generated__DL_CommonInformation_r6_dl-InformationPerRL-List_INTERNAL_asn1__generated__DL_InformationPerRL_List_r6_frequencyInfo_INTERNAL_asn1__generated__FrequencyInfo_preconfiguration_INTERNAL__SequenceType_preConfigMode_INTERNAL__ChoiceType_predefinedConfigIdentity_INTERNAL_asn1__generated__PredefinedConfigIdentity_defaultConfig_INTERNAL__SequenceType_defaultConfigMode_INTERNAL_asn1__generated__DefaultConfigMode_defaultConfigIdentity_INTERNAL_asn1__generated__DefaultConfigIdentity_r6_rab-Info_INTERNAL_asn1__generated__RAB_Info_Post_modeSpecificInfo_INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_ul-DPCH-Info_INTERNAL_asn1__generated__UL_DPCH_InfoPostFDD_dl-CommonInformationPost_INTERNAL_asn1__generated__DL_CommonInformationPost_dl-InformationPerRL-List_INTERNAL_asn1__generated__DL_InformationPerRL_ListPostFDD_frequencyInfo_INTERNAL_asn1__generated__FrequencyInfoFDD_tdd_INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_ul-DPCH-Info_INTERNAL_asn1__generated__UL_DPCH_InfoPostTDD_dl-InformationPerRL_INTERNAL_asn1__generated__DL_InformationPerRL_PostTDD_frequencyInfo_INTERNAL_asn1__generated__FrequencyInfoTDD_primaryCCPCH-TX-Power_INTERNAL_asn1__generated__PrimaryCCPCH_TX_Power_tdd128_INTERNAL__SequenceType_ul-DPCH-Info_INTERNAL_asn1__generated__UL_DPCH_InfoPostTDD_LCR_r4_dl-InformationPerRL_INTERNAL_asn1__generated__DL_InformationPerRL_PostTDD_LCR_r4_frequencyInfo_INTERNAL_asn1__generated__FrequencyInfoTDD_primaryCCPCH-TX-Power_INTERNAL_asn1__generated__PrimaryCCPCH_TX_Power::ValueType v;
      _specificationMode_Type.read(reader, v);
      value.set_specificationMode(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }

   reader.readSequenceEnd(*this);
}

void HandoverToUTRANCommand_r6_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _cipheringAlgorithm_Type.write(writer, value.get_cipheringAlgorithm());
   _specificationMode_Type.write(writer, value.get_specificationMode());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());

   writer.writeSequenceEnd();
}


void HandoverToUTRANCommand_r7_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::U_RNTI_Short::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::CipheringAlgorithm::ValueType v;
      _cipheringAlgorithm_Type.read(reader, v);
      value.set_cipheringAlgorithm(v);
   }
   {
      _INTERNAL__ChoiceType_complete_INTERNAL__SequenceType_srb-InformationSetupList_INTERNAL_asn1__generated__SRB_InformationSetupList_r6_rab-InformationSetupList_INTERNAL_asn1__generated__RAB_InformationSetupList_r6_ul-CommonTransChInfo_INTERNAL_asn1__generated__UL_CommonTransChInfo_r4_ul-AddReconfTransChInfoList_INTERNAL_asn1__generated__UL_AddReconfTransChInfoList_r6_dl-CommonTransChInfo_INTERNAL_asn1__generated__DL_CommonTransChInfo_r4_dl-AddReconfTransChInfoList_INTERNAL_asn1__generated__DL_AddReconfTransChInfoList_r5_ul-DPCH-Info_INTERNAL_asn1__generated__UL_DPCH_Info_r7_dl-CommonInformation_INTERNAL_asn1__generated__DL_CommonInformation_r4_dl-InformationPerRL-List_INTERNAL_asn1__generated__DL_InformationPerRL_List_r7_frequencyInfo_INTERNAL_asn1__generated__FrequencyInfo_preconfiguration_INTERNAL__SequenceType_preConfigMode_INTERNAL__ChoiceType_predefinedConfigIdentity_INTERNAL_asn1__generated__PredefinedConfigIdentity_defaultConfig_INTERNAL__SequenceType_defaultConfigMode_INTERNAL_asn1__generated__DefaultConfigMode_defaultConfigIdentity_INTERNAL_asn1__generated__DefaultConfigIdentity_r6_rab-Info_INTERNAL_asn1__generated__RAB_Info_Post_modeSpecificInfo_INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_ul-DPCH-Info_INTERNAL_asn1__generated__UL_DPCH_InfoPostFDD_dl-CommonInformationPost_INTERNAL_asn1__generated__DL_CommonInformationPost_dl-InformationPerRL-List_INTERNAL_asn1__generated__DL_InformationPerRL_ListPostFDD_frequencyInfo_INTERNAL_asn1__generated__FrequencyInfoFDD_tdd_INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_ul-DPCH-Info_INTERNAL_asn1__generated__UL_DPCH_InfoPostTDD_dl-InformationPerRL_INTERNAL_asn1__generated__DL_InformationPerRL_PostTDD_frequencyInfo_INTERNAL_asn1__generated__FrequencyInfoTDD_primaryCCPCH-TX-Power_INTERNAL_asn1__generated__PrimaryCCPCH_TX_Power_tdd128_INTERNAL__SequenceType_ul-DPCH-Info_INTERNAL_asn1__generated__UL_DPCH_Info_r7_dl-InformationPerRL_INTERNAL_asn1__generated__DL_InformationPerRL_PostTDD_LCR_r4_frequencyInfo_INTERNAL_asn1__generated__FrequencyInfoTDD_primaryCCPCH-TX-Power_INTERNAL_asn1__generated__PrimaryCCPCH_TX_Power_tdd768_INTERNAL__SequenceType_ul-DPCH-Info_INTERNAL_asn1__generated__UL_DPCH_Info_r7_dl-InformationPerRL_INTERNAL_asn1__generated__DL_InformationPerRL_List_r7_frequencyInfo_INTERNAL_asn1__generated__FrequencyInfoTDD_primaryCCPCH-TX-Power_INTERNAL_asn1__generated__PrimaryCCPCH_TX_Power::ValueType v;
      _specificationMode_Type.read(reader, v);
      value.set_specificationMode(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }

   reader.readSequenceEnd(*this);
}

void HandoverToUTRANCommand_r7_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _cipheringAlgorithm_Type.write(writer, value.get_cipheringAlgorithm());
   _specificationMode_Type.write(writer, value.get_specificationMode());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());

   writer.writeSequenceEnd();
}


void HandoverToUTRANComplete::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::STARTList::ValueType v;
      _startList_Type.read(reader, v);
      value.set_startList(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _count_C_ActivationTime_Type.read(reader, v);
      value.set_count_C_ActivationTime(v);
   }
   {
      _INTERNAL__SequenceType_handoverToUTRANComplete-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void HandoverToUTRANComplete::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _startList_Type.write(writer, value.get_startList());
   _count_C_ActivationTime_Type.write(writer, value.get_count_C_ActivationTime());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void InitialDirectTransfer::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _cn_DomainIdentity_Type.read(reader, v);
      value.set_cn_DomainIdentity(v);
   }
   {
      asn1::generated::IntraDomainNasNodeSelector::ValueType v;
      _intraDomainNasNodeSelector_Type.read(reader, v);
      value.set_intraDomainNasNodeSelector(v);
   }
   {
      asn1::generated::NAS_Message::ValueType v;
      _nas_Message_Type.read(reader, v);
      value.set_nas_Message(v);
   }
   {
      asn1::generated::MeasuredResultsOnRACH::ValueType v;
      _measuredResultsOnRACH_Type.read(reader, v);
      value.set_measuredResultsOnRACH(v);
   }
   {
      _INTERNAL__SequenceType_initialDirectTransfer-v3a0ext_INTERNAL_asn1__generated__InitialDirectTransfer_v3a0ext_laterNonCriticalExtensions_INTERNAL__SequenceType_initialDirectTransfer-r3-add-ext_INTERNAL__v590NonCriticalExtensions_INTERNAL__SequenceType_initialDirectTransfer-v590ext_INTERNAL_asn1__generated__InitialDirectTransfer_v590ext_v690NonCriticalExtensions_INTERNAL__SequenceType_initialDirectTransfer-v690ext_INTERNAL_asn1__generated__InitialDirectTransfer_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v3a0NonCriticalExtensions_Type.read(reader, v);
      value.set_v3a0NonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void InitialDirectTransfer::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cn_DomainIdentity_Type.write(writer, value.get_cn_DomainIdentity());
   _intraDomainNasNodeSelector_Type.write(writer, value.get_intraDomainNasNodeSelector());
   _nas_Message_Type.write(writer, value.get_nas_Message());
   _measuredResultsOnRACH_Type.write(writer, value.get_measuredResultsOnRACH());
   _v3a0NonCriticalExtensions_Type.write(writer, value.get_v3a0NonCriticalExtensions());

   writer.writeSequenceEnd();
}


void InitialDirectTransfer_v3a0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::START_Value::ValueType v;
      _start_Value_Type.read(reader, v);
      value.set_start_Value(v);
   }

   reader.readSequenceEnd(*this);
}

void InitialDirectTransfer_v3a0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _start_Value_Type.write(writer, value.get_start_Value());

   writer.writeSequenceEnd();
}


void InitialDirectTransfer_v590ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::EstablishmentCause::ValueType v;
      _establishmentCause_Type.read(reader, v);
      value.set_establishmentCause(v);
   }

   reader.readSequenceEnd(*this);
}

void InitialDirectTransfer_v590ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _establishmentCause_Type.write(writer, value.get_establishmentCause());

   writer.writeSequenceEnd();
}


void InitialDirectTransfer_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PLMN_Identity::ValueType v;
      _plmn_Identity_Type.read(reader, v);
      value.set_plmn_Identity(v);
   }
   {
      asn1::generated::MeasuredResultsOnRACHinterFreq::ValueType v;
      _measuredResultsOnRACHinterFreq_Type.read(reader, v);
      value.set_measuredResultsOnRACHinterFreq(v);
   }
   {
      asn1::generated::MBMS_JoinedInformation_r6::ValueType v;
      _mbms_JoinedInformation_Type.read(reader, v);
      value.set_mbms_JoinedInformation(v);
   }

   reader.readSequenceEnd(*this);
}

void InitialDirectTransfer_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _plmn_Identity_Type.write(writer, value.get_plmn_Identity());
   _measuredResultsOnRACHinterFreq_Type.write(writer, value.get_measuredResultsOnRACHinterFreq());
   _mbms_JoinedInformation_Type.write(writer, value.get_mbms_JoinedInformation());

   writer.writeSequenceEnd();
}


void HandoverFromUTRANCommand-GSM::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_handoverFromUTRANCommand-GSM-r3_INTERNAL_asn1__generated__HandoverFromUTRANCommand_GSM_r3_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_handoverFromUTRANCommand-GSM-r3-add-ext_INTERNAL__v690NonCriticalExtensions_INTERNAL__SequenceType_handoverFromUTRANCommand-GSM-v690ext_INTERNAL_asn1__generated__HandoverFromUTRANCommand_GSM_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__ChoiceType_r6_INTERNAL__SequenceType_handoverFromUTRANCommand-GSM-r6_INTERNAL_asn1__generated__HandoverFromUTRANCommand_GSM_r6_IEs_handoverFromUTRANCommand-GSM-r6-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void HandoverFromUTRANCommand-GSM::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void HandoverFromUTRANCommand_GSM_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::RAB_Info::ValueType v;
      _toHandoverRAB_Info_Type.read(reader, v);
      value.set_toHandoverRAB_Info(v);
   }
   {
      asn1::generated::Frequency_Band::ValueType v;
      _frequency_band_Type.read(reader, v);
      value.set_frequency_band(v);
   }
   {
      _INTERNAL__ChoiceType_single-GSM-Message_INTERNAL__SequenceType_gsm-MessageList_INTERNAL__SequenceType_gsm-Messages_INTERNAL_asn1__generated__GSM_MessageList::ValueType v;
      _gsm_message_Type.read(reader, v);
      value.set_gsm_message(v);
   }

   reader.readSequenceEnd(*this);
}

void HandoverFromUTRANCommand_GSM_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _activationTime_Type.write(writer, value.get_activationTime());
   _toHandoverRAB_Info_Type.write(writer, value.get_toHandoverRAB_Info());
   _frequency_band_Type.write(writer, value.get_frequency_band());
   _gsm_message_Type.write(writer, value.get_gsm_message());

   writer.writeSequenceEnd();
}


void HandoverFromUTRANCommand_GSM_r6_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::RAB_InformationList_r6::ValueType v;
      _toHandoverRAB_Info_Type.read(reader, v);
      value.set_toHandoverRAB_Info(v);
   }
   {
      asn1::generated::Frequency_Band::ValueType v;
      _frequency_band_Type.read(reader, v);
      value.set_frequency_band(v);
   }
   {
      _INTERNAL__ChoiceType_single-GSM-Message_INTERNAL__SequenceType_gsm-MessageList_INTERNAL__SequenceType_gsm-Messages_INTERNAL_asn1__generated__GSM_MessageList::ValueType v;
      _gsm_message_Type.read(reader, v);
      value.set_gsm_message(v);
   }
   {
      _INTERNAL__ChoiceType_sI_INTERNAL_asn1__generated__GERAN_SystemInformation_pSI_INTERNAL_asn1__generated__GERAN_SystemInformation::ValueType v;
      _geran_SystemInfoType_Type.read(reader, v);
      value.set_geran_SystemInfoType(v);
   }

   reader.readSequenceEnd(*this);
}

void HandoverFromUTRANCommand_GSM_r6_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _activationTime_Type.write(writer, value.get_activationTime());
   _toHandoverRAB_Info_Type.write(writer, value.get_toHandoverRAB_Info());
   _frequency_band_Type.write(writer, value.get_frequency_band());
   _gsm_message_Type.write(writer, value.get_gsm_message());
   _geran_SystemInfoType_Type.write(writer, value.get_geran_SystemInfoType());

   writer.writeSequenceEnd();
}


void HandoverFromUTRANCommand_GSM_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_sI_INTERNAL_asn1__generated__GERAN_SystemInformation_pSI_INTERNAL_asn1__generated__GERAN_SystemInformation::ValueType v;
      _geran_SystemInfoType_Type.read(reader, v);
      value.set_geran_SystemInfoType(v);
   }

   reader.readSequenceEnd(*this);
}

void HandoverFromUTRANCommand_GSM_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _geran_SystemInfoType_Type.write(writer, value.get_geran_SystemInfoType());

   writer.writeSequenceEnd();
}


void HandoverFromUTRANCommand_GERANIu::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      _INTERNAL__ChoiceType_r5_INTERNAL__SequenceType_handoverFromUTRANCommand-GERANIu-r5_INTERNAL_asn1__generated__HandoverFromUTRANCommand_GERANIu_r5_IEs_nonCriticalExtensions_INTERNAL__SequenceType_later-than-r5_INTERNAL__SequenceType_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _handoverFromUTRANCommand_GERANIu_Type.read(reader, v);
      value.set_handoverFromUTRANCommand_GERANIu(v);
   }

   reader.readSequenceEnd(*this);
}

void HandoverFromUTRANCommand_GERANIu::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _handoverFromUTRANCommand_GERANIu_Type.write(writer, value.get_handoverFromUTRANCommand_GERANIu());

   writer.writeSequenceEnd();
}


void HandoverFromUTRANCommand_GERANIu_r5_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::Frequency_Band::ValueType v;
      _frequency_Band_Type.read(reader, v);
      value.set_frequency_Band(v);
   }
   {
      _INTERNAL__ChoiceType_single-GERANIu-Message_INTERNAL__SequenceType_geranIu-MessageList_INTERNAL__SequenceType_geranIu-Messages_INTERNAL_asn1__generated__GERANIu_MessageList::ValueType v;
      _geranIu_Message_Type.read(reader, v);
      value.set_geranIu_Message(v);
   }

   reader.readSequenceEnd(*this);
}

void HandoverFromUTRANCommand_GERANIu_r5_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _activationTime_Type.write(writer, value.get_activationTime());
   _frequency_Band_Type.write(writer, value.get_frequency_Band());
   _geranIu_Message_Type.write(writer, value.get_geranIu_Message());

   writer.writeSequenceEnd();
}


void HandoverFromUTRANCommand-CDMA2000::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_handoverFromUTRANCommand-CDMA2000-r3_INTERNAL_asn1__generated__HandoverFromUTRANCommand_CDMA2000_r3_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_handoverFromUTRANCommand-CDMA2000-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void HandoverFromUTRANCommand-CDMA2000::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void HandoverFromUTRANCommand_CDMA2000_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::RAB_Info::ValueType v;
      _toHandoverRAB_Info_Type.read(reader, v);
      value.set_toHandoverRAB_Info(v);
   }
   {
      asn1::generated::CDMA2000_MessageList::ValueType v;
      _cdma2000_MessageList_Type.read(reader, v);
      value.set_cdma2000_MessageList(v);
   }

   reader.readSequenceEnd(*this);
}

void HandoverFromUTRANCommand_CDMA2000_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _activationTime_Type.write(writer, value.get_activationTime());
   _toHandoverRAB_Info_Type.write(writer, value.get_toHandoverRAB_Info());
   _cdma2000_MessageList_Type.write(writer, value.get_cdma2000_MessageList());

   writer.writeSequenceEnd();
}


void HandoverFromUTRANFailure::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::InterRAT_HO_FailureCause::ValueType v;
      _interRAT_HO_FailureCause_Type.read(reader, v);
      value.set_interRAT_HO_FailureCause(v);
   }
   {
      _INTERNAL__ChoiceType_gsm_INTERNAL__SequenceType_gsm-MessageList_INTERNAL_asn1__generated__GSM_MessageList_cdma2000_INTERNAL__SequenceType_cdma2000-MessageList_INTERNAL_asn1__generated__CDMA2000_MessageList::ValueType v;
      _interRATMessage_Type.read(reader, v);
      value.set_interRATMessage(v);
   }
   {
      _INTERNAL__SequenceType_handoverFromUTRANFailure-r3-add-ext_INTERNAL__v590NonCriticalExtensions_INTERNAL__SequenceType_handoverFromUTRANFailure-v590ext_INTERNAL_asn1__generated__HandoverFromUtranFailure_v590ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void HandoverFromUTRANFailure::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _interRAT_HO_FailureCause_Type.write(writer, value.get_interRAT_HO_FailureCause());
   _interRATMessage_Type.write(writer, value.get_interRATMessage());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void HandoverFromUtranFailure_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::GERANIu_MessageList::ValueType v;
      _geranIu_MessageList_Type.read(reader, v);
      value.set_geranIu_MessageList(v);
   }

   reader.readSequenceEnd(*this);
}

void HandoverFromUtranFailure_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _geranIu_MessageList_Type.write(writer, value.get_geranIu_MessageList());

   writer.writeSequenceEnd();
}


void InterRATHandoverInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_absent_INTERNAL_asn1__NullType_present_INTERNAL_asn1__generated__PredefinedConfigStatusList::ValueType v;
      _predefinedConfigStatusList_Type.read(reader, v);
      value.set_predefinedConfigStatusList(v);
   }
   {
      _INTERNAL__ChoiceType_absent_INTERNAL_asn1__NullType_present_INTERNAL_asn1__generated__UE_SecurityInformation::ValueType v;
      _uE_SecurityInformation_Type.read(reader, v);
      value.set_uE_SecurityInformation(v);
   }
   {
      _INTERNAL__ChoiceType_absent_INTERNAL_asn1__NullType_present_INTERNAL_asn1__OctetStringType::ValueType v;
      _ue_CapabilityContainer_Type.read(reader, v);
      value.set_ue_CapabilityContainer(v);
   }
   {
      _INTERNAL__ChoiceType_absent_INTERNAL_asn1__NullType_present_INTERNAL__SequenceType_interRATHandoverInfo-v390ext_INTERNAL_asn1__generated__InterRATHandoverInfo_v390ext_IEs_v3a0NonCriticalExtensions_INTERNAL__SequenceType_interRATHandoverInfo-v3a0ext_INTERNAL_asn1__generated__InterRATHandoverInfo_v3a0ext_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_interRATHandoverInfo-v3d0ext_INTERNAL_asn1__generated__InterRATHandoverInfo_v3d0ext_IEs_interRATHandoverInfo-r3-add-ext_INTERNAL__v3g0NonCriticalExtensions_INTERNAL__SequenceType_interRATHandoverInfo-v3g0ext_INTERNAL_asn1__generated__InterRATHandoverInfo_v3g0ext_IEs_v4b0NonCriticalExtensions_INTERNAL__SequenceType_interRATHandoverInfo-v4b0ext_INTERNAL_asn1__generated__InterRATHandoverInfo_v4b0ext_IEs_v4d0NonCriticalExtensions_INTERNAL__SequenceType_interRATHandoverInfo-v4d0ext_INTERNAL_asn1__generated__InterRATHandoverInfo_v4d0ext_IEs_v590NonCriticalExtensions_INTERNAL__SequenceType_interRATHandoverInfo-v590ext_INTERNAL_asn1__generated__InterRATHandoverInfo_v590ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_interRATHandoverInfo-v690ext_INTERNAL_asn1__generated__InterRATHandoverInfo_v690ext_IEs_v7xyNonCriticalExtensions_INTERNAL__SequenceType_interRATHandoverInfo-v7xyext_INTERNAL_asn1__generated__InterRATHandoverInfo_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v390NonCriticalExtensions_Type.read(reader, v);
      value.set_v390NonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATHandoverInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _predefinedConfigStatusList_Type.write(writer, value.get_predefinedConfigStatusList());
   _uE_SecurityInformation_Type.write(writer, value.get_uE_SecurityInformation());
   _ue_CapabilityContainer_Type.write(writer, value.get_ue_CapabilityContainer());
   _v390NonCriticalExtensions_Type.write(writer, value.get_v390NonCriticalExtensions());

   writer.writeSequenceEnd();
}


void InterRATHandoverInfo_v390ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v380ext::ValueType v;
      _ue_RadioAccessCapability_v380ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v380ext(v);
   }
   {
      asn1::generated::DL_PhysChCapabilityFDD_v380ext::ValueType v;
      _dl_PhysChCapabilityFDD_v380ext_Type.read(reader, v);
      value.set_dl_PhysChCapabilityFDD_v380ext(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATHandoverInfo_v390ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v380ext_Type.write(writer, value.get_ue_RadioAccessCapability_v380ext());
   _dl_PhysChCapabilityFDD_v380ext_Type.write(writer, value.get_dl_PhysChCapabilityFDD_v380ext());

   writer.writeSequenceEnd();
}


void InterRATHandoverInfo_v3a0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v3a0ext::ValueType v;
      _ue_RadioAccessCapability_v3a0ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v3a0ext(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATHandoverInfo_v3a0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v3a0ext_Type.write(writer, value.get_ue_RadioAccessCapability_v3a0ext());

   writer.writeSequenceEnd();
}


void InterRATHandoverInfo_v3d0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UESpecificBehaviourInformation1interRAT::ValueType v;
      _uESpecificBehaviourInformation1interRAT_Type.read(reader, v);
      value.set_uESpecificBehaviourInformation1interRAT(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATHandoverInfo_v3d0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _uESpecificBehaviourInformation1interRAT_Type.write(writer, value.get_uESpecificBehaviourInformation1interRAT());

   writer.writeSequenceEnd();
}


void InterRATHandoverInfo_v3g0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v3g0ext::ValueType v;
      _ue_RadioAccessCapability_v3g0ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v3g0ext(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATHandoverInfo_v3g0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v3g0ext_Type.write(writer, value.get_ue_RadioAccessCapability_v3g0ext());

   writer.writeSequenceEnd();
}


void InterRATHandoverInfo_r3_add_ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterRATHandoverInfo_v690ext1_IEs::ValueType v;
      _interRATHandoverInfo_v690ext1_Type.read(reader, v);
      value.set_interRATHandoverInfo_v690ext1(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATHandoverInfo_r3_add_ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interRATHandoverInfo_v690ext1_Type.write(writer, value.get_interRATHandoverInfo_v690ext1());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void InterRATHandoverInfo_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::AccessStratumReleaseIndicator::ValueType v;
      _accessStratumReleaseIndicator_Type.read(reader, v);
      value.set_accessStratumReleaseIndicator(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATHandoverInfo_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _accessStratumReleaseIndicator_Type.write(writer, value.get_accessStratumReleaseIndicator());

   writer.writeSequenceEnd();
}


void InterRATHandoverInfo_v4d0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RadioFrequencyBandTDDList::ValueType v;
      _tdd128_RF_Capability_Type.read(reader, v);
      value.set_tdd128_RF_Capability(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATHandoverInfo_v4d0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tdd128_RF_Capability_Type.write(writer, value.get_tdd128_RF_Capability());

   writer.writeSequenceEnd();
}


void InterRATHandoverInfo_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PredefinedConfigStatusListComp::ValueType v;
      _predefinedConfigStatusListComp_Type.read(reader, v);
      value.set_predefinedConfigStatusListComp(v);
   }
   {
      asn1::generated::UE_RadioAccessCapabilityComp::ValueType v;
      _ue_RadioAccessCapabilityComp_Type.read(reader, v);
      value.set_ue_RadioAccessCapabilityComp(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATHandoverInfo_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _predefinedConfigStatusListComp_Type.write(writer, value.get_predefinedConfigStatusListComp());
   _ue_RadioAccessCapabilityComp_Type.write(writer, value.get_ue_RadioAccessCapabilityComp());

   writer.writeSequenceEnd();
}


void InterRATHandoverInfo_v690ext1_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v650ext::ValueType v;
      _ue_RadioAccessCapability_v650ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v650ext(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATHandoverInfo_v690ext1_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v650ext_Type.write(writer, value.get_ue_RadioAccessCapability_v650ext());

   writer.writeSequenceEnd();
}


void InterRATHandoverInfo_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_SecurityInformation2::ValueType v;
      _ue_SecurityInformation2_Type.read(reader, v);
      value.set_ue_SecurityInformation2(v);
   }
   {
      asn1::generated::UE_RadioAccessCapabilityComp_ext::ValueType v;
      _ue_RadioAccessCapabilityComp_Type.read(reader, v);
      value.set_ue_RadioAccessCapabilityComp(v);
   }
   {
      asn1::generated::UE_RadioAccessCapabilityComp2::ValueType v;
      _ue_RadioAccessCapabilityComp2_Type.read(reader, v);
      value.set_ue_RadioAccessCapabilityComp2(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATHandoverInfo_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_SecurityInformation2_Type.write(writer, value.get_ue_SecurityInformation2());
   _ue_RadioAccessCapabilityComp_Type.write(writer, value.get_ue_RadioAccessCapabilityComp());
   _ue_RadioAccessCapabilityComp2_Type.write(writer, value.get_ue_RadioAccessCapabilityComp2());

   writer.writeSequenceEnd();
}


void InterRATHandoverInfo_v7xyext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v7xyext::ValueType v;
      _ue_RadioAccessCapability_v7xyext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v7xyext(v);
   }
   {
      asn1::generated::UE_RadioAccessCapabilityComp_r7::ValueType v;
      _ue_RadioAccessCapabilityComp_Type.read(reader, v);
      value.set_ue_RadioAccessCapabilityComp(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATHandoverInfo_v7xyext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v7xyext_Type.write(writer, value.get_ue_RadioAccessCapability_v7xyext());
   _ue_RadioAccessCapabilityComp_Type.write(writer, value.get_ue_RadioAccessCapabilityComp());

   writer.writeSequenceEnd();
}


void MeasurementControl::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_measurementControl-r3_INTERNAL_asn1__generated__MeasurementControl_r3_IEs_v390nonCriticalExtensions_INTERNAL__SequenceType_measurementControl-v390ext_INTERNAL_asn1__generated__MeasurementControl_v390ext_v3a0NonCriticalExtensions_INTERNAL__SequenceType_measurementControl-v3a0ext_INTERNAL_asn1__generated__MeasurementControl_v3a0ext_laterNonCriticalExtensions_INTERNAL__SequenceType_measurementControl-r3-add-ext_INTERNAL__v4b0NonCriticalExtensions_INTERNAL__SequenceType_v590NonCriticalExtensions_INTERNAL__SequenceType_measurementControl-v590ext_INTERNAL_asn1__generated__MeasurementControl_v590ext_IEs_v5b0NonCriticalExtensions_INTERNAL__SequenceType_measurementControl-v5b0ext_INTERNAL_asn1__generated__MeasurementControl_v5b0ext_IEs_v7xyNonCriticalExtensions_INTERNAL__SequenceType_measurementControl-v7xyext_INTERNAL_asn1__generated__MeasurementControl_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__ChoiceType_r4_INTERNAL__SequenceType_measurementControl-r4_INTERNAL_asn1__generated__MeasurementControl_r4_IEs_v4d0NonCriticalExtensions_INTERNAL__SequenceType_measurementControl-r4-add-ext_INTERNAL__v590NonCriticalExtensions_INTERNAL__SequenceType_measurementControl-v590ext_INTERNAL_asn1__generated__MeasurementControl_v590ext_IEs_v5b0NonCriticalExtensions_INTERNAL__SequenceType_measurementControl-v5b0ext_INTERNAL_asn1__generated__MeasurementControl_v5b0ext_IEs_v7xyNonCriticalExtensions_INTERNAL__SequenceType_measurementControl-v7xyext_INTERNAL_asn1__generated__MeasurementControl_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_later-than-r4_INTERNAL__SequenceType_rrc-TransactionIdentifier-MSP_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__ChoiceType_r6_INTERNAL__SequenceType_measurementControl-r6_INTERNAL_asn1__generated__MeasurementControl_r6_IEs_v6a0NonCriticalExtensions_INTERNAL__SequenceType_measurementControl-v6a0ext_INTERNAL_asn1__generated__MeasurementControl_v6a0ext_IEs_v7xyNonCriticalExtensions_INTERNAL__SequenceType_measurementControl-v7xyext_INTERNAL_asn1__generated__MeasurementControl_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void MeasurementControl::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void MeasurementControl_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::MeasurementIdentity::ValueType v;
      _measurementIdentity_Type.read(reader, v);
      value.set_measurementIdentity(v);
   }
   {
      asn1::generated::MeasurementCommand::ValueType v;
      _measurementCommand_Type.read(reader, v);
      value.set_measurementCommand(v);
   }
   {
      asn1::generated::MeasurementReportingMode::ValueType v;
      _measurementReportingMode_Type.read(reader, v);
      value.set_measurementReportingMode(v);
   }
   {
      asn1::generated::AdditionalMeasurementID_List::ValueType v;
      _additionalMeasurementList_Type.read(reader, v);
      value.set_additionalMeasurementList(v);
   }
   {
      asn1::generated::DPCH_CompressedModeStatusInfo::ValueType v;
      _dpch_CompressedModeStatusInfo_Type.read(reader, v);
      value.set_dpch_CompressedModeStatusInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementControl_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _measurementIdentity_Type.write(writer, value.get_measurementIdentity());
   _measurementCommand_Type.write(writer, value.get_measurementCommand());
   _measurementReportingMode_Type.write(writer, value.get_measurementReportingMode());
   _additionalMeasurementList_Type.write(writer, value.get_additionalMeasurementList());
   _dpch_CompressedModeStatusInfo_Type.write(writer, value.get_dpch_CompressedModeStatusInfo());

   writer.writeSequenceEnd();
}


void MeasurementControl_v390ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_Measurement_v390ext::ValueType v;
      _ue_Positioning_Measurement_v390ext_Type.read(reader, v);
      value.set_ue_Positioning_Measurement_v390ext(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementControl_v390ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_Positioning_Measurement_v390ext_Type.write(writer, value.get_ue_Positioning_Measurement_v390ext());

   writer.writeSequenceEnd();
}


void MeasurementControl_v3a0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SFN_Offset_Validity::ValueType v;
      _sfn_Offset_Validity_Type.read(reader, v);
      value.set_sfn_Offset_Validity(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementControl_v3a0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sfn_Offset_Validity_Type.write(writer, value.get_sfn_Offset_Validity());

   writer.writeSequenceEnd();
}


void MeasurementControl_r4_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MeasurementIdentity::ValueType v;
      _measurementIdentity_Type.read(reader, v);
      value.set_measurementIdentity(v);
   }
   {
      asn1::generated::MeasurementCommand_r4::ValueType v;
      _measurementCommand_Type.read(reader, v);
      value.set_measurementCommand(v);
   }
   {
      asn1::generated::MeasurementReportingMode::ValueType v;
      _measurementReportingMode_Type.read(reader, v);
      value.set_measurementReportingMode(v);
   }
   {
      asn1::generated::AdditionalMeasurementID_List::ValueType v;
      _additionalMeasurementList_Type.read(reader, v);
      value.set_additionalMeasurementList(v);
   }
   {
      asn1::generated::DPCH_CompressedModeStatusInfo::ValueType v;
      _dpch_CompressedModeStatusInfo_Type.read(reader, v);
      value.set_dpch_CompressedModeStatusInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementControl_r4_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _measurementIdentity_Type.write(writer, value.get_measurementIdentity());
   _measurementCommand_Type.write(writer, value.get_measurementCommand());
   _measurementReportingMode_Type.write(writer, value.get_measurementReportingMode());
   _additionalMeasurementList_Type.write(writer, value.get_additionalMeasurementList());
   _dpch_CompressedModeStatusInfo_Type.write(writer, value.get_dpch_CompressedModeStatusInfo());

   writer.writeSequenceEnd();
}


void MeasurementControl_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_intra-frequency_INTERNAL_asn1__generated__Intra_FreqEventCriteriaList_v590ext_inter-frequency_INTERNAL_asn1__generated__Inter_FreqEventCriteriaList_v590ext::ValueType v;
      _measurementCommand_v590ext_Type.read(reader, v);
      value.set_measurementCommand_v590ext(v);
   }
   {
      asn1::generated::IntraFreqReportingCriteria_1b_r5::ValueType v;
      _intraFreqReportingCriteria_1b_r5_Type.read(reader, v);
      value.set_intraFreqReportingCriteria_1b_r5(v);
   }
   {
      asn1::generated::IntraFreqEvent_1d_r5::ValueType v;
      _intraFreqEvent_1d_r5_Type.read(reader, v);
      value.set_intraFreqEvent_1d_r5(v);
   }
   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_MSP_v590ext_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier_MSP_v590ext(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementControl_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _measurementCommand_v590ext_Type.write(writer, value.get_measurementCommand_v590ext());
   _intraFreqReportingCriteria_1b_r5_Type.write(writer, value.get_intraFreqReportingCriteria_1b_r5());
   _intraFreqEvent_1d_r5_Type.write(writer, value.get_intraFreqEvent_1d_r5());
   _rrc_TransactionIdentifier_MSP_v590ext_Type.write(writer, value.get_rrc_TransactionIdentifier_MSP_v590ext());

   writer.writeSequenceEnd();
}


void MeasurementControl_v5b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterRATCellInfoIndication::ValueType v;
      _interRATCellInfoIndication_Type.read(reader, v);
      value.set_interRATCellInfoIndication(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementControl_v5b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interRATCellInfoIndication_Type.write(writer, value.get_interRATCellInfoIndication());

   writer.writeSequenceEnd();
}


void MeasurementControl_r6_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MeasurementIdentity::ValueType v;
      _measurementIdentity_Type.read(reader, v);
      value.set_measurementIdentity(v);
   }
   {
      asn1::generated::MeasurementCommand_r6::ValueType v;
      _measurementCommand_Type.read(reader, v);
      value.set_measurementCommand(v);
   }
   {
      asn1::generated::MeasurementReportingMode::ValueType v;
      _measurementReportingMode_Type.read(reader, v);
      value.set_measurementReportingMode(v);
   }
   {
      asn1::generated::AdditionalMeasurementID_List::ValueType v;
      _additionalMeasurementList_Type.read(reader, v);
      value.set_additionalMeasurementList(v);
   }
   {
      asn1::generated::DPCH_CompressedModeStatusInfo::ValueType v;
      _dpch_CompressedModeStatusInfo_Type.read(reader, v);
      value.set_dpch_CompressedModeStatusInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementControl_r6_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _measurementIdentity_Type.write(writer, value.get_measurementIdentity());
   _measurementCommand_Type.write(writer, value.get_measurementCommand());
   _measurementReportingMode_Type.write(writer, value.get_measurementReportingMode());
   _additionalMeasurementList_Type.write(writer, value.get_additionalMeasurementList());
   _dpch_CompressedModeStatusInfo_Type.write(writer, value.get_dpch_CompressedModeStatusInfo());

   writer.writeSequenceEnd();
}


void MeasurementControl_v6a0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqReportingCriteria_1b_r5::ValueType v;
      _intraFreqReportingCriteria_1b_r5_Type.read(reader, v);
      value.set_intraFreqReportingCriteria_1b_r5(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementControl_v6a0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqReportingCriteria_1b_r5_Type.write(writer, value.get_intraFreqReportingCriteria_1b_r5());

   writer.writeSequenceEnd();
}


void MeasurementControl_v7xyext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_Measurement_v7xyext::ValueType v;
      _ue_Positioning_Measurement_v7xyext_Type.read(reader, v);
      value.set_ue_Positioning_Measurement_v7xyext(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementControl_v7xyext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_Positioning_Measurement_v7xyext_Type.write(writer, value.get_ue_Positioning_Measurement_v7xyext());

   writer.writeSequenceEnd();
}


void MeasurementControlFailure::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::FailureCauseWithProtErr::ValueType v;
      _failureCause_Type.read(reader, v);
      value.set_failureCause(v);
   }
   {
      _INTERNAL__SequenceType_measurementControlFailure-r3-add-ext_INTERNAL__v590NonCriticalExtensions_INTERNAL__SequenceType_measurementControlFailure-v590ext_INTERNAL_asn1__generated__MeasurementControlFailure_v590ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementControlFailure::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _failureCause_Type.write(writer, value.get_failureCause());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void MeasurementControlFailure_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_MSP_v590ext_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier_MSP_v590ext(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementControlFailure_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_MSP_v590ext_Type.write(writer, value.get_rrc_TransactionIdentifier_MSP_v590ext());

   writer.writeSequenceEnd();
}


void MeasurementReport::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MeasurementIdentity::ValueType v;
      _measurementIdentity_Type.read(reader, v);
      value.set_measurementIdentity(v);
   }
   {
      asn1::generated::MeasuredResults::ValueType v;
      _measuredResults_Type.read(reader, v);
      value.set_measuredResults(v);
   }
   {
      asn1::generated::MeasuredResultsOnRACH::ValueType v;
      _measuredResultsOnRACH_Type.read(reader, v);
      value.set_measuredResultsOnRACH(v);
   }
   {
      asn1::generated::MeasuredResultsList::ValueType v;
      _additionalMeasuredResults_Type.read(reader, v);
      value.set_additionalMeasuredResults(v);
   }
   {
      asn1::generated::EventResults::ValueType v;
      _eventResults_Type.read(reader, v);
      value.set_eventResults(v);
   }
   {
      _INTERNAL__SequenceType_measurementReport-v390ext_INTERNAL_asn1__generated__MeasurementReport_v390ext_laterNonCriticalExtensions_INTERNAL__SequenceType_measurementReport-r3-add-ext_INTERNAL__v4b0NonCriticalExtensions_INTERNAL__SequenceType_measurementReport-v4b0ext_INTERNAL_asn1__generated__MeasurementReport_v4b0ext_IEs_v590NonCriticalExtensions_INTERNAL__SequenceType_measurementReport-v590ext_INTERNAL_asn1__generated__MeasurementReport_v590ext_IEs_v5b0NonCriticalExtensions_INTERNAL__SequenceType_measurementReport-v5b0ext_INTERNAL_asn1__generated__MeasurementReport_v5b0ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_measurementReport-v690ext_INTERNAL_asn1__generated__MeasurementReport_v690ext_IEs_v7xyNonCriticalExtensions_INTERNAL__SequenceType_measurementReport-v7xyext_INTERNAL_asn1__generated__MeasurementReport_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v390nonCriticalExtensions_Type.read(reader, v);
      value.set_v390nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementReport::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _measurementIdentity_Type.write(writer, value.get_measurementIdentity());
   _measuredResults_Type.write(writer, value.get_measuredResults());
   _measuredResultsOnRACH_Type.write(writer, value.get_measuredResultsOnRACH());
   _additionalMeasuredResults_Type.write(writer, value.get_additionalMeasuredResults());
   _eventResults_Type.write(writer, value.get_eventResults());
   _v390nonCriticalExtensions_Type.write(writer, value.get_v390nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void MeasurementReport_v390ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MeasuredResults_v390ext::ValueType v;
      _measuredResults_v390ext_Type.read(reader, v);
      value.set_measuredResults_v390ext(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementReport_v390ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _measuredResults_v390ext_Type.write(writer, value.get_measuredResults_v390ext());

   writer.writeSequenceEnd();
}


void MeasurementReport_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqEventResults_LCR_r4_ext::ValueType v;
      _interFreqEventResults_LCR_Type.read(reader, v);
      value.set_interFreqEventResults_LCR(v);
   }
   {
      asn1::generated::MeasuredResultsList_LCR_r4_ext::ValueType v;
      _additionalMeasuredResults_LCR_Type.read(reader, v);
      value.set_additionalMeasuredResults_LCR(v);
   }
   {
      asn1::generated::PrimaryCPICH_Info::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementReport_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqEventResults_LCR_Type.write(writer, value.get_interFreqEventResults_LCR());
   _additionalMeasuredResults_LCR_Type.write(writer, value.get_additionalMeasuredResults_LCR());
   _dummy_Type.write(writer, value.get_dummy());

   writer.writeSequenceEnd();
}


void MeasurementReport_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MeasuredResults_v590ext::ValueType v;
      _measuredResults_v590ext_Type.read(reader, v);
      value.set_measuredResults_v590ext(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementReport_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _measuredResults_v590ext_Type.write(writer, value.get_measuredResults_v590ext());

   writer.writeSequenceEnd();
}


void MeasurementReport_v5b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterRATCellInfoIndication::ValueType v;
      _interRATCellInfoIndication_Type.read(reader, v);
      value.set_interRATCellInfoIndication(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementReport_v5b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interRATCellInfoIndication_Type.write(writer, value.get_interRATCellInfoIndication());

   writer.writeSequenceEnd();
}


void MeasurementReport_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MeasuredResultsOnRACHinterFreq::ValueType v;
      _measuredResultsOnRACHinterFreq_Type.read(reader, v);
      value.set_measuredResultsOnRACHinterFreq(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementReport_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _measuredResultsOnRACHinterFreq_Type.write(writer, value.get_measuredResultsOnRACHinterFreq());

   writer.writeSequenceEnd();
}


void MeasurementReport_v7xyext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::VelocityEstimate::ValueType v;
      _velocityEstimate_Type.read(reader, v);
      value.set_velocityEstimate(v);
   }
   {
      asn1::generated::UE_InternalMeasuredResults_r7::ValueType v;
      _ue_InternalMeasuredResults_Type.read(reader, v);
      value.set_ue_InternalMeasuredResults(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementReport_v7xyext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _velocityEstimate_Type.write(writer, value.get_velocityEstimate());
   _ue_InternalMeasuredResults_Type.write(writer, value.get_ue_InternalMeasuredResults());

   writer.writeSequenceEnd();
}


void PagingType1::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PagingRecordList::ValueType v;
      _pagingRecordList_Type.read(reader, v);
      value.set_pagingRecordList(v);
   }
   {
      asn1::generated::BCCH_ModificationInfo::ValueType v;
      _bcch_ModificationInfo_Type.read(reader, v);
      value.set_bcch_ModificationInfo(v);
   }
   {
      _INTERNAL__SequenceType_pagingType1-r3-add-ext_INTERNAL__v590NonCriticalExtensions_INTERNAL__SequenceType_pagingType1-v590ext_INTERNAL_asn1__generated__PagingType1_v590ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void PagingType1::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pagingRecordList_Type.write(writer, value.get_pagingRecordList());
   _bcch_ModificationInfo_Type.write(writer, value.get_bcch_ModificationInfo());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void PagingType1_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PagingRecord2List_r5::ValueType v;
      _pagingRecord2List_Type.read(reader, v);
      value.set_pagingRecord2List(v);
   }

   reader.readSequenceEnd(*this);
}

void PagingType1_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pagingRecord2List_Type.write(writer, value.get_pagingRecord2List());

   writer.writeSequenceEnd();
}


void PagingType2::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::PagingCause::ValueType v;
      _pagingCause_Type.read(reader, v);
      value.set_pagingCause(v);
   }
   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _cn_DomainIdentity_Type.read(reader, v);
      value.set_cn_DomainIdentity(v);
   }
   {
      asn1::generated::PagingRecordTypeID::ValueType v;
      _pagingRecordTypeID_Type.read(reader, v);
      value.set_pagingRecordTypeID(v);
   }
   {
      _INTERNAL__SequenceType_pagingType2-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void PagingType2::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _pagingCause_Type.write(writer, value.get_pagingCause());
   _cn_DomainIdentity_Type.write(writer, value.get_cn_DomainIdentity());
   _pagingRecordTypeID_Type.write(writer, value.get_pagingRecordTypeID());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void PhysicalChannelReconfiguration::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_physicalChannelReconfiguration-r3_INTERNAL_asn1__generated__PhysicalChannelReconfiguration_r3_IEs_v3a0NonCriticalExtensions_INTERNAL__SequenceType_physicalChannelReconfiguration-v3a0ext_INTERNAL_asn1__generated__PhysicalChannelReconfiguration_v3a0ext_laterNonCriticalExtensions_INTERNAL__SequenceType_physicalChannelReconfiguration-r3-add-ext_INTERNAL__v4b0NonCriticalExtenstions_INTERNAL__SequenceType_physicalChannelReconfiguration-v4b0ext_INTERNAL_asn1__generated__PhysicalChannelReconfiguration_v4b0ext_IEs_v590NonCriticalExtenstions_INTERNAL__SequenceType_physicalChannelReconfiguration-v590ext_INTERNAL_asn1__generated__PhysicalChannelReconfiguration_v590ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_physicalChannelReconfiguration-v690ext_INTERNAL_asn1__generated__PhysicalChannelReconfiguration_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__ChoiceType_r4_INTERNAL__SequenceType_physicalChannelReconfiguration-r4_INTERNAL_asn1__generated__PhysicalChannelReconfiguration_r4_IEs_v4d0NonCriticalExtensions_INTERNAL__SequenceType_physicalChannelReconfiguration-r4-add-ext_INTERNAL__v590NonCriticalExtenstions_INTERNAL__SequenceType_physicalChannelReconfiguration-v590ext_INTERNAL_asn1__generated__PhysicalChannelReconfiguration_v590ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_physicalChannelReconfiguration-v690ext_INTERNAL_asn1__generated__PhysicalChannelReconfiguration_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r5_INTERNAL__SequenceType_physicalChannelReconfiguration-r5_INTERNAL_asn1__generated__PhysicalChannelReconfiguration_r5_IEs_physicalChannelReconfiguration-r5-add-ext_INTERNAL__v690NonCriticalExtensions_INTERNAL__SequenceType_physicalChannelReconfiguration-v690ext_INTERNAL_asn1__generated__PhysicalChannelReconfiguration_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r6_INTERNAL__SequenceType_physicalChannelReconfiguration-r6_INTERNAL_asn1__generated__PhysicalChannelReconfiguration_r6_IEs_physicalChannelReconfiguration-r6-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r7_INTERNAL__SequenceType_physicalChannelReconfiguration-r7_INTERNAL_asn1__generated__PhysicalChannelReconfiguration_r7_IEs_physicalChannelReconfiguration-r7-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void PhysicalChannelReconfiguration::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void PhysicalChannelReconfiguration_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_ChannelRequirementWithCPCH_SetID::ValueType v;
      _ul_ChannelRequirement_Type.read(reader, v);
      value.set_ul_ChannelRequirement(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__DL_PDSCH_Information_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::DL_CommonInformation::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalChannelReconfiguration_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_ChannelRequirement_Type.write(writer, value.get_ul_ChannelRequirement());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void PhysicalChannelReconfiguration_v3a0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalChannelReconfiguration_v3a0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());

   writer.writeSequenceEnd();
}


void PhysicalChannelReconfiguration_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SSDT_UL::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::CellIdentity_PerRL_List::ValueType v;
      _cell_id_PerRL_List_Type.read(reader, v);
      value.set_cell_id_PerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalChannelReconfiguration_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dummy_Type.write(writer, value.get_dummy());
   _cell_id_PerRL_List_Type.write(writer, value.get_cell_id_PerRL_List());

   writer.writeSequenceEnd();
}


void PhysicalChannelReconfiguration_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_TPC_PowerOffsetPerRL_List::ValueType v;
      _dl_TPC_PowerOffsetPerRL_List_Type.read(reader, v);
      value.set_dl_TPC_PowerOffsetPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalChannelReconfiguration_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_TPC_PowerOffsetPerRL_List_Type.write(writer, value.get_dl_TPC_PowerOffsetPerRL_List());

   writer.writeSequenceEnd();
}


void PhysicalChannelReconfiguration_r4_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_ChannelRequirementWithCPCH_SetID_r4::ValueType v;
      _ul_ChannelRequirement_Type.read(reader, v);
      value.set_ul_ChannelRequirement(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__DL_PDSCH_Information_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::DL_CommonInformation_r4::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r4::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalChannelReconfiguration_r4_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_ChannelRequirement_Type.write(writer, value.get_ul_ChannelRequirement());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void PhysicalChannelReconfiguration_r5_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::H_RNTI::ValueType v;
      _new_H_RNTI_Type.read(reader, v);
      value.set_new_H_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo_r5::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_ChannelRequirementWithCPCH_SetID_r5::ValueType v;
      _ul_ChannelRequirement_Type.read(reader, v);
      value.set_ul_ChannelRequirement(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__DL_PDSCH_Information_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::DL_HSPDSCH_Information::ValueType v;
      _dl_HSPDSCH_Information_Type.read(reader, v);
      value.set_dl_HSPDSCH_Information(v);
   }
   {
      asn1::generated::DL_CommonInformation_r5::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r5::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalChannelReconfiguration_r5_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _new_H_RNTI_Type.write(writer, value.get_new_H_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_ChannelRequirement_Type.write(writer, value.get_ul_ChannelRequirement());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _dl_HSPDSCH_Information_Type.write(writer, value.get_dl_HSPDSCH_Information());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void PhysicalChannelReconfiguration_r6_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::DelayRestrictionFlag::ValueType v;
      _delayRestrictionFlag_Type.read(reader, v);
      value.set_delayRestrictionFlag(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::H_RNTI::ValueType v;
      _new_H_RNTI_Type.read(reader, v);
      value.set_new_H_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newPrimary_E_RNTI_Type.read(reader, v);
      value.set_newPrimary_E_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newSecondary_E_RNTI_Type.read(reader, v);
      value.set_newSecondary_E_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo_r6::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo_r5::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_DPCH_Info_r6::ValueType v;
      _ul_DPCH_Info_Type.read(reader, v);
      value.set_ul_DPCH_Info(v);
   }
   {
      asn1::generated::UL_EDCH_Information_r6::ValueType v;
      _ul_EDCH_Information_Type.read(reader, v);
      value.set_ul_EDCH_Information(v);
   }
   {
      asn1::generated::DL_HSPDSCH_Information_r6::ValueType v;
      _dl_HSPDSCH_Information_Type.read(reader, v);
      value.set_dl_HSPDSCH_Information(v);
   }
   {
      asn1::generated::DL_CommonInformation_r6::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r6::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }
   {
      asn1::generated::MBMS_PL_ServiceRestrictInfo_r6::ValueType v;
      _mbms_PL_ServiceRestrictInfo_Type.read(reader, v);
      value.set_mbms_PL_ServiceRestrictInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalChannelReconfiguration_r6_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _delayRestrictionFlag_Type.write(writer, value.get_delayRestrictionFlag());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _new_H_RNTI_Type.write(writer, value.get_new_H_RNTI());
   _newPrimary_E_RNTI_Type.write(writer, value.get_newPrimary_E_RNTI());
   _newSecondary_E_RNTI_Type.write(writer, value.get_newSecondary_E_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_DPCH_Info_Type.write(writer, value.get_ul_DPCH_Info());
   _ul_EDCH_Information_Type.write(writer, value.get_ul_EDCH_Information());
   _dl_HSPDSCH_Information_Type.write(writer, value.get_dl_HSPDSCH_Information());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());
   _mbms_PL_ServiceRestrictInfo_Type.write(writer, value.get_mbms_PL_ServiceRestrictInfo());

   writer.writeSequenceEnd();
}


void PhysicalChannelReconfiguration_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DelayRestrictionFlag::ValueType v;
      _delayRestrictionFlag_Type.read(reader, v);
      value.set_delayRestrictionFlag(v);
   }
   {
      asn1::generated::PLMN_Identity::ValueType v;
      _primary_plmn_Identity_Type.read(reader, v);
      value.set_primary_plmn_Identity(v);
   }
   {
      asn1::generated::HARQ_Preamble_Mode::ValueType v;
      _harq_Preamble_Mode_Type.read(reader, v);
      value.set_harq_Preamble_Mode(v);
   }
   {
      asn1::generated::BEACON_PL_Est::ValueType v;
      _beaconPLEst_Type.read(reader, v);
      value.set_beaconPLEst(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _postVerificationPeriod_Type.read(reader, v);
      value.set_postVerificationPeriod(v);
   }
   {
      asn1::generated::DHS_Sync::ValueType v;
      _dhs_sync_Type.read(reader, v);
      value.set_dhs_sync(v);
   }
   {
      asn1::generated::TimingMaintainedSynchInd::ValueType v;
      _timingMaintainedSynchInd_Type.read(reader, v);
      value.set_timingMaintainedSynchInd(v);
   }
   {
      asn1::generated::MBMS_PL_ServiceRestrictInfo_r6::ValueType v;
      _mbms_PL_ServiceRestrictInfo_Type.read(reader, v);
      value.set_mbms_PL_ServiceRestrictInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalChannelReconfiguration_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _delayRestrictionFlag_Type.write(writer, value.get_delayRestrictionFlag());
   _primary_plmn_Identity_Type.write(writer, value.get_primary_plmn_Identity());
   _harq_Preamble_Mode_Type.write(writer, value.get_harq_Preamble_Mode());
   _beaconPLEst_Type.write(writer, value.get_beaconPLEst());
   _postVerificationPeriod_Type.write(writer, value.get_postVerificationPeriod());
   _dhs_sync_Type.write(writer, value.get_dhs_sync());
   _timingMaintainedSynchInd_Type.write(writer, value.get_timingMaintainedSynchInd());
   _mbms_PL_ServiceRestrictInfo_Type.write(writer, value.get_mbms_PL_ServiceRestrictInfo());

   writer.writeSequenceEnd();
}


void PhysicalChannelReconfiguration_r7_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::DelayRestrictionFlag::ValueType v;
      _delayRestrictionFlag_Type.read(reader, v);
      value.set_delayRestrictionFlag(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::H_RNTI::ValueType v;
      _new_H_RNTI_Type.read(reader, v);
      value.set_new_H_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newPrimary_E_RNTI_Type.read(reader, v);
      value.set_newPrimary_E_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newSecondary_E_RNTI_Type.read(reader, v);
      value.set_newSecondary_E_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo_r6::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo_r5::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_DPCH_Info_r7::ValueType v;
      _ul_DPCH_Info_Type.read(reader, v);
      value.set_ul_DPCH_Info(v);
   }
   {
      asn1::generated::UL_EDCH_Information_r6::ValueType v;
      _ul_EDCH_Information_Type.read(reader, v);
      value.set_ul_EDCH_Information(v);
   }
   {
      asn1::generated::DL_HSPDSCH_Information_r7::ValueType v;
      _dl_HSPDSCH_Information_Type.read(reader, v);
      value.set_dl_HSPDSCH_Information(v);
   }
   {
      asn1::generated::DL_CommonInformation_r7::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r7::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }
   {
      asn1::generated::MBMS_PL_ServiceRestrictInfo_r6::ValueType v;
      _mbms_PL_ServiceRestrictInfo_Type.read(reader, v);
      value.set_mbms_PL_ServiceRestrictInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalChannelReconfiguration_r7_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _delayRestrictionFlag_Type.write(writer, value.get_delayRestrictionFlag());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _new_H_RNTI_Type.write(writer, value.get_new_H_RNTI());
   _newPrimary_E_RNTI_Type.write(writer, value.get_newPrimary_E_RNTI());
   _newSecondary_E_RNTI_Type.write(writer, value.get_newSecondary_E_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_DPCH_Info_Type.write(writer, value.get_ul_DPCH_Info());
   _ul_EDCH_Information_Type.write(writer, value.get_ul_EDCH_Information());
   _dl_HSPDSCH_Information_Type.write(writer, value.get_dl_HSPDSCH_Information());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());
   _mbms_PL_ServiceRestrictInfo_Type.write(writer, value.get_mbms_PL_ServiceRestrictInfo());

   writer.writeSequenceEnd();
}


void PhysicalChannelReconfigurationComplete::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::IntegrityProtActivationInfo::ValueType v;
      _ul_IntegProtActivationInfo_Type.read(reader, v);
      value.set_ul_IntegProtActivationInfo(v);
   }
   {
      asn1::generated::UL_TimingAdvance::ValueType v;
      _ul_TimingAdvance_Type.read(reader, v);
      value.set_ul_TimingAdvance(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _count_C_ActivationTime_Type.read(reader, v);
      value.set_count_C_ActivationTime(v);
   }
   {
      asn1::generated::RB_ActivationTimeInfoList::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::UL_CounterSynchronisationInfo::ValueType v;
      _ul_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_ul_CounterSynchronisationInfo(v);
   }
   {
      _INTERNAL__SequenceType_physicalChannelReconfigurationComplete-r3-add-ext_INTERNAL__v7xyNonCriticalExtensions_INTERNAL__SequenceType_physicalChannelReconfigurationComplete-v7xyext_INTERNAL_asn1__generated__PhysicalChannelReconfigurationComplete_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalChannelReconfigurationComplete::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _ul_IntegProtActivationInfo_Type.write(writer, value.get_ul_IntegProtActivationInfo());
   _ul_TimingAdvance_Type.write(writer, value.get_ul_TimingAdvance());
   _count_C_ActivationTime_Type.write(writer, value.get_count_C_ActivationTime());
   _dummy_Type.write(writer, value.get_dummy());
   _ul_CounterSynchronisationInfo_Type.write(writer, value.get_ul_CounterSynchronisationInfo());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void PhysicalChannelReconfigurationComplete_v7xyext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::EXT_UL_TimingAdvance::ValueType v;
      _ext_ul_TimingAdvance_Type.read(reader, v);
      value.set_ext_ul_TimingAdvance(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalChannelReconfigurationComplete_v7xyext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ext_ul_TimingAdvance_Type.write(writer, value.get_ext_ul_TimingAdvance());

   writer.writeSequenceEnd();
}


void PhysicalChannelReconfigurationFailure::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::FailureCauseWithProtErr::ValueType v;
      _failureCause_Type.read(reader, v);
      value.set_failureCause(v);
   }
   {
      _INTERNAL__SequenceType_physicalChannelReconfigurationFailure-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalChannelReconfigurationFailure::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _failureCause_Type.write(writer, value.get_failureCause());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void PhysicalSharedChannelAllocation::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_physicalSharedChannelAllocation-r3_INTERNAL_asn1__generated__PhysicalSharedChannelAllocation_r3_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_physicalSharedChannelAllocation-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_dsch-RNTI_INTERNAL_asn1__generated__DSCH_RNTI_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__ChoiceType_r4_INTERNAL__SequenceType_physicalSharedChannelAllocation-r4_INTERNAL_asn1__generated__PhysicalSharedChannelAllocation_r4_IEs_v4d0NonCriticalExtensions_INTERNAL__SequenceType_physicalSharedChannelAllocation-r4-add-ext_INTERNAL__v690NonCriticalExtensions_INTERNAL__SequenceType_physicalSharedChannelAllocation-v690ext_INTERNAL_asn1__generated__PhysicalSharedChannelAllocation_v690ext_IEs_v7xyNonCriticalExtensions_INTERNAL__SequenceType_physicalSharedChannelAllocation-v7xyext_INTERNAL_asn1__generated__PhysicalSharedChannelAllocation_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void PhysicalSharedChannelAllocation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void PhysicalSharedChannelAllocation_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _dsch_RNTI_Type.read(reader, v);
      value.set_dsch_RNTI(v);
   }
   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::UL_TimingAdvanceControl::ValueType v;
      _ul_TimingAdvance_Type.read(reader, v);
      value.set_ul_TimingAdvance(v);
   }
   {
      asn1::generated::PUSCH_CapacityAllocationInfo::ValueType v;
      _pusch_CapacityAllocationInfo_Type.read(reader, v);
      value.set_pusch_CapacityAllocationInfo(v);
   }
   {
      asn1::generated::PDSCH_CapacityAllocationInfo::ValueType v;
      _pdsch_CapacityAllocationInfo_Type.read(reader, v);
      value.set_pdsch_CapacityAllocationInfo(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _confirmRequest_Type.read(reader, v);
      value.set_confirmRequest(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _trafficVolumeReportRequest_Type.read(reader, v);
      value.set_trafficVolumeReportRequest(v);
   }
   {
      asn1::generated::TimeslotList::ValueType v;
      _iscpTimeslotList_Type.read(reader, v);
      value.set_iscpTimeslotList(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _requestPCCPCHRSCP_Type.read(reader, v);
      value.set_requestPCCPCHRSCP(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalSharedChannelAllocation_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dsch_RNTI_Type.write(writer, value.get_dsch_RNTI());
   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _ul_TimingAdvance_Type.write(writer, value.get_ul_TimingAdvance());
   _pusch_CapacityAllocationInfo_Type.write(writer, value.get_pusch_CapacityAllocationInfo());
   _pdsch_CapacityAllocationInfo_Type.write(writer, value.get_pdsch_CapacityAllocationInfo());
   _confirmRequest_Type.write(writer, value.get_confirmRequest());
   _trafficVolumeReportRequest_Type.write(writer, value.get_trafficVolumeReportRequest());
   _iscpTimeslotList_Type.write(writer, value.get_iscpTimeslotList());
   _requestPCCPCHRSCP_Type.write(writer, value.get_requestPCCPCHRSCP());

   writer.writeSequenceEnd();
}


void PhysicalSharedChannelAllocation_r4_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_TimingAdvanceControl_r4::ValueType v;
      _ul_TimingAdvance_Type.read(reader, v);
      value.set_ul_TimingAdvance(v);
   }
   {
      asn1::generated::PUSCH_CapacityAllocationInfo_r4::ValueType v;
      _pusch_CapacityAllocationInfo_Type.read(reader, v);
      value.set_pusch_CapacityAllocationInfo(v);
   }
   {
      asn1::generated::PDSCH_CapacityAllocationInfo_r4::ValueType v;
      _pdsch_CapacityAllocationInfo_Type.read(reader, v);
      value.set_pdsch_CapacityAllocationInfo(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _confirmRequest_Type.read(reader, v);
      value.set_confirmRequest(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _trafficVolumeReportRequest_Type.read(reader, v);
      value.set_trafficVolumeReportRequest(v);
   }
   {
      asn1::generated::TimeslotList_r4::ValueType v;
      _iscpTimeslotList_Type.read(reader, v);
      value.set_iscpTimeslotList(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _requestPCCPCHRSCP_Type.read(reader, v);
      value.set_requestPCCPCHRSCP(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalSharedChannelAllocation_r4_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_TimingAdvance_Type.write(writer, value.get_ul_TimingAdvance());
   _pusch_CapacityAllocationInfo_Type.write(writer, value.get_pusch_CapacityAllocationInfo());
   _pdsch_CapacityAllocationInfo_Type.write(writer, value.get_pdsch_CapacityAllocationInfo());
   _confirmRequest_Type.write(writer, value.get_confirmRequest());
   _trafficVolumeReportRequest_Type.write(writer, value.get_trafficVolumeReportRequest());
   _iscpTimeslotList_Type.write(writer, value.get_iscpTimeslotList());
   _requestPCCPCHRSCP_Type.write(writer, value.get_requestPCCPCHRSCP());

   writer.writeSequenceEnd();
}


void PhysicalSharedChannelAllocation_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::BEACON_PL_Est::ValueType v;
      _beaconPLEst_Type.read(reader, v);
      value.set_beaconPLEst(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalSharedChannelAllocation_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _beaconPLEst_Type.write(writer, value.get_beaconPLEst());

   writer.writeSequenceEnd();
}


void PhysicalSharedChannelAllocation_v7xyext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_TimingAdvanceControl_r7::ValueType v;
      _ul_TimingAdvance_Type.read(reader, v);
      value.set_ul_TimingAdvance(v);
   }
   {
      asn1::generated::PUSCH_CapacityAllocationInfo_r7::ValueType v;
      _pusch_CapacityAllocationInfo_Type.read(reader, v);
      value.set_pusch_CapacityAllocationInfo(v);
   }
   {
      asn1::generated::PDSCH_CapacityAllocationInfo_r7::ValueType v;
      _pdsch_CapacityAllocationInfo_Type.read(reader, v);
      value.set_pdsch_CapacityAllocationInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalSharedChannelAllocation_v7xyext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_TimingAdvance_Type.write(writer, value.get_ul_TimingAdvance());
   _pusch_CapacityAllocationInfo_Type.write(writer, value.get_pusch_CapacityAllocationInfo());
   _pdsch_CapacityAllocationInfo_Type.write(writer, value.get_pdsch_CapacityAllocationInfo());

   writer.writeSequenceEnd();
}


void PUSCHCapacityRequest::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _dsch_RNTI_Type.read(reader, v);
      value.set_dsch_RNTI(v);
   }
   {
      asn1::generated::TrafficVolumeMeasuredResultsList::ValueType v;
      _trafficVolume_Type.read(reader, v);
      value.set_trafficVolume(v);
   }
   {
      asn1::generated::TimeslotListWithISCP::ValueType v;
      _timeslotListWithISCP_Type.read(reader, v);
      value.set_timeslotListWithISCP(v);
   }
   {
      asn1::generated::PrimaryCCPCH_RSCP::ValueType v;
      _primaryCCPCH_RSCP_Type.read(reader, v);
      value.set_primaryCCPCH_RSCP(v);
   }
   {
      _INTERNAL__ChoiceType_pdschConfirmation_INTERNAL_asn1__generated__PDSCH_Identity_puschConfirmation_INTERNAL_asn1__generated__PUSCH_Identity::ValueType v;
      _allocationConfirmation_Type.read(reader, v);
      value.set_allocationConfirmation(v);
   }
   {
      asn1::generated::ProtocolErrorIndicatorWithMoreInfo::ValueType v;
      _protocolErrorIndicator_Type.read(reader, v);
      value.set_protocolErrorIndicator(v);
   }
   {
      _INTERNAL__SequenceType_puschCapacityRequest-r3-add-ext_INTERNAL__v590NonCriticalExtensions_INTERNAL__SequenceType_puschCapacityRequest-v590ext_INTERNAL_asn1__generated__PUSCHCapacityRequest_v590ext_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void PUSCHCapacityRequest::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dsch_RNTI_Type.write(writer, value.get_dsch_RNTI());
   _trafficVolume_Type.write(writer, value.get_trafficVolume());
   _timeslotListWithISCP_Type.write(writer, value.get_timeslotListWithISCP());
   _primaryCCPCH_RSCP_Type.write(writer, value.get_primaryCCPCH_RSCP());
   _allocationConfirmation_Type.write(writer, value.get_allocationConfirmation());
   _protocolErrorIndicator_Type.write(writer, value.get_protocolErrorIndicator());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void PUSCHCapacityRequest_v590ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DeltaRSCP::ValueType v;
      _primaryCCPCH_RSCP_delta_Type.read(reader, v);
      value.set_primaryCCPCH_RSCP_delta(v);
   }

   reader.readSequenceEnd(*this);
}

void PUSCHCapacityRequest_v590ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _primaryCCPCH_RSCP_delta_Type.write(writer, value.get_primaryCCPCH_RSCP_delta());

   writer.writeSequenceEnd();
}


void RadioBearerReconfiguration::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_radioBearerReconfiguration-r3_INTERNAL_asn1__generated__RadioBearerReconfiguration_r3_IEs_v3aoNonCriticalExtensions_INTERNAL__SequenceType_radioBearerReconfiguration-v3a0ext_INTERNAL_asn1__generated__RadioBearerReconfiguration_v3a0ext_laterNonCriticalExtensions_INTERNAL__SequenceType_radioBearerReconfiguration-r3-add-ext_INTERNAL__v4b0NonCriticalExtensions_INTERNAL__SequenceType_radioBearerReconfiguration-v4b0ext_INTERNAL_asn1__generated__RadioBearerReconfiguration_v4b0ext_IEs_v590NonCriticalExtensions_INTERNAL__SequenceType_radioBearerReconfiguration-v590ext_INTERNAL_asn1__generated__RadioBearerReconfiguration_v590ext_IEs_v5d0NonCriticalExtenstions_INTERNAL__SequenceType_radioBearerReconfiguration-v5d0ext_INTERNAL_asn1__generated__RadioBearerReconfiguration_v5d0ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_radioBearerReconfiguration-v690ext_INTERNAL_asn1__generated__RadioBearerReconfiguration_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__ChoiceType_r4_INTERNAL__SequenceType_radioBearerReconfiguration-r4_INTERNAL_asn1__generated__RadioBearerReconfiguration_r4_IEs_v4d0NonCriticalExtensions_INTERNAL__SequenceType_radioBearerReconfiguration-r4-add-ext_INTERNAL__v590NonCriticalExtensions_INTERNAL__SequenceType_radioBearerReconfiguration-v590ext_INTERNAL_asn1__generated__RadioBearerReconfiguration_v590ext_IEs_v5d0NonCriticalExtenstions_INTERNAL__SequenceType_radioBearerReconfiguration-v5d0ext_INTERNAL_asn1__generated__RadioBearerReconfiguration_v5d0ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_radioBearerReconfiguration-v690ext_INTERNAL_asn1__generated__RadioBearerReconfiguration_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r5_INTERNAL__SequenceType_radioBearerReconfiguration-r5_INTERNAL_asn1__generated__RadioBearerReconfiguration_r5_IEs_radioBearerReconfiguration-r5-add-ext_INTERNAL__v5d0NonCriticalExtenstions_INTERNAL__SequenceType_radioBearerReconfiguration-v5d0ext_INTERNAL_asn1__generated__RadioBearerReconfiguration_v5d0ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_radioBearerReconfiguration-v690ext_INTERNAL_asn1__generated__RadioBearerReconfiguration_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r6_INTERNAL__SequenceType_radioBearerReconfiguration-r6_INTERNAL_asn1__generated__RadioBearerReconfiguration_r6_IEs_radioBearerReconfiguration-r6-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r7_INTERNAL__SequenceType_radioBearerReconfiguration-r7_INTERNAL_asn1__generated__RadioBearerReconfiguration_r7_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void RadioBearerReconfiguration::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void RadioBearerReconfiguration_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::RAB_InformationReconfigList::ValueType v;
      _rab_InformationReconfigList_Type.read(reader, v);
      value.set_rab_InformationReconfigList(v);
   }
   {
      asn1::generated::RB_InformationReconfigList::ValueType v;
      _rb_InformationReconfigList_Type.read(reader, v);
      value.set_rb_InformationReconfigList(v);
   }
   {
      asn1::generated::RB_InformationAffectedList::ValueType v;
      _rb_InformationAffectedList_Type.read(reader, v);
      value.set_rb_InformationAffectedList(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_DeletedTransChInfoList::ValueType v;
      _ul_deletedTransChInfoList_Type.read(reader, v);
      value.set_ul_deletedTransChInfoList(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy1_INTERNAL_asn1__generated__CPCH_SetID_dummy2_INTERNAL_asn1__generated__DRAC_StaticInformationList_tdd_INTERNAL_asn1__NullType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_DeletedTransChInfoList::ValueType v;
      _dl_DeletedTransChInfoList_Type.read(reader, v);
      value.set_dl_DeletedTransChInfoList(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfo2List::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_ChannelRequirement::ValueType v;
      _ul_ChannelRequirement_Type.read(reader, v);
      value.set_ul_ChannelRequirement(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__DL_PDSCH_Information_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificPhysChInfo_Type.read(reader, v);
      value.set_modeSpecificPhysChInfo(v);
   }
   {
      asn1::generated::DL_CommonInformation::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerReconfiguration_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _rab_InformationReconfigList_Type.write(writer, value.get_rab_InformationReconfigList());
   _rb_InformationReconfigList_Type.write(writer, value.get_rb_InformationReconfigList());
   _rb_InformationAffectedList_Type.write(writer, value.get_rb_InformationAffectedList());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_deletedTransChInfoList_Type.write(writer, value.get_ul_deletedTransChInfoList());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _dummy_Type.write(writer, value.get_dummy());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_DeletedTransChInfoList_Type.write(writer, value.get_dl_DeletedTransChInfoList());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_ChannelRequirement_Type.write(writer, value.get_ul_ChannelRequirement());
   _modeSpecificPhysChInfo_Type.write(writer, value.get_modeSpecificPhysChInfo());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void RadioBearerReconfiguration_v3a0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerReconfiguration_v3a0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());

   writer.writeSequenceEnd();
}


void RadioBearerReconfiguration_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SSDT_UL::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::CellIdentity_PerRL_List::ValueType v;
      _cell_id_PerRL_List_Type.read(reader, v);
      value.set_cell_id_PerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerReconfiguration_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dummy_Type.write(writer, value.get_dummy());
   _cell_id_PerRL_List_Type.write(writer, value.get_cell_id_PerRL_List());

   writer.writeSequenceEnd();
}


void RadioBearerReconfiguration_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_TPC_PowerOffsetPerRL_List::ValueType v;
      _dl_TPC_PowerOffsetPerRL_List_Type.read(reader, v);
      value.set_dl_TPC_PowerOffsetPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerReconfiguration_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_TPC_PowerOffsetPerRL_List_Type.write(writer, value.get_dl_TPC_PowerOffsetPerRL_List());

   writer.writeSequenceEnd();
}


void RadioBearerReconfiguration_v5d0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PDCP_ROHC_TargetMode::ValueType v;
      _pdcp_ROHC_TargetMode_Type.read(reader, v);
      value.set_pdcp_ROHC_TargetMode(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerReconfiguration_v5d0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pdcp_ROHC_TargetMode_Type.write(writer, value.get_pdcp_ROHC_TargetMode());

   writer.writeSequenceEnd();
}


void RadioBearerReconfiguration_r4_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::RAB_InformationReconfigList::ValueType v;
      _rab_InformationReconfigList_Type.read(reader, v);
      value.set_rab_InformationReconfigList(v);
   }
   {
      asn1::generated::RB_InformationReconfigList_r4::ValueType v;
      _rb_InformationReconfigList_Type.read(reader, v);
      value.set_rb_InformationReconfigList(v);
   }
   {
      asn1::generated::RB_InformationAffectedList::ValueType v;
      _rb_InformationAffectedList_Type.read(reader, v);
      value.set_rb_InformationAffectedList(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo_r4::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_DeletedTransChInfoList::ValueType v;
      _ul_deletedTransChInfoList_Type.read(reader, v);
      value.set_ul_deletedTransChInfoList(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy1_INTERNAL_asn1__generated__CPCH_SetID_dummy2_INTERNAL_asn1__generated__DRAC_StaticInformationList_tdd_INTERNAL_asn1__NullType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo_r4::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_DeletedTransChInfoList::ValueType v;
      _dl_DeletedTransChInfoList_Type.read(reader, v);
      value.set_dl_DeletedTransChInfoList(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList_r4::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_ChannelRequirement_r4::ValueType v;
      _ul_ChannelRequirement_Type.read(reader, v);
      value.set_ul_ChannelRequirement(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__DL_PDSCH_Information_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificPhysChInfo_Type.read(reader, v);
      value.set_modeSpecificPhysChInfo(v);
   }
   {
      asn1::generated::DL_CommonInformation_r4::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r4::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerReconfiguration_r4_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _rab_InformationReconfigList_Type.write(writer, value.get_rab_InformationReconfigList());
   _rb_InformationReconfigList_Type.write(writer, value.get_rb_InformationReconfigList());
   _rb_InformationAffectedList_Type.write(writer, value.get_rb_InformationAffectedList());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_deletedTransChInfoList_Type.write(writer, value.get_ul_deletedTransChInfoList());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _dummy_Type.write(writer, value.get_dummy());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_DeletedTransChInfoList_Type.write(writer, value.get_dl_DeletedTransChInfoList());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_ChannelRequirement_Type.write(writer, value.get_ul_ChannelRequirement());
   _modeSpecificPhysChInfo_Type.write(writer, value.get_modeSpecificPhysChInfo());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void RadioBearerReconfiguration_r5_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::H_RNTI::ValueType v;
      _new_H_RNTI_Type.read(reader, v);
      value.set_new_H_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      _INTERNAL__ChoiceType_complete_INTERNAL__SequenceType_rab-InformationReconfigList_INTERNAL_asn1__generated__RAB_InformationReconfigList_rb-InformationReconfigList_INTERNAL_asn1__generated__RB_InformationReconfigList_r5_rb-InformationAffectedList_INTERNAL_asn1__generated__RB_InformationAffectedList_r5_rb-PDCPContextRelocationList_INTERNAL_asn1__generated__RB_PDCPContextRelocationList_ul-CommonTransChInfo_INTERNAL_asn1__generated__UL_CommonTransChInfo_r4_ul-deletedTransChInfoList_INTERNAL_asn1__generated__UL_DeletedTransChInfoList_ul-AddReconfTransChInfoList_INTERNAL_asn1__generated__UL_AddReconfTransChInfoList_dummy_INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy1_INTERNAL_asn1__generated__CPCH_SetID_dummy2_INTERNAL_asn1__generated__DRAC_StaticInformationList_tdd_INTERNAL_asn1__NullType_dl-CommonTransChInfo_INTERNAL_asn1__generated__DL_CommonTransChInfo_r4_dl-DeletedTransChInfoList_INTERNAL_asn1__generated__DL_DeletedTransChInfoList_r5_dl-AddReconfTransChInfoList_INTERNAL_asn1__generated__DL_AddReconfTransChInfoList_r5_preconfiguration_INTERNAL__SequenceType_preConfigMode_INTERNAL__ChoiceType_predefinedConfigIdentity_INTERNAL_asn1__generated__PredefinedConfigIdentity_defaultConfig_INTERNAL__SequenceType_defaultConfigMode_INTERNAL_asn1__generated__DefaultConfigMode_defaultConfigIdentity_INTERNAL_asn1__generated__DefaultConfigIdentity_r5::ValueType v;
      _specificationMode_Type.read(reader, v);
      value.set_specificationMode(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_ChannelRequirement_r5::ValueType v;
      _ul_ChannelRequirement_Type.read(reader, v);
      value.set_ul_ChannelRequirement(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__DL_PDSCH_Information_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificPhysChInfo_Type.read(reader, v);
      value.set_modeSpecificPhysChInfo(v);
   }
   {
      asn1::generated::DL_HSPDSCH_Information::ValueType v;
      _dl_HSPDSCH_Information_Type.read(reader, v);
      value.set_dl_HSPDSCH_Information(v);
   }
   {
      asn1::generated::DL_CommonInformation_r5::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r5::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerReconfiguration_r5_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _new_H_RNTI_Type.write(writer, value.get_new_H_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _specificationMode_Type.write(writer, value.get_specificationMode());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_ChannelRequirement_Type.write(writer, value.get_ul_ChannelRequirement());
   _modeSpecificPhysChInfo_Type.write(writer, value.get_modeSpecificPhysChInfo());
   _dl_HSPDSCH_Information_Type.write(writer, value.get_dl_HSPDSCH_Information());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void RadioBearerReconfiguration_r6_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::DelayRestrictionFlag::ValueType v;
      _delayRestrictionFlag_Type.read(reader, v);
      value.set_delayRestrictionFlag(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::H_RNTI::ValueType v;
      _new_H_RNTI_Type.read(reader, v);
      value.set_new_H_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newPrimary_E_RNTI_Type.read(reader, v);
      value.set_newPrimary_E_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newSecondary_E_RNTI_Type.read(reader, v);
      value.set_newSecondary_E_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo_r6::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      _INTERNAL__ChoiceType_complete_INTERNAL__SequenceType_rab-InformationReconfigList_INTERNAL_asn1__generated__RAB_InformationReconfigList_rb-InformationReconfigList_INTERNAL_asn1__generated__RB_InformationReconfigList_r6_rb-InformationAffectedList_INTERNAL_asn1__generated__RB_InformationAffectedList_r6_rb-PDCPContextRelocationList_INTERNAL_asn1__generated__RB_PDCPContextRelocationList_pdcp-ROHC-TargetMode_INTERNAL_asn1__generated__PDCP_ROHC_TargetMode_ul-CommonTransChInfo_INTERNAL_asn1__generated__UL_CommonTransChInfo_r4_ul-deletedTransChInfoList_INTERNAL_asn1__generated__UL_DeletedTransChInfoList_r6_ul-AddReconfTransChInfoList_INTERNAL_asn1__generated__UL_AddReconfTransChInfoList_r6_dl-CommonTransChInfo_INTERNAL_asn1__generated__DL_CommonTransChInfo_r4_dl-DeletedTransChInfoList_INTERNAL_asn1__generated__DL_DeletedTransChInfoList_r5_dl-AddReconfTransChInfoList_INTERNAL_asn1__generated__DL_AddReconfTransChInfoList_r5_preconfiguration_INTERNAL__SequenceType_preConfigMode_INTERNAL__ChoiceType_predefinedConfigIdentity_INTERNAL_asn1__generated__PredefinedConfigIdentity_defaultConfig_INTERNAL__SequenceType_defaultConfigMode_INTERNAL_asn1__generated__DefaultConfigMode_defaultConfigIdentity_INTERNAL_asn1__generated__DefaultConfigIdentity_r6::ValueType v;
      _specificationMode_Type.read(reader, v);
      value.set_specificationMode(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_DPCH_Info_r6::ValueType v;
      _ul_DPCH_Info_Type.read(reader, v);
      value.set_ul_DPCH_Info(v);
   }
   {
      asn1::generated::UL_EDCH_Information_r6::ValueType v;
      _ul_EDCH_Information_Type.read(reader, v);
      value.set_ul_EDCH_Information(v);
   }
   {
      asn1::generated::DL_HSPDSCH_Information_r6::ValueType v;
      _dl_HSPDSCH_Information_Type.read(reader, v);
      value.set_dl_HSPDSCH_Information(v);
   }
   {
      asn1::generated::DL_CommonInformation_r6::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r6::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }
   {
      asn1::generated::MBMS_PL_ServiceRestrictInfo_r6::ValueType v;
      _mbms_PL_ServiceRestrictInfo_Type.read(reader, v);
      value.set_mbms_PL_ServiceRestrictInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerReconfiguration_r6_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _delayRestrictionFlag_Type.write(writer, value.get_delayRestrictionFlag());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _new_H_RNTI_Type.write(writer, value.get_new_H_RNTI());
   _newPrimary_E_RNTI_Type.write(writer, value.get_newPrimary_E_RNTI());
   _newSecondary_E_RNTI_Type.write(writer, value.get_newSecondary_E_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _specificationMode_Type.write(writer, value.get_specificationMode());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_DPCH_Info_Type.write(writer, value.get_ul_DPCH_Info());
   _ul_EDCH_Information_Type.write(writer, value.get_ul_EDCH_Information());
   _dl_HSPDSCH_Information_Type.write(writer, value.get_dl_HSPDSCH_Information());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());
   _mbms_PL_ServiceRestrictInfo_Type.write(writer, value.get_mbms_PL_ServiceRestrictInfo());

   writer.writeSequenceEnd();
}


void RadioBearerReconfiguration_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DelayRestrictionFlag::ValueType v;
      _delayRestrictionFlag_Type.read(reader, v);
      value.set_delayRestrictionFlag(v);
   }
   {
      asn1::generated::PLMN_Identity::ValueType v;
      _primary_plmn_Identity_Type.read(reader, v);
      value.set_primary_plmn_Identity(v);
   }
   {
      asn1::generated::HARQ_Preamble_Mode::ValueType v;
      _harq_Preamble_Mode_Type.read(reader, v);
      value.set_harq_Preamble_Mode(v);
   }
   {
      asn1::generated::BEACON_PL_Est::ValueType v;
      _beaconPLEst_Type.read(reader, v);
      value.set_beaconPLEst(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _postVerificationPeriod_Type.read(reader, v);
      value.set_postVerificationPeriod(v);
   }
   {
      asn1::generated::DHS_Sync::ValueType v;
      _dhs_sync_Type.read(reader, v);
      value.set_dhs_sync(v);
   }
   {
      asn1::generated::TimingMaintainedSynchInd::ValueType v;
      _timingMaintainedSynchInd_Type.read(reader, v);
      value.set_timingMaintainedSynchInd(v);
   }
   {
      asn1::generated::MBMS_PL_ServiceRestrictInfo_r6::ValueType v;
      _mbms_PL_ServiceRestrictInfo_Type.read(reader, v);
      value.set_mbms_PL_ServiceRestrictInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerReconfiguration_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _delayRestrictionFlag_Type.write(writer, value.get_delayRestrictionFlag());
   _primary_plmn_Identity_Type.write(writer, value.get_primary_plmn_Identity());
   _harq_Preamble_Mode_Type.write(writer, value.get_harq_Preamble_Mode());
   _beaconPLEst_Type.write(writer, value.get_beaconPLEst());
   _postVerificationPeriod_Type.write(writer, value.get_postVerificationPeriod());
   _dhs_sync_Type.write(writer, value.get_dhs_sync());
   _timingMaintainedSynchInd_Type.write(writer, value.get_timingMaintainedSynchInd());
   _mbms_PL_ServiceRestrictInfo_Type.write(writer, value.get_mbms_PL_ServiceRestrictInfo());

   writer.writeSequenceEnd();
}


void RadioBearerReconfiguration_r7_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::DelayRestrictionFlag::ValueType v;
      _delayRestrictionFlag_Type.read(reader, v);
      value.set_delayRestrictionFlag(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::H_RNTI::ValueType v;
      _new_H_RNTI_Type.read(reader, v);
      value.set_new_H_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newPrimary_E_RNTI_Type.read(reader, v);
      value.set_newPrimary_E_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newSecondary_E_RNTI_Type.read(reader, v);
      value.set_newSecondary_E_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo_r6::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      _INTERNAL__ChoiceType_complete_INTERNAL__SequenceType_rab-InformationReconfigList_INTERNAL_asn1__generated__RAB_InformationReconfigList_rb-InformationReconfigList_INTERNAL_asn1__generated__RB_InformationReconfigList_r6_rb-InformationAffectedList_INTERNAL_asn1__generated__RB_InformationAffectedList_r6_rb-PDCPContextRelocationList_INTERNAL_asn1__generated__RB_PDCPContextRelocationList_pdcp-ROHC-TargetMode_INTERNAL_asn1__generated__PDCP_ROHC_TargetMode_ul-CommonTransChInfo_INTERNAL_asn1__generated__UL_CommonTransChInfo_r4_ul-deletedTransChInfoList_INTERNAL_asn1__generated__UL_DeletedTransChInfoList_r6_ul-AddReconfTransChInfoList_INTERNAL_asn1__generated__UL_AddReconfTransChInfoList_r6_dl-CommonTransChInfo_INTERNAL_asn1__generated__DL_CommonTransChInfo_r4_dl-DeletedTransChInfoList_INTERNAL_asn1__generated__DL_DeletedTransChInfoList_r5_dl-AddReconfTransChInfoList_INTERNAL_asn1__generated__DL_AddReconfTransChInfoList_r5_preconfiguration_INTERNAL__SequenceType_preConfigMode_INTERNAL__ChoiceType_predefinedConfigIdentity_INTERNAL_asn1__generated__PredefinedConfigIdentity_defaultConfig_INTERNAL__SequenceType_defaultConfigMode_INTERNAL_asn1__generated__DefaultConfigMode_defaultConfigIdentity_INTERNAL_asn1__generated__DefaultConfigIdentity_r6::ValueType v;
      _specificationMode_Type.read(reader, v);
      value.set_specificationMode(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_DPCH_Info_r7::ValueType v;
      _ul_DPCH_Info_Type.read(reader, v);
      value.set_ul_DPCH_Info(v);
   }
   {
      asn1::generated::UL_EDCH_Information_r6::ValueType v;
      _ul_EDCH_Information_Type.read(reader, v);
      value.set_ul_EDCH_Information(v);
   }
   {
      asn1::generated::DL_HSPDSCH_Information_r7::ValueType v;
      _dl_HSPDSCH_Information_Type.read(reader, v);
      value.set_dl_HSPDSCH_Information(v);
   }
   {
      asn1::generated::DL_CommonInformation_r7::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r7::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }
   {
      asn1::generated::MBMS_PL_ServiceRestrictInfo_r6::ValueType v;
      _mbms_PL_ServiceRestrictInfo_Type.read(reader, v);
      value.set_mbms_PL_ServiceRestrictInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerReconfiguration_r7_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _delayRestrictionFlag_Type.write(writer, value.get_delayRestrictionFlag());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _new_H_RNTI_Type.write(writer, value.get_new_H_RNTI());
   _newPrimary_E_RNTI_Type.write(writer, value.get_newPrimary_E_RNTI());
   _newSecondary_E_RNTI_Type.write(writer, value.get_newSecondary_E_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _specificationMode_Type.write(writer, value.get_specificationMode());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_DPCH_Info_Type.write(writer, value.get_ul_DPCH_Info());
   _ul_EDCH_Information_Type.write(writer, value.get_ul_EDCH_Information());
   _dl_HSPDSCH_Information_Type.write(writer, value.get_dl_HSPDSCH_Information());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());
   _mbms_PL_ServiceRestrictInfo_Type.write(writer, value.get_mbms_PL_ServiceRestrictInfo());

   writer.writeSequenceEnd();
}


void RadioBearerReconfigurationComplete::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::IntegrityProtActivationInfo::ValueType v;
      _ul_IntegProtActivationInfo_Type.read(reader, v);
      value.set_ul_IntegProtActivationInfo(v);
   }
   {
      asn1::generated::UL_TimingAdvance::ValueType v;
      _ul_TimingAdvance_Type.read(reader, v);
      value.set_ul_TimingAdvance(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _count_C_ActivationTime_Type.read(reader, v);
      value.set_count_C_ActivationTime(v);
   }
   {
      asn1::generated::RB_ActivationTimeInfoList::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::UL_CounterSynchronisationInfo::ValueType v;
      _ul_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_ul_CounterSynchronisationInfo(v);
   }
   {
      _INTERNAL__SequenceType_radioBearerReconfigurationComplete-r3-add-ext_INTERNAL__v7xyNonCriticalExtensions_INTERNAL__SequenceType_radioBearerReconfigurationComplete-v7xyext_INTERNAL_asn1__generated__RadioBearerReconfigurationComplete_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerReconfigurationComplete::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _ul_IntegProtActivationInfo_Type.write(writer, value.get_ul_IntegProtActivationInfo());
   _ul_TimingAdvance_Type.write(writer, value.get_ul_TimingAdvance());
   _count_C_ActivationTime_Type.write(writer, value.get_count_C_ActivationTime());
   _dummy_Type.write(writer, value.get_dummy());
   _ul_CounterSynchronisationInfo_Type.write(writer, value.get_ul_CounterSynchronisationInfo());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void RadioBearerReconfigurationComplete_v7xyext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::EXT_UL_TimingAdvance::ValueType v;
      _ext_ul_TimingAdvance_Type.read(reader, v);
      value.set_ext_ul_TimingAdvance(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerReconfigurationComplete_v7xyext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ext_ul_TimingAdvance_Type.write(writer, value.get_ext_ul_TimingAdvance());

   writer.writeSequenceEnd();
}


void RadioBearerReconfigurationFailure::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::FailureCauseWithProtErr::ValueType v;
      _failureCause_Type.read(reader, v);
      value.set_failureCause(v);
   }
   {
      asn1::generated::RB_IdentityList::ValueType v;
      _potentiallySuccesfulBearerList_Type.read(reader, v);
      value.set_potentiallySuccesfulBearerList(v);
   }
   {
      _INTERNAL__SequenceType_radioBearerReconfigurationFailure-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerReconfigurationFailure::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _failureCause_Type.write(writer, value.get_failureCause());
   _potentiallySuccesfulBearerList_Type.write(writer, value.get_potentiallySuccesfulBearerList());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void RadioBearerRelease::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_radioBearerRelease-r3_INTERNAL_asn1__generated__RadioBearerRelease_r3_IEs_v3a0NonCriticalExtensions_INTERNAL__SequenceType_radioBearerRelease-v3a0ext_INTERNAL_asn1__generated__RadioBearerRelease_v3a0ext_laterNonCriticalExtensions_INTERNAL__SequenceType_radioBearerRelease-r3-add-ext_INTERNAL__v4b0NonCriticalExtensions_INTERNAL__SequenceType_radioBearerRelease-v4b0ext_INTERNAL_asn1__generated__RadioBearerRelease_v4b0ext_IEs_v590NonCriticalExtensions_INTERNAL__SequenceType_radioBearerRelease-v590ext_INTERNAL_asn1__generated__RadioBearerRelease_v590ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_radioBearerRelease-v690ext_INTERNAL_asn1__generated__RadioBearerRelease_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__ChoiceType_r4_INTERNAL__SequenceType_radioBearerRelease-r4_INTERNAL_asn1__generated__RadioBearerRelease_r4_IEs_v4d0NonCriticalExtensions_INTERNAL__SequenceType_radioBearerRelease-r4-add-ext_INTERNAL__v590NonCriticalExtensions_INTERNAL__SequenceType_radioBearerRelease-v590ext_INTERNAL_asn1__generated__RadioBearerRelease_v590ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_radioBearerRelease-v690ext_INTERNAL_asn1__generated__RadioBearerRelease_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r5_INTERNAL__SequenceType_radioBearerRelease-r5_INTERNAL_asn1__generated__RadioBearerRelease_r5_IEs_radioBearerRelease-r5-add-ext_INTERNAL__v690NonCriticalExtensions_INTERNAL__SequenceType_radioBearerRelease-v690ext_INTERNAL_asn1__generated__RadioBearerRelease_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r6_INTERNAL__SequenceType_radioBearerRelease-r6_INTERNAL_asn1__generated__RadioBearerRelease_r6_IEs_radioBearerRelease-r6-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r7_INTERNAL__SequenceType_radioBearerRelease-r7_INTERNAL_asn1__generated__RadioBearerRelease_r7_IEs_radioBearerRelease-r7-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void RadioBearerRelease::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void RadioBearerRelease_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _signallingConnectionRelIndication_Type.read(reader, v);
      value.set_signallingConnectionRelIndication(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::RAB_InformationReconfigList::ValueType v;
      _rab_InformationReconfigList_Type.read(reader, v);
      value.set_rab_InformationReconfigList(v);
   }
   {
      asn1::generated::RB_InformationReleaseList::ValueType v;
      _rb_InformationReleaseList_Type.read(reader, v);
      value.set_rb_InformationReleaseList(v);
   }
   {
      asn1::generated::RB_InformationAffectedList::ValueType v;
      _rb_InformationAffectedList_Type.read(reader, v);
      value.set_rb_InformationAffectedList(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_DeletedTransChInfoList::ValueType v;
      _ul_deletedTransChInfoList_Type.read(reader, v);
      value.set_ul_deletedTransChInfoList(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy1_INTERNAL_asn1__generated__CPCH_SetID_dummy2_INTERNAL_asn1__generated__DRAC_StaticInformationList_tdd_INTERNAL_asn1__NullType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_DeletedTransChInfoList::ValueType v;
      _dl_DeletedTransChInfoList_Type.read(reader, v);
      value.set_dl_DeletedTransChInfoList(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfo2List::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_ChannelRequirement::ValueType v;
      _ul_ChannelRequirement_Type.read(reader, v);
      value.set_ul_ChannelRequirement(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__DL_PDSCH_Information_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificPhysChInfo_Type.read(reader, v);
      value.set_modeSpecificPhysChInfo(v);
   }
   {
      asn1::generated::DL_CommonInformation::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerRelease_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _signallingConnectionRelIndication_Type.write(writer, value.get_signallingConnectionRelIndication());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _rab_InformationReconfigList_Type.write(writer, value.get_rab_InformationReconfigList());
   _rb_InformationReleaseList_Type.write(writer, value.get_rb_InformationReleaseList());
   _rb_InformationAffectedList_Type.write(writer, value.get_rb_InformationAffectedList());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_deletedTransChInfoList_Type.write(writer, value.get_ul_deletedTransChInfoList());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _dummy_Type.write(writer, value.get_dummy());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_DeletedTransChInfoList_Type.write(writer, value.get_dl_DeletedTransChInfoList());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_ChannelRequirement_Type.write(writer, value.get_ul_ChannelRequirement());
   _modeSpecificPhysChInfo_Type.write(writer, value.get_modeSpecificPhysChInfo());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void RadioBearerRelease_v3a0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerRelease_v3a0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());

   writer.writeSequenceEnd();
}


void RadioBearerRelease_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SSDT_UL::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::CellIdentity_PerRL_List::ValueType v;
      _cell_id_PerRL_List_Type.read(reader, v);
      value.set_cell_id_PerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerRelease_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dummy_Type.write(writer, value.get_dummy());
   _cell_id_PerRL_List_Type.write(writer, value.get_cell_id_PerRL_List());

   writer.writeSequenceEnd();
}


void RadioBearerRelease_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_TPC_PowerOffsetPerRL_List::ValueType v;
      _dl_TPC_PowerOffsetPerRL_List_Type.read(reader, v);
      value.set_dl_TPC_PowerOffsetPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerRelease_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_TPC_PowerOffsetPerRL_List_Type.write(writer, value.get_dl_TPC_PowerOffsetPerRL_List());

   writer.writeSequenceEnd();
}


void RadioBearerRelease_r4_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _signallingConnectionRelIndication_Type.read(reader, v);
      value.set_signallingConnectionRelIndication(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::RAB_InformationReconfigList::ValueType v;
      _rab_InformationReconfigList_Type.read(reader, v);
      value.set_rab_InformationReconfigList(v);
   }
   {
      asn1::generated::RB_InformationReleaseList::ValueType v;
      _rb_InformationReleaseList_Type.read(reader, v);
      value.set_rb_InformationReleaseList(v);
   }
   {
      asn1::generated::RB_InformationAffectedList::ValueType v;
      _rb_InformationAffectedList_Type.read(reader, v);
      value.set_rb_InformationAffectedList(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo_r4::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_DeletedTransChInfoList::ValueType v;
      _ul_deletedTransChInfoList_Type.read(reader, v);
      value.set_ul_deletedTransChInfoList(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy1_INTERNAL_asn1__generated__CPCH_SetID_dummy2_INTERNAL_asn1__generated__DRAC_StaticInformationList_tdd_INTERNAL_asn1__NullType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo_r4::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_DeletedTransChInfoList::ValueType v;
      _dl_DeletedTransChInfoList_Type.read(reader, v);
      value.set_dl_DeletedTransChInfoList(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList_r4::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_ChannelRequirement_r4::ValueType v;
      _ul_ChannelRequirement_Type.read(reader, v);
      value.set_ul_ChannelRequirement(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__DL_PDSCH_Information_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificPhysChInfo_Type.read(reader, v);
      value.set_modeSpecificPhysChInfo(v);
   }
   {
      asn1::generated::DL_CommonInformation_r4::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r4::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerRelease_r4_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _signallingConnectionRelIndication_Type.write(writer, value.get_signallingConnectionRelIndication());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _rab_InformationReconfigList_Type.write(writer, value.get_rab_InformationReconfigList());
   _rb_InformationReleaseList_Type.write(writer, value.get_rb_InformationReleaseList());
   _rb_InformationAffectedList_Type.write(writer, value.get_rb_InformationAffectedList());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_deletedTransChInfoList_Type.write(writer, value.get_ul_deletedTransChInfoList());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _dummy_Type.write(writer, value.get_dummy());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_DeletedTransChInfoList_Type.write(writer, value.get_dl_DeletedTransChInfoList());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_ChannelRequirement_Type.write(writer, value.get_ul_ChannelRequirement());
   _modeSpecificPhysChInfo_Type.write(writer, value.get_modeSpecificPhysChInfo());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void RadioBearerRelease_r5_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::H_RNTI::ValueType v;
      _new_H_RNTI_Type.read(reader, v);
      value.set_new_H_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _signallingConnectionRelIndication_Type.read(reader, v);
      value.set_signallingConnectionRelIndication(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::RAB_InformationReconfigList::ValueType v;
      _rab_InformationReconfigList_Type.read(reader, v);
      value.set_rab_InformationReconfigList(v);
   }
   {
      asn1::generated::RB_InformationReleaseList::ValueType v;
      _rb_InformationReleaseList_Type.read(reader, v);
      value.set_rb_InformationReleaseList(v);
   }
   {
      asn1::generated::RB_InformationAffectedList_r5::ValueType v;
      _rb_InformationAffectedList_Type.read(reader, v);
      value.set_rb_InformationAffectedList(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo_r5::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo_r4::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_DeletedTransChInfoList::ValueType v;
      _ul_deletedTransChInfoList_Type.read(reader, v);
      value.set_ul_deletedTransChInfoList(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy1_INTERNAL_asn1__generated__CPCH_SetID_dummy2_INTERNAL_asn1__generated__DRAC_StaticInformationList_tdd_INTERNAL_asn1__NullType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo_r4::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_DeletedTransChInfoList_r5::ValueType v;
      _dl_DeletedTransChInfoList_Type.read(reader, v);
      value.set_dl_DeletedTransChInfoList(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList_r5::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_ChannelRequirement_r5::ValueType v;
      _ul_ChannelRequirement_Type.read(reader, v);
      value.set_ul_ChannelRequirement(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__DL_PDSCH_Information_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificPhysChInfo_Type.read(reader, v);
      value.set_modeSpecificPhysChInfo(v);
   }
   {
      asn1::generated::DL_HSPDSCH_Information::ValueType v;
      _dl_HSPDSCH_Information_Type.read(reader, v);
      value.set_dl_HSPDSCH_Information(v);
   }
   {
      asn1::generated::DL_CommonInformation_r5::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r5::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerRelease_r5_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _new_H_RNTI_Type.write(writer, value.get_new_H_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _signallingConnectionRelIndication_Type.write(writer, value.get_signallingConnectionRelIndication());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _rab_InformationReconfigList_Type.write(writer, value.get_rab_InformationReconfigList());
   _rb_InformationReleaseList_Type.write(writer, value.get_rb_InformationReleaseList());
   _rb_InformationAffectedList_Type.write(writer, value.get_rb_InformationAffectedList());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_deletedTransChInfoList_Type.write(writer, value.get_ul_deletedTransChInfoList());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _dummy_Type.write(writer, value.get_dummy());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_DeletedTransChInfoList_Type.write(writer, value.get_dl_DeletedTransChInfoList());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_ChannelRequirement_Type.write(writer, value.get_ul_ChannelRequirement());
   _modeSpecificPhysChInfo_Type.write(writer, value.get_modeSpecificPhysChInfo());
   _dl_HSPDSCH_Information_Type.write(writer, value.get_dl_HSPDSCH_Information());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void RadioBearerRelease_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PLMN_Identity::ValueType v;
      _primary_plmn_Identity_Type.read(reader, v);
      value.set_primary_plmn_Identity(v);
   }
   {
      asn1::generated::HARQ_Preamble_Mode::ValueType v;
      _harq_Preamble_Mode_Type.read(reader, v);
      value.set_harq_Preamble_Mode(v);
   }
   {
      asn1::generated::BEACON_PL_Est::ValueType v;
      _beaconPLEst_Type.read(reader, v);
      value.set_beaconPLEst(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _postVerificationPeriod_Type.read(reader, v);
      value.set_postVerificationPeriod(v);
   }
   {
      asn1::generated::DHS_Sync::ValueType v;
      _dhs_sync_Type.read(reader, v);
      value.set_dhs_sync(v);
   }
   {
      asn1::generated::TimingMaintainedSynchInd::ValueType v;
      _timingMaintainedSynchInd_Type.read(reader, v);
      value.set_timingMaintainedSynchInd(v);
   }
   {
      asn1::generated::MBMS_PL_ServiceRestrictInfo_r6::ValueType v;
      _mbms_PL_ServiceRestrictInfo_Type.read(reader, v);
      value.set_mbms_PL_ServiceRestrictInfo(v);
   }
   {
      asn1::generated::RB_InformationReleaseList::ValueType v;
      _mbms_RB_ListReleasedToChangeTransferMode_Type.read(reader, v);
      value.set_mbms_RB_ListReleasedToChangeTransferMode(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerRelease_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _primary_plmn_Identity_Type.write(writer, value.get_primary_plmn_Identity());
   _harq_Preamble_Mode_Type.write(writer, value.get_harq_Preamble_Mode());
   _beaconPLEst_Type.write(writer, value.get_beaconPLEst());
   _postVerificationPeriod_Type.write(writer, value.get_postVerificationPeriod());
   _dhs_sync_Type.write(writer, value.get_dhs_sync());
   _timingMaintainedSynchInd_Type.write(writer, value.get_timingMaintainedSynchInd());
   _mbms_PL_ServiceRestrictInfo_Type.write(writer, value.get_mbms_PL_ServiceRestrictInfo());
   _mbms_RB_ListReleasedToChangeTransferMode_Type.write(writer, value.get_mbms_RB_ListReleasedToChangeTransferMode());

   writer.writeSequenceEnd();
}


void RadioBearerRelease_r6_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::H_RNTI::ValueType v;
      _new_H_RNTI_Type.read(reader, v);
      value.set_new_H_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newPrimary_E_RNTI_Type.read(reader, v);
      value.set_newPrimary_E_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newSecondary_E_RNTI_Type.read(reader, v);
      value.set_newSecondary_E_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo_r6::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _signallingConnectionRelIndication_Type.read(reader, v);
      value.set_signallingConnectionRelIndication(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::RAB_InformationReconfigList::ValueType v;
      _rab_InformationReconfigList_Type.read(reader, v);
      value.set_rab_InformationReconfigList(v);
   }
   {
      asn1::generated::RB_InformationReleaseList::ValueType v;
      _rb_InformationReleaseList_Type.read(reader, v);
      value.set_rb_InformationReleaseList(v);
   }
   {
      asn1::generated::RB_InformationReconfigList_r6::ValueType v;
      _rb_InformationReconfigList_Type.read(reader, v);
      value.set_rb_InformationReconfigList(v);
   }
   {
      asn1::generated::RB_InformationAffectedList_r6::ValueType v;
      _rb_InformationAffectedList_Type.read(reader, v);
      value.set_rb_InformationAffectedList(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo_r5::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo_r4::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_DeletedTransChInfoList_r6::ValueType v;
      _ul_deletedTransChInfoList_Type.read(reader, v);
      value.set_ul_deletedTransChInfoList(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList_r6::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo_r4::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_DeletedTransChInfoList_r5::ValueType v;
      _dl_DeletedTransChInfoList_Type.read(reader, v);
      value.set_dl_DeletedTransChInfoList(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList_r5::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_DPCH_Info_r6::ValueType v;
      _ul_DPCH_Info_Type.read(reader, v);
      value.set_ul_DPCH_Info(v);
   }
   {
      asn1::generated::UL_EDCH_Information_r6::ValueType v;
      _ul_EDCH_Information_Type.read(reader, v);
      value.set_ul_EDCH_Information(v);
   }
   {
      asn1::generated::DL_HSPDSCH_Information_r6::ValueType v;
      _dl_HSPDSCH_Information_Type.read(reader, v);
      value.set_dl_HSPDSCH_Information(v);
   }
   {
      asn1::generated::DL_CommonInformation_r6::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r6::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }
   {
      asn1::generated::MBMS_PL_ServiceRestrictInfo_r6::ValueType v;
      _mbms_PL_ServiceRestrictInfo_Type.read(reader, v);
      value.set_mbms_PL_ServiceRestrictInfo(v);
   }
   {
      asn1::generated::RB_InformationReleaseList::ValueType v;
      _mbms_RB_ListReleasedToChangeTransferMode_Type.read(reader, v);
      value.set_mbms_RB_ListReleasedToChangeTransferMode(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerRelease_r6_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _new_H_RNTI_Type.write(writer, value.get_new_H_RNTI());
   _newPrimary_E_RNTI_Type.write(writer, value.get_newPrimary_E_RNTI());
   _newSecondary_E_RNTI_Type.write(writer, value.get_newSecondary_E_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _signallingConnectionRelIndication_Type.write(writer, value.get_signallingConnectionRelIndication());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _rab_InformationReconfigList_Type.write(writer, value.get_rab_InformationReconfigList());
   _rb_InformationReleaseList_Type.write(writer, value.get_rb_InformationReleaseList());
   _rb_InformationReconfigList_Type.write(writer, value.get_rb_InformationReconfigList());
   _rb_InformationAffectedList_Type.write(writer, value.get_rb_InformationAffectedList());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_deletedTransChInfoList_Type.write(writer, value.get_ul_deletedTransChInfoList());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_DeletedTransChInfoList_Type.write(writer, value.get_dl_DeletedTransChInfoList());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_DPCH_Info_Type.write(writer, value.get_ul_DPCH_Info());
   _ul_EDCH_Information_Type.write(writer, value.get_ul_EDCH_Information());
   _dl_HSPDSCH_Information_Type.write(writer, value.get_dl_HSPDSCH_Information());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());
   _mbms_PL_ServiceRestrictInfo_Type.write(writer, value.get_mbms_PL_ServiceRestrictInfo());
   _mbms_RB_ListReleasedToChangeTransferMode_Type.write(writer, value.get_mbms_RB_ListReleasedToChangeTransferMode());

   writer.writeSequenceEnd();
}


void RadioBearerRelease_r7_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::H_RNTI::ValueType v;
      _new_H_RNTI_Type.read(reader, v);
      value.set_new_H_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newPrimary_E_RNTI_Type.read(reader, v);
      value.set_newPrimary_E_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newSecondary_E_RNTI_Type.read(reader, v);
      value.set_newSecondary_E_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo_r6::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _signallingConnectionRelIndication_Type.read(reader, v);
      value.set_signallingConnectionRelIndication(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::RAB_InformationReconfigList::ValueType v;
      _rab_InformationReconfigList_Type.read(reader, v);
      value.set_rab_InformationReconfigList(v);
   }
   {
      asn1::generated::RB_InformationReleaseList::ValueType v;
      _rb_InformationReleaseList_Type.read(reader, v);
      value.set_rb_InformationReleaseList(v);
   }
   {
      asn1::generated::RB_InformationReconfigList_r6::ValueType v;
      _rb_InformationReconfigList_Type.read(reader, v);
      value.set_rb_InformationReconfigList(v);
   }
   {
      asn1::generated::RB_InformationAffectedList_r6::ValueType v;
      _rb_InformationAffectedList_Type.read(reader, v);
      value.set_rb_InformationAffectedList(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo_r5::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo_r4::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_DeletedTransChInfoList_r6::ValueType v;
      _ul_deletedTransChInfoList_Type.read(reader, v);
      value.set_ul_deletedTransChInfoList(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList_r6::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo_r4::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_DeletedTransChInfoList_r5::ValueType v;
      _dl_DeletedTransChInfoList_Type.read(reader, v);
      value.set_dl_DeletedTransChInfoList(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList_r5::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_DPCH_Info_r7::ValueType v;
      _ul_DPCH_Info_Type.read(reader, v);
      value.set_ul_DPCH_Info(v);
   }
   {
      asn1::generated::UL_EDCH_Information_r6::ValueType v;
      _ul_EDCH_Information_Type.read(reader, v);
      value.set_ul_EDCH_Information(v);
   }
   {
      asn1::generated::DL_HSPDSCH_Information_r7::ValueType v;
      _dl_HSPDSCH_Information_Type.read(reader, v);
      value.set_dl_HSPDSCH_Information(v);
   }
   {
      asn1::generated::DL_CommonInformation_r7::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r7::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }
   {
      asn1::generated::MBMS_PL_ServiceRestrictInfo_r6::ValueType v;
      _mbms_PL_ServiceRestrictInfo_Type.read(reader, v);
      value.set_mbms_PL_ServiceRestrictInfo(v);
   }
   {
      asn1::generated::RB_InformationReleaseList::ValueType v;
      _mbms_RB_ListReleasedToChangeTransferMode_Type.read(reader, v);
      value.set_mbms_RB_ListReleasedToChangeTransferMode(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerRelease_r7_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _new_H_RNTI_Type.write(writer, value.get_new_H_RNTI());
   _newPrimary_E_RNTI_Type.write(writer, value.get_newPrimary_E_RNTI());
   _newSecondary_E_RNTI_Type.write(writer, value.get_newSecondary_E_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _signallingConnectionRelIndication_Type.write(writer, value.get_signallingConnectionRelIndication());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _rab_InformationReconfigList_Type.write(writer, value.get_rab_InformationReconfigList());
   _rb_InformationReleaseList_Type.write(writer, value.get_rb_InformationReleaseList());
   _rb_InformationReconfigList_Type.write(writer, value.get_rb_InformationReconfigList());
   _rb_InformationAffectedList_Type.write(writer, value.get_rb_InformationAffectedList());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_deletedTransChInfoList_Type.write(writer, value.get_ul_deletedTransChInfoList());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_DeletedTransChInfoList_Type.write(writer, value.get_dl_DeletedTransChInfoList());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_DPCH_Info_Type.write(writer, value.get_ul_DPCH_Info());
   _ul_EDCH_Information_Type.write(writer, value.get_ul_EDCH_Information());
   _dl_HSPDSCH_Information_Type.write(writer, value.get_dl_HSPDSCH_Information());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());
   _mbms_PL_ServiceRestrictInfo_Type.write(writer, value.get_mbms_PL_ServiceRestrictInfo());
   _mbms_RB_ListReleasedToChangeTransferMode_Type.write(writer, value.get_mbms_RB_ListReleasedToChangeTransferMode());

   writer.writeSequenceEnd();
}


void RadioBearerReleaseComplete::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::IntegrityProtActivationInfo::ValueType v;
      _ul_IntegProtActivationInfo_Type.read(reader, v);
      value.set_ul_IntegProtActivationInfo(v);
   }
   {
      asn1::generated::UL_TimingAdvance::ValueType v;
      _ul_TimingAdvance_Type.read(reader, v);
      value.set_ul_TimingAdvance(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _count_C_ActivationTime_Type.read(reader, v);
      value.set_count_C_ActivationTime(v);
   }
   {
      asn1::generated::RB_ActivationTimeInfoList::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::UL_CounterSynchronisationInfo::ValueType v;
      _ul_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_ul_CounterSynchronisationInfo(v);
   }
   {
      _INTERNAL__SequenceType_radioBearerReleaseComplete-r3-add-ext_INTERNAL__v7xyNonCriticalExtensions_INTERNAL__SequenceType_radioBearerReleaseComplete-v7xyext_INTERNAL_asn1__generated__RadioBearerReleaseComplete_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerReleaseComplete::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _ul_IntegProtActivationInfo_Type.write(writer, value.get_ul_IntegProtActivationInfo());
   _ul_TimingAdvance_Type.write(writer, value.get_ul_TimingAdvance());
   _count_C_ActivationTime_Type.write(writer, value.get_count_C_ActivationTime());
   _dummy_Type.write(writer, value.get_dummy());
   _ul_CounterSynchronisationInfo_Type.write(writer, value.get_ul_CounterSynchronisationInfo());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void RadioBearerReleaseComplete_v7xyext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::EXT_UL_TimingAdvance::ValueType v;
      _ext_ul_TimingAdvance_Type.read(reader, v);
      value.set_ext_ul_TimingAdvance(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerReleaseComplete_v7xyext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ext_ul_TimingAdvance_Type.write(writer, value.get_ext_ul_TimingAdvance());

   writer.writeSequenceEnd();
}


void RadioBearerReleaseFailure::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::FailureCauseWithProtErr::ValueType v;
      _failureCause_Type.read(reader, v);
      value.set_failureCause(v);
   }
   {
      asn1::generated::RB_IdentityList::ValueType v;
      _potentiallySuccesfulBearerList_Type.read(reader, v);
      value.set_potentiallySuccesfulBearerList(v);
   }
   {
      _INTERNAL__SequenceType_radioBearerReleaseFailure-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerReleaseFailure::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _failureCause_Type.write(writer, value.get_failureCause());
   _potentiallySuccesfulBearerList_Type.write(writer, value.get_potentiallySuccesfulBearerList());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void RadioBearerSetup::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_radioBearerSetup-r3_INTERNAL_asn1__generated__RadioBearerSetup_r3_IEs_v3a0NonCriticalExtensions_INTERNAL__SequenceType_radioBearerSetup-v3a0ext_INTERNAL_asn1__generated__RadioBearerSetup_v3a0ext_laterNonCriticalExtensions_INTERNAL__SequenceType_radioBearerSetup-r3-add-ext_INTERNAL__v4b0NonCriticalExtensions_INTERNAL__SequenceType_radioBearerSetup-v4b0ext_INTERNAL_asn1__generated__RadioBearerSetup_v4b0ext_IEs_v590NonCriticalExtensions_INTERNAL__SequenceType_radioBearerSetup-v590ext_INTERNAL_asn1__generated__RadioBearerSetup_v590ext_IEs_v5d0NonCriticalExtenstions_INTERNAL__SequenceType_radioBearerSetup-v5d0ext_INTERNAL_asn1__generated__RadioBearerSetup_v5d0ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_radioBearerSetup-v690ext_INTERNAL_asn1__generated__RadioBearerSetup_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__ChoiceType_r4_INTERNAL__SequenceType_radioBearerSetup-r4_INTERNAL_asn1__generated__RadioBearerSetup_r4_IEs_v4d0NonCriticalExtensions_INTERNAL__SequenceType_radioBearerSetup-r4-add-ext_INTERNAL__v590NonCriticalExtensions_INTERNAL__SequenceType_radioBearerSetup-v590ext_INTERNAL_asn1__generated__RadioBearerSetup_v590ext_IEs_v5d0NonCriticalExtenstions_INTERNAL__SequenceType_radioBearerSetup-v5d0ext_INTERNAL_asn1__generated__RadioBearerSetup_v5d0ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_radioBearerSetup-v690ext_INTERNAL_asn1__generated__RadioBearerSetup_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r5_INTERNAL__SequenceType_radioBearerSetup-r5_INTERNAL_asn1__generated__RadioBearerSetup_r5_IEs_radioBearerSetup-r5-add-ext_INTERNAL__v5d0NonCriticalExtenstions_INTERNAL__SequenceType_radioBearerSetup-v5d0ext_INTERNAL_asn1__generated__RadioBearerSetup_v5d0ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_radioBearerSetup-v690ext_INTERNAL_asn1__generated__RadioBearerSetup_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r6_INTERNAL__SequenceType_radioBearerSetup-r6_INTERNAL_asn1__generated__RadioBearerSetup_r6_IEs_radioBearerSetup-r6-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r7_INTERNAL__SequenceType_radioBearerSetup-r7_INTERNAL_asn1__generated__RadioBearerSetup_r7_IEs_radioBearerSetup-r7-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void RadioBearerSetup::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void RadioBearerSetup_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::CN_InformationInfo::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::SRB_InformationSetupList::ValueType v;
      _srb_InformationSetupList_Type.read(reader, v);
      value.set_srb_InformationSetupList(v);
   }
   {
      asn1::generated::RAB_InformationSetupList::ValueType v;
      _rab_InformationSetupList_Type.read(reader, v);
      value.set_rab_InformationSetupList(v);
   }
   {
      asn1::generated::RB_InformationAffectedList::ValueType v;
      _rb_InformationAffectedList_Type.read(reader, v);
      value.set_rb_InformationAffectedList(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_DeletedTransChInfoList::ValueType v;
      _ul_deletedTransChInfoList_Type.read(reader, v);
      value.set_ul_deletedTransChInfoList(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy1_INTERNAL_asn1__generated__CPCH_SetID_dummy2_INTERNAL_asn1__generated__DRAC_StaticInformationList_tdd_INTERNAL_asn1__NullType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_DeletedTransChInfoList::ValueType v;
      _dl_DeletedTransChInfoList_Type.read(reader, v);
      value.set_dl_DeletedTransChInfoList(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_ChannelRequirement::ValueType v;
      _ul_ChannelRequirement_Type.read(reader, v);
      value.set_ul_ChannelRequirement(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__DL_PDSCH_Information_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificPhysChInfo_Type.read(reader, v);
      value.set_modeSpecificPhysChInfo(v);
   }
   {
      asn1::generated::DL_CommonInformation::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerSetup_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _srb_InformationSetupList_Type.write(writer, value.get_srb_InformationSetupList());
   _rab_InformationSetupList_Type.write(writer, value.get_rab_InformationSetupList());
   _rb_InformationAffectedList_Type.write(writer, value.get_rb_InformationAffectedList());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_deletedTransChInfoList_Type.write(writer, value.get_ul_deletedTransChInfoList());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _dummy_Type.write(writer, value.get_dummy());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_DeletedTransChInfoList_Type.write(writer, value.get_dl_DeletedTransChInfoList());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_ChannelRequirement_Type.write(writer, value.get_ul_ChannelRequirement());
   _modeSpecificPhysChInfo_Type.write(writer, value.get_modeSpecificPhysChInfo());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void RadioBearerSetup_v3a0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerSetup_v3a0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());

   writer.writeSequenceEnd();
}


void RadioBearerSetup_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SSDT_UL::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::CellIdentity_PerRL_List::ValueType v;
      _cell_id_PerRL_List_Type.read(reader, v);
      value.set_cell_id_PerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerSetup_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dummy_Type.write(writer, value.get_dummy());
   _cell_id_PerRL_List_Type.write(writer, value.get_cell_id_PerRL_List());

   writer.writeSequenceEnd();
}


void RadioBearerSetup_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_TPC_PowerOffsetPerRL_List::ValueType v;
      _dl_TPC_PowerOffsetPerRL_List_Type.read(reader, v);
      value.set_dl_TPC_PowerOffsetPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerSetup_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_TPC_PowerOffsetPerRL_List_Type.write(writer, value.get_dl_TPC_PowerOffsetPerRL_List());

   writer.writeSequenceEnd();
}


void RadioBearerSetup_v5d0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PDCP_ROHC_TargetMode::ValueType v;
      _pdcp_ROHC_TargetMode_Type.read(reader, v);
      value.set_pdcp_ROHC_TargetMode(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerSetup_v5d0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pdcp_ROHC_TargetMode_Type.write(writer, value.get_pdcp_ROHC_TargetMode());

   writer.writeSequenceEnd();
}


void RadioBearerSetup_r4_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::CN_InformationInfo::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::SRB_InformationSetupList::ValueType v;
      _srb_InformationSetupList_Type.read(reader, v);
      value.set_srb_InformationSetupList(v);
   }
   {
      asn1::generated::RAB_InformationSetupList_r4::ValueType v;
      _rab_InformationSetupList_Type.read(reader, v);
      value.set_rab_InformationSetupList(v);
   }
   {
      asn1::generated::RB_InformationAffectedList::ValueType v;
      _rb_InformationAffectedList_Type.read(reader, v);
      value.set_rb_InformationAffectedList(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo_r4::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_DeletedTransChInfoList::ValueType v;
      _ul_deletedTransChInfoList_Type.read(reader, v);
      value.set_ul_deletedTransChInfoList(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy1_INTERNAL_asn1__generated__CPCH_SetID_dummy2_INTERNAL_asn1__generated__DRAC_StaticInformationList_tdd_INTERNAL_asn1__NullType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo_r4::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_DeletedTransChInfoList::ValueType v;
      _dl_DeletedTransChInfoList_Type.read(reader, v);
      value.set_dl_DeletedTransChInfoList(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList_r4::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_ChannelRequirement_r4::ValueType v;
      _ul_ChannelRequirement_Type.read(reader, v);
      value.set_ul_ChannelRequirement(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__DL_PDSCH_Information_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificPhysChInfo_Type.read(reader, v);
      value.set_modeSpecificPhysChInfo(v);
   }
   {
      asn1::generated::DL_CommonInformation_r4::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r4::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerSetup_r4_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _srb_InformationSetupList_Type.write(writer, value.get_srb_InformationSetupList());
   _rab_InformationSetupList_Type.write(writer, value.get_rab_InformationSetupList());
   _rb_InformationAffectedList_Type.write(writer, value.get_rb_InformationAffectedList());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_deletedTransChInfoList_Type.write(writer, value.get_ul_deletedTransChInfoList());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _dummy_Type.write(writer, value.get_dummy());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_DeletedTransChInfoList_Type.write(writer, value.get_dl_DeletedTransChInfoList());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_ChannelRequirement_Type.write(writer, value.get_ul_ChannelRequirement());
   _modeSpecificPhysChInfo_Type.write(writer, value.get_modeSpecificPhysChInfo());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void RadioBearerSetup_r5_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::H_RNTI::ValueType v;
      _new_H_RNTI_Type.read(reader, v);
      value.set_new_H_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::CN_InformationInfo::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::SRB_InformationSetupList_r5::ValueType v;
      _srb_InformationSetupList_Type.read(reader, v);
      value.set_srb_InformationSetupList(v);
   }
   {
      asn1::generated::RAB_InformationSetupList_r5::ValueType v;
      _rab_InformationSetupList_Type.read(reader, v);
      value.set_rab_InformationSetupList(v);
   }
   {
      asn1::generated::RB_InformationAffectedList_r5::ValueType v;
      _rb_InformationAffectedList_Type.read(reader, v);
      value.set_rb_InformationAffectedList(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo_r5::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo_r4::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_DeletedTransChInfoList::ValueType v;
      _ul_deletedTransChInfoList_Type.read(reader, v);
      value.set_ul_deletedTransChInfoList(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy1_INTERNAL_asn1__generated__CPCH_SetID_dummy2_INTERNAL_asn1__generated__DRAC_StaticInformationList_tdd_INTERNAL_asn1__NullType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo_r4::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_DeletedTransChInfoList_r5::ValueType v;
      _dl_DeletedTransChInfoList_Type.read(reader, v);
      value.set_dl_DeletedTransChInfoList(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList_r5::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_ChannelRequirement_r5::ValueType v;
      _ul_ChannelRequirement_Type.read(reader, v);
      value.set_ul_ChannelRequirement(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__DL_PDSCH_Information_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificPhysChInfo_Type.read(reader, v);
      value.set_modeSpecificPhysChInfo(v);
   }
   {
      asn1::generated::DL_HSPDSCH_Information::ValueType v;
      _dl_HSPDSCH_Information_Type.read(reader, v);
      value.set_dl_HSPDSCH_Information(v);
   }
   {
      asn1::generated::DL_CommonInformation_r5::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r5::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerSetup_r5_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _new_H_RNTI_Type.write(writer, value.get_new_H_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _srb_InformationSetupList_Type.write(writer, value.get_srb_InformationSetupList());
   _rab_InformationSetupList_Type.write(writer, value.get_rab_InformationSetupList());
   _rb_InformationAffectedList_Type.write(writer, value.get_rb_InformationAffectedList());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_deletedTransChInfoList_Type.write(writer, value.get_ul_deletedTransChInfoList());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _dummy_Type.write(writer, value.get_dummy());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_DeletedTransChInfoList_Type.write(writer, value.get_dl_DeletedTransChInfoList());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_ChannelRequirement_Type.write(writer, value.get_ul_ChannelRequirement());
   _modeSpecificPhysChInfo_Type.write(writer, value.get_modeSpecificPhysChInfo());
   _dl_HSPDSCH_Information_Type.write(writer, value.get_dl_HSPDSCH_Information());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void RadioBearerSetup_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PLMN_Identity::ValueType v;
      _primary_plmn_Identity_Type.read(reader, v);
      value.set_primary_plmn_Identity(v);
   }
   {
      asn1::generated::HARQ_Preamble_Mode::ValueType v;
      _harq_Preamble_Mode_Type.read(reader, v);
      value.set_harq_Preamble_Mode(v);
   }
   {
      asn1::generated::BEACON_PL_Est::ValueType v;
      _beaconPLEst_Type.read(reader, v);
      value.set_beaconPLEst(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _postVerificationPeriod_Type.read(reader, v);
      value.set_postVerificationPeriod(v);
   }
   {
      asn1::generated::DHS_Sync::ValueType v;
      _dhs_sync_Type.read(reader, v);
      value.set_dhs_sync(v);
   }
   {
      asn1::generated::TimingMaintainedSynchInd::ValueType v;
      _timingMaintainedSynchInd_Type.read(reader, v);
      value.set_timingMaintainedSynchInd(v);
   }
   {
      asn1::generated::RAB_InformationSetupList_r6_ext::ValueType v;
      _rab_InformationSetupList_Type.read(reader, v);
      value.set_rab_InformationSetupList(v);
   }
   {
      asn1::generated::MBMS_PL_ServiceRestrictInfo_r6::ValueType v;
      _mbms_PL_ServiceRestrictInfo_Type.read(reader, v);
      value.set_mbms_PL_ServiceRestrictInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerSetup_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _primary_plmn_Identity_Type.write(writer, value.get_primary_plmn_Identity());
   _harq_Preamble_Mode_Type.write(writer, value.get_harq_Preamble_Mode());
   _beaconPLEst_Type.write(writer, value.get_beaconPLEst());
   _postVerificationPeriod_Type.write(writer, value.get_postVerificationPeriod());
   _dhs_sync_Type.write(writer, value.get_dhs_sync());
   _timingMaintainedSynchInd_Type.write(writer, value.get_timingMaintainedSynchInd());
   _rab_InformationSetupList_Type.write(writer, value.get_rab_InformationSetupList());
   _mbms_PL_ServiceRestrictInfo_Type.write(writer, value.get_mbms_PL_ServiceRestrictInfo());

   writer.writeSequenceEnd();
}


void RadioBearerSetup_r6_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::H_RNTI::ValueType v;
      _new_H_RNTI_Type.read(reader, v);
      value.set_new_H_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newPrimary_E_RNTI_Type.read(reader, v);
      value.set_newPrimary_E_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newSecondary_E_RNTI_Type.read(reader, v);
      value.set_newSecondary_E_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::CN_InformationInfo_r6::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      _INTERNAL__ChoiceType_complete_INTERNAL__SequenceType_srb-InformationSetupList_INTERNAL_asn1__generated__SRB_InformationSetupList_r6_rab-InformationSetupList_INTERNAL_asn1__generated__RAB_InformationSetupList_r6_rab-InformationReconfigList_INTERNAL_asn1__generated__RAB_InformationReconfigList_rb-InformationReconfigList_INTERNAL_asn1__generated__RB_InformationReconfigList_r6_rb-InformationAffectedList_INTERNAL_asn1__generated__RB_InformationAffectedList_r6_dl-CounterSynchronisationInfo_INTERNAL_asn1__generated__DL_CounterSynchronisationInfo_r5_pdcp-ROHC-TargetMode_INTERNAL_asn1__generated__PDCP_ROHC_TargetMode_ul-CommonTransChInfo_INTERNAL_asn1__generated__UL_CommonTransChInfo_r4_ul-deletedTransChInfoList_INTERNAL_asn1__generated__UL_DeletedTransChInfoList_r6_ul-AddReconfTransChInfoList_INTERNAL_asn1__generated__UL_AddReconfTransChInfoList_r6_dl-CommonTransChInfo_INTERNAL_asn1__generated__DL_CommonTransChInfo_r4_dl-DeletedTransChInfoList_INTERNAL_asn1__generated__DL_DeletedTransChInfoList_r5_dl-AddReconfTransChInfoList_INTERNAL_asn1__generated__DL_AddReconfTransChInfoList_r5_preconfiguration_INTERNAL__SequenceType_rab-Info_INTERNAL_asn1__generated__RAB_Info_r6_defaultConfigMode_INTERNAL_asn1__generated__DefaultConfigMode_defaultConfigIdentity_INTERNAL_asn1__generated__DefaultConfigIdentity_r6_rb-InformationChangedList_INTERNAL_asn1__generated__RB_InformationChangedList_r6_powerOffsetInfoShort_INTERNAL_asn1__generated__PowerOffsetInfoShort::ValueType v;
      _specificationMode_Type.read(reader, v);
      value.set_specificationMode(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_DPCH_Info_r6::ValueType v;
      _ul_DPCH_Info_Type.read(reader, v);
      value.set_ul_DPCH_Info(v);
   }
   {
      asn1::generated::UL_EDCH_Information_r6::ValueType v;
      _ul_EDCH_Information_Type.read(reader, v);
      value.set_ul_EDCH_Information(v);
   }
   {
      asn1::generated::DL_HSPDSCH_Information_r6::ValueType v;
      _dl_HSPDSCH_Information_Type.read(reader, v);
      value.set_dl_HSPDSCH_Information(v);
   }
   {
      asn1::generated::DL_CommonInformation_r6::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r6::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }
   {
      asn1::generated::MBMS_PL_ServiceRestrictInfo_r6::ValueType v;
      _mbms_PL_ServiceRestrictInfo_Type.read(reader, v);
      value.set_mbms_PL_ServiceRestrictInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerSetup_r6_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _new_H_RNTI_Type.write(writer, value.get_new_H_RNTI());
   _newPrimary_E_RNTI_Type.write(writer, value.get_newPrimary_E_RNTI());
   _newSecondary_E_RNTI_Type.write(writer, value.get_newSecondary_E_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _specificationMode_Type.write(writer, value.get_specificationMode());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_DPCH_Info_Type.write(writer, value.get_ul_DPCH_Info());
   _ul_EDCH_Information_Type.write(writer, value.get_ul_EDCH_Information());
   _dl_HSPDSCH_Information_Type.write(writer, value.get_dl_HSPDSCH_Information());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());
   _mbms_PL_ServiceRestrictInfo_Type.write(writer, value.get_mbms_PL_ServiceRestrictInfo());

   writer.writeSequenceEnd();
}


void RadioBearerSetup_r7_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::H_RNTI::ValueType v;
      _new_H_RNTI_Type.read(reader, v);
      value.set_new_H_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newPrimary_E_RNTI_Type.read(reader, v);
      value.set_newPrimary_E_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newSecondary_E_RNTI_Type.read(reader, v);
      value.set_newSecondary_E_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::CN_InformationInfo_r6::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      _INTERNAL__ChoiceType_complete_INTERNAL__SequenceType_srb-InformationSetupList_INTERNAL_asn1__generated__SRB_InformationSetupList_r6_rab-InformationSetupList_INTERNAL_asn1__generated__RAB_InformationSetupList_r6_rb-InformationReconfigList_INTERNAL_asn1__generated__RB_InformationReconfigList_r6_rb-InformationAffectedList_INTERNAL_asn1__generated__RB_InformationAffectedList_r6_dl-CounterSynchronisationInfo_INTERNAL_asn1__generated__DL_CounterSynchronisationInfo_r5_pdcp-ROHC-TargetMode_INTERNAL_asn1__generated__PDCP_ROHC_TargetMode_ul-CommonTransChInfo_INTERNAL_asn1__generated__UL_CommonTransChInfo_r4_ul-deletedTransChInfoList_INTERNAL_asn1__generated__UL_DeletedTransChInfoList_r6_ul-AddReconfTransChInfoList_INTERNAL_asn1__generated__UL_AddReconfTransChInfoList_r6_dl-CommonTransChInfo_INTERNAL_asn1__generated__DL_CommonTransChInfo_r4_dl-DeletedTransChInfoList_INTERNAL_asn1__generated__DL_DeletedTransChInfoList_r5_dl-AddReconfTransChInfoList_INTERNAL_asn1__generated__DL_AddReconfTransChInfoList_r5_preconfiguration_INTERNAL__SequenceType_rab-Info_INTERNAL_asn1__generated__RAB_Info_r6_defaultConfigMode_INTERNAL_asn1__generated__DefaultConfigMode_defaultConfigIdentity_INTERNAL_asn1__generated__DefaultConfigIdentity_r6_rb-InformationChangedList_INTERNAL_asn1__generated__RB_InformationChangedList_r6_powerOffsetInfoShort_INTERNAL_asn1__generated__PowerOffsetInfoShort::ValueType v;
      _specificationMode_Type.read(reader, v);
      value.set_specificationMode(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_DPCH_Info_r7::ValueType v;
      _ul_DPCH_Info_Type.read(reader, v);
      value.set_ul_DPCH_Info(v);
   }
   {
      asn1::generated::UL_EDCH_Information_r6::ValueType v;
      _ul_EDCH_Information_Type.read(reader, v);
      value.set_ul_EDCH_Information(v);
   }
   {
      asn1::generated::DL_HSPDSCH_Information_r7::ValueType v;
      _dl_HSPDSCH_Information_Type.read(reader, v);
      value.set_dl_HSPDSCH_Information(v);
   }
   {
      asn1::generated::DL_CommonInformation_r7::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r7::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }
   {
      asn1::generated::MBMS_PL_ServiceRestrictInfo_r6::ValueType v;
      _mbms_PL_ServiceRestrictInfo_Type.read(reader, v);
      value.set_mbms_PL_ServiceRestrictInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerSetup_r7_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _new_H_RNTI_Type.write(writer, value.get_new_H_RNTI());
   _newPrimary_E_RNTI_Type.write(writer, value.get_newPrimary_E_RNTI());
   _newSecondary_E_RNTI_Type.write(writer, value.get_newSecondary_E_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _specificationMode_Type.write(writer, value.get_specificationMode());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_DPCH_Info_Type.write(writer, value.get_ul_DPCH_Info());
   _ul_EDCH_Information_Type.write(writer, value.get_ul_EDCH_Information());
   _dl_HSPDSCH_Information_Type.write(writer, value.get_dl_HSPDSCH_Information());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());
   _mbms_PL_ServiceRestrictInfo_Type.write(writer, value.get_mbms_PL_ServiceRestrictInfo());

   writer.writeSequenceEnd();
}


void RadioBearerSetupComplete::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::IntegrityProtActivationInfo::ValueType v;
      _ul_IntegProtActivationInfo_Type.read(reader, v);
      value.set_ul_IntegProtActivationInfo(v);
   }
   {
      asn1::generated::UL_TimingAdvance::ValueType v;
      _ul_TimingAdvance_Type.read(reader, v);
      value.set_ul_TimingAdvance(v);
   }
   {
      asn1::generated::START_Value::ValueType v;
      _start_Value_Type.read(reader, v);
      value.set_start_Value(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _count_C_ActivationTime_Type.read(reader, v);
      value.set_count_C_ActivationTime(v);
   }
   {
      asn1::generated::RB_ActivationTimeInfoList::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::UL_CounterSynchronisationInfo::ValueType v;
      _ul_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_ul_CounterSynchronisationInfo(v);
   }
   {
      _INTERNAL__SequenceType_radioBearerSetupComplete-r3-add-ext_INTERNAL__v7xyNonCriticalExtensions_INTERNAL__SequenceType_radioBearerSetupComplete-v7xyext_INTERNAL_asn1__generated__RadioBearerSetupComplete_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerSetupComplete::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _ul_IntegProtActivationInfo_Type.write(writer, value.get_ul_IntegProtActivationInfo());
   _ul_TimingAdvance_Type.write(writer, value.get_ul_TimingAdvance());
   _start_Value_Type.write(writer, value.get_start_Value());
   _count_C_ActivationTime_Type.write(writer, value.get_count_C_ActivationTime());
   _dummy_Type.write(writer, value.get_dummy());
   _ul_CounterSynchronisationInfo_Type.write(writer, value.get_ul_CounterSynchronisationInfo());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void RadioBearerSetupComplete_v7xyext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::EXT_UL_TimingAdvance::ValueType v;
      _ext_ul_TimingAdvance_Type.read(reader, v);
      value.set_ext_ul_TimingAdvance(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerSetupComplete_v7xyext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ext_ul_TimingAdvance_Type.write(writer, value.get_ext_ul_TimingAdvance());

   writer.writeSequenceEnd();
}


void RadioBearerSetupFailure::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::FailureCauseWithProtErr::ValueType v;
      _failureCause_Type.read(reader, v);
      value.set_failureCause(v);
   }
   {
      asn1::generated::RB_IdentityList::ValueType v;
      _potentiallySuccesfulBearerList_Type.read(reader, v);
      value.set_potentiallySuccesfulBearerList(v);
   }
   {
      _INTERNAL__SequenceType_radioBearerSetupFailure-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void RadioBearerSetupFailure::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _failureCause_Type.write(writer, value.get_failureCause());
   _potentiallySuccesfulBearerList_Type.write(writer, value.get_potentiallySuccesfulBearerList());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void RRCConnectionReject::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_rrcConnectionReject-r3_INTERNAL_asn1__generated__RRCConnectionReject_r3_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionReject-r3-add-ext_INTERNAL__v690NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionReject-v690ext_INTERNAL_asn1__generated__RRCConnectionReject_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_initialUE-Identity_INTERNAL_asn1__generated__InitialUE_Identity_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void RRCConnectionReject::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void RRCConnectionReject_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InitialUE_Identity::ValueType v;
      _initialUE_Identity_Type.read(reader, v);
      value.set_initialUE_Identity(v);
   }
   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::RejectionCause::ValueType v;
      _rejectionCause_Type.read(reader, v);
      value.set_rejectionCause(v);
   }
   {
      asn1::generated::WaitTime::ValueType v;
      _waitTime_Type.read(reader, v);
      value.set_waitTime(v);
   }
   {
      asn1::generated::RedirectionInfo::ValueType v;
      _redirectionInfo_Type.read(reader, v);
      value.set_redirectionInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionReject_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _initialUE_Identity_Type.write(writer, value.get_initialUE_Identity());
   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _rejectionCause_Type.write(writer, value.get_rejectionCause());
   _waitTime_Type.write(writer, value.get_waitTime());
   _redirectionInfo_Type.write(writer, value.get_redirectionInfo());

   writer.writeSequenceEnd();
}


void RRCConnectionReject_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::GSM_TargetCellInfoList::ValueType v;
      _redirectionInfo_v690ext_Type.read(reader, v);
      value.set_redirectionInfo_v690ext(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionReject_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _redirectionInfo_v690ext_Type.write(writer, value.get_redirectionInfo_v690ext());

   writer.writeSequenceEnd();
}


void RRCConnectionRelease::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_rrcConnectionRelease-r3_INTERNAL_asn1__generated__RRCConnectionRelease_r3_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionRelease-r3-add-ext_INTERNAL__v690NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionRelease-v690ext_INTERNAL_asn1__generated__RRCConnectionRelease_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__ChoiceType_r4_INTERNAL__SequenceType_rrcConnectionRelease-r4_INTERNAL_asn1__generated__RRCConnectionRelease_r4_IEs_v4d0NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionRelease-r4-add-ext_INTERNAL__v690NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionRelease-v690ext_INTERNAL_asn1__generated__RRCConnectionRelease_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void RRCConnectionRelease::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void RRCConnectionRelease_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::N_308::ValueType v;
      _n_308_Type.read(reader, v);
      value.set_n_308(v);
   }
   {
      asn1::generated::ReleaseCause::ValueType v;
      _releaseCause_Type.read(reader, v);
      value.set_releaseCause(v);
   }
   {
      asn1::generated::Rplmn_Information::ValueType v;
      _rplmn_information_Type.read(reader, v);
      value.set_rplmn_information(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionRelease_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _n_308_Type.write(writer, value.get_n_308());
   _releaseCause_Type.write(writer, value.get_releaseCause());
   _rplmn_information_Type.write(writer, value.get_rplmn_information());

   writer.writeSequenceEnd();
}


void RRCConnectionRelease_r4_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::N_308::ValueType v;
      _n_308_Type.read(reader, v);
      value.set_n_308(v);
   }
   {
      asn1::generated::ReleaseCause::ValueType v;
      _releaseCause_Type.read(reader, v);
      value.set_releaseCause(v);
   }
   {
      asn1::generated::Rplmn_Information_r4::ValueType v;
      _rplmn_information_Type.read(reader, v);
      value.set_rplmn_information(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionRelease_r4_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _n_308_Type.write(writer, value.get_n_308());
   _releaseCause_Type.write(writer, value.get_releaseCause());
   _rplmn_information_Type.write(writer, value.get_rplmn_information());

   writer.writeSequenceEnd();
}


void RRCConnectionRelease_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RedirectionInfo_r6::ValueType v;
      _redirectionInfo_v690ext_Type.read(reader, v);
      value.set_redirectionInfo_v690ext(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionRelease_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _redirectionInfo_v690ext_Type.write(writer, value.get_redirectionInfo_v690ext());

   writer.writeSequenceEnd();
}


void RRCConnectionRelease-CCCH::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_rrcConnectionRelease-CCCH-r3_INTERNAL_asn1__generated__RRCConnectionRelease_CCCH_r3_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionRelease-CCCH-r3-add-ext_INTERNAL__v690NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionRelease-v690ext_INTERNAL_asn1__generated__RRCConnectionRelease_CCCH_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_u-RNTI_INTERNAL_asn1__generated__U_RNTI_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__ChoiceType_r4_INTERNAL__SequenceType_rrcConnectionRelease-CCCH-r4_INTERNAL_asn1__generated__RRCConnectionRelease_CCCH_r4_IEs_v4d0NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionRelease-CCCH-r4-add-ext_INTERNAL__v690NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionRelease-v690ext_INTERNAL_asn1__generated__RRCConnectionRelease_CCCH_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__SequenceType_groupIdentity_INTERNAL__SequenceOfType_INTERNAL_asn1__generated__GroupReleaseInformation_criticalExtensions_INTERNAL__ChoiceType_r5_INTERNAL__SequenceType_rrcConnectionRelease-CCCH-r5_INTERNAL_asn1__generated__RRCConnectionRelease_CCCH_r5_IEs_rrcConnectionRelease-CCCH-r5-add-ext_INTERNAL__v690NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionRelease-v690ext_INTERNAL_asn1__generated__RRCConnectionRelease_CCCH_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void RRCConnectionRelease-CCCH::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void RRCConnectionRelease_CCCH_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::U_RNTI::ValueType v;
      _u_RNTI_Type.read(reader, v);
      value.set_u_RNTI(v);
   }
   {
      asn1::generated::RRCConnectionRelease_r3_IEs::ValueType v;
      _rrcConnectionRelease_Type.read(reader, v);
      value.set_rrcConnectionRelease(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionRelease_CCCH_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _u_RNTI_Type.write(writer, value.get_u_RNTI());
   _rrcConnectionRelease_Type.write(writer, value.get_rrcConnectionRelease());

   writer.writeSequenceEnd();
}


void RRCConnectionRelease_CCCH_r4_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRCConnectionRelease_r4_IEs::ValueType v;
      _rrcConnectionRelease_Type.read(reader, v);
      value.set_rrcConnectionRelease(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionRelease_CCCH_r4_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrcConnectionRelease_Type.write(writer, value.get_rrcConnectionRelease());

   writer.writeSequenceEnd();
}


void RRCConnectionReleaseComplete::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::FailureCauseWithProtErr::ValueType v;
      _errorIndication_Type.read(reader, v);
      value.set_errorIndication(v);
   }
   {
      _INTERNAL__SequenceType_rrcConnectionReleaseComplete-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionReleaseComplete::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _errorIndication_Type.write(writer, value.get_errorIndication());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void RRCConnectionRequest::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InitialUE_Identity::ValueType v;
      _initialUE_Identity_Type.read(reader, v);
      value.set_initialUE_Identity(v);
   }
   {
      asn1::generated::EstablishmentCause::ValueType v;
      _establishmentCause_Type.read(reader, v);
      value.set_establishmentCause(v);
   }
   {
      asn1::generated::ProtocolErrorIndicator::ValueType v;
      _protocolErrorIndicator_Type.read(reader, v);
      value.set_protocolErrorIndicator(v);
   }
   {
      asn1::generated::MeasuredResultsOnRACH::ValueType v;
      _measuredResultsOnRACH_Type.read(reader, v);
      value.set_measuredResultsOnRACH(v);
   }
   {
      _INTERNAL__SequenceType_rRCConnectionRequest-v3d0ext_INTERNAL_asn1__generated__RRCConnectionRequest_v3d0ext_IEs_v4b0NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionRequest-v4b0ext_INTERNAL_asn1__generated__RRCConnectionRequest_v4b0ext_IEs_v590NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionRequest-v590ext_INTERNAL_asn1__generated__RRCConnectionRequest_v590ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionRequest-v690ext_INTERNAL_asn1__generated__RRCConnectionRequest_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v3d0NonCriticalExtensions_Type.read(reader, v);
      value.set_v3d0NonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionRequest::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _initialUE_Identity_Type.write(writer, value.get_initialUE_Identity());
   _establishmentCause_Type.write(writer, value.get_establishmentCause());
   _protocolErrorIndicator_Type.write(writer, value.get_protocolErrorIndicator());
   _measuredResultsOnRACH_Type.write(writer, value.get_measuredResultsOnRACH());
   _v3d0NonCriticalExtensions_Type.write(writer, value.get_v3d0NonCriticalExtensions());

   writer.writeSequenceEnd();
}


void RRCConnectionRequest_v3d0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UESpecificBehaviourInformation1idle::ValueType v;
      _uESpecificBehaviourInformation1idle_Type.read(reader, v);
      value.set_uESpecificBehaviourInformation1idle(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionRequest_v3d0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _uESpecificBehaviourInformation1idle_Type.write(writer, value.get_uESpecificBehaviourInformation1idle());

   writer.writeSequenceEnd();
}


void RRCConnectionRequest_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::AccessStratumReleaseIndicator::ValueType v;
      _accessStratumReleaseIndicator_Type.read(reader, v);
      value.set_accessStratumReleaseIndicator(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionRequest_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _accessStratumReleaseIndicator_Type.write(writer, value.get_accessStratumReleaseIndicator());

   writer.writeSequenceEnd();
}


void RRCConnectionRequest_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _predefinedConfigStatusInfo_Type.read(reader, v);
      value.set_predefinedConfigStatusInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionRequest_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _predefinedConfigStatusInfo_Type.write(writer, value.get_predefinedConfigStatusInfo());

   writer.writeSequenceEnd();
}


void RRCConnectionRequest_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__EnumeratedType::ValueType v;
      _ueCapabilityIndication_Type.read(reader, v);
      value.set_ueCapabilityIndication(v);
   }
   {
      asn1::generated::MeasuredResultsOnRACHinterFreq::ValueType v;
      _measuredResultsOnRACHinterFreq_Type.read(reader, v);
      value.set_measuredResultsOnRACHinterFreq(v);
   }
   {
      _INTERNAL__ChoiceType_cs-domain_INTERNAL__SequenceType_csCallType_INTERNAL__EnumeratedType_ps-domain_INTERNAL_asn1__NullType::ValueType v;
      _domainIndicator_Type.read(reader, v);
      value.set_domainIndicator(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionRequest_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ueCapabilityIndication_Type.write(writer, value.get_ueCapabilityIndication());
   _measuredResultsOnRACHinterFreq_Type.write(writer, value.get_measuredResultsOnRACHinterFreq());
   _domainIndicator_Type.write(writer, value.get_domainIndicator());

   writer.writeSequenceEnd();
}


void RRCConnectionSetup::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_rrcConnectionSetup-r3_INTERNAL_asn1__generated__RRCConnectionSetup_r3_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionSetup-r3-add-ext_INTERNAL__v4b0NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionSetup-v4b0ext_INTERNAL_asn1__generated__RRCConnectionSetup_v4b0ext_IEs_v590NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionSetup-v590ext_INTERNAL_asn1__generated__RRCConnectionSetup_v590ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionSetup-v690ext_INTERNAL_asn1__generated__RRCConnectionSetup_v690ext_IEs_v7xyNonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionSetup-v7xyext_INTERNAL_asn1__generated__RRCConnectionSetup_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_initialUE-Identity_INTERNAL_asn1__generated__InitialUE_Identity_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__ChoiceType_r4_INTERNAL__SequenceType_rrcConnectionSetup-r4_INTERNAL_asn1__generated__RRCConnectionSetup_r4_IEs_v4d0NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionSetup-r4-add-ext_INTERNAL__v590NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionSetup-v590ext_INTERNAL_asn1__generated__RRCConnectionSetup_v590ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionSetup-v690ext_INTERNAL_asn1__generated__RRCConnectionSetup_v690ext_IEs_v7xyNonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionSetup-v7xyext_INTERNAL_asn1__generated__RRCConnectionSetup_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r5_INTERNAL__SequenceType_rrcConnectionSetup-r5_INTERNAL_asn1__generated__RRCConnectionSetup_r5_IEs_rrcConnectionSetup-r5-add-ext_INTERNAL__v690NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionSetup-v690ext_INTERNAL_asn1__generated__RRCConnectionSetup_v690ext_IEs_v7xyNonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionSetup-v7xyext_INTERNAL_asn1__generated__RRCConnectionSetup_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r6_INTERNAL__SequenceType_rrcConnectionSetup-r6_INTERNAL_asn1__generated__RRCConnectionSetup_r6_IEs_rrcConnectionSetup-r6-add-ext_INTERNAL__v7xyNonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionSetup-v7xyext_INTERNAL_asn1__generated__RRCConnectionSetup_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r7_INTERNAL__SequenceType_rrcConnectionSetup-r7_INTERNAL_asn1__generated__RRCConnectionSetup_r7_IEs_rrcConnectionSetup-r7-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void RRCConnectionSetup::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void RRCConnectionSetup_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InitialUE_Identity::ValueType v;
      _initialUE_Identity_Type.read(reader, v);
      value.set_initialUE_Identity(v);
   }
   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_c_RNTI_Type.read(reader, v);
      value.set_new_c_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CapabilityUpdateRequirement::ValueType v;
      _capabilityUpdateRequirement_Type.read(reader, v);
      value.set_capabilityUpdateRequirement(v);
   }
   {
      asn1::generated::SRB_InformationSetupList2::ValueType v;
      _srb_InformationSetupList_Type.read(reader, v);
      value.set_srb_InformationSetupList(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_ChannelRequirement::ValueType v;
      _ul_ChannelRequirement_Type.read(reader, v);
      value.set_ul_ChannelRequirement(v);
   }
   {
      asn1::generated::DL_CommonInformation::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetup_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _initialUE_Identity_Type.write(writer, value.get_initialUE_Identity());
   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_c_RNTI_Type.write(writer, value.get_new_c_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _capabilityUpdateRequirement_Type.write(writer, value.get_capabilityUpdateRequirement());
   _srb_InformationSetupList_Type.write(writer, value.get_srb_InformationSetupList());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_ChannelRequirement_Type.write(writer, value.get_ul_ChannelRequirement());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void RRCConnectionSetup_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CapabilityUpdateRequirement_r4_ext::ValueType v;
      _capabilityUpdateRequirement_r4_ext_Type.read(reader, v);
      value.set_capabilityUpdateRequirement_r4_ext(v);
   }
   {
      asn1::generated::SSDT_UL::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::CellIdentity_PerRL_List::ValueType v;
      _cell_id_PerRL_List_Type.read(reader, v);
      value.set_cell_id_PerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetup_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _capabilityUpdateRequirement_r4_ext_Type.write(writer, value.get_capabilityUpdateRequirement_r4_ext());
   _dummy_Type.write(writer, value.get_dummy());
   _cell_id_PerRL_List_Type.write(writer, value.get_cell_id_PerRL_List());

   writer.writeSequenceEnd();
}


void RRCConnectionSetup_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SystemSpecificCapUpdateReq_v590ext::ValueType v;
      _systemSpecificCapUpdateReq_Type.read(reader, v);
      value.set_systemSpecificCapUpdateReq(v);
   }
   {
      asn1::generated::DL_TPC_PowerOffsetPerRL_List::ValueType v;
      _dl_TPC_PowerOffsetPerRL_List_Type.read(reader, v);
      value.set_dl_TPC_PowerOffsetPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetup_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _systemSpecificCapUpdateReq_Type.write(writer, value.get_systemSpecificCapUpdateReq());
   _dl_TPC_PowerOffsetPerRL_List_Type.write(writer, value.get_dl_TPC_PowerOffsetPerRL_List());

   writer.writeSequenceEnd();
}


void RRCConnectionSetup_r4_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_c_RNTI_Type.read(reader, v);
      value.set_new_c_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CapabilityUpdateRequirement_r4::ValueType v;
      _capabilityUpdateRequirement_Type.read(reader, v);
      value.set_capabilityUpdateRequirement(v);
   }
   {
      asn1::generated::SRB_InformationSetupList2::ValueType v;
      _srb_InformationSetupList_Type.read(reader, v);
      value.set_srb_InformationSetupList(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo_r4::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo_r4::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList_r4::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_ChannelRequirement_r4::ValueType v;
      _ul_ChannelRequirement_Type.read(reader, v);
      value.set_ul_ChannelRequirement(v);
   }
   {
      asn1::generated::DL_CommonInformation_r4::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r4::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetup_r4_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_c_RNTI_Type.write(writer, value.get_new_c_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _capabilityUpdateRequirement_Type.write(writer, value.get_capabilityUpdateRequirement());
   _srb_InformationSetupList_Type.write(writer, value.get_srb_InformationSetupList());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_ChannelRequirement_Type.write(writer, value.get_ul_ChannelRequirement());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void RRCConnectionSetup_r5_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_c_RNTI_Type.read(reader, v);
      value.set_new_c_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CapabilityUpdateRequirement_r5::ValueType v;
      _capabilityUpdateRequirement_Type.read(reader, v);
      value.set_capabilityUpdateRequirement(v);
   }
   {
      _INTERNAL__ChoiceType_complete_INTERNAL__SequenceType_srb-InformationSetupList_INTERNAL_asn1__generated__SRB_InformationSetupList2_ul-CommonTransChInfo_INTERNAL_asn1__generated__UL_CommonTransChInfo_r4_ul-AddReconfTransChInfoList_INTERNAL_asn1__generated__UL_AddReconfTransChInfoList_dl-CommonTransChInfo_INTERNAL_asn1__generated__DL_CommonTransChInfo_r4_dl-AddReconfTransChInfoList_INTERNAL_asn1__generated__DL_AddReconfTransChInfoList_r4_preconfiguration_INTERNAL__SequenceType_preConfigMode_INTERNAL__ChoiceType_predefinedConfigIdentity_INTERNAL_asn1__generated__PredefinedConfigIdentity_defaultConfig_INTERNAL__SequenceType_defaultConfigMode_INTERNAL_asn1__generated__DefaultConfigMode_defaultConfigIdentity_INTERNAL_asn1__generated__DefaultConfigIdentity_r5::ValueType v;
      _specificationMode_Type.read(reader, v);
      value.set_specificationMode(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_ChannelRequirement_r4::ValueType v;
      _ul_ChannelRequirement_Type.read(reader, v);
      value.set_ul_ChannelRequirement(v);
   }
   {
      asn1::generated::DL_CommonInformation_r4::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r5bis::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetup_r5_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_c_RNTI_Type.write(writer, value.get_new_c_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _capabilityUpdateRequirement_Type.write(writer, value.get_capabilityUpdateRequirement());
   _specificationMode_Type.write(writer, value.get_specificationMode());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_ChannelRequirement_Type.write(writer, value.get_ul_ChannelRequirement());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void RRCConnectionSetup_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::BEACON_PL_Est::ValueType v;
      _beaconPLEst_Type.read(reader, v);
      value.set_beaconPLEst(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _postVerificationPeriod_Type.read(reader, v);
      value.set_postVerificationPeriod(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetup_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _beaconPLEst_Type.write(writer, value.get_beaconPLEst());
   _postVerificationPeriod_Type.write(writer, value.get_postVerificationPeriod());

   writer.writeSequenceEnd();
}


void RRCConnectionSetup_r6_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_c_RNTI_Type.read(reader, v);
      value.set_new_c_RNTI(v);
   }
   {
      asn1::generated::H_RNTI::ValueType v;
      _new_H_RNTI_Type.read(reader, v);
      value.set_new_H_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newPrimary_E_RNTI_Type.read(reader, v);
      value.set_newPrimary_E_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newSecondary_E_RNTI_Type.read(reader, v);
      value.set_newSecondary_E_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CapabilityUpdateRequirement_r5::ValueType v;
      _capabilityUpdateRequirement_Type.read(reader, v);
      value.set_capabilityUpdateRequirement(v);
   }
   {
      _INTERNAL__ChoiceType_complete_INTERNAL__SequenceType_srb-InformationSetupList_INTERNAL_asn1__generated__SRB_InformationSetupList2_r6_ul-CommonTransChInfo_INTERNAL_asn1__generated__UL_CommonTransChInfo_r4_ul-AddReconfTransChInfoList_INTERNAL_asn1__generated__UL_AddReconfTransChInfoList_r6_dl-CommonTransChInfo_INTERNAL_asn1__generated__DL_CommonTransChInfo_r4_dl-AddReconfTransChInfoList_INTERNAL_asn1__generated__DL_AddReconfTransChInfoList_r5_preconfiguration_INTERNAL__SequenceType_preConfigMode_INTERNAL__ChoiceType_predefinedConfigIdentity_INTERNAL_asn1__generated__PredefinedConfigIdentity_defaultConfig_INTERNAL__SequenceType_defaultConfigMode_INTERNAL_asn1__generated__DefaultConfigMode_defaultConfigIdentity_INTERNAL_asn1__generated__DefaultConfigIdentity_r6::ValueType v;
      _specificationMode_Type.read(reader, v);
      value.set_specificationMode(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_DPCH_Info_r6::ValueType v;
      _ul_DPCH_Info_Type.read(reader, v);
      value.set_ul_DPCH_Info(v);
   }
   {
      asn1::generated::UL_EDCH_Information_r6::ValueType v;
      _ul_EDCH_Information_Type.read(reader, v);
      value.set_ul_EDCH_Information(v);
   }
   {
      asn1::generated::DL_HSPDSCH_Information_r6::ValueType v;
      _dl_HSPDSCH_Information_Type.read(reader, v);
      value.set_dl_HSPDSCH_Information(v);
   }
   {
      asn1::generated::DL_CommonInformation_r6::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r6::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetup_r6_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_c_RNTI_Type.write(writer, value.get_new_c_RNTI());
   _new_H_RNTI_Type.write(writer, value.get_new_H_RNTI());
   _newPrimary_E_RNTI_Type.write(writer, value.get_newPrimary_E_RNTI());
   _newSecondary_E_RNTI_Type.write(writer, value.get_newSecondary_E_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _capabilityUpdateRequirement_Type.write(writer, value.get_capabilityUpdateRequirement());
   _specificationMode_Type.write(writer, value.get_specificationMode());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_DPCH_Info_Type.write(writer, value.get_ul_DPCH_Info());
   _ul_EDCH_Information_Type.write(writer, value.get_ul_EDCH_Information());
   _dl_HSPDSCH_Information_Type.write(writer, value.get_dl_HSPDSCH_Information());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void RRCConnectionSetup_r7_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_c_RNTI_Type.read(reader, v);
      value.set_new_c_RNTI(v);
   }
   {
      asn1::generated::H_RNTI::ValueType v;
      _new_H_RNTI_Type.read(reader, v);
      value.set_new_H_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newPrimary_E_RNTI_Type.read(reader, v);
      value.set_newPrimary_E_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newSecondary_E_RNTI_Type.read(reader, v);
      value.set_newSecondary_E_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CapabilityUpdateRequirement_r5::ValueType v;
      _capabilityUpdateRequirement_Type.read(reader, v);
      value.set_capabilityUpdateRequirement(v);
   }
   {
      _INTERNAL__ChoiceType_complete_INTERNAL__SequenceType_srb-InformationSetupList_INTERNAL_asn1__generated__SRB_InformationSetupList2_r6_ul-CommonTransChInfo_INTERNAL_asn1__generated__UL_CommonTransChInfo_r4_ul-AddReconfTransChInfoList_INTERNAL_asn1__generated__UL_AddReconfTransChInfoList_r6_dl-CommonTransChInfo_INTERNAL_asn1__generated__DL_CommonTransChInfo_r4_dl-AddReconfTransChInfoList_INTERNAL_asn1__generated__DL_AddReconfTransChInfoList_r5_preconfiguration_INTERNAL__SequenceType_preConfigMode_INTERNAL__ChoiceType_predefinedConfigIdentity_INTERNAL_asn1__generated__PredefinedConfigIdentity_defaultConfig_INTERNAL__SequenceType_defaultConfigMode_INTERNAL_asn1__generated__DefaultConfigMode_defaultConfigIdentity_INTERNAL_asn1__generated__DefaultConfigIdentity_r6::ValueType v;
      _specificationMode_Type.read(reader, v);
      value.set_specificationMode(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_DPCH_Info_r7::ValueType v;
      _ul_DPCH_Info_Type.read(reader, v);
      value.set_ul_DPCH_Info(v);
   }
   {
      asn1::generated::UL_EDCH_Information_r6::ValueType v;
      _ul_EDCH_Information_Type.read(reader, v);
      value.set_ul_EDCH_Information(v);
   }
   {
      asn1::generated::DL_HSPDSCH_Information_r7::ValueType v;
      _dl_HSPDSCH_Information_Type.read(reader, v);
      value.set_dl_HSPDSCH_Information(v);
   }
   {
      asn1::generated::DL_CommonInformation_r7::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r7::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetup_r7_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_c_RNTI_Type.write(writer, value.get_new_c_RNTI());
   _new_H_RNTI_Type.write(writer, value.get_new_H_RNTI());
   _newPrimary_E_RNTI_Type.write(writer, value.get_newPrimary_E_RNTI());
   _newSecondary_E_RNTI_Type.write(writer, value.get_newSecondary_E_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _capabilityUpdateRequirement_Type.write(writer, value.get_capabilityUpdateRequirement());
   _specificationMode_Type.write(writer, value.get_specificationMode());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_DPCH_Info_Type.write(writer, value.get_ul_DPCH_Info());
   _ul_EDCH_Information_Type.write(writer, value.get_ul_EDCH_Information());
   _dl_HSPDSCH_Information_Type.write(writer, value.get_dl_HSPDSCH_Information());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void RRCConnectionSetup_v7xyext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CapabilityUpdateRequirement_r7_ext::ValueType v;
      _capabilityUpdateRequirement_r7_ext_Type.read(reader, v);
      value.set_capabilityUpdateRequirement_r7_ext(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetup_v7xyext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _capabilityUpdateRequirement_r7_ext_Type.write(writer, value.get_capabilityUpdateRequirement_r7_ext());

   writer.writeSequenceEnd();
}


void RRCConnectionSetupComplete::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::STARTList::ValueType v;
      _startList_Type.read(reader, v);
      value.set_startList(v);
   }
   {
      asn1::generated::UE_RadioAccessCapability::ValueType v;
      _ue_RadioAccessCapability_Type.read(reader, v);
      value.set_ue_RadioAccessCapability(v);
   }
   {
      asn1::generated::InterRAT_UE_RadioAccessCapabilityList::ValueType v;
      _ue_RATSpecificCapability_Type.read(reader, v);
      value.set_ue_RATSpecificCapability(v);
   }
   {
      _INTERNAL__SequenceType_rrcConnectionSetupComplete-v370ext_INTERNAL_asn1__generated__RRCConnectionSetupComplete_v370ext_v380NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionSetupComplete-v380ext_INTERNAL_asn1__generated__RRCConnectionSetupComplete_v380ext_IEs_v3a0NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionSetupComplete-v3a0ext_INTERNAL_asn1__generated__RRCConnectionSetupComplete_v3a0ext_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionSetupComplete-r3-add-ext_INTERNAL__v3g0NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionSetupComplete-v3g0ext_INTERNAL_asn1__generated__RRCConnectionSetupComplete_v3g0ext_IEs_v4b0NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionSetupComplete-v4b0ext_INTERNAL_asn1__generated__RRCConnectionSetupComplete_v4b0ext_IEs_v590NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionSetupComplete-v590ext_INTERNAL_asn1__generated__RRCConnectionSetupComplete_v590ext_IEs_v5c0NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionSetupComplete-v5c0ext_INTERNAL_asn1__generated__RRCConnectionSetupComplete_v5c0ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_rrcConnectionSetupComplete-v690ext_INTERNAL_asn1__generated__RRCConnectionSetupComplete_v690ext_IEs_v7xyNonCriticalExtensions_INTERNAL__SequenceType_rrcConectionSetupComplete-v7xyext_INTERNAL_asn1__generated__RRCConnectionSetupComplete_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v370NonCriticalExtensions_Type.read(reader, v);
      value.set_v370NonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetupComplete::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _startList_Type.write(writer, value.get_startList());
   _ue_RadioAccessCapability_Type.write(writer, value.get_ue_RadioAccessCapability());
   _ue_RATSpecificCapability_Type.write(writer, value.get_ue_RATSpecificCapability());
   _v370NonCriticalExtensions_Type.write(writer, value.get_v370NonCriticalExtensions());

   writer.writeSequenceEnd();
}


void RRCConnectionSetupComplete_v370ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v370ext::ValueType v;
      _ue_RadioAccessCapability_v370ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v370ext(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetupComplete_v370ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v370ext_Type.write(writer, value.get_ue_RadioAccessCapability_v370ext());

   writer.writeSequenceEnd();
}


void RRCConnectionSetupComplete_v380ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v380ext::ValueType v;
      _ue_RadioAccessCapability_v380ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v380ext(v);
   }
   {
      asn1::generated::DL_PhysChCapabilityFDD_v380ext::ValueType v;
      _dl_PhysChCapabilityFDD_v380ext_Type.read(reader, v);
      value.set_dl_PhysChCapabilityFDD_v380ext(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetupComplete_v380ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v380ext_Type.write(writer, value.get_ue_RadioAccessCapability_v380ext());
   _dl_PhysChCapabilityFDD_v380ext_Type.write(writer, value.get_dl_PhysChCapabilityFDD_v380ext());

   writer.writeSequenceEnd();
}


void RRCConnectionSetupComplete_v3a0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v3a0ext::ValueType v;
      _ue_RadioAccessCapability_v3a0ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v3a0ext(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetupComplete_v3a0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v3a0ext_Type.write(writer, value.get_ue_RadioAccessCapability_v3a0ext());

   writer.writeSequenceEnd();
}


void RRCConnectionSetupComplete_v3g0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v3g0ext::ValueType v;
      _ue_RadioAccessCapability_v3g0ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v3g0ext(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetupComplete_v3g0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v3g0ext_Type.write(writer, value.get_ue_RadioAccessCapability_v3g0ext());

   writer.writeSequenceEnd();
}


void RRCConnectionSetupComplete_r3_add_ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRCConnectionSetupComplete_v650ext_IEs::ValueType v;
      _rrcConnectionSetupComplete_v650ext_Type.read(reader, v);
      value.set_rrcConnectionSetupComplete_v650ext(v);
   }
   {
      _INTERNAL__SequenceType_rrcConnectionSetupComplete-v680ext_INTERNAL_asn1__generated__RRCConnectionSetupComplete_v680ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v680NonCriticalExtensions_Type.read(reader, v);
      value.set_v680NonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetupComplete_r3_add_ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrcConnectionSetupComplete_v650ext_Type.write(writer, value.get_rrcConnectionSetupComplete_v650ext());
   _v680NonCriticalExtensions_Type.write(writer, value.get_v680NonCriticalExtensions());

   writer.writeSequenceEnd();
}


void RRCConnectionSetupComplete_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v4b0ext::ValueType v;
      _ue_RadioAccessCapability_v4b0ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v4b0ext(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetupComplete_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v4b0ext_Type.write(writer, value.get_ue_RadioAccessCapability_v4b0ext());

   writer.writeSequenceEnd();
}


void RRCConnectionSetupComplete_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v590ext::ValueType v;
      _ue_RadioAccessCapability_v590ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v590ext(v);
   }
   {
      asn1::generated::InterRAT_UE_RadioAccessCapability_v590ext::ValueType v;
      _ue_RATSpecificCapability_v590ext_Type.read(reader, v);
      value.set_ue_RATSpecificCapability_v590ext(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetupComplete_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v590ext_Type.write(writer, value.get_ue_RadioAccessCapability_v590ext());
   _ue_RATSpecificCapability_v590ext_Type.write(writer, value.get_ue_RATSpecificCapability_v590ext());

   writer.writeSequenceEnd();
}


void RRCConnectionSetupComplete_v5c0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v5c0ext::ValueType v;
      _ue_RadioAccessCapability_v5c0ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v5c0ext(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetupComplete_v5c0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v5c0ext_Type.write(writer, value.get_ue_RadioAccessCapability_v5c0ext());

   writer.writeSequenceEnd();
}


void RRCConnectionSetupComplete_v650ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v650ext::ValueType v;
      _ue_RadioAccessCapability_v650ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v650ext(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetupComplete_v650ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v650ext_Type.write(writer, value.get_ue_RadioAccessCapability_v650ext());

   writer.writeSequenceEnd();
}


void RRCConnectionSetupComplete_v680ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v680ext::ValueType v;
      _ue_RadioAccessCapability_v680ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v680ext(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetupComplete_v680ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v680ext_Type.write(writer, value.get_ue_RadioAccessCapability_v680ext());

   writer.writeSequenceEnd();
}


void RRCConnectionSetupComplete_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _ueCapabilityContainer_Type.read(reader, v);
      value.set_ueCapabilityContainer(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetupComplete_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ueCapabilityContainer_Type.write(writer, value.get_ueCapabilityContainer());

   writer.writeSequenceEnd();
}


void RRCConnectionSetupComplete_v7xyext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v7xyext::ValueType v;
      _ue_RadioAccessCapability_v7xyext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v7xyext(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCConnectionSetupComplete_v7xyext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v7xyext_Type.write(writer, value.get_ue_RadioAccessCapability_v7xyext());

   writer.writeSequenceEnd();
}


void RRC-FailureInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_rRC-FailureInfo-r3_INTERNAL_asn1__generated__RRC_FailureInfo_r3_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_rrc-FailureInfo-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_criticalExtensions_Type)
   {
      _INTERNAL__SequenceType::ValueType v;
      _criticalExtensions_Type.read(reader, v);
      value.set_criticalExtensions(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _criticalExtensions_Type.toString());
   }
}

void RRC-FailureInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_criticalExtensions_Choosen())
      _criticalExtensions_Type.write(writer, value.get_criticalExtensions());
}


void RRC_FailureInfo_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::FailureCauseWithProtErr::ValueType v;
      _failureCauseWithProtErr_Type.read(reader, v);
      value.set_failureCauseWithProtErr(v);
   }

   reader.readSequenceEnd(*this);
}

void RRC_FailureInfo_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _failureCauseWithProtErr_Type.write(writer, value.get_failureCauseWithProtErr());

   writer.writeSequenceEnd();
}


void RRCStatus::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ProtocolErrorMoreInformation::ValueType v;
      _protocolErrorInformation_Type.read(reader, v);
      value.set_protocolErrorInformation(v);
   }
   {
      _INTERNAL__SequenceType_rrcStatus-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void RRCStatus::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _protocolErrorInformation_Type.write(writer, value.get_protocolErrorInformation());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SecurityModeCommand::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_securityModeCommand-r3_INTERNAL_asn1__generated__SecurityModeCommand_r3_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_securityModeCommand-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void SecurityModeCommand::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void SecurityModeCommand_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::SecurityCapability::ValueType v;
      _securityCapability_Type.read(reader, v);
      value.set_securityCapability(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _cn_DomainIdentity_Type.read(reader, v);
      value.set_cn_DomainIdentity(v);
   }
   {
      asn1::generated::InterRAT_UE_SecurityCapList::ValueType v;
      _ue_SystemSpecificSecurityCap_Type.read(reader, v);
      value.set_ue_SystemSpecificSecurityCap(v);
   }

   reader.readSequenceEnd(*this);
}

void SecurityModeCommand_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _securityCapability_Type.write(writer, value.get_securityCapability());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cn_DomainIdentity_Type.write(writer, value.get_cn_DomainIdentity());
   _ue_SystemSpecificSecurityCap_Type.write(writer, value.get_ue_SystemSpecificSecurityCap());

   writer.writeSequenceEnd();
}


void SecurityModeComplete::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::IntegrityProtActivationInfo::ValueType v;
      _ul_IntegProtActivationInfo_Type.read(reader, v);
      value.set_ul_IntegProtActivationInfo(v);
   }
   {
      asn1::generated::RB_ActivationTimeInfoList::ValueType v;
      _rb_UL_CiphActivationTimeInfo_Type.read(reader, v);
      value.set_rb_UL_CiphActivationTimeInfo(v);
   }
   {
      _INTERNAL__SequenceType_securityModeComplete-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SecurityModeComplete::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _ul_IntegProtActivationInfo_Type.write(writer, value.get_ul_IntegProtActivationInfo());
   _rb_UL_CiphActivationTimeInfo_Type.write(writer, value.get_rb_UL_CiphActivationTimeInfo());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SecurityModeFailure::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::FailureCauseWithProtErr::ValueType v;
      _failureCause_Type.read(reader, v);
      value.set_failureCause(v);
   }
   {
      _INTERNAL__SequenceType_securityModeFailure-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SecurityModeFailure::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _failureCause_Type.write(writer, value.get_failureCause());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SignallingConnectionRelease::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_signallingConnectionRelease-r3_INTERNAL_asn1__generated__SignallingConnectionRelease_r3_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_signallingConnectionRelease-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void SignallingConnectionRelease::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void SignallingConnectionRelease_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _cn_DomainIdentity_Type.read(reader, v);
      value.set_cn_DomainIdentity(v);
   }

   reader.readSequenceEnd(*this);
}

void SignallingConnectionRelease_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _cn_DomainIdentity_Type.write(writer, value.get_cn_DomainIdentity());

   writer.writeSequenceEnd();
}


void SignallingConnectionReleaseIndication::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _cn_DomainIdentity_Type.read(reader, v);
      value.set_cn_DomainIdentity(v);
   }
   {
      _INTERNAL__SequenceType_signallingConnectionReleaseIndication-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SignallingConnectionReleaseIndication::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cn_DomainIdentity_Type.write(writer, value.get_cn_DomainIdentity());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SystemInformation_BCH::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SFN_Prime::ValueType v;
      _sfn_Prime_Type.read(reader, v);
      value.set_sfn_Prime(v);
   }
   {
      _INTERNAL__ChoiceType_noSegment_INTERNAL_asn1__NullType_firstSegment_INTERNAL_asn1__generated__FirstSegment_subsequentSegment_INTERNAL_asn1__generated__SubsequentSegment_lastSegmentShort_INTERNAL_asn1__generated__LastSegmentShort_lastAndFirst_INTERNAL__SequenceType_lastSegmentShort_INTERNAL_asn1__generated__LastSegmentShort_firstSegment_INTERNAL_asn1__generated__FirstSegmentShort_lastAndComplete_INTERNAL__SequenceType_lastSegmentShort_INTERNAL_asn1__generated__LastSegmentShort_completeSIB-List_INTERNAL_asn1__generated__CompleteSIB_List_lastAndCompleteAndFirst_INTERNAL__SequenceType_lastSegmentShort_INTERNAL_asn1__generated__LastSegmentShort_completeSIB-List_INTERNAL_asn1__generated__CompleteSIB_List_firstSegment_INTERNAL_asn1__generated__FirstSegmentShort_completeSIB-List_INTERNAL_asn1__generated__CompleteSIB_List_completeAndFirst_INTERNAL__SequenceType_completeSIB-List_INTERNAL_asn1__generated__CompleteSIB_List_firstSegment_INTERNAL_asn1__generated__FirstSegmentShort_completeSIB_INTERNAL_asn1__generated__CompleteSIB_lastSegment_INTERNAL_asn1__generated__LastSegment_spare5_INTERNAL_asn1__NullType_spare4_INTERNAL_asn1__NullType_spare3_INTERNAL_asn1__NullType_spare2_INTERNAL_asn1__NullType_spare1_INTERNAL_asn1__NullType::ValueType v;
      _payload_Type.read(reader, v);
      value.set_payload(v);
   }

   reader.readSequenceEnd(*this);
}

void SystemInformation_BCH::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sfn_Prime_Type.write(writer, value.get_sfn_Prime());
   _payload_Type.write(writer, value.get_payload());

   writer.writeSequenceEnd();
}


void SystemInformation_FACH::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_noSegment_INTERNAL_asn1__NullType_firstSegment_INTERNAL_asn1__generated__FirstSegment_subsequentSegment_INTERNAL_asn1__generated__SubsequentSegment_lastSegmentShort_INTERNAL_asn1__generated__LastSegmentShort_lastAndFirst_INTERNAL__SequenceType_lastSegmentShort_INTERNAL_asn1__generated__LastSegmentShort_firstSegment_INTERNAL_asn1__generated__FirstSegmentShort_lastAndComplete_INTERNAL__SequenceType_lastSegmentShort_INTERNAL_asn1__generated__LastSegmentShort_completeSIB-List_INTERNAL_asn1__generated__CompleteSIB_List_lastAndCompleteAndFirst_INTERNAL__SequenceType_lastSegmentShort_INTERNAL_asn1__generated__LastSegmentShort_completeSIB-List_INTERNAL_asn1__generated__CompleteSIB_List_firstSegment_INTERNAL_asn1__generated__FirstSegmentShort_completeSIB-List_INTERNAL_asn1__generated__CompleteSIB_List_completeAndFirst_INTERNAL__SequenceType_completeSIB-List_INTERNAL_asn1__generated__CompleteSIB_List_firstSegment_INTERNAL_asn1__generated__FirstSegmentShort_completeSIB_INTERNAL_asn1__generated__CompleteSIB_lastSegment_INTERNAL_asn1__generated__LastSegment_spare5_INTERNAL_asn1__NullType_spare4_INTERNAL_asn1__NullType_spare3_INTERNAL_asn1__NullType_spare2_INTERNAL_asn1__NullType_spare1_INTERNAL_asn1__NullType::ValueType v;
      _payload_Type.read(reader, v);
      value.set_payload(v);
   }

   reader.readSequenceEnd(*this);
}

void SystemInformation_FACH::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _payload_Type.write(writer, value.get_payload());

   writer.writeSequenceEnd();
}


void FirstSegment::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SIB_Type::ValueType v;
      _sib_Type_Type.read(reader, v);
      value.set_sib_Type(v);
   }
   {
      asn1::generated::SegCount::ValueType v;
      _seg_Count_Type.read(reader, v);
      value.set_seg_Count(v);
   }
   {
      asn1::generated::SIB_Data_fixed::ValueType v;
      _sib_Data_fixed_Type.read(reader, v);
      value.set_sib_Data_fixed(v);
   }

   reader.readSequenceEnd(*this);
}

void FirstSegment::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sib_Type_Type.write(writer, value.get_sib_Type());
   _seg_Count_Type.write(writer, value.get_seg_Count());
   _sib_Data_fixed_Type.write(writer, value.get_sib_Data_fixed());

   writer.writeSequenceEnd();
}


void FirstSegmentShort::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SIB_Type::ValueType v;
      _sib_Type_Type.read(reader, v);
      value.set_sib_Type(v);
   }
   {
      asn1::generated::SegCount::ValueType v;
      _seg_Count_Type.read(reader, v);
      value.set_seg_Count(v);
   }
   {
      asn1::generated::SIB_Data_variable::ValueType v;
      _sib_Data_variable_Type.read(reader, v);
      value.set_sib_Data_variable(v);
   }

   reader.readSequenceEnd(*this);
}

void FirstSegmentShort::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sib_Type_Type.write(writer, value.get_sib_Type());
   _seg_Count_Type.write(writer, value.get_seg_Count());
   _sib_Data_variable_Type.write(writer, value.get_sib_Data_variable());

   writer.writeSequenceEnd();
}


void SubsequentSegment::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SIB_Type::ValueType v;
      _sib_Type_Type.read(reader, v);
      value.set_sib_Type(v);
   }
   {
      asn1::generated::SegmentIndex::ValueType v;
      _segmentIndex_Type.read(reader, v);
      value.set_segmentIndex(v);
   }
   {
      asn1::generated::SIB_Data_fixed::ValueType v;
      _sib_Data_fixed_Type.read(reader, v);
      value.set_sib_Data_fixed(v);
   }

   reader.readSequenceEnd(*this);
}

void SubsequentSegment::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sib_Type_Type.write(writer, value.get_sib_Type());
   _segmentIndex_Type.write(writer, value.get_segmentIndex());
   _sib_Data_fixed_Type.write(writer, value.get_sib_Data_fixed());

   writer.writeSequenceEnd();
}


void LastSegment::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SIB_Type::ValueType v;
      _sib_Type_Type.read(reader, v);
      value.set_sib_Type(v);
   }
   {
      asn1::generated::SegmentIndex::ValueType v;
      _segmentIndex_Type.read(reader, v);
      value.set_segmentIndex(v);
   }
   {
      asn1::generated::SIB_Data_fixed::ValueType v;
      _sib_Data_fixed_Type.read(reader, v);
      value.set_sib_Data_fixed(v);
   }

   reader.readSequenceEnd(*this);
}

void LastSegment::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sib_Type_Type.write(writer, value.get_sib_Type());
   _segmentIndex_Type.write(writer, value.get_segmentIndex());
   _sib_Data_fixed_Type.write(writer, value.get_sib_Data_fixed());

   writer.writeSequenceEnd();
}


void LastSegmentShort::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SIB_Type::ValueType v;
      _sib_Type_Type.read(reader, v);
      value.set_sib_Type(v);
   }
   {
      asn1::generated::SegmentIndex::ValueType v;
      _segmentIndex_Type.read(reader, v);
      value.set_segmentIndex(v);
   }
   {
      asn1::generated::SIB_Data_variable::ValueType v;
      _sib_Data_variable_Type.read(reader, v);
      value.set_sib_Data_variable(v);
   }

   reader.readSequenceEnd(*this);
}

void LastSegmentShort::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sib_Type_Type.write(writer, value.get_sib_Type());
   _segmentIndex_Type.write(writer, value.get_segmentIndex());
   _sib_Data_variable_Type.write(writer, value.get_sib_Data_variable());

   writer.writeSequenceEnd();
}


void CompleteSIB::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SIB_Type::ValueType v;
      _sib_Type_Type.read(reader, v);
      value.set_sib_Type(v);
   }
   {
      _INTERNAL_::ValueType v;
      _sib_Data_fixed_Type.read(reader, v);
      value.set_sib_Data_fixed(v);
   }

   reader.readSequenceEnd(*this);
}

void CompleteSIB::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sib_Type_Type.write(writer, value.get_sib_Type());
   _sib_Data_fixed_Type.write(writer, value.get_sib_Data_fixed());

   writer.writeSequenceEnd();
}


void CompleteSIBshort::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SIB_Type::ValueType v;
      _sib_Type_Type.read(reader, v);
      value.set_sib_Type(v);
   }
   {
      asn1::generated::SIB_Data_variable::ValueType v;
      _sib_Data_variable_Type.read(reader, v);
      value.set_sib_Data_variable(v);
   }

   reader.readSequenceEnd(*this);
}

void CompleteSIBshort::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sib_Type_Type.write(writer, value.get_sib_Type());
   _sib_Data_variable_Type.write(writer, value.get_sib_Data_variable());

   writer.writeSequenceEnd();
}


void SystemInformationChangeIndication::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::BCCH_ModificationInfo::ValueType v;
      _bcch_ModificationInfo_Type.read(reader, v);
      value.set_bcch_ModificationInfo(v);
   }
   {
      _INTERNAL__SequenceType_systemInformationChangeIndication-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SystemInformationChangeIndication::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _bcch_ModificationInfo_Type.write(writer, value.get_bcch_ModificationInfo());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void TransportChannelReconfiguration::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_transportChannelReconfiguration-r3_INTERNAL_asn1__generated__TransportChannelReconfiguration_r3_IEs_v3a0NonCriticalExtensions_INTERNAL__SequenceType_transportChannelReconfiguration-v3a0ext_INTERNAL_asn1__generated__TransportChannelReconfiguration_v3a0ext_laterNonCriticalExtensions_INTERNAL__SequenceType_transportChannelReconfiguration-r3-add-ext_INTERNAL__v4b0NonCriticalExtensions_INTERNAL__SequenceType_transportChannelReconfiguration-v4b0ext_INTERNAL_asn1__generated__TransportChannelReconfiguration_v4b0ext_IEs_v590NonCriticalExtensions_INTERNAL__SequenceType_transportChannelReconfiguration-v590ext_INTERNAL_asn1__generated__TransportChannelReconfiguration_v590ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_transportChannelReconfiguration-v690ext_INTERNAL_asn1__generated__TransportChannelReconfiguration_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__ChoiceType_r4_INTERNAL__SequenceType_transportChannelReconfiguration-r4_INTERNAL_asn1__generated__TransportChannelReconfiguration_r4_IEs_v4d0NonCriticalExtensions_INTERNAL__SequenceType_transportChannelReconfiguration-r4-add-ext_INTERNAL__v590NonCriticalExtensions_INTERNAL__SequenceType_transportChannelReconfiguration-v590ext_INTERNAL_asn1__generated__TransportChannelReconfiguration_v590ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_transportChannelReconfiguration-v690ext_INTERNAL_asn1__generated__TransportChannelReconfiguration_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r5_INTERNAL__SequenceType_transportChannelReconfiguration-r5_INTERNAL_asn1__generated__TransportChannelReconfiguration_r5_IEs_transportChannelReconfiguration-r5-add-ext_INTERNAL__v690NonCriticalExtensions_INTERNAL__SequenceType_transportChannelReconfiguration-v690ext_INTERNAL_asn1__generated__TransportChannelReconfiguration_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r6_INTERNAL__SequenceType_transportChannelReconfiguration-r6_INTERNAL_asn1__generated__TransportChannelReconfiguration_r6_IEs_transportChannelReconfiguration-r6-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r7_INTERNAL__SequenceType_transportChannelReconfiguration-r7_INTERNAL_asn1__generated__TransportChannelReconfiguration_r7_IEs_transportChannelReconfiguration-r7-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void TransportChannelReconfiguration::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void TransportChannelReconfiguration_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy1_INTERNAL_asn1__generated__CPCH_SetID_dummy2_INTERNAL_asn1__generated__DRAC_StaticInformationList_tdd_INTERNAL_asn1__NullType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_ChannelRequirement::ValueType v;
      _ul_ChannelRequirement_Type.read(reader, v);
      value.set_ul_ChannelRequirement(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__DL_PDSCH_Information_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificPhysChInfo_Type.read(reader, v);
      value.set_modeSpecificPhysChInfo(v);
   }
   {
      asn1::generated::DL_CommonInformation::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void TransportChannelReconfiguration_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _dummy_Type.write(writer, value.get_dummy());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_ChannelRequirement_Type.write(writer, value.get_ul_ChannelRequirement());
   _modeSpecificPhysChInfo_Type.write(writer, value.get_modeSpecificPhysChInfo());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void TransportChannelReconfiguration_v3a0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }

   reader.readSequenceEnd(*this);
}

void TransportChannelReconfiguration_v3a0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());

   writer.writeSequenceEnd();
}


void TransportChannelReconfiguration_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SSDT_UL::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::CellIdentity_PerRL_List::ValueType v;
      _cell_id_PerRL_List_Type.read(reader, v);
      value.set_cell_id_PerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void TransportChannelReconfiguration_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dummy_Type.write(writer, value.get_dummy());
   _cell_id_PerRL_List_Type.write(writer, value.get_cell_id_PerRL_List());

   writer.writeSequenceEnd();
}


void TransportChannelReconfiguration_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_TPC_PowerOffsetPerRL_List::ValueType v;
      _dl_TPC_PowerOffsetPerRL_List_Type.read(reader, v);
      value.set_dl_TPC_PowerOffsetPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void TransportChannelReconfiguration_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_TPC_PowerOffsetPerRL_List_Type.write(writer, value.get_dl_TPC_PowerOffsetPerRL_List());

   writer.writeSequenceEnd();
}


void TransportChannelReconfiguration_r4_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo_r4::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy1_INTERNAL_asn1__generated__CPCH_SetID_dummy2_INTERNAL_asn1__generated__DRAC_StaticInformationList_tdd_INTERNAL_asn1__NullType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo_r4::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList_r4::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_ChannelRequirement_r4::ValueType v;
      _ul_ChannelRequirement_Type.read(reader, v);
      value.set_ul_ChannelRequirement(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__DL_PDSCH_Information_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificPhysChInfo_Type.read(reader, v);
      value.set_modeSpecificPhysChInfo(v);
   }
   {
      asn1::generated::DL_CommonInformation_r4::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r4::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void TransportChannelReconfiguration_r4_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _dummy_Type.write(writer, value.get_dummy());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_ChannelRequirement_Type.write(writer, value.get_ul_ChannelRequirement());
   _modeSpecificPhysChInfo_Type.write(writer, value.get_modeSpecificPhysChInfo());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void TransportChannelReconfiguration_r5_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::H_RNTI::ValueType v;
      _new_H_RNTI_Type.read(reader, v);
      value.set_new_H_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo_r5::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo_r4::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy1_INTERNAL_asn1__generated__CPCH_SetID_dummy2_INTERNAL_asn1__generated__DRAC_StaticInformationList_tdd_INTERNAL_asn1__NullType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo_r4::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList_r5::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_ChannelRequirement_r5::ValueType v;
      _ul_ChannelRequirement_Type.read(reader, v);
      value.set_ul_ChannelRequirement(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__DL_PDSCH_Information_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificPhysChInfo_Type.read(reader, v);
      value.set_modeSpecificPhysChInfo(v);
   }
   {
      asn1::generated::DL_HSPDSCH_Information::ValueType v;
      _dl_HSPDSCH_Information_Type.read(reader, v);
      value.set_dl_HSPDSCH_Information(v);
   }
   {
      asn1::generated::DL_CommonInformation_r5::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r5::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }

   reader.readSequenceEnd(*this);
}

void TransportChannelReconfiguration_r5_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _new_H_RNTI_Type.write(writer, value.get_new_H_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _dummy_Type.write(writer, value.get_dummy());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_ChannelRequirement_Type.write(writer, value.get_ul_ChannelRequirement());
   _modeSpecificPhysChInfo_Type.write(writer, value.get_modeSpecificPhysChInfo());
   _dl_HSPDSCH_Information_Type.write(writer, value.get_dl_HSPDSCH_Information());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());

   writer.writeSequenceEnd();
}


void TransportChannelReconfiguration_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DelayRestrictionFlag::ValueType v;
      _delayRestrictionFlag_Type.read(reader, v);
      value.set_delayRestrictionFlag(v);
   }
   {
      asn1::generated::PLMN_Identity::ValueType v;
      _primary_plmn_Identity_Type.read(reader, v);
      value.set_primary_plmn_Identity(v);
   }
   {
      asn1::generated::HARQ_Preamble_Mode::ValueType v;
      _harq_Preamble_Mode_Type.read(reader, v);
      value.set_harq_Preamble_Mode(v);
   }
   {
      asn1::generated::BEACON_PL_Est::ValueType v;
      _beaconPLEst_Type.read(reader, v);
      value.set_beaconPLEst(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _postVerificationPeriod_Type.read(reader, v);
      value.set_postVerificationPeriod(v);
   }
   {
      asn1::generated::DHS_Sync::ValueType v;
      _dhs_sync_Type.read(reader, v);
      value.set_dhs_sync(v);
   }
   {
      asn1::generated::TimingMaintainedSynchInd::ValueType v;
      _timingMaintainedSynchInd_Type.read(reader, v);
      value.set_timingMaintainedSynchInd(v);
   }
   {
      asn1::generated::MBMS_PL_ServiceRestrictInfo_r6::ValueType v;
      _mbms_PL_ServiceRestrictInfo_Type.read(reader, v);
      value.set_mbms_PL_ServiceRestrictInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void TransportChannelReconfiguration_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _delayRestrictionFlag_Type.write(writer, value.get_delayRestrictionFlag());
   _primary_plmn_Identity_Type.write(writer, value.get_primary_plmn_Identity());
   _harq_Preamble_Mode_Type.write(writer, value.get_harq_Preamble_Mode());
   _beaconPLEst_Type.write(writer, value.get_beaconPLEst());
   _postVerificationPeriod_Type.write(writer, value.get_postVerificationPeriod());
   _dhs_sync_Type.write(writer, value.get_dhs_sync());
   _timingMaintainedSynchInd_Type.write(writer, value.get_timingMaintainedSynchInd());
   _mbms_PL_ServiceRestrictInfo_Type.write(writer, value.get_mbms_PL_ServiceRestrictInfo());

   writer.writeSequenceEnd();
}


void TransportChannelReconfiguration_r6_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::DelayRestrictionFlag::ValueType v;
      _delayRestrictionFlag_Type.read(reader, v);
      value.set_delayRestrictionFlag(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::H_RNTI::ValueType v;
      _new_H_RNTI_Type.read(reader, v);
      value.set_new_H_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newPrimary_E_RNTI_Type.read(reader, v);
      value.set_newPrimary_E_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newSecondary_E_RNTI_Type.read(reader, v);
      value.set_newSecondary_E_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo_r6::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo_r5::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo_r4::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList_r6::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo_r4::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList_r5::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_DPCH_Info_r6::ValueType v;
      _ul_DPCH_Info_Type.read(reader, v);
      value.set_ul_DPCH_Info(v);
   }
   {
      asn1::generated::UL_EDCH_Information_r6::ValueType v;
      _ul_EDCH_Information_Type.read(reader, v);
      value.set_ul_EDCH_Information(v);
   }
   {
      asn1::generated::DL_HSPDSCH_Information_r6::ValueType v;
      _dl_HSPDSCH_Information_Type.read(reader, v);
      value.set_dl_HSPDSCH_Information(v);
   }
   {
      asn1::generated::DL_CommonInformation_r6::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r6::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }
   {
      asn1::generated::MBMS_PL_ServiceRestrictInfo_r6::ValueType v;
      _mbms_PL_ServiceRestrictInfo_Type.read(reader, v);
      value.set_mbms_PL_ServiceRestrictInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void TransportChannelReconfiguration_r6_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _delayRestrictionFlag_Type.write(writer, value.get_delayRestrictionFlag());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _new_H_RNTI_Type.write(writer, value.get_new_H_RNTI());
   _newPrimary_E_RNTI_Type.write(writer, value.get_newPrimary_E_RNTI());
   _newSecondary_E_RNTI_Type.write(writer, value.get_newSecondary_E_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_DPCH_Info_Type.write(writer, value.get_ul_DPCH_Info());
   _ul_EDCH_Information_Type.write(writer, value.get_ul_EDCH_Information());
   _dl_HSPDSCH_Information_Type.write(writer, value.get_dl_HSPDSCH_Information());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());
   _mbms_PL_ServiceRestrictInfo_Type.write(writer, value.get_mbms_PL_ServiceRestrictInfo());

   writer.writeSequenceEnd();
}


void TransportChannelReconfiguration_r7_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::DelayRestrictionFlag::ValueType v;
      _delayRestrictionFlag_Type.read(reader, v);
      value.set_delayRestrictionFlag(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::DSCH_RNTI::ValueType v;
      _new_DSCH_RNTI_Type.read(reader, v);
      value.set_new_DSCH_RNTI(v);
   }
   {
      asn1::generated::H_RNTI::ValueType v;
      _new_H_RNTI_Type.read(reader, v);
      value.set_new_H_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newPrimary_E_RNTI_Type.read(reader, v);
      value.set_newPrimary_E_RNTI(v);
   }
   {
      asn1::generated::E_RNTI::ValueType v;
      _newSecondary_E_RNTI_Type.read(reader, v);
      value.set_newSecondary_E_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo_r6::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo_r5::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo_r4::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList_r6::ValueType v;
      _ul_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo_r4::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList_r5::ValueType v;
      _dl_AddReconfTransChInfoList_Type.read(reader, v);
      value.set_dl_AddReconfTransChInfoList(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::UL_DPCH_Info_r7::ValueType v;
      _ul_DPCH_Info_Type.read(reader, v);
      value.set_ul_DPCH_Info(v);
   }
   {
      asn1::generated::UL_EDCH_Information_r6::ValueType v;
      _ul_EDCH_Information_Type.read(reader, v);
      value.set_ul_EDCH_Information(v);
   }
   {
      asn1::generated::DL_HSPDSCH_Information_r7::ValueType v;
      _dl_HSPDSCH_Information_Type.read(reader, v);
      value.set_dl_HSPDSCH_Information(v);
   }
   {
      asn1::generated::DL_CommonInformation_r7::ValueType v;
      _dl_CommonInformation_Type.read(reader, v);
      value.set_dl_CommonInformation(v);
   }
   {
      asn1::generated::DL_InformationPerRL_List_r7::ValueType v;
      _dl_InformationPerRL_List_Type.read(reader, v);
      value.set_dl_InformationPerRL_List(v);
   }
   {
      asn1::generated::MBMS_PL_ServiceRestrictInfo_r6::ValueType v;
      _mbms_PL_ServiceRestrictInfo_Type.read(reader, v);
      value.set_mbms_PL_ServiceRestrictInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void TransportChannelReconfiguration_r7_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _activationTime_Type.write(writer, value.get_activationTime());
   _delayRestrictionFlag_Type.write(writer, value.get_delayRestrictionFlag());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _new_DSCH_RNTI_Type.write(writer, value.get_new_DSCH_RNTI());
   _new_H_RNTI_Type.write(writer, value.get_new_H_RNTI());
   _newPrimary_E_RNTI_Type.write(writer, value.get_newPrimary_E_RNTI());
   _newSecondary_E_RNTI_Type.write(writer, value.get_newSecondary_E_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_AddReconfTransChInfoList_Type.write(writer, value.get_ul_AddReconfTransChInfoList());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_AddReconfTransChInfoList_Type.write(writer, value.get_dl_AddReconfTransChInfoList());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _ul_DPCH_Info_Type.write(writer, value.get_ul_DPCH_Info());
   _ul_EDCH_Information_Type.write(writer, value.get_ul_EDCH_Information());
   _dl_HSPDSCH_Information_Type.write(writer, value.get_dl_HSPDSCH_Information());
   _dl_CommonInformation_Type.write(writer, value.get_dl_CommonInformation());
   _dl_InformationPerRL_List_Type.write(writer, value.get_dl_InformationPerRL_List());
   _mbms_PL_ServiceRestrictInfo_Type.write(writer, value.get_mbms_PL_ServiceRestrictInfo());

   writer.writeSequenceEnd();
}


void TransportChannelReconfigurationComplete::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::IntegrityProtActivationInfo::ValueType v;
      _ul_IntegProtActivationInfo_Type.read(reader, v);
      value.set_ul_IntegProtActivationInfo(v);
   }
   {
      asn1::generated::UL_TimingAdvance::ValueType v;
      _ul_TimingAdvance_Type.read(reader, v);
      value.set_ul_TimingAdvance(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _count_C_ActivationTime_Type.read(reader, v);
      value.set_count_C_ActivationTime(v);
   }
   {
      asn1::generated::RB_ActivationTimeInfoList::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::UL_CounterSynchronisationInfo::ValueType v;
      _ul_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_ul_CounterSynchronisationInfo(v);
   }
   {
      _INTERNAL__SequenceType_transportChannelReconfigurationComplete-r3-add-ext_INTERNAL__v7xyNonCriticalExtensions_INTERNAL__SequenceType_transportChannelReconfigurationComplete-v7xyext_INTERNAL_asn1__generated__TransportChannelReconfigurationComplete_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void TransportChannelReconfigurationComplete::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _ul_IntegProtActivationInfo_Type.write(writer, value.get_ul_IntegProtActivationInfo());
   _ul_TimingAdvance_Type.write(writer, value.get_ul_TimingAdvance());
   _count_C_ActivationTime_Type.write(writer, value.get_count_C_ActivationTime());
   _dummy_Type.write(writer, value.get_dummy());
   _ul_CounterSynchronisationInfo_Type.write(writer, value.get_ul_CounterSynchronisationInfo());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void TransportChannelReconfigurationComplete_v7xyext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::EXT_UL_TimingAdvance::ValueType v;
      _ext_ul_TimingAdvance_Type.read(reader, v);
      value.set_ext_ul_TimingAdvance(v);
   }

   reader.readSequenceEnd(*this);
}

void TransportChannelReconfigurationComplete_v7xyext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ext_ul_TimingAdvance_Type.write(writer, value.get_ext_ul_TimingAdvance());

   writer.writeSequenceEnd();
}


void TransportChannelReconfigurationFailure::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::FailureCauseWithProtErr::ValueType v;
      _failureCause_Type.read(reader, v);
      value.set_failureCause(v);
   }
   {
      _INTERNAL__SequenceType_transportChannelReconfigurationFailure-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void TransportChannelReconfigurationFailure::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _failureCause_Type.write(writer, value.get_failureCause());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void TransportFormatCombinationControl::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL_asn1__NullType_tdd_INTERNAL__SequenceType_tfcs-ID_INTERNAL_asn1__generated__TFCS_Identity::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::TFC_Subset::ValueType v;
      _dpch_TFCS_InUplink_Type.read(reader, v);
      value.set_dpch_TFCS_InUplink(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTimeForTFCSubset_Type.read(reader, v);
      value.set_activationTimeForTFCSubset(v);
   }
   {
      asn1::generated::TFC_ControlDuration::ValueType v;
      _tfc_ControlDuration_Type.read(reader, v);
      value.set_tfc_ControlDuration(v);
   }
   {
      _INTERNAL__SequenceType_transportFormatCombinationControl-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void TransportFormatCombinationControl::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _dpch_TFCS_InUplink_Type.write(writer, value.get_dpch_TFCS_InUplink());
   _activationTimeForTFCSubset_Type.write(writer, value.get_activationTimeForTFCSubset());
   _tfc_ControlDuration_Type.write(writer, value.get_tfc_ControlDuration());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void TransportFormatCombinationControlFailure::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::FailureCauseWithProtErr::ValueType v;
      _failureCause_Type.read(reader, v);
      value.set_failureCause(v);
   }
   {
      _INTERNAL__SequenceType_transportFormatCombinationControlFailure-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void TransportFormatCombinationControlFailure::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _failureCause_Type.write(writer, value.get_failureCause());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void UECapabilityEnquiry::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_ueCapabilityEnquiry-r3_INTERNAL_asn1__generated__UECapabilityEnquiry_r3_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_ueCapabilityEnquiry-r3-add-ext_INTERNAL__v4b0NonCriticalExtensions_INTERNAL__SequenceType_ueCapabilityEnquiry-v4b0ext_INTERNAL_asn1__generated__UECapabilityEnquiry_v4b0ext_IEs_v590NonCriticalExtensions_INTERNAL__SequenceType_ueCapabilityEnquiry-v590ext_INTERNAL_asn1__generated__UECapabilityEnquiry_v590ext_IEs_v7xyNonCriticalExtensions_INTERNAL__SequenceType_ueCapabilityEnquiry-v7xyext_INTERNAL_asn1__generated__UECapabilityEnquiry_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void UECapabilityEnquiry::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void UECapabilityEnquiry_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::CapabilityUpdateRequirement::ValueType v;
      _capabilityUpdateRequirement_Type.read(reader, v);
      value.set_capabilityUpdateRequirement(v);
   }

   reader.readSequenceEnd(*this);
}

void UECapabilityEnquiry_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _capabilityUpdateRequirement_Type.write(writer, value.get_capabilityUpdateRequirement());

   writer.writeSequenceEnd();
}


void UECapabilityEnquiry_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CapabilityUpdateRequirement_r4_ext::ValueType v;
      _capabilityUpdateRequirement_r4_ext_Type.read(reader, v);
      value.set_capabilityUpdateRequirement_r4_ext(v);
   }

   reader.readSequenceEnd(*this);
}

void UECapabilityEnquiry_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _capabilityUpdateRequirement_r4_ext_Type.write(writer, value.get_capabilityUpdateRequirement_r4_ext());

   writer.writeSequenceEnd();
}


void UECapabilityEnquiry_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SystemSpecificCapUpdateReq_v590ext::ValueType v;
      _systemSpecificCapUpdateReq_Type.read(reader, v);
      value.set_systemSpecificCapUpdateReq(v);
   }

   reader.readSequenceEnd(*this);
}

void UECapabilityEnquiry_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _systemSpecificCapUpdateReq_Type.write(writer, value.get_systemSpecificCapUpdateReq());

   writer.writeSequenceEnd();
}


void UECapabilityEnquiry_v7xyext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CapabilityUpdateRequirement_r7_ext::ValueType v;
      _capabilityUpdateRequirement_r7_ext_Type.read(reader, v);
      value.set_capabilityUpdateRequirement_r7_ext(v);
   }

   reader.readSequenceEnd(*this);
}

void UECapabilityEnquiry_v7xyext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _capabilityUpdateRequirement_r7_ext_Type.write(writer, value.get_capabilityUpdateRequirement_r7_ext());

   writer.writeSequenceEnd();
}


void UECapabilityInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::UE_RadioAccessCapability::ValueType v;
      _ue_RadioAccessCapability_Type.read(reader, v);
      value.set_ue_RadioAccessCapability(v);
   }
   {
      asn1::generated::InterRAT_UE_RadioAccessCapabilityList::ValueType v;
      _ue_RATSpecificCapability_Type.read(reader, v);
      value.set_ue_RATSpecificCapability(v);
   }
   {
      _INTERNAL__SequenceType_ueCapabilityInformation-v370ext_INTERNAL_asn1__generated__UECapabilityInformation_v370ext_v380NonCriticalExtensions_INTERNAL__SequenceType_ueCapabilityInformation-v380ext_INTERNAL_asn1__generated__UECapabilityInformation_v380ext_IEs_v3a0NonCriticalExtensions_INTERNAL__SequenceType_ueCapabilityInformation-v3a0ext_INTERNAL_asn1__generated__UECapabilityInformation_v3a0ext_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_ueCapabilityInformation-r3-add-ext_INTERNAL__v4b0NonCriticalExtensions_INTERNAL__SequenceType_ueCapabilityInformation-v4b0ext_INTERNAL_asn1__generated__UECapabilityInformation_v4b0ext_v590NonCriticalExtensions_INTERNAL__SequenceType_ueCapabilityInformation-v590ext_INTERNAL_asn1__generated__UECapabilityInformation_v590ext_v5c0NonCriticalExtensions_INTERNAL__SequenceType_ueCapabilityInformation-v5c0ext_INTERNAL_asn1__generated__UECapabilityInformation_v5c0ext_v690NonCriticalExtensions_INTERNAL__SequenceType_ueCapabilityInformation-v690ext_INTERNAL_asn1__generated__UECapabilityInformation_v690ext_IEs_v7xyNonCriticalExtensions_INTERNAL__SequenceType_ueCapabilityInformation-v7xyext_INTERNAL_asn1__generated__UECapabilityInformation_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v370NonCriticalExtensions_Type.read(reader, v);
      value.set_v370NonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void UECapabilityInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _ue_RadioAccessCapability_Type.write(writer, value.get_ue_RadioAccessCapability());
   _ue_RATSpecificCapability_Type.write(writer, value.get_ue_RATSpecificCapability());
   _v370NonCriticalExtensions_Type.write(writer, value.get_v370NonCriticalExtensions());

   writer.writeSequenceEnd();
}


void UECapabilityInformation_v370ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v370ext::ValueType v;
      _ue_RadioAccessCapability_v370ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v370ext(v);
   }

   reader.readSequenceEnd(*this);
}

void UECapabilityInformation_v370ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v370ext_Type.write(writer, value.get_ue_RadioAccessCapability_v370ext());

   writer.writeSequenceEnd();
}


void UECapabilityInformation_v380ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v380ext::ValueType v;
      _ue_RadioAccessCapability_v380ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v380ext(v);
   }
   {
      asn1::generated::DL_PhysChCapabilityFDD_v380ext::ValueType v;
      _dl_PhysChCapabilityFDD_v380ext_Type.read(reader, v);
      value.set_dl_PhysChCapabilityFDD_v380ext(v);
   }

   reader.readSequenceEnd(*this);
}

void UECapabilityInformation_v380ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v380ext_Type.write(writer, value.get_ue_RadioAccessCapability_v380ext());
   _dl_PhysChCapabilityFDD_v380ext_Type.write(writer, value.get_dl_PhysChCapabilityFDD_v380ext());

   writer.writeSequenceEnd();
}


void UECapabilityInformation_v3a0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v3a0ext::ValueType v;
      _ue_RadioAccessCapability_v3a0ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v3a0ext(v);
   }

   reader.readSequenceEnd(*this);
}

void UECapabilityInformation_v3a0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v3a0ext_Type.write(writer, value.get_ue_RadioAccessCapability_v3a0ext());

   writer.writeSequenceEnd();
}


void UECapabilityInformation_r3_add_ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UECapabilityInformation_v650ext_IEs::ValueType v;
      _ueCapabilityInformation_v650ext_Type.read(reader, v);
      value.set_ueCapabilityInformation_v650ext(v);
   }
   {
      _INTERNAL__SequenceType_ueCapabilityInformation-v680ext_INTERNAL_asn1__generated__UECapabilityInformation_v680ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v680NonCriticalExtensions_Type.read(reader, v);
      value.set_v680NonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void UECapabilityInformation_r3_add_ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ueCapabilityInformation_v650ext_Type.write(writer, value.get_ueCapabilityInformation_v650ext());
   _v680NonCriticalExtensions_Type.write(writer, value.get_v680NonCriticalExtensions());

   writer.writeSequenceEnd();
}


void UECapabilityInformation_v4b0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v4b0ext::ValueType v;
      _ue_RadioAccessCapability_v4b0ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v4b0ext(v);
   }

   reader.readSequenceEnd(*this);
}

void UECapabilityInformation_v4b0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v4b0ext_Type.write(writer, value.get_ue_RadioAccessCapability_v4b0ext());

   writer.writeSequenceEnd();
}


void UECapabilityInformation_v590ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v3g0ext::ValueType v;
      _ue_RadioAccessCapability_v3g0ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v3g0ext(v);
   }
   {
      asn1::generated::UE_RadioAccessCapability_v590ext::ValueType v;
      _ue_RadioAccessCapability_v590ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v590ext(v);
   }
   {
      asn1::generated::InterRAT_UE_RadioAccessCapability_v590ext::ValueType v;
      _ue_RATSpecificCapability_v590ext_Type.read(reader, v);
      value.set_ue_RATSpecificCapability_v590ext(v);
   }

   reader.readSequenceEnd(*this);
}

void UECapabilityInformation_v590ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v3g0ext_Type.write(writer, value.get_ue_RadioAccessCapability_v3g0ext());
   _ue_RadioAccessCapability_v590ext_Type.write(writer, value.get_ue_RadioAccessCapability_v590ext());
   _ue_RATSpecificCapability_v590ext_Type.write(writer, value.get_ue_RATSpecificCapability_v590ext());

   writer.writeSequenceEnd();
}


void UECapabilityInformation_v5c0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v5c0ext::ValueType v;
      _ue_RadioAccessCapability_v5c0ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v5c0ext(v);
   }

   reader.readSequenceEnd(*this);
}

void UECapabilityInformation_v5c0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v5c0ext_Type.write(writer, value.get_ue_RadioAccessCapability_v5c0ext());

   writer.writeSequenceEnd();
}


void UECapabilityInformation_v650ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v650ext::ValueType v;
      _ue_RadioAccessCapability_v650ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v650ext(v);
   }

   reader.readSequenceEnd(*this);
}

void UECapabilityInformation_v650ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v650ext_Type.write(writer, value.get_ue_RadioAccessCapability_v650ext());

   writer.writeSequenceEnd();
}


void UECapabilityInformation_v680ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v680ext::ValueType v;
      _ue_RadioAccessCapability_v680ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v680ext(v);
   }

   reader.readSequenceEnd(*this);
}

void UECapabilityInformation_v680ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v680ext_Type.write(writer, value.get_ue_RadioAccessCapability_v680ext());

   writer.writeSequenceEnd();
}


void UECapabilityInformation_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _ueCapabilityContainer_Type.read(reader, v);
      value.set_ueCapabilityContainer(v);
   }

   reader.readSequenceEnd(*this);
}

void UECapabilityInformation_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ueCapabilityContainer_Type.write(writer, value.get_ueCapabilityContainer());

   writer.writeSequenceEnd();
}


void UECapabilityInformation_v7xyext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v7xyext::ValueType v;
      _ue_RadioAccessCapability_v7xyext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v7xyext(v);
   }

   reader.readSequenceEnd(*this);
}

void UECapabilityInformation_v7xyext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v7xyext_Type.write(writer, value.get_ue_RadioAccessCapability_v7xyext());

   writer.writeSequenceEnd();
}


void UECapabilityInformationConfirm::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_ueCapabilityInformationConfirm-r3_INTERNAL_asn1__generated__UECapabilityInformationConfirm_r3_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_ueCapabilityInformationConfirm-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void UECapabilityInformationConfirm::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void UECapabilityInformationConfirm_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }

   reader.readSequenceEnd(*this);
}

void UECapabilityInformationConfirm_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());

   writer.writeSequenceEnd();
}


void UplinkDirectTransfer::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _cn_DomainIdentity_Type.read(reader, v);
      value.set_cn_DomainIdentity(v);
   }
   {
      asn1::generated::NAS_Message::ValueType v;
      _nas_Message_Type.read(reader, v);
      value.set_nas_Message(v);
   }
   {
      asn1::generated::MeasuredResultsOnRACH::ValueType v;
      _measuredResultsOnRACH_Type.read(reader, v);
      value.set_measuredResultsOnRACH(v);
   }
   {
      _INTERNAL__SequenceType_uplinkDirectTransfer-r3-add-ext_INTERNAL__v690NonCriticalExtensions_INTERNAL__SequenceType_uplinkDirectTransfer-v690ext_INTERNAL_asn1__generated__UplinkDirectTransfer_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void UplinkDirectTransfer::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cn_DomainIdentity_Type.write(writer, value.get_cn_DomainIdentity());
   _nas_Message_Type.write(writer, value.get_nas_Message());
   _measuredResultsOnRACH_Type.write(writer, value.get_measuredResultsOnRACH());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void UplinkDirectTransfer_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MeasuredResultsOnRACHinterFreq::ValueType v;
      _measuredResultsOnRACHinterFreq_Type.read(reader, v);
      value.set_measuredResultsOnRACHinterFreq(v);
   }

   reader.readSequenceEnd(*this);
}

void UplinkDirectTransfer_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _measuredResultsOnRACHinterFreq_Type.write(writer, value.get_measuredResultsOnRACHinterFreq());

   writer.writeSequenceEnd();
}


void UplinkPhysicalChannelControl::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_uplinkPhysicalChannelControl-r3_INTERNAL_asn1__generated__UplinkPhysicalChannelControl_r3_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_uplinkPhysicalChannelControl-r3-add-ext_INTERNAL__v4b0NonCriticalExtensions_INTERNAL__SequenceType_uplinkPysicalChannelControl-v4b0ext_INTERNAL_asn1__generated__UplinkPhysicalChannelControl_v4b0ext_IEs_noncriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__ChoiceType_r4_INTERNAL__SequenceType_uplinkPhysicalChannelControl-r4_INTERNAL_asn1__generated__UplinkPhysicalChannelControl_r4_IEs_v4d0NonCriticalExtensions_INTERNAL__SequenceType_uplinkPhysicalChannelControl-r4-add-ext_INTERNAL__v690NonCriticalExtensions_INTERNAL__SequenceType_uplinkPhysicalChannelControl-v690ext_INTERNAL_asn1__generated__UplinkPhysicalChannelControl_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r5_INTERNAL__SequenceType_uplinkPhysicalChannelControl-r5_INTERNAL_asn1__generated__UplinkPhysicalChannelControl_r5_IEs_uplinkPhysicalChannelControl-r5-add-ext_INTERNAL__v690NonCriticalExtensions_INTERNAL__SequenceType_uplinkPhysicalChannelControl-v690ext_INTERNAL_asn1__generated__UplinkPhysicalChannelControl_v690ext_IEs_v6a0NonCriticalExtensions_INTERNAL__SequenceType_uplinkPhysicalChannelControl-v6a0ext_INTERNAL_asn1__generated__UplinkPhysicalChannelControl_v6a0ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r7_INTERNAL__SequenceType_uplinkPhysicalChannelControl-r7_INTERNAL_asn1__generated__UplinkPhysicalChannelControl_r7_IEs_uplinkPhysicalChannelControl-r7-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void UplinkPhysicalChannelControl::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void UplinkPhysicalChannelControl_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::CCTrCH_PowerControlInfo::ValueType v;
      _ccTrCH_PowerControlInfo_Type.read(reader, v);
      value.set_ccTrCH_PowerControlInfo(v);
   }
   {
      asn1::generated::UL_TimingAdvanceControl::ValueType v;
      _timingAdvance_Type.read(reader, v);
      value.set_timingAdvance(v);
   }
   {
      asn1::generated::Alpha::ValueType v;
      _alpha_Type.read(reader, v);
      value.set_alpha(v);
   }
   {
      asn1::generated::SpecialBurstScheduling::ValueType v;
      _specialBurstScheduling_Type.read(reader, v);
      value.set_specialBurstScheduling(v);
   }
   {
      asn1::generated::ConstantValueTdd::ValueType v;
      _prach_ConstantValue_Type.read(reader, v);
      value.set_prach_ConstantValue(v);
   }
   {
      asn1::generated::ConstantValueTdd::ValueType v;
      _pusch_ConstantValue_Type.read(reader, v);
      value.set_pusch_ConstantValue(v);
   }

   reader.readSequenceEnd(*this);
}

void UplinkPhysicalChannelControl_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _ccTrCH_PowerControlInfo_Type.write(writer, value.get_ccTrCH_PowerControlInfo());
   _timingAdvance_Type.write(writer, value.get_timingAdvance());
   _alpha_Type.write(writer, value.get_alpha());
   _specialBurstScheduling_Type.write(writer, value.get_specialBurstScheduling());
   _prach_ConstantValue_Type.write(writer, value.get_prach_ConstantValue());
   _pusch_ConstantValue_Type.write(writer, value.get_pusch_ConstantValue());

   writer.writeSequenceEnd();
}


void UplinkPhysicalChannelControl_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::OpenLoopPowerControl_IPDL_TDD_r4::ValueType v;
      _openLoopPowerControl_IPDL_TDD_Type.read(reader, v);
      value.set_openLoopPowerControl_IPDL_TDD(v);
   }

   reader.readSequenceEnd(*this);
}

void UplinkPhysicalChannelControl_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _openLoopPowerControl_IPDL_TDD_Type.write(writer, value.get_openLoopPowerControl_IPDL_TDD());

   writer.writeSequenceEnd();
}


void UplinkPhysicalChannelControl_r4_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CCTrCH_PowerControlInfo_r4::ValueType v;
      _ccTrCH_PowerControlInfo_Type.read(reader, v);
      value.set_ccTrCH_PowerControlInfo(v);
   }
   {
      asn1::generated::SpecialBurstScheduling::ValueType v;
      _specialBurstScheduling_Type.read(reader, v);
      value.set_specialBurstScheduling(v);
   }
   {
      _INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_timingAdvance_INTERNAL_asn1__generated__UL_TimingAdvanceControl_r4_alpha_INTERNAL_asn1__generated__Alpha_prach-ConstantValue_INTERNAL_asn1__generated__ConstantValueTdd_pusch-ConstantValue_INTERNAL_asn1__generated__ConstantValueTdd_openLoopPowerControl-IPDL-TDD_INTERNAL_asn1__generated__OpenLoopPowerControl_IPDL_TDD_r4_tdd128_INTERNAL__SequenceType_ul-SynchronisationParameters_INTERNAL_asn1__generated__UL_SynchronisationParameters_r4::ValueType v;
      _tddOption_Type.read(reader, v);
      value.set_tddOption(v);
   }

   reader.readSequenceEnd(*this);
}

void UplinkPhysicalChannelControl_r4_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ccTrCH_PowerControlInfo_Type.write(writer, value.get_ccTrCH_PowerControlInfo());
   _specialBurstScheduling_Type.write(writer, value.get_specialBurstScheduling());
   _tddOption_Type.write(writer, value.get_tddOption());

   writer.writeSequenceEnd();
}


void UplinkPhysicalChannelControl_r5_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CCTrCH_PowerControlInfo_r5::ValueType v;
      _ccTrCH_PowerControlInfo_Type.read(reader, v);
      value.set_ccTrCH_PowerControlInfo(v);
   }
   {
      asn1::generated::SpecialBurstScheduling::ValueType v;
      _specialBurstScheduling_Type.read(reader, v);
      value.set_specialBurstScheduling(v);
   }
   {
      _INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_timingAdvance_INTERNAL_asn1__generated__UL_TimingAdvanceControl_r4_alpha_INTERNAL_asn1__generated__Alpha_prach-ConstantValue_INTERNAL_asn1__generated__ConstantValueTdd_pusch-ConstantValue_INTERNAL_asn1__generated__ConstantValueTdd_openLoopPowerControl-IPDL-TDD_INTERNAL_asn1__generated__OpenLoopPowerControl_IPDL_TDD_r4_hs-SICH-PowerControl_INTERNAL_asn1__generated__HS_SICH_Power_Control_Info_TDD384_tdd128_INTERNAL__SequenceType_ul-SynchronisationParameters_INTERNAL_asn1__generated__UL_SynchronisationParameters_r4::ValueType v;
      _tddOption_Type.read(reader, v);
      value.set_tddOption(v);
   }

   reader.readSequenceEnd(*this);
}

void UplinkPhysicalChannelControl_r5_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ccTrCH_PowerControlInfo_Type.write(writer, value.get_ccTrCH_PowerControlInfo());
   _specialBurstScheduling_Type.write(writer, value.get_specialBurstScheduling());
   _tddOption_Type.write(writer, value.get_tddOption());

   writer.writeSequenceEnd();
}


void UplinkPhysicalChannelControl_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::BEACON_PL_Est::ValueType v;
      _beaconPLEst_Type.read(reader, v);
      value.set_beaconPLEst(v);
   }

   reader.readSequenceEnd(*this);
}

void UplinkPhysicalChannelControl_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _beaconPLEst_Type.write(writer, value.get_beaconPLEst());

   writer.writeSequenceEnd();
}


void UplinkPhysicalChannelControl_v6a0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _desired_HS_SICH_PowerLevel_Type.read(reader, v);
      value.set_desired_HS_SICH_PowerLevel(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _tpc_Step_Size_Type.read(reader, v);
      value.set_tpc_Step_Size(v);
   }

   reader.readSequenceEnd(*this);
}

void UplinkPhysicalChannelControl_v6a0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _desired_HS_SICH_PowerLevel_Type.write(writer, value.get_desired_HS_SICH_PowerLevel());
   _tpc_Step_Size_Type.write(writer, value.get_tpc_Step_Size());

   writer.writeSequenceEnd();
}


void UplinkPhysicalChannelControl_r7_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CCTrCH_PowerControlInfo_r7::ValueType v;
      _ccTrCH_PowerControlInfo_Type.read(reader, v);
      value.set_ccTrCH_PowerControlInfo(v);
   }
   {
      asn1::generated::SpecialBurstScheduling::ValueType v;
      _specialBurstScheduling_Type.read(reader, v);
      value.set_specialBurstScheduling(v);
   }
   {
      _INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_timingAdvance_INTERNAL_asn1__generated__UL_TimingAdvanceControl_r4_alpha_INTERNAL_asn1__generated__Alpha_prach-ConstantValue_INTERNAL_asn1__generated__ConstantValueTdd_pusch-ConstantValue_INTERNAL_asn1__generated__ConstantValueTdd_openLoopPowerControl-IPDL-TDD_INTERNAL_asn1__generated__OpenLoopPowerControl_IPDL_TDD_r4_hs-SICH-PowerControl_INTERNAL_asn1__generated__HS_SICH_Power_Control_Info_TDD384_tdd768_INTERNAL__SequenceType_timingAdvance_INTERNAL_asn1__generated__UL_TimingAdvanceControl_r7_alpha_INTERNAL_asn1__generated__Alpha_prach-ConstantValue_INTERNAL_asn1__generated__ConstantValueTdd_pusch-ConstantValue_INTERNAL_asn1__generated__ConstantValueTdd_openLoopPowerControl-IPDL-TDD_INTERNAL_asn1__generated__OpenLoopPowerControl_IPDL_TDD_r4_hs-SICH-PowerControl_INTERNAL_asn1__generated__HS_SICH_Power_Control_Info_TDD768_tdd128_INTERNAL__SequenceType_ul-SynchronisationParameters_INTERNAL_asn1__generated__UL_SynchronisationParameters_r4_desired-HS-SICH-PowerLevel_INTERNAL_asn1__IntegerType_tpc-Step-Size_INTERNAL__EnumeratedType::ValueType v;
      _tddOption_Type.read(reader, v);
      value.set_tddOption(v);
   }

   reader.readSequenceEnd(*this);
}

void UplinkPhysicalChannelControl_r7_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ccTrCH_PowerControlInfo_Type.write(writer, value.get_ccTrCH_PowerControlInfo());
   _specialBurstScheduling_Type.write(writer, value.get_specialBurstScheduling());
   _tddOption_Type.write(writer, value.get_tddOption());

   writer.writeSequenceEnd();
}


void URAUpdate::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::U_RNTI::ValueType v;
      _u_RNTI_Type.read(reader, v);
      value.set_u_RNTI(v);
   }
   {
      asn1::generated::URA_UpdateCause::ValueType v;
      _ura_UpdateCause_Type.read(reader, v);
      value.set_ura_UpdateCause(v);
   }
   {
      asn1::generated::ProtocolErrorIndicatorWithMoreInfo::ValueType v;
      _protocolErrorIndicator_Type.read(reader, v);
      value.set_protocolErrorIndicator(v);
   }
   {
      _INTERNAL__SequenceType_uraUpdate-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void URAUpdate::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _u_RNTI_Type.write(writer, value.get_u_RNTI());
   _ura_UpdateCause_Type.write(writer, value.get_ura_UpdateCause());
   _protocolErrorIndicator_Type.write(writer, value.get_protocolErrorIndicator());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void URAUpdateConfirm::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_uraUpdateConfirm-r3_INTERNAL_asn1__generated__URAUpdateConfirm_r3_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_uraUpdateConfirm-r3-add-ext_INTERNAL__v690NonCriticalExtensions_INTERNAL__SequenceType_uraUpdateConfirm-v690ext_INTERNAL_asn1__generated__URAUpdateConfirm_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__ChoiceType_r5_INTERNAL__SequenceType_uraUpdateConfirm-r5_INTERNAL_asn1__generated__URAUpdateConfirm_r5_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_uraUpdateConfirm-v690ext_INTERNAL_asn1__generated__URAUpdateConfirm_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void URAUpdateConfirm::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void URAUpdateConfirm_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void URAUpdateConfirm_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());

   writer.writeSequenceEnd();
}


void URAUpdateConfirm_r5_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::RRC_StateIndicator::ValueType v;
      _rrc_StateIndicator_Type.read(reader, v);
      value.set_rrc_StateIndicator(v);
   }
   {
      asn1::generated::UTRAN_DRX_CycleLengthCoefficient::ValueType v;
      _utran_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_utran_DRX_CycleLengthCoeff(v);
   }
   {
      asn1::generated::CN_InformationInfo::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo_r5::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void URAUpdateConfirm_r5_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _rrc_StateIndicator_Type.write(writer, value.get_rrc_StateIndicator());
   _utran_DRX_CycleLengthCoeff_Type.write(writer, value.get_utran_DRX_CycleLengthCoeff());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());

   writer.writeSequenceEnd();
}


void URAUpdateConfirm_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PLMN_Identity::ValueType v;
      _primary_plmn_Identity_Type.read(reader, v);
      value.set_primary_plmn_Identity(v);
   }

   reader.readSequenceEnd(*this);
}

void URAUpdateConfirm_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _primary_plmn_Identity_Type.write(writer, value.get_primary_plmn_Identity());

   writer.writeSequenceEnd();
}


void URAUpdateConfirm-CCCH::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_uraUpdateConfirm-CCCH-r3_INTERNAL_asn1__generated__URAUpdateConfirm_CCCH_r3_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_uraUpdateConfirm-CCCH-r3-add-ext_INTERNAL__v690NonCriticalExtensions_INTERNAL__SequenceType_uraUpdateConfirm-v690ext_INTERNAL_asn1__generated__URAUpdateConfirm_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_u-RNTI_INTERNAL_asn1__generated__U_RNTI_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void URAUpdateConfirm-CCCH::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void URAUpdateConfirm_CCCH_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::U_RNTI::ValueType v;
      _u_RNTI_Type.read(reader, v);
      value.set_u_RNTI(v);
   }
   {
      asn1::generated::URAUpdateConfirm_r3_IEs::ValueType v;
      _uraUpdateConfirm_Type.read(reader, v);
      value.set_uraUpdateConfirm(v);
   }

   reader.readSequenceEnd(*this);
}

void URAUpdateConfirm_CCCH_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _u_RNTI_Type.write(writer, value.get_u_RNTI());
   _uraUpdateConfirm_Type.write(writer, value.get_uraUpdateConfirm());

   writer.writeSequenceEnd();
}


void UTRANMobilityInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_utranMobilityInformation-r3_INTERNAL_asn1__generated__UTRANMobilityInformation_r3_IEs_v3a0NonCriticalExtensions_INTERNAL__SequenceType_utranMobilityInformation-v3a0ext_INTERNAL_asn1__generated__UTRANMobilityInformation_v3a0ext_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_utranMobilityInformation-r3-add-ext_INTERNAL__v690NonCriticalExtensions_INTERNAL__SequenceType_utranMobilityInformation-v690ext_INTERNAL_asn1__generated__UtranMobilityInformation_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_criticalExtensions_INTERNAL__ChoiceType_r5_INTERNAL__SequenceType_utranMobilityInformation-r5_INTERNAL_asn1__generated__UTRANMobilityInformation_r5_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_utranMobilityInformation-v690ext_INTERNAL_asn1__generated__UtranMobilityInformation_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void UTRANMobilityInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void UTRANMobilityInformation_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::UE_ConnTimersAndConstants::ValueType v;
      _ue_ConnTimersAndConstants_Type.read(reader, v);
      value.set_ue_ConnTimersAndConstants(v);
   }
   {
      asn1::generated::CN_InformationInfoFull::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void UTRANMobilityInformation_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _ue_ConnTimersAndConstants_Type.write(writer, value.get_ue_ConnTimersAndConstants());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void UTRANMobilityInformation_v3a0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_ConnTimersAndConstants_v3a0ext::ValueType v;
      _ue_ConnTimersAndConstants_v3a0ext_Type.read(reader, v);
      value.set_ue_ConnTimersAndConstants_v3a0ext(v);
   }

   reader.readSequenceEnd(*this);
}

void UTRANMobilityInformation_v3a0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_ConnTimersAndConstants_v3a0ext_Type.write(writer, value.get_ue_ConnTimersAndConstants_v3a0ext());

   writer.writeSequenceEnd();
}


void UTRANMobilityInformation_r5_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeInfo::ValueType v;
      _integrityProtectionModeInfo_Type.read(reader, v);
      value.set_integrityProtectionModeInfo(v);
   }
   {
      asn1::generated::CipheringModeInfo::ValueType v;
      _cipheringModeInfo_Type.read(reader, v);
      value.set_cipheringModeInfo(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _new_U_RNTI_Type.read(reader, v);
      value.set_new_U_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _new_C_RNTI_Type.read(reader, v);
      value.set_new_C_RNTI(v);
   }
   {
      asn1::generated::UE_ConnTimersAndConstants_r5::ValueType v;
      _ue_ConnTimersAndConstants_Type.read(reader, v);
      value.set_ue_ConnTimersAndConstants(v);
   }
   {
      asn1::generated::CN_InformationInfoFull::ValueType v;
      _cn_InformationInfo_Type.read(reader, v);
      value.set_cn_InformationInfo(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::DL_CounterSynchronisationInfo_r5::ValueType v;
      _dl_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_dl_CounterSynchronisationInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void UTRANMobilityInformation_r5_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeInfo_Type.write(writer, value.get_integrityProtectionModeInfo());
   _cipheringModeInfo_Type.write(writer, value.get_cipheringModeInfo());
   _new_U_RNTI_Type.write(writer, value.get_new_U_RNTI());
   _new_C_RNTI_Type.write(writer, value.get_new_C_RNTI());
   _ue_ConnTimersAndConstants_Type.write(writer, value.get_ue_ConnTimersAndConstants());
   _cn_InformationInfo_Type.write(writer, value.get_cn_InformationInfo());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _dl_CounterSynchronisationInfo_Type.write(writer, value.get_dl_CounterSynchronisationInfo());

   writer.writeSequenceEnd();
}


void UtranMobilityInformation_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PLMN_Identity::ValueType v;
      _primary_plmn_Identity_Type.read(reader, v);
      value.set_primary_plmn_Identity(v);
   }

   reader.readSequenceEnd(*this);
}

void UtranMobilityInformation_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _primary_plmn_Identity_Type.write(writer, value.get_primary_plmn_Identity());

   writer.writeSequenceEnd();
}


void UTRANMobilityInformationConfirm::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::IntegrityProtActivationInfo::ValueType v;
      _ul_IntegProtActivationInfo_Type.read(reader, v);
      value.set_ul_IntegProtActivationInfo(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _count_C_ActivationTime_Type.read(reader, v);
      value.set_count_C_ActivationTime(v);
   }
   {
      asn1::generated::RB_ActivationTimeInfoList::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::UL_CounterSynchronisationInfo::ValueType v;
      _ul_CounterSynchronisationInfo_Type.read(reader, v);
      value.set_ul_CounterSynchronisationInfo(v);
   }
   {
      _INTERNAL__SequenceType_utranMobilityInformationConfirm-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void UTRANMobilityInformationConfirm::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _ul_IntegProtActivationInfo_Type.write(writer, value.get_ul_IntegProtActivationInfo());
   _count_C_ActivationTime_Type.write(writer, value.get_count_C_ActivationTime());
   _dummy_Type.write(writer, value.get_dummy());
   _ul_CounterSynchronisationInfo_Type.write(writer, value.get_ul_CounterSynchronisationInfo());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void UTRANMobilityInformationFailure::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::FailureCauseWithProtErr::ValueType v;
      _failureCause_Type.read(reader, v);
      value.set_failureCause(v);
   }
   {
      _INTERNAL__SequenceType_utranMobilityInformationFailure-r3-add-ext_INTERNAL__nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _laterNonCriticalExtensions_Type.read(reader, v);
      value.set_laterNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void UTRANMobilityInformationFailure::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _failureCause_Type.write(writer, value.get_failureCause());
   _laterNonCriticalExtensions_Type.write(writer, value.get_laterNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void MBMSAccessInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_ServiceAccessInfoList_r6::ValueType v;
      _mbms_ServiceAccessInfoList_Type.read(reader, v);
      value.set_mbms_ServiceAccessInfoList(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMSAccessInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mbms_ServiceAccessInfoList_Type.write(writer, value.get_mbms_ServiceAccessInfoList());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void MBMSCommonPTMRBInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_CommonRBInformationList_r6::ValueType v;
      _mbms_CommonRBInformationList_Type.read(reader, v);
      value.set_mbms_CommonRBInformationList(v);
   }
   {
      asn1::generated::MBMS_TranspChInfoForEachTrCh_r6::ValueType v;
      _mbms_TranspChInfoForEachTrCh_Type.read(reader, v);
      value.set_mbms_TranspChInfoForEachTrCh(v);
   }
   {
      asn1::generated::MBMS_TranspChInfoForEachCCTrCh_r6::ValueType v;
      _mbms_TranspChInfoForEachCCTrCh_Type.read(reader, v);
      value.set_mbms_TranspChInfoForEachCCTrCh(v);
   }
   {
      asn1::generated::MBMS_PhyChInformationList_r6::ValueType v;
      _mbms_PhyChInformationList_Type.read(reader, v);
      value.set_mbms_PhyChInformationList(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMSCommonPTMRBInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mbms_CommonRBInformationList_Type.write(writer, value.get_mbms_CommonRBInformationList());
   _mbms_TranspChInfoForEachTrCh_Type.write(writer, value.get_mbms_TranspChInfoForEachTrCh());
   _mbms_TranspChInfoForEachCCTrCh_Type.write(writer, value.get_mbms_TranspChInfoForEachCCTrCh());
   _mbms_PhyChInformationList_Type.write(writer, value.get_mbms_PhyChInformationList());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void MBMSCurrentCellPTMRBInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_CurrentCell_SCCPCHList_r6::ValueType v;
      _mbms_CurrentCell_SCCPCHList_Type.read(reader, v);
      value.set_mbms_CurrentCell_SCCPCHList(v);
   }
   {
      asn1::generated::MBMS_SIBType5_SCCPCHList_r6::ValueType v;
      _mbms_SIBType5_SCCPCHList_Type.read(reader, v);
      value.set_mbms_SIBType5_SCCPCHList(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMSCurrentCellPTMRBInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mbms_CurrentCell_SCCPCHList_Type.write(writer, value.get_mbms_CurrentCell_SCCPCHList());
   _mbms_SIBType5_SCCPCHList_Type.write(writer, value.get_mbms_SIBType5_SCCPCHList());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void MBMSGeneralInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_PreferredFrequencyList_r6::ValueType v;
      _mbms_PreferredFrequencyInfo_Type.read(reader, v);
      value.set_mbms_PreferredFrequencyInfo(v);
   }
   {
      asn1::generated::MBMS_TimersAndCounters_r6::ValueType v;
      _mbms_TimersAndCounters_Type.read(reader, v);
      value.set_mbms_TimersAndCounters(v);
   }
   {
      asn1::generated::MBMS_MICHConfigurationInfo_r6::ValueType v;
      _michConfigurationInfo_Type.read(reader, v);
      value.set_michConfigurationInfo(v);
   }
   {
      asn1::generated::MBMS_CellGroupIdentity_r6::ValueType v;
      _cellGroupIdentity_Type.read(reader, v);
      value.set_cellGroupIdentity(v);
   }
   {
      asn1::generated::MBMS_MSCH_ConfigurationInfo_r6::ValueType v;
      _mschDefaultConfigurationInfo_Type.read(reader, v);
      value.set_mschDefaultConfigurationInfo(v);
   }
   {
      _INTERNAL__SequenceType_mbmsGenerAlInformation-v7xyext_INTERNAL_asn1__generated__MBMSGeneralInformation_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v7xyNonCriticalExtensions_Type.read(reader, v);
      value.set_v7xyNonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMSGeneralInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mbms_PreferredFrequencyInfo_Type.write(writer, value.get_mbms_PreferredFrequencyInfo());
   _mbms_TimersAndCounters_Type.write(writer, value.get_mbms_TimersAndCounters());
   _michConfigurationInfo_Type.write(writer, value.get_michConfigurationInfo());
   _cellGroupIdentity_Type.write(writer, value.get_cellGroupIdentity());
   _mschDefaultConfigurationInfo_Type.write(writer, value.get_mschDefaultConfigurationInfo());
   _v7xyNonCriticalExtensions_Type.write(writer, value.get_v7xyNonCriticalExtensions());

   writer.writeSequenceEnd();
}


void MBMSGeneralInformation_v7xyext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_MICHConfigurationInfo_r7::ValueType v;
      _mbmsMICHConfiguration_v7xyext_Type.read(reader, v);
      value.set_mbmsMICHConfiguration_v7xyext(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMSGeneralInformation_v7xyext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mbmsMICHConfiguration_v7xyext_Type.write(writer, value.get_mbmsMICHConfiguration_v7xyext());

   writer.writeSequenceEnd();
}


void MBMSModificationRequest::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_ServiceIdentity_r6::ValueType v;
      _mbms_PreferredFreqRequest_Type.read(reader, v);
      value.set_mbms_PreferredFreqRequest(v);
   }
   {
      asn1::generated::RB_InformationReleaseList::ValueType v;
      _rb_InformationReleaseList_Type.read(reader, v);
      value.set_rb_InformationReleaseList(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMSModificationRequest::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mbms_PreferredFreqRequest_Type.write(writer, value.get_mbms_PreferredFreqRequest());
   _rb_InformationReleaseList_Type.write(writer, value.get_rb_InformationReleaseList());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void MBMSModifiedServicesInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_ModifedServiceList_r6::ValueType v;
      _modifedServiceList_Type.read(reader, v);
      value.set_modifedServiceList(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _mbms_ReacquireMCCH_Type.read(reader, v);
      value.set_mbms_ReacquireMCCH(v);
   }
   {
      asn1::generated::DynamicPersistenceLevel::ValueType v;
      _mbms_DynamicPersistenceLevel_Type.read(reader, v);
      value.set_mbms_DynamicPersistenceLevel(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _endOfModifiedMCCHInformation_Type.read(reader, v);
      value.set_endOfModifiedMCCHInformation(v);
   }
   {
      asn1::generated::MBMS_NumberOfNeighbourCells_r6::ValueType v;
      _mbmsNumberOfNeighbourCells_Type.read(reader, v);
      value.set_mbmsNumberOfNeighbourCells(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _mbms_AllUnmodifiedPTMServices_Type.read(reader, v);
      value.set_mbms_AllUnmodifiedPTMServices(v);
   }
   {
      asn1::generated::MBMS_PTMActivationTime_r6::ValueType v;
      _mbms_PTMActivationTime_Type.read(reader, v);
      value.set_mbms_PTMActivationTime(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMSModifiedServicesInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modifedServiceList_Type.write(writer, value.get_modifedServiceList());
   _mbms_ReacquireMCCH_Type.write(writer, value.get_mbms_ReacquireMCCH());
   _mbms_DynamicPersistenceLevel_Type.write(writer, value.get_mbms_DynamicPersistenceLevel());
   _endOfModifiedMCCHInformation_Type.write(writer, value.get_endOfModifiedMCCHInformation());
   _mbmsNumberOfNeighbourCells_Type.write(writer, value.get_mbmsNumberOfNeighbourCells());
   _mbms_AllUnmodifiedPTMServices_Type.write(writer, value.get_mbms_AllUnmodifiedPTMServices());
   _mbms_PTMActivationTime_Type.write(writer, value.get_mbms_PTMActivationTime());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void MBMSNeighbouringCellPTMRBInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqCellID::ValueType v;
      _neighbouringCellIdentity_Type.read(reader, v);
      value.set_neighbouringCellIdentity(v);
   }
   {
      asn1::generated::MBMS_NeighbouringCellSCCPCHList_r6::ValueType v;
      _neighbouringCellSCCPCHList_Type.read(reader, v);
      value.set_neighbouringCellSCCPCHList(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMSNeighbouringCellPTMRBInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _neighbouringCellIdentity_Type.write(writer, value.get_neighbouringCellIdentity());
   _neighbouringCellSCCPCHList_Type.write(writer, value.get_neighbouringCellSCCPCHList());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void MBMSSchedulingInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_ServiceSchedulingInfoList_r6::ValueType v;
      _serviceSchedulingInfoList_Type.read(reader, v);
      value.set_serviceSchedulingInfoList(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMSSchedulingInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _serviceSchedulingInfoList_Type.write(writer, value.get_serviceSchedulingInfoList());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void MBMSUnmodifiedServicesInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_UnmodifiedServiceList_r6::ValueType v;
      _unmodifiedServiceList_Type.read(reader, v);
      value.set_unmodifiedServiceList(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMSUnmodifiedServicesInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _unmodifiedServiceList_Type.write(writer, value.get_unmodifiedServiceList());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void CN_DomainInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _cn_DomainIdentity_Type.read(reader, v);
      value.set_cn_DomainIdentity(v);
   }
   {
      asn1::generated::NAS_SystemInformationGSM_MAP::ValueType v;
      _cn_DomainSpecificNAS_Info_Type.read(reader, v);
      value.set_cn_DomainSpecificNAS_Info(v);
   }

   reader.readSequenceEnd(*this);
}

void CN_DomainInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cn_DomainIdentity_Type.write(writer, value.get_cn_DomainIdentity());
   _cn_DomainSpecificNAS_Info_Type.write(writer, value.get_cn_DomainSpecificNAS_Info());

   writer.writeSequenceEnd();
}


void CN_DomainInformationFull::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _cn_DomainIdentity_Type.read(reader, v);
      value.set_cn_DomainIdentity(v);
   }
   {
      asn1::generated::NAS_SystemInformationGSM_MAP::ValueType v;
      _cn_DomainSpecificNAS_Info_Type.read(reader, v);
      value.set_cn_DomainSpecificNAS_Info(v);
   }
   {
      asn1::generated::CN_DRX_CycleLengthCoefficient::ValueType v;
      _cn_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_cn_DRX_CycleLengthCoeff(v);
   }

   reader.readSequenceEnd(*this);
}

void CN_DomainInformationFull::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cn_DomainIdentity_Type.write(writer, value.get_cn_DomainIdentity());
   _cn_DomainSpecificNAS_Info_Type.write(writer, value.get_cn_DomainSpecificNAS_Info());
   _cn_DRX_CycleLengthCoeff_Type.write(writer, value.get_cn_DRX_CycleLengthCoeff());

   writer.writeSequenceEnd();
}


void CN_DomainSysInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _cn_DomainIdentity_Type.read(reader, v);
      value.set_cn_DomainIdentity(v);
   }
   {
      _INTERNAL__ChoiceType_gsm-MAP_INTERNAL_asn1__generated__NAS_SystemInformationGSM_MAP_ansi-41_INTERNAL_asn1__generated__NAS_SystemInformationANSI_41::ValueType v;
      _cn_Type_Type.read(reader, v);
      value.set_cn_Type(v);
   }
   {
      asn1::generated::CN_DRX_CycleLengthCoefficient::ValueType v;
      _cn_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_cn_DRX_CycleLengthCoeff(v);
   }

   reader.readSequenceEnd(*this);
}

void CN_DomainSysInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cn_DomainIdentity_Type.write(writer, value.get_cn_DomainIdentity());
   _cn_Type_Type.write(writer, value.get_cn_Type());
   _cn_DRX_CycleLengthCoeff_Type.write(writer, value.get_cn_DRX_CycleLengthCoeff());

   writer.writeSequenceEnd();
}


void CN_InformationInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PLMN_Identity::ValueType v;
      _plmn_Identity_Type.read(reader, v);
      value.set_plmn_Identity(v);
   }
   {
      asn1::generated::NAS_SystemInformationGSM_MAP::ValueType v;
      _cn_CommonGSM_MAP_NAS_SysInfo_Type.read(reader, v);
      value.set_cn_CommonGSM_MAP_NAS_SysInfo(v);
   }
   {
      asn1::generated::CN_DomainInformationList::ValueType v;
      _cn_DomainInformationList_Type.read(reader, v);
      value.set_cn_DomainInformationList(v);
   }

   reader.readSequenceEnd(*this);
}

void CN_InformationInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _plmn_Identity_Type.write(writer, value.get_plmn_Identity());
   _cn_CommonGSM_MAP_NAS_SysInfo_Type.write(writer, value.get_cn_CommonGSM_MAP_NAS_SysInfo());
   _cn_DomainInformationList_Type.write(writer, value.get_cn_DomainInformationList());

   writer.writeSequenceEnd();
}


void CN_InformationInfo_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PLMN_Identity::ValueType v;
      _plmn_Identity_Type.read(reader, v);
      value.set_plmn_Identity(v);
   }
   {
      asn1::generated::NAS_SystemInformationGSM_MAP::ValueType v;
      _cn_CommonGSM_MAP_NAS_SysInfo_Type.read(reader, v);
      value.set_cn_CommonGSM_MAP_NAS_SysInfo(v);
   }
   {
      asn1::generated::CN_DomainInformationList::ValueType v;
      _cn_DomainInformationList_Type.read(reader, v);
      value.set_cn_DomainInformationList(v);
   }
   {
      asn1::generated::PLMN_Identity::ValueType v;
      _primary_plmn_Identity_Type.read(reader, v);
      value.set_primary_plmn_Identity(v);
   }

   reader.readSequenceEnd(*this);
}

void CN_InformationInfo_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _plmn_Identity_Type.write(writer, value.get_plmn_Identity());
   _cn_CommonGSM_MAP_NAS_SysInfo_Type.write(writer, value.get_cn_CommonGSM_MAP_NAS_SysInfo());
   _cn_DomainInformationList_Type.write(writer, value.get_cn_DomainInformationList());
   _primary_plmn_Identity_Type.write(writer, value.get_primary_plmn_Identity());

   writer.writeSequenceEnd();
}


void CN_InformationInfoFull::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PLMN_Identity::ValueType v;
      _plmn_Identity_Type.read(reader, v);
      value.set_plmn_Identity(v);
   }
   {
      asn1::generated::NAS_SystemInformationGSM_MAP::ValueType v;
      _cn_CommonGSM_MAP_NAS_SysInfo_Type.read(reader, v);
      value.set_cn_CommonGSM_MAP_NAS_SysInfo(v);
   }
   {
      asn1::generated::CN_DomainInformationListFull::ValueType v;
      _cn_DomainInformationListFull_Type.read(reader, v);
      value.set_cn_DomainInformationListFull(v);
   }

   reader.readSequenceEnd(*this);
}

void CN_InformationInfoFull::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _plmn_Identity_Type.write(writer, value.get_plmn_Identity());
   _cn_CommonGSM_MAP_NAS_SysInfo_Type.write(writer, value.get_cn_CommonGSM_MAP_NAS_SysInfo());
   _cn_DomainInformationListFull_Type.write(writer, value.get_cn_DomainInformationListFull());

   writer.writeSequenceEnd();
}


void Gsm_map_IDNNS::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_localPTMSI_INTERNAL__SequenceType_routingparameter_INTERNAL_asn1__generated__RoutingParameter_tMSIofsamePLMN_INTERNAL__SequenceType_routingparameter_INTERNAL_asn1__generated__RoutingParameter_tMSIofdifferentPLMN_INTERNAL__SequenceType_routingparameter_INTERNAL_asn1__generated__RoutingParameter_iMSIresponsetopaging_INTERNAL__SequenceType_routingparameter_INTERNAL_asn1__generated__RoutingParameter_iMSIcauseUEinitiatedEvent_INTERNAL__SequenceType_routingparameter_INTERNAL_asn1__generated__RoutingParameter_iMEI_INTERNAL__SequenceType_routingparameter_INTERNAL_asn1__generated__RoutingParameter_spare2_INTERNAL__SequenceType_routingparameter_INTERNAL_asn1__generated__RoutingParameter_spare1_INTERNAL__SequenceType_routingparameter_INTERNAL_asn1__generated__RoutingParameter::ValueType v;
      _routingbasis_Type.read(reader, v);
      value.set_routingbasis(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }

   reader.readSequenceEnd(*this);
}

void Gsm_map_IDNNS::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _routingbasis_Type.write(writer, value.get_routingbasis());
   _dummy_Type.write(writer, value.get_dummy());

   writer.writeSequenceEnd();
}


void IntraDomainNasNodeSelector::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_release99_INTERNAL__SequenceType_cn-Type_INTERNAL__ChoiceType_gsm-Map-IDNNS_INTERNAL_asn1__generated__Gsm_map_IDNNS_ansi-41-IDNNS_INTERNAL_asn1__generated__Ansi_41_IDNNS_later_INTERNAL__SequenceType_futurecoding_INTERNAL_::ValueType v;
      _version_Type.read(reader, v);
      value.set_version(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraDomainNasNodeSelector::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _version_Type.write(writer, value.get_version());

   writer.writeSequenceEnd();
}


void LAI::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PLMN_Identity::ValueType v;
      _plmn_Identity_Type.read(reader, v);
      value.set_plmn_Identity(v);
   }
   {
      _INTERNAL_::ValueType v;
      _lac_Type.read(reader, v);
      value.set_lac(v);
   }

   reader.readSequenceEnd(*this);
}

void LAI::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _plmn_Identity_Type.write(writer, value.get_plmn_Identity());
   _lac_Type.write(writer, value.get_lac());

   writer.writeSequenceEnd();
}


void MultiplePLMN_List_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _mibPLMN_Identity_Type.read(reader, v);
      value.set_mibPLMN_Identity(v);
   }
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__PLMN_IdentityWithOptionalMCC_r6::ValueType v;
      _multiplePLMNs_Type.read(reader, v);
      value.set_multiplePLMNs(v);
   }

   reader.readSequenceEnd(*this);
}

void MultiplePLMN_List_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mibPLMN_Identity_Type.write(writer, value.get_mibPLMN_Identity());
   _multiplePLMNs_Type.write(writer, value.get_multiplePLMNs());

   writer.writeSequenceEnd();
}


void PLMN_Identity::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MCC::ValueType v;
      _mcc_Type.read(reader, v);
      value.set_mcc(v);
   }
   {
      asn1::generated::MNC::ValueType v;
      _mnc_Type.read(reader, v);
      value.set_mnc(v);
   }

   reader.readSequenceEnd(*this);
}

void PLMN_Identity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mcc_Type.write(writer, value.get_mcc());
   _mnc_Type.write(writer, value.get_mnc());

   writer.writeSequenceEnd();
}


void PLMN_IdentityWithOptionalMCC_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MCC::ValueType v;
      _mcc_Type.read(reader, v);
      value.set_mcc(v);
   }
   {
      asn1::generated::MNC::ValueType v;
      _mnc_Type.read(reader, v);
      value.set_mnc(v);
   }

   reader.readSequenceEnd(*this);
}

void PLMN_IdentityWithOptionalMCC_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mcc_Type.write(writer, value.get_mcc());
   _mnc_Type.write(writer, value.get_mnc());

   writer.writeSequenceEnd();
}


void PLMN-Type::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_gsm-MAP_Type)
   {
      _INTERNAL__SequenceType_plmn-Identity_INTERNAL_asn1__generated__PLMN_Identity::ValueType v;
      _gsm_MAP_Type.read(reader, v);
      value.set_gsm_MAP(v);
   }
   else if (choosenType == &_ansi-41_Type)
   {
      _INTERNAL__SequenceType_p-REV_INTERNAL_asn1__generated__P_REV_min-P-REV_INTERNAL_asn1__generated__Min_P_REV_sid_INTERNAL_asn1__generated__SID_nid_INTERNAL_asn1__generated__NID::ValueType v;
      _ansi_41_Type.read(reader, v);
      value.set_ansi_41(v);
   }
   else if (choosenType == &_gsm-MAP-and-ANSI-41_Type)
   {
      _INTERNAL__SequenceType_plmn-Identity_INTERNAL_asn1__generated__PLMN_Identity_p-REV_INTERNAL_asn1__generated__P_REV_min-P-REV_INTERNAL_asn1__generated__Min_P_REV_sid_INTERNAL_asn1__generated__SID_nid_INTERNAL_asn1__generated__NID::ValueType v;
      _gsm_MAP_and_ANSI_41_Type.read(reader, v);
      value.set_gsm_MAP_and_ANSI_41(v);
   }
   else if (choosenType == &_spare_Type)
   {
      asn1::NullType::ValueType v;
      _spare_Type.read(reader, v);
      value.set_spare(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _gsm-MAP_Type.toString() + ", " + _ansi-41_Type.toString() + ", " + _gsm-MAP-and-ANSI-41_Type.toString() + ", " + _spare_Type.toString());
   }
}

void PLMN-Type::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_gsm-MAP_Choosen())
      _gsm-MAP_Type.write(writer, value.get_gsm-MAP());
   else if (value.has_ansi-41_Choosen())
      _ansi-41_Type.write(writer, value.get_ansi-41());
   else if (value.has_gsm-MAP-and-ANSI-41_Choosen())
      _gsm-MAP-and-ANSI-41_Type.write(writer, value.get_gsm-MAP-and-ANSI-41());
   else if (value.has_spare_Choosen())
      _spare_Type.write(writer, value.get_spare());
}


void RAB-Identity::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_gsm-MAP-RAB-Identity_Type)
   {
      _INTERNAL_::ValueType v;
      _gsm_MAP_RAB_Identity_Type.read(reader, v);
      value.set_gsm_MAP_RAB_Identity(v);
   }
   else if (choosenType == &_ansi-41-RAB-Identity_Type)
   {
      _INTERNAL_::ValueType v;
      _ansi_41_RAB_Identity_Type.read(reader, v);
      value.set_ansi_41_RAB_Identity(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _gsm-MAP-RAB-Identity_Type.toString() + ", " + _ansi-41-RAB-Identity_Type.toString());
   }
}

void RAB-Identity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_gsm-MAP-RAB-Identity_Choosen())
      _gsm-MAP-RAB-Identity_Type.write(writer, value.get_gsm-MAP-RAB-Identity());
   else if (value.has_ansi-41-RAB-Identity_Choosen())
      _ansi-41-RAB-Identity_Type.write(writer, value.get_ansi-41-RAB-Identity());
}


void RAI::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::LAI::ValueType v;
      _lai_Type.read(reader, v);
      value.set_lai(v);
   }
   {
      asn1::generated::RoutingAreaCode::ValueType v;
      _rac_Type.read(reader, v);
      value.set_rac(v);
   }

   reader.readSequenceEnd(*this);
}

void RAI::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _lai_Type.write(writer, value.get_lai());
   _rac_Type.write(writer, value.get_rac());

   writer.writeSequenceEnd();
}


void CellAccessRestriction::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CellBarred::ValueType v;
      _cellBarred_Type.read(reader, v);
      value.set_cellBarred(v);
   }
   {
      asn1::generated::ReservedIndicator::ValueType v;
      _cellReservedForOperatorUse_Type.read(reader, v);
      value.set_cellReservedForOperatorUse(v);
   }
   {
      asn1::generated::ReservedIndicator::ValueType v;
      _cellReservationExtension_Type.read(reader, v);
      value.set_cellReservationExtension(v);
   }
   {
      asn1::generated::AccessClassBarredList::ValueType v;
      _accessClassBarredList_Type.read(reader, v);
      value.set_accessClassBarredList(v);
   }

   reader.readSequenceEnd(*this);
}

void CellAccessRestriction::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cellBarred_Type.write(writer, value.get_cellBarred());
   _cellReservedForOperatorUse_Type.write(writer, value.get_cellReservedForOperatorUse());
   _cellReservationExtension_Type.write(writer, value.get_cellReservationExtension());
   _accessClassBarredList_Type.write(writer, value.get_accessClassBarredList());

   writer.writeSequenceEnd();
}


void CellBarred::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_barred_Type)
   {
      _INTERNAL__SequenceType_intraFreqCellReselectionInd_INTERNAL_asn1__generated__AllowedIndicator_t-Barred_INTERNAL_asn1__generated__T_Barred::ValueType v;
      _barred_Type.read(reader, v);
      value.set_barred(v);
   }
   else if (choosenType == &_notBarred_Type)
   {
      asn1::NullType::ValueType v;
      _notBarred_Type.read(reader, v);
      value.set_notBarred(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _barred_Type.toString() + ", " + _notBarred_Type.toString());
   }
}

void CellBarred::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_barred_Choosen())
      _barred_Type.write(writer, value.get_barred());
   else if (value.has_notBarred_Choosen())
      _notBarred_Type.write(writer, value.get_notBarred());
}


void CellSelectReselectInfoSIB_3_4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MappingInfo::ValueType v;
      _mappingInfo_Type.read(reader, v);
      value.set_mappingInfo(v);
   }
   {
      _INTERNAL__ChoiceType_cpich-Ec-N0_INTERNAL__SequenceType_q-HYST-2-S_INTERNAL_asn1__generated__Q_Hyst_S_cpich-RSCP_INTERNAL_asn1__NullType::ValueType v;
      _cellSelectQualityMeasure_Type.read(reader, v);
      value.set_cellSelectQualityMeasure(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_s-Intrasearch_INTERNAL_asn1__generated__S_SearchQual_s-Intersearch_INTERNAL_asn1__generated__S_SearchQual_s-SearchHCS_INTERNAL_asn1__generated__S_SearchRXLEV_rat-List_INTERNAL_asn1__generated__RAT_FDD_InfoList_q-QualMin_INTERNAL_asn1__generated__Q_QualMin_q-RxlevMin_INTERNAL_asn1__generated__Q_RxlevMin_tdd_INTERNAL__SequenceType_s-Intrasearch_INTERNAL_asn1__generated__S_SearchRXLEV_s-Intersearch_INTERNAL_asn1__generated__S_SearchRXLEV_s-SearchHCS_INTERNAL_asn1__generated__S_SearchRXLEV_rat-List_INTERNAL_asn1__generated__RAT_TDD_InfoList_q-RxlevMin_INTERNAL_asn1__generated__Q_RxlevMin::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::Q_Hyst_S::ValueType v;
      _q_Hyst_l_S_Type.read(reader, v);
      value.set_q_Hyst_l_S(v);
   }
   {
      asn1::generated::T_Reselection_S::ValueType v;
      _t_Reselection_S_Type.read(reader, v);
      value.set_t_Reselection_S(v);
   }
   {
      asn1::generated::HCS_ServingCellInformation::ValueType v;
      _hcs_ServingCellInformation_Type.read(reader, v);
      value.set_hcs_ServingCellInformation(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }

   reader.readSequenceEnd(*this);
}

void CellSelectReselectInfoSIB_3_4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mappingInfo_Type.write(writer, value.get_mappingInfo());
   _cellSelectQualityMeasure_Type.write(writer, value.get_cellSelectQualityMeasure());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _q_Hyst_l_S_Type.write(writer, value.get_q_Hyst_l_S());
   _t_Reselection_S_Type.write(writer, value.get_t_Reselection_S());
   _hcs_ServingCellInformation_Type.write(writer, value.get_hcs_ServingCellInformation());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());

   writer.writeSequenceEnd();
}


void DomainSpecificAccessRestrictionForSharedNetwork-v670ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_domainSpecificAccessRestictionList_Type)
   {
      asn1::generated::DomainSpecificAccessRestrictionList_v670ext::ValueType v;
      _domainSpecificAccessRestictionList_Type.read(reader, v);
      value.set_domainSpecificAccessRestictionList(v);
   }
   else if (choosenType == &_domainSpecificAccessRestictionParametersForAll_Type)
   {
      asn1::generated::DomainSpecificAccessRestrictionParam_v670ext::ValueType v;
      _domainSpecificAccessRestictionParametersForAll_Type.read(reader, v);
      value.set_domainSpecificAccessRestictionParametersForAll(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _domainSpecificAccessRestictionList_Type.toString() + ", " + _domainSpecificAccessRestictionParametersForAll_Type.toString());
   }
}

void DomainSpecificAccessRestrictionForSharedNetwork-v670ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_domainSpecificAccessRestictionList_Choosen())
      _domainSpecificAccessRestictionList_Type.write(writer, value.get_domainSpecificAccessRestictionList());
   else if (value.has_domainSpecificAccessRestictionParametersForAll_Choosen())
      _domainSpecificAccessRestictionParametersForAll_Type.write(writer, value.get_domainSpecificAccessRestictionParametersForAll());
}


void DomainSpecificAccessRestrictionList_v670ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DomainSpecificAccessRestrictionParam_v670ext::ValueType v;
      _domainSpecificAccessRestrictionParametersForOperator1_Type.read(reader, v);
      value.set_domainSpecificAccessRestrictionParametersForOperator1(v);
   }
   {
      asn1::generated::DomainSpecificAccessRestrictionParam_v670ext::ValueType v;
      _domainSpecificAccessRestrictionParametersForOperator2_Type.read(reader, v);
      value.set_domainSpecificAccessRestrictionParametersForOperator2(v);
   }
   {
      asn1::generated::DomainSpecificAccessRestrictionParam_v670ext::ValueType v;
      _domainSpecificAccessRestrictionParametersForOperator3_Type.read(reader, v);
      value.set_domainSpecificAccessRestrictionParametersForOperator3(v);
   }
   {
      asn1::generated::DomainSpecificAccessRestrictionParam_v670ext::ValueType v;
      _domainSpecificAccessRestrictionParametersForOperator4_Type.read(reader, v);
      value.set_domainSpecificAccessRestrictionParametersForOperator4(v);
   }
   {
      asn1::generated::DomainSpecificAccessRestrictionParam_v670ext::ValueType v;
      _domainSpecificAccessRestrictionParametersForOperator5_Type.read(reader, v);
      value.set_domainSpecificAccessRestrictionParametersForOperator5(v);
   }

   reader.readSequenceEnd(*this);
}

void DomainSpecificAccessRestrictionList_v670ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _domainSpecificAccessRestrictionParametersForOperator1_Type.write(writer, value.get_domainSpecificAccessRestrictionParametersForOperator1());
   _domainSpecificAccessRestrictionParametersForOperator2_Type.write(writer, value.get_domainSpecificAccessRestrictionParametersForOperator2());
   _domainSpecificAccessRestrictionParametersForOperator3_Type.write(writer, value.get_domainSpecificAccessRestrictionParametersForOperator3());
   _domainSpecificAccessRestrictionParametersForOperator4_Type.write(writer, value.get_domainSpecificAccessRestrictionParametersForOperator4());
   _domainSpecificAccessRestrictionParametersForOperator5_Type.write(writer, value.get_domainSpecificAccessRestrictionParametersForOperator5());

   writer.writeSequenceEnd();
}


void DomainSpecificAccessRestrictionParam_v670ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DomainSpecificAccessRestriction_v670ext::ValueType v;
      _cSDomainSpecificAccessRestriction_Type.read(reader, v);
      value.set_cSDomainSpecificAccessRestriction(v);
   }
   {
      asn1::generated::DomainSpecificAccessRestriction_v670ext::ValueType v;
      _pSDomainSpecificAccessRestriction_Type.read(reader, v);
      value.set_pSDomainSpecificAccessRestriction(v);
   }

   reader.readSequenceEnd(*this);
}

void DomainSpecificAccessRestrictionParam_v670ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cSDomainSpecificAccessRestriction_Type.write(writer, value.get_cSDomainSpecificAccessRestriction());
   _pSDomainSpecificAccessRestriction_Type.write(writer, value.get_pSDomainSpecificAccessRestriction());

   writer.writeSequenceEnd();
}


void DomainSpecificAccessRestriction-v670ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_noRestriction_Type)
   {
      asn1::NullType::ValueType v;
      _noRestriction_Type.read(reader, v);
      value.set_noRestriction(v);
   }
   else if (choosenType == &_restriction_Type)
   {
      _INTERNAL__SequenceType_domainSpecficAccessClassBarredList_INTERNAL_asn1__generated__AccessClassBarredList::ValueType v;
      _restriction_Type.read(reader, v);
      value.set_restriction(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _noRestriction_Type.toString() + ", " + _restriction_Type.toString());
   }
}

void DomainSpecificAccessRestriction-v670ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_noRestriction_Choosen())
      _noRestriction_Type.write(writer, value.get_noRestriction());
   else if (value.has_restriction_Choosen())
      _restriction_Type.write(writer, value.get_restriction());
}


void Mapping::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RAT::ValueType v;
      _rat_Type.read(reader, v);
      value.set_rat(v);
   }
   {
      asn1::generated::MappingFunctionParameterList::ValueType v;
      _mappingFunctionParameterList_Type.read(reader, v);
      value.set_mappingFunctionParameterList(v);
   }

   reader.readSequenceEnd(*this);
}

void Mapping::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rat_Type.write(writer, value.get_rat());
   _mappingFunctionParameterList_Type.write(writer, value.get_mappingFunctionParameterList());

   writer.writeSequenceEnd();
}


void Mapping_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MappingFunctionParameterList::ValueType v;
      _mappingFunctionParameterList_Type.read(reader, v);
      value.set_mappingFunctionParameterList(v);
   }

   reader.readSequenceEnd(*this);
}

void Mapping_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mappingFunctionParameterList_Type.write(writer, value.get_mappingFunctionParameterList());

   writer.writeSequenceEnd();
}


void MappingFunctionParameter::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MappingFunctionType::ValueType v;
      _functionType_Type.read(reader, v);
      value.set_functionType(v);
   }
   {
      asn1::generated::MapParameter::ValueType v;
      _mapParameter1_Type.read(reader, v);
      value.set_mapParameter1(v);
   }
   {
      asn1::generated::MapParameter::ValueType v;
      _mapParameter2_Type.read(reader, v);
      value.set_mapParameter2(v);
   }
   {
      asn1::generated::UpperLimit::ValueType v;
      _upperLimit_Type.read(reader, v);
      value.set_upperLimit(v);
   }

   reader.readSequenceEnd(*this);
}

void MappingFunctionParameter::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _functionType_Type.write(writer, value.get_functionType());
   _mapParameter1_Type.write(writer, value.get_mapParameter1());
   _mapParameter2_Type.write(writer, value.get_mapParameter2());
   _upperLimit_Type.write(writer, value.get_upperLimit());

   writer.writeSequenceEnd();
}


void RAT_FDD_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RAT_Identifier::ValueType v;
      _rat_Identifier_Type.read(reader, v);
      value.set_rat_Identifier(v);
   }
   {
      asn1::generated::S_SearchQual::ValueType v;
      _s_SearchRAT_Type.read(reader, v);
      value.set_s_SearchRAT(v);
   }
   {
      asn1::generated::S_SearchRXLEV::ValueType v;
      _s_HCS_RAT_Type.read(reader, v);
      value.set_s_HCS_RAT(v);
   }
   {
      asn1::generated::S_SearchQual::ValueType v;
      _s_Limit_SearchRAT_Type.read(reader, v);
      value.set_s_Limit_SearchRAT(v);
   }

   reader.readSequenceEnd(*this);
}

void RAT_FDD_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rat_Identifier_Type.write(writer, value.get_rat_Identifier());
   _s_SearchRAT_Type.write(writer, value.get_s_SearchRAT());
   _s_HCS_RAT_Type.write(writer, value.get_s_HCS_RAT());
   _s_Limit_SearchRAT_Type.write(writer, value.get_s_Limit_SearchRAT());

   writer.writeSequenceEnd();
}


void RAT_TDD_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RAT_Identifier::ValueType v;
      _rat_Identifier_Type.read(reader, v);
      value.set_rat_Identifier(v);
   }
   {
      asn1::generated::S_SearchRXLEV::ValueType v;
      _s_SearchRAT_Type.read(reader, v);
      value.set_s_SearchRAT(v);
   }
   {
      asn1::generated::S_SearchRXLEV::ValueType v;
      _s_HCS_RAT_Type.read(reader, v);
      value.set_s_HCS_RAT(v);
   }
   {
      asn1::generated::S_SearchRXLEV::ValueType v;
      _s_Limit_SearchRAT_Type.read(reader, v);
      value.set_s_Limit_SearchRAT(v);
   }

   reader.readSequenceEnd(*this);
}

void RAT_TDD_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rat_Identifier_Type.write(writer, value.get_rat_Identifier());
   _s_SearchRAT_Type.write(writer, value.get_s_SearchRAT());
   _s_HCS_RAT_Type.write(writer, value.get_s_HCS_RAT());
   _s_Limit_SearchRAT_Type.write(writer, value.get_s_Limit_SearchRAT());

   writer.writeSequenceEnd();
}


void BackoffControlParams::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::N_AP_RetransMax::ValueType v;
      _n_AP_RetransMax_Type.read(reader, v);
      value.set_n_AP_RetransMax(v);
   }
   {
      asn1::generated::N_AccessFails::ValueType v;
      _n_AccessFails_Type.read(reader, v);
      value.set_n_AccessFails(v);
   }
   {
      asn1::generated::NF_BO_NoAICH::ValueType v;
      _nf_BO_NoAICH_Type.read(reader, v);
      value.set_nf_BO_NoAICH(v);
   }
   {
      asn1::generated::NS_BO_Busy::ValueType v;
      _ns_BO_Busy_Type.read(reader, v);
      value.set_ns_BO_Busy(v);
   }
   {
      asn1::generated::NF_BO_AllBusy::ValueType v;
      _nf_BO_AllBusy_Type.read(reader, v);
      value.set_nf_BO_AllBusy(v);
   }
   {
      asn1::generated::NF_BO_Mismatch::ValueType v;
      _nf_BO_Mismatch_Type.read(reader, v);
      value.set_nf_BO_Mismatch(v);
   }
   {
      asn1::generated::T_CPCH::ValueType v;
      _t_CPCH_Type.read(reader, v);
      value.set_t_CPCH(v);
   }

   reader.readSequenceEnd(*this);
}

void BackoffControlParams::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _n_AP_RetransMax_Type.write(writer, value.get_n_AP_RetransMax());
   _n_AccessFails_Type.write(writer, value.get_n_AccessFails());
   _nf_BO_NoAICH_Type.write(writer, value.get_nf_BO_NoAICH());
   _ns_BO_Busy_Type.write(writer, value.get_ns_BO_Busy());
   _nf_BO_AllBusy_Type.write(writer, value.get_nf_BO_AllBusy());
   _nf_BO_Mismatch_Type.write(writer, value.get_nf_BO_Mismatch());
   _t_CPCH_Type.write(writer, value.get_t_CPCH());

   writer.writeSequenceEnd();
}


void CapabilityUpdateRequirement::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _ue_RadioCapabilityFDDUpdateRequirement_Type.read(reader, v);
      value.set_ue_RadioCapabilityFDDUpdateRequirement(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _ue_RadioCapabilityTDDUpdateRequirement_Type.read(reader, v);
      value.set_ue_RadioCapabilityTDDUpdateRequirement(v);
   }
   {
      asn1::generated::SystemSpecificCapUpdateReqList::ValueType v;
      _systemSpecificCapUpdateReqList_Type.read(reader, v);
      value.set_systemSpecificCapUpdateReqList(v);
   }

   reader.readSequenceEnd(*this);
}

void CapabilityUpdateRequirement::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioCapabilityFDDUpdateRequirement_Type.write(writer, value.get_ue_RadioCapabilityFDDUpdateRequirement());
   _ue_RadioCapabilityTDDUpdateRequirement_Type.write(writer, value.get_ue_RadioCapabilityTDDUpdateRequirement());
   _systemSpecificCapUpdateReqList_Type.write(writer, value.get_systemSpecificCapUpdateReqList());

   writer.writeSequenceEnd();
}


void CapabilityUpdateRequirement_r4_ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _ue_RadioCapabilityUpdateRequirement_TDD128_Type.read(reader, v);
      value.set_ue_RadioCapabilityUpdateRequirement_TDD128(v);
   }

   reader.readSequenceEnd(*this);
}

void CapabilityUpdateRequirement_r4_ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioCapabilityUpdateRequirement_TDD128_Type.write(writer, value.get_ue_RadioCapabilityUpdateRequirement_TDD128());

   writer.writeSequenceEnd();
}


void CapabilityUpdateRequirement_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _ue_RadioCapabilityFDDUpdateRequirement_FDD_Type.read(reader, v);
      value.set_ue_RadioCapabilityFDDUpdateRequirement_FDD(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _ue_RadioCapabilityTDDUpdateRequirement_TDD384_Type.read(reader, v);
      value.set_ue_RadioCapabilityTDDUpdateRequirement_TDD384(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _ue_RadioCapabilityTDDUpdateRequirement_TDD128_Type.read(reader, v);
      value.set_ue_RadioCapabilityTDDUpdateRequirement_TDD128(v);
   }
   {
      asn1::generated::SystemSpecificCapUpdateReqList::ValueType v;
      _systemSpecificCapUpdateReqList_Type.read(reader, v);
      value.set_systemSpecificCapUpdateReqList(v);
   }

   reader.readSequenceEnd(*this);
}

void CapabilityUpdateRequirement_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioCapabilityFDDUpdateRequirement_FDD_Type.write(writer, value.get_ue_RadioCapabilityFDDUpdateRequirement_FDD());
   _ue_RadioCapabilityTDDUpdateRequirement_TDD384_Type.write(writer, value.get_ue_RadioCapabilityTDDUpdateRequirement_TDD384());
   _ue_RadioCapabilityTDDUpdateRequirement_TDD128_Type.write(writer, value.get_ue_RadioCapabilityTDDUpdateRequirement_TDD128());
   _systemSpecificCapUpdateReqList_Type.write(writer, value.get_systemSpecificCapUpdateReqList());

   writer.writeSequenceEnd();
}


void CapabilityUpdateRequirement_r7_ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _ue_RadioCapabilityUpdateRequirement_TDD768_Type.read(reader, v);
      value.set_ue_RadioCapabilityUpdateRequirement_TDD768(v);
   }

   reader.readSequenceEnd(*this);
}

void CapabilityUpdateRequirement_r7_ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioCapabilityUpdateRequirement_TDD768_Type.write(writer, value.get_ue_RadioCapabilityUpdateRequirement_TDD768());

   writer.writeSequenceEnd();
}


void CipheringModeCommand::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_startRestart_Type)
   {
      asn1::generated::CipheringAlgorithm::ValueType v;
      _startRestart_Type.read(reader, v);
      value.set_startRestart(v);
   }
   else if (choosenType == &_dummy_Type)
   {
      asn1::NullType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _startRestart_Type.toString() + ", " + _dummy_Type.toString());
   }
}

void CipheringModeCommand::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_startRestart_Choosen())
      _startRestart_Type.write(writer, value.get_startRestart());
   else if (value.has_dummy_Choosen())
      _dummy_Type.write(writer, value.get_dummy());
}


void CipheringModeInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CipheringModeCommand::ValueType v;
      _cipheringModeCommand_Type.read(reader, v);
      value.set_cipheringModeCommand(v);
   }
   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTimeForDPCH_Type.read(reader, v);
      value.set_activationTimeForDPCH(v);
   }
   {
      asn1::generated::RB_ActivationTimeInfoList::ValueType v;
      _rb_DL_CiphActivationTimeInfo_Type.read(reader, v);
      value.set_rb_DL_CiphActivationTimeInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CipheringModeInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cipheringModeCommand_Type.write(writer, value.get_cipheringModeCommand());
   _activationTimeForDPCH_Type.write(writer, value.get_activationTimeForDPCH());
   _rb_DL_CiphActivationTimeInfo_Type.write(writer, value.get_rb_DL_CiphActivationTimeInfo());

   writer.writeSequenceEnd();
}


void CN-PagedUE-Identity::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_imsi-GSM-MAP_Type)
   {
      asn1::generated::IMSI_GSM_MAP::ValueType v;
      _imsi_GSM_MAP_Type.read(reader, v);
      value.set_imsi_GSM_MAP(v);
   }
   else if (choosenType == &_tmsi-GSM-MAP_Type)
   {
      asn1::generated::TMSI_GSM_MAP::ValueType v;
      _tmsi_GSM_MAP_Type.read(reader, v);
      value.set_tmsi_GSM_MAP(v);
   }
   else if (choosenType == &_p-TMSI-GSM-MAP_Type)
   {
      asn1::generated::P_TMSI_GSM_MAP::ValueType v;
      _p_TMSI_GSM_MAP_Type.read(reader, v);
      value.set_p_TMSI_GSM_MAP(v);
   }
   else if (choosenType == &_imsi-DS-41_Type)
   {
      asn1::generated::IMSI_DS_41::ValueType v;
      _imsi_DS_41_Type.read(reader, v);
      value.set_imsi_DS_41(v);
   }
   else if (choosenType == &_tmsi-DS-41_Type)
   {
      asn1::generated::TMSI_DS_41::ValueType v;
      _tmsi_DS_41_Type.read(reader, v);
      value.set_tmsi_DS_41(v);
   }
   else if (choosenType == &_spare3_Type)
   {
      asn1::NullType::ValueType v;
      _spare3_Type.read(reader, v);
      value.set_spare3(v);
   }
   else if (choosenType == &_spare2_Type)
   {
      asn1::NullType::ValueType v;
      _spare2_Type.read(reader, v);
      value.set_spare2(v);
   }
   else if (choosenType == &_spare1_Type)
   {
      asn1::NullType::ValueType v;
      _spare1_Type.read(reader, v);
      value.set_spare1(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _imsi-GSM-MAP_Type.toString() + ", " + _tmsi-GSM-MAP_Type.toString() + ", " + _p-TMSI-GSM-MAP_Type.toString() + ", " + _imsi-DS-41_Type.toString() + ", " + _tmsi-DS-41_Type.toString() + ", " + _spare3_Type.toString() + ", " + _spare2_Type.toString() + ", " + _spare1_Type.toString());
   }
}

void CN-PagedUE-Identity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_imsi-GSM-MAP_Choosen())
      _imsi-GSM-MAP_Type.write(writer, value.get_imsi-GSM-MAP());
   else if (value.has_tmsi-GSM-MAP_Choosen())
      _tmsi-GSM-MAP_Type.write(writer, value.get_tmsi-GSM-MAP());
   else if (value.has_p-TMSI-GSM-MAP_Choosen())
      _p-TMSI-GSM-MAP_Type.write(writer, value.get_p-TMSI-GSM-MAP());
   else if (value.has_imsi-DS-41_Choosen())
      _imsi-DS-41_Type.write(writer, value.get_imsi-DS-41());
   else if (value.has_tmsi-DS-41_Choosen())
      _tmsi-DS-41_Type.write(writer, value.get_tmsi-DS-41());
   else if (value.has_spare3_Choosen())
      _spare3_Type.write(writer, value.get_spare3());
   else if (value.has_spare2_Choosen())
      _spare2_Type.write(writer, value.get_spare2());
   else if (value.has_spare1_Choosen())
      _spare1_Type.write(writer, value.get_spare1());
}


void CompressedModeMeasCapability::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _fdd_Measurements_Type.read(reader, v);
      value.set_fdd_Measurements(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _tdd_Measurements_Type.read(reader, v);
      value.set_tdd_Measurements(v);
   }
   {
      asn1::generated::GSM_Measurements::ValueType v;
      _gsm_Measurements_Type.read(reader, v);
      value.set_gsm_Measurements(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _multiCarrierMeasurements_Type.read(reader, v);
      value.set_multiCarrierMeasurements(v);
   }

   reader.readSequenceEnd(*this);
}

void CompressedModeMeasCapability::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _fdd_Measurements_Type.write(writer, value.get_fdd_Measurements());
   _tdd_Measurements_Type.write(writer, value.get_tdd_Measurements());
   _gsm_Measurements_Type.write(writer, value.get_gsm_Measurements());
   _multiCarrierMeasurements_Type.write(writer, value.get_multiCarrierMeasurements());

   writer.writeSequenceEnd();
}


void CompressedModeMeasCapability_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _tdd128_Measurements_Type.read(reader, v);
      value.set_tdd128_Measurements(v);
   }

   reader.readSequenceEnd(*this);
}

void CompressedModeMeasCapability_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tdd128_Measurements_Type.write(writer, value.get_tdd128_Measurements());

   writer.writeSequenceEnd();
}


void CompressedModeMeasCapabFDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RadioFrequencyBandFDD::ValueType v;
      _radioFrequencyBandFDD_Type.read(reader, v);
      value.set_radioFrequencyBandFDD(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _dl_MeasurementsFDD_Type.read(reader, v);
      value.set_dl_MeasurementsFDD(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _ul_MeasurementsFDD_Type.read(reader, v);
      value.set_ul_MeasurementsFDD(v);
   }

   reader.readSequenceEnd(*this);
}

void CompressedModeMeasCapabFDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _radioFrequencyBandFDD_Type.write(writer, value.get_radioFrequencyBandFDD());
   _dl_MeasurementsFDD_Type.write(writer, value.get_dl_MeasurementsFDD());
   _ul_MeasurementsFDD_Type.write(writer, value.get_ul_MeasurementsFDD());

   writer.writeSequenceEnd();
}


void CompressedModeMeasCapabFDD2::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RadioFrequencyBandFDD::ValueType v;
      _radioFrequencyBandFDD_Type.read(reader, v);
      value.set_radioFrequencyBandFDD(v);
   }
   {
      asn1::generated::RadioFrequencyBandFDD2::ValueType v;
      _radioFrequencyBandFDD2_Type.read(reader, v);
      value.set_radioFrequencyBandFDD2(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _dl_MeasurementsFDD_Type.read(reader, v);
      value.set_dl_MeasurementsFDD(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _ul_MeasurementsFDD_Type.read(reader, v);
      value.set_ul_MeasurementsFDD(v);
   }

   reader.readSequenceEnd(*this);
}

void CompressedModeMeasCapabFDD2::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _radioFrequencyBandFDD_Type.write(writer, value.get_radioFrequencyBandFDD());
   _radioFrequencyBandFDD2_Type.write(writer, value.get_radioFrequencyBandFDD2());
   _dl_MeasurementsFDD_Type.write(writer, value.get_dl_MeasurementsFDD());
   _ul_MeasurementsFDD_Type.write(writer, value.get_ul_MeasurementsFDD());

   writer.writeSequenceEnd();
}


void CompressedModeMeasCapabFDD_ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RadioFrequencyBandFDD2::ValueType v;
      _radioFrequencyBandFDD2_Type.read(reader, v);
      value.set_radioFrequencyBandFDD2(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _dl_MeasurementsFDD_Type.read(reader, v);
      value.set_dl_MeasurementsFDD(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _ul_MeasurementsFDD_Type.read(reader, v);
      value.set_ul_MeasurementsFDD(v);
   }

   reader.readSequenceEnd(*this);
}

void CompressedModeMeasCapabFDD_ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _radioFrequencyBandFDD2_Type.write(writer, value.get_radioFrequencyBandFDD2());
   _dl_MeasurementsFDD_Type.write(writer, value.get_dl_MeasurementsFDD());
   _ul_MeasurementsFDD_Type.write(writer, value.get_ul_MeasurementsFDD());

   writer.writeSequenceEnd();
}


void CompressedModeMeasCapabTDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RadioFrequencyBandTDD::ValueType v;
      _radioFrequencyBandTDD_Type.read(reader, v);
      value.set_radioFrequencyBandTDD(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _dl_MeasurementsTDD_Type.read(reader, v);
      value.set_dl_MeasurementsTDD(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _ul_MeasurementsTDD_Type.read(reader, v);
      value.set_ul_MeasurementsTDD(v);
   }

   reader.readSequenceEnd(*this);
}

void CompressedModeMeasCapabTDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _radioFrequencyBandTDD_Type.write(writer, value.get_radioFrequencyBandTDD());
   _dl_MeasurementsTDD_Type.write(writer, value.get_dl_MeasurementsTDD());
   _ul_MeasurementsTDD_Type.write(writer, value.get_ul_MeasurementsTDD());

   writer.writeSequenceEnd();
}


void CompressedModeMeasCapabGSM::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RadioFrequencyBandGSM::ValueType v;
      _radioFrequencyBandGSM_Type.read(reader, v);
      value.set_radioFrequencyBandGSM(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _dl_MeasurementsGSM_Type.read(reader, v);
      value.set_dl_MeasurementsGSM(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _ul_MeasurementsGSM_Type.read(reader, v);
      value.set_ul_MeasurementsGSM(v);
   }

   reader.readSequenceEnd(*this);
}

void CompressedModeMeasCapabGSM::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _radioFrequencyBandGSM_Type.write(writer, value.get_radioFrequencyBandGSM());
   _dl_MeasurementsGSM_Type.write(writer, value.get_dl_MeasurementsGSM());
   _ul_MeasurementsGSM_Type.write(writer, value.get_ul_MeasurementsGSM());

   writer.writeSequenceEnd();
}


void CompressedModeMeasCapabMC::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _dl_MeasurementsMC_Type.read(reader, v);
      value.set_dl_MeasurementsMC(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _ul_MeasurementsMC_Type.read(reader, v);
      value.set_ul_MeasurementsMC(v);
   }

   reader.readSequenceEnd(*this);
}

void CompressedModeMeasCapabMC::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_MeasurementsMC_Type.write(writer, value.get_dl_MeasurementsMC());
   _ul_MeasurementsMC_Type.write(writer, value.get_ul_MeasurementsMC());

   writer.writeSequenceEnd();
}


void CPCH_Parameters::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InitialPriorityDelayList::ValueType v;
      _initialPriorityDelayList_Type.read(reader, v);
      value.set_initialPriorityDelayList(v);
   }
   {
      asn1::generated::BackoffControlParams::ValueType v;
      _backoffControlParams_Type.read(reader, v);
      value.set_backoffControlParams(v);
   }
   {
      asn1::generated::PowerControlAlgorithm::ValueType v;
      _powerControlAlgorithm_Type.read(reader, v);
      value.set_powerControlAlgorithm(v);
   }
   {
      asn1::generated::DL_DPCCH_BER::ValueType v;
      _dl_DPCCH_BER_Type.read(reader, v);
      value.set_dl_DPCCH_BER(v);
   }

   reader.readSequenceEnd(*this);
}

void CPCH_Parameters::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _initialPriorityDelayList_Type.write(writer, value.get_initialPriorityDelayList());
   _backoffControlParams_Type.write(writer, value.get_backoffControlParams());
   _powerControlAlgorithm_Type.write(writer, value.get_powerControlAlgorithm());
   _dl_DPCCH_BER_Type.write(writer, value.get_dl_DPCCH_BER());

   writer.writeSequenceEnd();
}


void DL_PhysChCapabilityFDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _maxNoDPCH_PDSCH_Codes_Type.read(reader, v);
      value.set_maxNoDPCH_PDSCH_Codes(v);
   }
   {
      asn1::generated::MaxNoPhysChBitsReceived::ValueType v;
      _maxNoPhysChBitsReceived_Type.read(reader, v);
      value.set_maxNoPhysChBitsReceived(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _supportForSF_512_Type.read(reader, v);
      value.set_supportForSF_512(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::SimultaneousSCCPCH_DPCH_Reception::ValueType v;
      _dummy2_Type.read(reader, v);
      value.set_dummy2(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_PhysChCapabilityFDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _maxNoDPCH_PDSCH_Codes_Type.write(writer, value.get_maxNoDPCH_PDSCH_Codes());
   _maxNoPhysChBitsReceived_Type.write(writer, value.get_maxNoPhysChBitsReceived());
   _supportForSF_512_Type.write(writer, value.get_supportForSF_512());
   _dummy_Type.write(writer, value.get_dummy());
   _dummy2_Type.write(writer, value.get_dummy2());

   writer.writeSequenceEnd();
}


void DL_PhysChCapabilityFDD_v380ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SupportOfDedicatedPilotsForChEstimation::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_PhysChCapabilityFDD_v380ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dummy_Type.write(writer, value.get_dummy());

   writer.writeSequenceEnd();
}


void DL_PhysChCapabilityTDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MaxTS_PerFrame::ValueType v;
      _maxTS_PerFrame_Type.read(reader, v);
      value.set_maxTS_PerFrame(v);
   }
   {
      asn1::generated::MaxPhysChPerFrame::ValueType v;
      _maxPhysChPerFrame_Type.read(reader, v);
      value.set_maxPhysChPerFrame(v);
   }
   {
      asn1::generated::MinimumSF_DL::ValueType v;
      _minimumSF_Type.read(reader, v);
      value.set_minimumSF(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _supportOfPDSCH_Type.read(reader, v);
      value.set_supportOfPDSCH(v);
   }
   {
      asn1::generated::MaxPhysChPerTS::ValueType v;
      _maxPhysChPerTS_Type.read(reader, v);
      value.set_maxPhysChPerTS(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_PhysChCapabilityTDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _maxTS_PerFrame_Type.write(writer, value.get_maxTS_PerFrame());
   _maxPhysChPerFrame_Type.write(writer, value.get_maxPhysChPerFrame());
   _minimumSF_Type.write(writer, value.get_minimumSF());
   _supportOfPDSCH_Type.write(writer, value.get_supportOfPDSCH());
   _maxPhysChPerTS_Type.write(writer, value.get_maxPhysChPerTS());

   writer.writeSequenceEnd();
}


void DL_PhysChCapabilityTDD_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MaxTS_PerSubFrame_r4::ValueType v;
      _maxTS_PerSubFrame_Type.read(reader, v);
      value.set_maxTS_PerSubFrame(v);
   }
   {
      asn1::generated::MaxPhysChPerSubFrame_r4::ValueType v;
      _maxPhysChPerFrame_Type.read(reader, v);
      value.set_maxPhysChPerFrame(v);
   }
   {
      asn1::generated::MinimumSF_DL::ValueType v;
      _minimumSF_Type.read(reader, v);
      value.set_minimumSF(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _supportOfPDSCH_Type.read(reader, v);
      value.set_supportOfPDSCH(v);
   }
   {
      asn1::generated::MaxPhysChPerTS::ValueType v;
      _maxPhysChPerTS_Type.read(reader, v);
      value.set_maxPhysChPerTS(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _supportOf8PSK_Type.read(reader, v);
      value.set_supportOf8PSK(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_PhysChCapabilityTDD_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _maxTS_PerSubFrame_Type.write(writer, value.get_maxTS_PerSubFrame());
   _maxPhysChPerFrame_Type.write(writer, value.get_maxPhysChPerFrame());
   _minimumSF_Type.write(writer, value.get_minimumSF());
   _supportOfPDSCH_Type.write(writer, value.get_supportOfPDSCH());
   _maxPhysChPerTS_Type.write(writer, value.get_maxPhysChPerTS());
   _supportOf8PSK_Type.write(writer, value.get_supportOf8PSK());

   writer.writeSequenceEnd();
}


void DL_PhysChCapabilityTDD_768::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MaxTS_PerFrame::ValueType v;
      _maxTS_PerFrame_Type.read(reader, v);
      value.set_maxTS_PerFrame(v);
   }
   {
      asn1::generated::MaxPhysChPerFrame_768::ValueType v;
      _maxPhysChPerFrame_Type.read(reader, v);
      value.set_maxPhysChPerFrame(v);
   }
   {
      asn1::generated::MinimumSF_DL_768::ValueType v;
      _minimumSF_Type.read(reader, v);
      value.set_minimumSF(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _supportOfPDSCH_Type.read(reader, v);
      value.set_supportOfPDSCH(v);
   }
   {
      asn1::generated::MaxPhysChPerTS_768::ValueType v;
      _maxPhysChPerTS_Type.read(reader, v);
      value.set_maxPhysChPerTS(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_PhysChCapabilityTDD_768::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _maxTS_PerFrame_Type.write(writer, value.get_maxTS_PerFrame());
   _maxPhysChPerFrame_Type.write(writer, value.get_maxPhysChPerFrame());
   _minimumSF_Type.write(writer, value.get_minimumSF());
   _supportOfPDSCH_Type.write(writer, value.get_supportOfPDSCH());
   _maxPhysChPerTS_Type.write(writer, value.get_maxPhysChPerTS());

   writer.writeSequenceEnd();
}


void DL_TransChCapability::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MaxNoBits::ValueType v;
      _maxNoBitsReceived_Type.read(reader, v);
      value.set_maxNoBitsReceived(v);
   }
   {
      asn1::generated::MaxNoBits::ValueType v;
      _maxConvCodeBitsReceived_Type.read(reader, v);
      value.set_maxConvCodeBitsReceived(v);
   }
   {
      asn1::generated::TurboSupport::ValueType v;
      _turboDecodingSupport_Type.read(reader, v);
      value.set_turboDecodingSupport(v);
   }
   {
      asn1::generated::MaxSimultaneousTransChsDL::ValueType v;
      _maxSimultaneousTransChs_Type.read(reader, v);
      value.set_maxSimultaneousTransChs(v);
   }
   {
      asn1::generated::MaxSimultaneousCCTrCH_Count::ValueType v;
      _maxSimultaneousCCTrCH_Count_Type.read(reader, v);
      value.set_maxSimultaneousCCTrCH_Count(v);
   }
   {
      asn1::generated::MaxTransportBlocksDL::ValueType v;
      _maxReceivedTransportBlocks_Type.read(reader, v);
      value.set_maxReceivedTransportBlocks(v);
   }
   {
      asn1::generated::MaxNumberOfTFC_DL::ValueType v;
      _maxNumberOfTFC_Type.read(reader, v);
      value.set_maxNumberOfTFC(v);
   }
   {
      asn1::generated::MaxNumberOfTF::ValueType v;
      _maxNumberOfTF_Type.read(reader, v);
      value.set_maxNumberOfTF(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_TransChCapability::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _maxNoBitsReceived_Type.write(writer, value.get_maxNoBitsReceived());
   _maxConvCodeBitsReceived_Type.write(writer, value.get_maxConvCodeBitsReceived());
   _turboDecodingSupport_Type.write(writer, value.get_turboDecodingSupport());
   _maxSimultaneousTransChs_Type.write(writer, value.get_maxSimultaneousTransChs());
   _maxSimultaneousCCTrCH_Count_Type.write(writer, value.get_maxSimultaneousCCTrCH_Count());
   _maxReceivedTransportBlocks_Type.write(writer, value.get_maxReceivedTransportBlocks());
   _maxNumberOfTFC_Type.write(writer, value.get_maxNumberOfTFC());
   _maxNumberOfTF_Type.write(writer, value.get_maxNumberOfTF());

   writer.writeSequenceEnd();
}


void DRAC_SysInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TransmissionProbability::ValueType v;
      _transmissionProbability_Type.read(reader, v);
      value.set_transmissionProbability(v);
   }
   {
      asn1::generated::MaximumBitRate::ValueType v;
      _maximumBitRate_Type.read(reader, v);
      value.set_maximumBitRate(v);
   }

   reader.readSequenceEnd(*this);
}

void DRAC_SysInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _transmissionProbability_Type.write(writer, value.get_transmissionProbability());
   _maximumBitRate_Type.write(writer, value.get_maximumBitRate());

   writer.writeSequenceEnd();
}


void FailureCauseWithProtErr::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_configurationUnsupported_Type)
   {
      asn1::NullType::ValueType v;
      _configurationUnsupported_Type.read(reader, v);
      value.set_configurationUnsupported(v);
   }
   else if (choosenType == &_physicalChannelFailure_Type)
   {
      asn1::NullType::ValueType v;
      _physicalChannelFailure_Type.read(reader, v);
      value.set_physicalChannelFailure(v);
   }
   else if (choosenType == &_incompatibleSimultaneousReconfiguration_Type)
   {
      asn1::NullType::ValueType v;
      _incompatibleSimultaneousReconfiguration_Type.read(reader, v);
      value.set_incompatibleSimultaneousReconfiguration(v);
   }
   else if (choosenType == &_compressedModeRuntimeError_Type)
   {
      asn1::generated::TGPSI::ValueType v;
      _compressedModeRuntimeError_Type.read(reader, v);
      value.set_compressedModeRuntimeError(v);
   }
   else if (choosenType == &_protocolError_Type)
   {
      asn1::generated::ProtocolErrorInformation::ValueType v;
      _protocolError_Type.read(reader, v);
      value.set_protocolError(v);
   }
   else if (choosenType == &_cellUpdateOccurred_Type)
   {
      asn1::NullType::ValueType v;
      _cellUpdateOccurred_Type.read(reader, v);
      value.set_cellUpdateOccurred(v);
   }
   else if (choosenType == &_invalidConfiguration_Type)
   {
      asn1::NullType::ValueType v;
      _invalidConfiguration_Type.read(reader, v);
      value.set_invalidConfiguration(v);
   }
   else if (choosenType == &_configurationIncomplete_Type)
   {
      asn1::NullType::ValueType v;
      _configurationIncomplete_Type.read(reader, v);
      value.set_configurationIncomplete(v);
   }
   else if (choosenType == &_unsupportedMeasurement_Type)
   {
      asn1::NullType::ValueType v;
      _unsupportedMeasurement_Type.read(reader, v);
      value.set_unsupportedMeasurement(v);
   }
   else if (choosenType == &_mbmsSessionAlreadyReceivedCorrectly_Type)
   {
      asn1::NullType::ValueType v;
      _mbmsSessionAlreadyReceivedCorrectly_Type.read(reader, v);
      value.set_mbmsSessionAlreadyReceivedCorrectly(v);
   }
   else if (choosenType == &_lowerPriorityMBMSService_Type)
   {
      asn1::NullType::ValueType v;
      _lowerPriorityMBMSService_Type.read(reader, v);
      value.set_lowerPriorityMBMSService(v);
   }
   else if (choosenType == &_spare5_Type)
   {
      asn1::NullType::ValueType v;
      _spare5_Type.read(reader, v);
      value.set_spare5(v);
   }
   else if (choosenType == &_spare4_Type)
   {
      asn1::NullType::ValueType v;
      _spare4_Type.read(reader, v);
      value.set_spare4(v);
   }
   else if (choosenType == &_spare3_Type)
   {
      asn1::NullType::ValueType v;
      _spare3_Type.read(reader, v);
      value.set_spare3(v);
   }
   else if (choosenType == &_spare2_Type)
   {
      asn1::NullType::ValueType v;
      _spare2_Type.read(reader, v);
      value.set_spare2(v);
   }
   else if (choosenType == &_spare1_Type)
   {
      asn1::NullType::ValueType v;
      _spare1_Type.read(reader, v);
      value.set_spare1(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _configurationUnsupported_Type.toString() + ", " + _physicalChannelFailure_Type.toString() + ", " + _incompatibleSimultaneousReconfiguration_Type.toString() + ", " + _compressedModeRuntimeError_Type.toString() + ", " + _protocolError_Type.toString() + ", " + _cellUpdateOccurred_Type.toString() + ", " + _invalidConfiguration_Type.toString() + ", " + _configurationIncomplete_Type.toString() + ", " + _unsupportedMeasurement_Type.toString() + ", " + _mbmsSessionAlreadyReceivedCorrectly_Type.toString() + ", " + _lowerPriorityMBMSService_Type.toString() + ", " + _spare5_Type.toString() + ", " + _spare4_Type.toString() + ", " + _spare3_Type.toString() + ", " + _spare2_Type.toString() + ", " + _spare1_Type.toString());
   }
}

void FailureCauseWithProtErr::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_configurationUnsupported_Choosen())
      _configurationUnsupported_Type.write(writer, value.get_configurationUnsupported());
   else if (value.has_physicalChannelFailure_Choosen())
      _physicalChannelFailure_Type.write(writer, value.get_physicalChannelFailure());
   else if (value.has_incompatibleSimultaneousReconfiguration_Choosen())
      _incompatibleSimultaneousReconfiguration_Type.write(writer, value.get_incompatibleSimultaneousReconfiguration());
   else if (value.has_compressedModeRuntimeError_Choosen())
      _compressedModeRuntimeError_Type.write(writer, value.get_compressedModeRuntimeError());
   else if (value.has_protocolError_Choosen())
      _protocolError_Type.write(writer, value.get_protocolError());
   else if (value.has_cellUpdateOccurred_Choosen())
      _cellUpdateOccurred_Type.write(writer, value.get_cellUpdateOccurred());
   else if (value.has_invalidConfiguration_Choosen())
      _invalidConfiguration_Type.write(writer, value.get_invalidConfiguration());
   else if (value.has_configurationIncomplete_Choosen())
      _configurationIncomplete_Type.write(writer, value.get_configurationIncomplete());
   else if (value.has_unsupportedMeasurement_Choosen())
      _unsupportedMeasurement_Type.write(writer, value.get_unsupportedMeasurement());
   else if (value.has_mbmsSessionAlreadyReceivedCorrectly_Choosen())
      _mbmsSessionAlreadyReceivedCorrectly_Type.write(writer, value.get_mbmsSessionAlreadyReceivedCorrectly());
   else if (value.has_lowerPriorityMBMSService_Choosen())
      _lowerPriorityMBMSService_Type.write(writer, value.get_lowerPriorityMBMSService());
   else if (value.has_spare5_Choosen())
      _spare5_Type.write(writer, value.get_spare5());
   else if (value.has_spare4_Choosen())
      _spare4_Type.write(writer, value.get_spare4());
   else if (value.has_spare3_Choosen())
      _spare3_Type.write(writer, value.get_spare3());
   else if (value.has_spare2_Choosen())
      _spare2_Type.write(writer, value.get_spare2());
   else if (value.has_spare1_Choosen())
      _spare1_Type.write(writer, value.get_spare1());
}


void FailureCauseWithProtErrTrId::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::FailureCauseWithProtErr::ValueType v;
      _failureCause_Type.read(reader, v);
      value.set_failureCause(v);
   }

   reader.readSequenceEnd(*this);
}

void FailureCauseWithProtErrTrId::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _failureCause_Type.write(writer, value.get_failureCause());

   writer.writeSequenceEnd();
}


void GroupIdentityWithReleaseInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_ConnectionReleaseInformation::ValueType v;
      _rrc_ConnectionReleaseInformation_Type.read(reader, v);
      value.set_rrc_ConnectionReleaseInformation(v);
   }
   {
      asn1::generated::GroupReleaseInformation::ValueType v;
      _groupReleaseInformation_Type.read(reader, v);
      value.set_groupReleaseInformation(v);
   }

   reader.readSequenceEnd(*this);
}

void GroupIdentityWithReleaseInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_ConnectionReleaseInformation_Type.write(writer, value.get_rrc_ConnectionReleaseInformation());
   _groupReleaseInformation_Type.write(writer, value.get_groupReleaseInformation());

   writer.writeSequenceEnd();
}


void GroupReleaseInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::U_RNTI_Group::ValueType v;
      _uRNTI_Group_Type.read(reader, v);
      value.set_uRNTI_Group(v);
   }

   reader.readSequenceEnd(*this);
}

void GroupReleaseInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _uRNTI_Group_Type.write(writer, value.get_uRNTI_Group());

   writer.writeSequenceEnd();
}


void GSM_Measurements::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _gsm900_Type.read(reader, v);
      value.set_gsm900(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _dcs1800_Type.read(reader, v);
      value.set_dcs1800(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _gsm1900_Type.read(reader, v);
      value.set_gsm1900(v);
   }

   reader.readSequenceEnd(*this);
}

void GSM_Measurements::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _gsm900_Type.write(writer, value.get_gsm900());
   _dcs1800_Type.write(writer, value.get_dcs1800());
   _gsm1900_Type.write(writer, value.get_gsm1900());

   writer.writeSequenceEnd();
}


void IMSI_and_ESN_DS_41::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IMSI_DS_41::ValueType v;
      _imsi_DS_41_Type.read(reader, v);
      value.set_imsi_DS_41(v);
   }
   {
      asn1::generated::ESN_DS_41::ValueType v;
      _esn_DS_41_Type.read(reader, v);
      value.set_esn_DS_41(v);
   }

   reader.readSequenceEnd(*this);
}

void IMSI_and_ESN_DS_41::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _imsi_DS_41_Type.write(writer, value.get_imsi_DS_41());
   _esn_DS_41_Type.write(writer, value.get_esn_DS_41());

   writer.writeSequenceEnd();
}


void InitialUE-Identity::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_imsi_Type)
   {
      asn1::generated::IMSI_GSM_MAP::ValueType v;
      _imsi_Type.read(reader, v);
      value.set_imsi(v);
   }
   else if (choosenType == &_tmsi-and-LAI_Type)
   {
      asn1::generated::TMSI_and_LAI_GSM_MAP::ValueType v;
      _tmsi_and_LAI_Type.read(reader, v);
      value.set_tmsi_and_LAI(v);
   }
   else if (choosenType == &_p-TMSI-and-RAI_Type)
   {
      asn1::generated::P_TMSI_and_RAI_GSM_MAP::ValueType v;
      _p_TMSI_and_RAI_Type.read(reader, v);
      value.set_p_TMSI_and_RAI(v);
   }
   else if (choosenType == &_imei_Type)
   {
      asn1::generated::IMEI::ValueType v;
      _imei_Type.read(reader, v);
      value.set_imei(v);
   }
   else if (choosenType == &_esn-DS-41_Type)
   {
      asn1::generated::ESN_DS_41::ValueType v;
      _esn_DS_41_Type.read(reader, v);
      value.set_esn_DS_41(v);
   }
   else if (choosenType == &_imsi-DS-41_Type)
   {
      asn1::generated::IMSI_DS_41::ValueType v;
      _imsi_DS_41_Type.read(reader, v);
      value.set_imsi_DS_41(v);
   }
   else if (choosenType == &_imsi-and-ESN-DS-41_Type)
   {
      asn1::generated::IMSI_and_ESN_DS_41::ValueType v;
      _imsi_and_ESN_DS_41_Type.read(reader, v);
      value.set_imsi_and_ESN_DS_41(v);
   }
   else if (choosenType == &_tmsi-DS-41_Type)
   {
      asn1::generated::TMSI_DS_41::ValueType v;
      _tmsi_DS_41_Type.read(reader, v);
      value.set_tmsi_DS_41(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _imsi_Type.toString() + ", " + _tmsi-and-LAI_Type.toString() + ", " + _p-TMSI-and-RAI_Type.toString() + ", " + _imei_Type.toString() + ", " + _esn-DS-41_Type.toString() + ", " + _imsi-DS-41_Type.toString() + ", " + _imsi-and-ESN-DS-41_Type.toString() + ", " + _tmsi-DS-41_Type.toString());
   }
}

void InitialUE-Identity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_imsi_Choosen())
      _imsi_Type.write(writer, value.get_imsi());
   else if (value.has_tmsi-and-LAI_Choosen())
      _tmsi-and-LAI_Type.write(writer, value.get_tmsi-and-LAI());
   else if (value.has_p-TMSI-and-RAI_Choosen())
      _p-TMSI-and-RAI_Type.write(writer, value.get_p-TMSI-and-RAI());
   else if (value.has_imei_Choosen())
      _imei_Type.write(writer, value.get_imei());
   else if (value.has_esn-DS-41_Choosen())
      _esn-DS-41_Type.write(writer, value.get_esn-DS-41());
   else if (value.has_imsi-DS-41_Choosen())
      _imsi-DS-41_Type.write(writer, value.get_imsi-DS-41());
   else if (value.has_imsi-and-ESN-DS-41_Choosen())
      _imsi-and-ESN-DS-41_Type.write(writer, value.get_imsi-and-ESN-DS-41());
   else if (value.has_tmsi-DS-41_Choosen())
      _tmsi-DS-41_Type.write(writer, value.get_tmsi-DS-41());
}


void IntegrityCheckInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MessageAuthenticationCode::ValueType v;
      _messageAuthenticationCode_Type.read(reader, v);
      value.set_messageAuthenticationCode(v);
   }
   {
      asn1::generated::RRC_MessageSequenceNumber::ValueType v;
      _rrc_MessageSequenceNumber_Type.read(reader, v);
      value.set_rrc_MessageSequenceNumber(v);
   }

   reader.readSequenceEnd(*this);
}

void IntegrityCheckInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _messageAuthenticationCode_Type.write(writer, value.get_messageAuthenticationCode());
   _rrc_MessageSequenceNumber_Type.write(writer, value.get_rrc_MessageSequenceNumber());

   writer.writeSequenceEnd();
}


void IntegrityProtActivationInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_MessageSequenceNumberList::ValueType v;
      _rrc_MessageSequenceNumberList_Type.read(reader, v);
      value.set_rrc_MessageSequenceNumberList(v);
   }

   reader.readSequenceEnd(*this);
}

void IntegrityProtActivationInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_MessageSequenceNumberList_Type.write(writer, value.get_rrc_MessageSequenceNumberList());

   writer.writeSequenceEnd();
}


void IntegrityProtectionModeCommand::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_startIntegrityProtection_Type)
   {
      _INTERNAL__SequenceType_integrityProtInitNumber_INTERNAL_asn1__generated__IntegrityProtInitNumber::ValueType v;
      _startIntegrityProtection_Type.read(reader, v);
      value.set_startIntegrityProtection(v);
   }
   else if (choosenType == &_modify_Type)
   {
      _INTERNAL__SequenceType_dl-IntegrityProtActivationInfo_INTERNAL_asn1__generated__IntegrityProtActivationInfo::ValueType v;
      _modify_Type.read(reader, v);
      value.set_modify(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _startIntegrityProtection_Type.toString() + ", " + _modify_Type.toString());
   }
}

void IntegrityProtectionModeCommand::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_startIntegrityProtection_Choosen())
      _startIntegrityProtection_Type.write(writer, value.get_startIntegrityProtection());
   else if (value.has_modify_Choosen())
      _modify_Type.write(writer, value.get_modify());
}


void IntegrityProtectionModeInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntegrityProtectionModeCommand::ValueType v;
      _integrityProtectionModeCommand_Type.read(reader, v);
      value.set_integrityProtectionModeCommand(v);
   }
   {
      asn1::generated::IntegrityProtectionAlgorithm::ValueType v;
      _integrityProtectionAlgorithm_Type.read(reader, v);
      value.set_integrityProtectionAlgorithm(v);
   }

   reader.readSequenceEnd(*this);
}

void IntegrityProtectionModeInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _integrityProtectionModeCommand_Type.write(writer, value.get_integrityProtectionModeCommand());
   _integrityProtectionAlgorithm_Type.write(writer, value.get_integrityProtectionAlgorithm());

   writer.writeSequenceEnd();
}


void MeasurementCapability::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CompressedModeMeasCapability::ValueType v;
      _downlinkCompressedMode_Type.read(reader, v);
      value.set_downlinkCompressedMode(v);
   }
   {
      asn1::generated::CompressedModeMeasCapability::ValueType v;
      _uplinkCompressedMode_Type.read(reader, v);
      value.set_uplinkCompressedMode(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementCapability::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _downlinkCompressedMode_Type.write(writer, value.get_downlinkCompressedMode());
   _uplinkCompressedMode_Type.write(writer, value.get_uplinkCompressedMode());

   writer.writeSequenceEnd();
}


void MeasurementCapabilityExt::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CompressedModeMeasCapabFDDList::ValueType v;
      _compressedModeMeasCapabFDDList_Type.read(reader, v);
      value.set_compressedModeMeasCapabFDDList(v);
   }
   {
      asn1::generated::CompressedModeMeasCapabTDDList::ValueType v;
      _compressedModeMeasCapabTDDList_Type.read(reader, v);
      value.set_compressedModeMeasCapabTDDList(v);
   }
   {
      asn1::generated::CompressedModeMeasCapabGSMList::ValueType v;
      _compressedModeMeasCapabGSMList_Type.read(reader, v);
      value.set_compressedModeMeasCapabGSMList(v);
   }
   {
      asn1::generated::CompressedModeMeasCapabMC::ValueType v;
      _compressedModeMeasCapabMC_Type.read(reader, v);
      value.set_compressedModeMeasCapabMC(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementCapabilityExt::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _compressedModeMeasCapabFDDList_Type.write(writer, value.get_compressedModeMeasCapabFDDList());
   _compressedModeMeasCapabTDDList_Type.write(writer, value.get_compressedModeMeasCapabTDDList());
   _compressedModeMeasCapabGSMList_Type.write(writer, value.get_compressedModeMeasCapabGSMList());
   _compressedModeMeasCapabMC_Type.write(writer, value.get_compressedModeMeasCapabMC());

   writer.writeSequenceEnd();
}


void MeasurementCapabilityExt2::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CompressedModeMeasCapabFDDList2::ValueType v;
      _compressedModeMeasCapabFDDList_Type.read(reader, v);
      value.set_compressedModeMeasCapabFDDList(v);
   }
   {
      asn1::generated::CompressedModeMeasCapabTDDList::ValueType v;
      _compressedModeMeasCapabTDDList_Type.read(reader, v);
      value.set_compressedModeMeasCapabTDDList(v);
   }
   {
      asn1::generated::CompressedModeMeasCapabGSMList::ValueType v;
      _compressedModeMeasCapabGSMList_Type.read(reader, v);
      value.set_compressedModeMeasCapabGSMList(v);
   }
   {
      asn1::generated::CompressedModeMeasCapabMC::ValueType v;
      _compressedModeMeasCapabMC_Type.read(reader, v);
      value.set_compressedModeMeasCapabMC(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementCapabilityExt2::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _compressedModeMeasCapabFDDList_Type.write(writer, value.get_compressedModeMeasCapabFDDList());
   _compressedModeMeasCapabTDDList_Type.write(writer, value.get_compressedModeMeasCapabTDDList());
   _compressedModeMeasCapabGSMList_Type.write(writer, value.get_compressedModeMeasCapabGSMList());
   _compressedModeMeasCapabMC_Type.write(writer, value.get_compressedModeMeasCapabMC());

   writer.writeSequenceEnd();
}


void MeasurementCapability_r4_ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CompressedModeMeasCapability_LCR_r4::ValueType v;
      _downlinkCompressedMode_LCR_Type.read(reader, v);
      value.set_downlinkCompressedMode_LCR(v);
   }
   {
      asn1::generated::CompressedModeMeasCapability_LCR_r4::ValueType v;
      _uplinkCompressedMode_LCR_Type.read(reader, v);
      value.set_uplinkCompressedMode_LCR(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementCapability_r4_ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _downlinkCompressedMode_LCR_Type.write(writer, value.get_downlinkCompressedMode_LCR());
   _uplinkCompressedMode_LCR_Type.write(writer, value.get_uplinkCompressedMode_LCR());

   writer.writeSequenceEnd();
}


void MultiRAT_Capability::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _supportOfGSM_Type.read(reader, v);
      value.set_supportOfGSM(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _supportOfMulticarrier_Type.read(reader, v);
      value.set_supportOfMulticarrier(v);
   }

   reader.readSequenceEnd(*this);
}

void MultiRAT_Capability::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _supportOfGSM_Type.write(writer, value.get_supportOfGSM());
   _supportOfMulticarrier_Type.write(writer, value.get_supportOfMulticarrier());

   writer.writeSequenceEnd();
}


void MultiModeRAT_Capability_v590ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _supportOfUTRAN_ToGERAN_NACC_Type.read(reader, v);
      value.set_supportOfUTRAN_ToGERAN_NACC(v);
   }

   reader.readSequenceEnd(*this);
}

void MultiModeRAT_Capability_v590ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _supportOfUTRAN_ToGERAN_NACC_Type.write(writer, value.get_supportOfUTRAN_ToGERAN_NACC());

   writer.writeSequenceEnd();
}


void MultiModeRAT_Capability_v680ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__EnumeratedType::ValueType v;
      _supportOfHandoverToGAN_Type.read(reader, v);
      value.set_supportOfHandoverToGAN(v);
   }

   reader.readSequenceEnd(*this);
}

void MultiModeRAT_Capability_v680ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _supportOfHandoverToGAN_Type.write(writer, value.get_supportOfHandoverToGAN());

   writer.writeSequenceEnd();
}


void P_TMSI_and_RAI_GSM_MAP::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::P_TMSI_GSM_MAP::ValueType v;
      _p_TMSI_Type.read(reader, v);
      value.set_p_TMSI(v);
   }
   {
      asn1::generated::RAI::ValueType v;
      _rai_Type.read(reader, v);
      value.set_rai(v);
   }

   reader.readSequenceEnd(*this);
}

void P_TMSI_and_RAI_GSM_MAP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _p_TMSI_Type.write(writer, value.get_p_TMSI());
   _rai_Type.write(writer, value.get_rai());

   writer.writeSequenceEnd();
}


void PagingRecord::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_cn-Identity_Type)
   {
      _INTERNAL__SequenceType_pagingCause_INTERNAL_asn1__generated__PagingCause_cn-DomainIdentity_INTERNAL_asn1__generated__CN_DomainIdentity_cn-pagedUE-Identity_INTERNAL_asn1__generated__CN_PagedUE_Identity::ValueType v;
      _cn_Identity_Type.read(reader, v);
      value.set_cn_Identity(v);
   }
   else if (choosenType == &_utran-Identity_Type)
   {
      _INTERNAL__SequenceType_u-RNTI_INTERNAL_asn1__generated__U_RNTI_cn-OriginatedPage-connectedMode-UE_INTERNAL__SequenceType_pagingCause_INTERNAL_asn1__generated__PagingCause_cn-DomainIdentity_INTERNAL_asn1__generated__CN_DomainIdentity_pagingRecordTypeID_INTERNAL_asn1__generated__PagingRecordTypeID::ValueType v;
      _utran_Identity_Type.read(reader, v);
      value.set_utran_Identity(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _cn-Identity_Type.toString() + ", " + _utran-Identity_Type.toString());
   }
}

void PagingRecord::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_cn-Identity_Choosen())
      _cn-Identity_Type.write(writer, value.get_cn-Identity());
   else if (value.has_utran-Identity_Choosen())
      _utran-Identity_Type.write(writer, value.get_utran-Identity());
}


void PagingRecord2-r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_utran-SingleUE-Identity_Type)
   {
      _INTERNAL__SequenceType_u-RNTI_INTERNAL_asn1__generated__U_RNTI_cn-OriginatedPage-connectedMode-UE_INTERNAL__SequenceType_pagingCause_INTERNAL_asn1__generated__PagingCause_cn-DomainIdentity_INTERNAL_asn1__generated__CN_DomainIdentity_pagingRecordTypeID_INTERNAL_asn1__generated__PagingRecordTypeID_rrc-ConnectionReleaseInformation_INTERNAL_asn1__generated__RRC_ConnectionReleaseInformation::ValueType v;
      _utran_SingleUE_Identity_Type.read(reader, v);
      value.set_utran_SingleUE_Identity(v);
   }
   else if (choosenType == &_utran-GroupIdentity_Type)
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__GroupIdentityWithReleaseInformation::ValueType v;
      _utran_GroupIdentity_Type.read(reader, v);
      value.set_utran_GroupIdentity(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _utran-SingleUE-Identity_Type.toString() + ", " + _utran-GroupIdentity_Type.toString());
   }
}

void PagingRecord2-r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_utran-SingleUE-Identity_Choosen())
      _utran-SingleUE-Identity_Type.write(writer, value.get_utran-SingleUE-Identity());
   else if (value.has_utran-GroupIdentity_Choosen())
      _utran-GroupIdentity_Type.write(writer, value.get_utran-GroupIdentity());
}


void PDCP_Capability::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _losslessSRNS_RelocationSupport_Type.read(reader, v);
      value.set_losslessSRNS_RelocationSupport(v);
   }
   {
      _INTERNAL__ChoiceType_notSupported_INTERNAL_asn1__NullType_supported_INTERNAL_asn1__generated__MaxHcContextSpace::ValueType v;
      _supportForRfc2507_Type.read(reader, v);
      value.set_supportForRfc2507(v);
   }

   reader.readSequenceEnd(*this);
}

void PDCP_Capability::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _losslessSRNS_RelocationSupport_Type.write(writer, value.get_losslessSRNS_RelocationSupport());
   _supportForRfc2507_Type.write(writer, value.get_supportForRfc2507());

   writer.writeSequenceEnd();
}


void PDCP_Capability_r4_ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_notSupported_INTERNAL_asn1__NullType_supported_INTERNAL__SequenceType_maxROHC-ContextSessions_INTERNAL_asn1__generated__MaxROHC_ContextSessions_r4_reverseCompressionDepth_INTERNAL_asn1__IntegerType::ValueType v;
      _supportForRfc3095_Type.read(reader, v);
      value.set_supportForRfc3095(v);
   }

   reader.readSequenceEnd(*this);
}

void PDCP_Capability_r4_ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _supportForRfc3095_Type.write(writer, value.get_supportForRfc3095());

   writer.writeSequenceEnd();
}


void PDCP_Capability_r5_ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _supportForRfc3095ContextRelocation_Type.read(reader, v);
      value.set_supportForRfc3095ContextRelocation(v);
   }
   {
      asn1::generated::MaxHcContextSpace_r5_ext::ValueType v;
      _maxHcContextSpace_Type.read(reader, v);
      value.set_maxHcContextSpace(v);
   }

   reader.readSequenceEnd(*this);
}

void PDCP_Capability_r5_ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _supportForRfc3095ContextRelocation_Type.write(writer, value.get_supportForRfc3095ContextRelocation());
   _maxHcContextSpace_Type.write(writer, value.get_maxHcContextSpace());

   writer.writeSequenceEnd();
}


void PDCP_Capability_r5_ext2::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__EnumeratedType::ValueType v;
      _losslessDLRLC_PDUSizeChange_Type.read(reader, v);
      value.set_losslessDLRLC_PDUSizeChange(v);
   }

   reader.readSequenceEnd(*this);
}

void PDCP_Capability_r5_ext2::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _losslessDLRLC_PDUSizeChange_Type.write(writer, value.get_losslessDLRLC_PDUSizeChange());

   writer.writeSequenceEnd();
}


void PhysicalChannelCapability::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__SequenceType_downlinkPhysChCapability_INTERNAL_asn1__generated__DL_PhysChCapabilityFDD_uplinkPhysChCapability_INTERNAL_asn1__generated__UL_PhysChCapabilityFDD::ValueType v;
      _fddPhysChCapability_Type.read(reader, v);
      value.set_fddPhysChCapability(v);
   }
   {
      _INTERNAL__SequenceType_downlinkPhysChCapability_INTERNAL_asn1__generated__DL_PhysChCapabilityTDD_uplinkPhysChCapability_INTERNAL_asn1__generated__UL_PhysChCapabilityTDD::ValueType v;
      _tddPhysChCapability_Type.read(reader, v);
      value.set_tddPhysChCapability(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalChannelCapability::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _fddPhysChCapability_Type.write(writer, value.get_fddPhysChCapability());
   _tddPhysChCapability_Type.write(writer, value.get_tddPhysChCapability());

   writer.writeSequenceEnd();
}


void PhysicalChannelCapability_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__SequenceType_downlinkPhysChCapability_INTERNAL_asn1__generated__DL_PhysChCapabilityFDD_uplinkPhysChCapability_INTERNAL_asn1__generated__UL_PhysChCapabilityFDD::ValueType v;
      _fddPhysChCapability_Type.read(reader, v);
      value.set_fddPhysChCapability(v);
   }
   {
      _INTERNAL__SequenceType_downlinkPhysChCapability_INTERNAL_asn1__generated__DL_PhysChCapabilityTDD_uplinkPhysChCapability_INTERNAL_asn1__generated__UL_PhysChCapabilityTDD::ValueType v;
      _tddPhysChCapability_Type.read(reader, v);
      value.set_tddPhysChCapability(v);
   }
   {
      _INTERNAL__SequenceType_downlinkPhysChCapability_INTERNAL_asn1__generated__DL_PhysChCapabilityTDD_768_uplinkPhysChCapability_INTERNAL_asn1__generated__UL_PhysChCapabilityTDD::ValueType v;
      _tddPhysChCapability_768_Type.read(reader, v);
      value.set_tddPhysChCapability_768(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalChannelCapability_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _fddPhysChCapability_Type.write(writer, value.get_fddPhysChCapability());
   _tddPhysChCapability_Type.write(writer, value.get_tddPhysChCapability());
   _tddPhysChCapability_768_Type.write(writer, value.get_tddPhysChCapability_768());

   writer.writeSequenceEnd();
}


void PhysicalChannelCapability_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__SequenceType_downlinkPhysChCapability_INTERNAL_asn1__generated__DL_PhysChCapabilityTDD_LCR_r4_uplinkPhysChCapability_INTERNAL_asn1__generated__UL_PhysChCapabilityTDD_LCR_r4::ValueType v;
      _tdd128_PhysChCapability_Type.read(reader, v);
      value.set_tdd128_PhysChCapability(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalChannelCapability_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tdd128_PhysChCapability_Type.write(writer, value.get_tdd128_PhysChCapability());

   writer.writeSequenceEnd();
}


void PhysicalChannelCapability_hspdsch_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_supported_INTERNAL__SequenceType_hsdsch-physical-layer-category_INTERNAL_asn1__generated__HSDSCH_physical_layer_category_dummy_INTERNAL_asn1__BooleanType_dummy2_INTERNAL_asn1__BooleanType_unsupported_INTERNAL_asn1__NullType::ValueType v;
      _fdd_hspdsch_Type.read(reader, v);
      value.set_fdd_hspdsch(v);
   }
   {
      _INTERNAL__ChoiceType_supported_INTERNAL_asn1__generated__HSDSCH_physical_layer_category_unsupported_INTERNAL_asn1__NullType::ValueType v;
      _tdd384_hspdsch_Type.read(reader, v);
      value.set_tdd384_hspdsch(v);
   }
   {
      _INTERNAL__ChoiceType_supported_INTERNAL_asn1__generated__HSDSCH_physical_layer_category_unsupported_INTERNAL_asn1__NullType::ValueType v;
      _tdd128_hspdsch_Type.read(reader, v);
      value.set_tdd128_hspdsch(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalChannelCapability_hspdsch_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _fdd_hspdsch_Type.write(writer, value.get_fdd_hspdsch());
   _tdd384_hspdsch_Type.write(writer, value.get_tdd384_hspdsch());
   _tdd128_hspdsch_Type.write(writer, value.get_tdd128_hspdsch());

   writer.writeSequenceEnd();
}


void PNBSCH_Allocation_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__EnumeratedType::ValueType v;
      _numberOfRepetitionsPerSFNPeriod_Type.read(reader, v);
      value.set_numberOfRepetitionsPerSFNPeriod(v);
   }

   reader.readSequenceEnd(*this);
}

void PNBSCH_Allocation_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _numberOfRepetitionsPerSFNPeriod_Type.write(writer, value.get_numberOfRepetitionsPerSFNPeriod());

   writer.writeSequenceEnd();
}


void ProtocolErrorIndicatorWithMoreInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_noError_Type)
   {
      asn1::NullType::ValueType v;
      _noError_Type.read(reader, v);
      value.set_noError(v);
   }
   else if (choosenType == &_errorOccurred_Type)
   {
      _INTERNAL__SequenceType_rrc-TransactionIdentifier_INTERNAL_asn1__generated__RRC_TransactionIdentifier_protocolErrorInformation_INTERNAL_asn1__generated__ProtocolErrorInformation::ValueType v;
      _errorOccurred_Type.read(reader, v);
      value.set_errorOccurred(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _noError_Type.toString() + ", " + _errorOccurred_Type.toString());
   }
}

void ProtocolErrorIndicatorWithMoreInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_noError_Choosen())
      _noError_Type.write(writer, value.get_noError());
   else if (value.has_errorOccurred_Choosen())
      _errorOccurred_Type.write(writer, value.get_errorOccurred());
}


void ProtocolErrorMoreInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_type1_INTERNAL__ChoiceType_asn1-ViolationOrEncodingError_INTERNAL_asn1__NullType_messageTypeNonexistent_INTERNAL_asn1__NullType_messageNotCompatibleWithReceiverState_INTERNAL_asn1__generated__IdentificationOfReceivedMessage_ie-ValueNotComprehended_INTERNAL_asn1__generated__IdentificationOfReceivedMessage_conditionalInformationElementError_INTERNAL_asn1__generated__IdentificationOfReceivedMessage_messageExtensionNotComprehended_INTERNAL_asn1__generated__IdentificationOfReceivedMessage_spare1_INTERNAL_asn1__NullType_spare2_INTERNAL_asn1__NullType_spare_INTERNAL_asn1__NullType::ValueType v;
      _diagnosticsType_Type.read(reader, v);
      value.set_diagnosticsType(v);
   }

   reader.readSequenceEnd(*this);
}

void ProtocolErrorMoreInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _diagnosticsType_Type.write(writer, value.get_diagnosticsType());

   writer.writeSequenceEnd();
}


void Rb_timer_indicator::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _t314_expired_Type.read(reader, v);
      value.set_t314_expired(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _t315_expired_Type.read(reader, v);
      value.set_t315_expired(v);
   }

   reader.readSequenceEnd(*this);
}

void Rb_timer_indicator::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _t314_expired_Type.write(writer, value.get_t314_expired());
   _t315_expired_Type.write(writer, value.get_t315_expired());

   writer.writeSequenceEnd();
}


void RedirectionInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_frequencyInfo_Type)
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   else if (choosenType == &_interRATInfo_Type)
   {
      asn1::generated::InterRATInfo::ValueType v;
      _interRATInfo_Type.read(reader, v);
      value.set_interRATInfo(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _frequencyInfo_Type.toString() + ", " + _interRATInfo_Type.toString());
   }
}

void RedirectionInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_frequencyInfo_Choosen())
      _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   else if (value.has_interRATInfo_Choosen())
      _interRATInfo_Type.write(writer, value.get_interRATInfo());
}


void RedirectionInfo-r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_frequencyInfo_Type)
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   else if (choosenType == &_interRATInfo_Type)
   {
      asn1::generated::InterRATInfo_r6::ValueType v;
      _interRATInfo_Type.read(reader, v);
      value.set_interRATInfo(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _frequencyInfo_Type.toString() + ", " + _interRATInfo_Type.toString());
   }
}

void RedirectionInfo-r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_frequencyInfo_Choosen())
      _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   else if (value.has_interRATInfo_Choosen())
      _interRATInfo_Type.write(writer, value.get_interRATInfo());
}


void RF_Capability::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__SequenceType_ue-PowerClass_INTERNAL_asn1__generated__UE_PowerClass_txRxFrequencySeparation_INTERNAL_asn1__generated__TxRxFrequencySeparation::ValueType v;
      _fddRF_Capability_Type.read(reader, v);
      value.set_fddRF_Capability(v);
   }
   {
      _INTERNAL__SequenceType_ue-PowerClass_INTERNAL_asn1__generated__UE_PowerClass_radioFrequencyTDDBandList_INTERNAL_asn1__generated__RadioFrequencyBandTDDList_chipRateCapability_INTERNAL_asn1__generated__ChipRateCapability::ValueType v;
      _tddRF_Capability_Type.read(reader, v);
      value.set_tddRF_Capability(v);
   }

   reader.readSequenceEnd(*this);
}

void RF_Capability::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _fddRF_Capability_Type.write(writer, value.get_fddRF_Capability());
   _tddRF_Capability_Type.write(writer, value.get_tddRF_Capability());

   writer.writeSequenceEnd();
}


void RF_Capability_r4_ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__SequenceType_ue-PowerClass_INTERNAL_asn1__generated__UE_PowerClass_radioFrequencyBandTDDList_INTERNAL_asn1__generated__RadioFrequencyBandTDDList_chipRateCapability_INTERNAL_asn1__generated__ChipRateCapability::ValueType v;
      _tddRF_Capability_Type.read(reader, v);
      value.set_tddRF_Capability(v);
   }

   reader.readSequenceEnd(*this);
}

void RF_Capability_r4_ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tddRF_Capability_Type.write(writer, value.get_tddRF_Capability());

   writer.writeSequenceEnd();
}


void RF_Capability_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__SequenceType_ue-PowerClass_INTERNAL_asn1__generated__UE_PowerClass_txRxFrequencySeparation_INTERNAL_asn1__generated__TxRxFrequencySeparation::ValueType v;
      _fddRF_Capability_Type.read(reader, v);
      value.set_fddRF_Capability(v);
   }
   {
      _INTERNAL__SequenceType_ue-PowerClass_INTERNAL_asn1__generated__UE_PowerClass_radioFrequencyTDDBandList_INTERNAL_asn1__generated__RadioFrequencyBandTDDList_chipRateCapability_INTERNAL_asn1__generated__ChipRateCapability_r7::ValueType v;
      _tddRF_Capability_Type.read(reader, v);
      value.set_tddRF_Capability(v);
   }

   reader.readSequenceEnd(*this);
}

void RF_Capability_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _fddRF_Capability_Type.write(writer, value.get_fddRF_Capability());
   _tddRF_Capability_Type.write(writer, value.get_tddRF_Capability());

   writer.writeSequenceEnd();
}


void RLC_Capability::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TotalRLC_AM_BufferSize::ValueType v;
      _totalRLC_AM_BufferSize_Type.read(reader, v);
      value.set_totalRLC_AM_BufferSize(v);
   }
   {
      asn1::generated::MaximumRLC_WindowSize::ValueType v;
      _maximumRLC_WindowSize_Type.read(reader, v);
      value.set_maximumRLC_WindowSize(v);
   }
   {
      asn1::generated::MaximumAM_EntityNumberRLC_Cap::ValueType v;
      _maximumAM_EntityNumber_Type.read(reader, v);
      value.set_maximumAM_EntityNumber(v);
   }

   reader.readSequenceEnd(*this);
}

void RLC_Capability::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _totalRLC_AM_BufferSize_Type.write(writer, value.get_totalRLC_AM_BufferSize());
   _maximumRLC_WindowSize_Type.write(writer, value.get_maximumRLC_WindowSize());
   _maximumAM_EntityNumber_Type.write(writer, value.get_maximumAM_EntityNumber());

   writer.writeSequenceEnd();
}


void RLC_Capability_r5_ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TotalRLC_AM_BufferSize_r5_ext::ValueType v;
      _totalRLC_AM_BufferSize_Type.read(reader, v);
      value.set_totalRLC_AM_BufferSize(v);
   }

   reader.readSequenceEnd(*this);
}

void RLC_Capability_r5_ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _totalRLC_AM_BufferSize_Type.write(writer, value.get_totalRLC_AM_BufferSize());

   writer.writeSequenceEnd();
}


void RRC-ConnectionReleaseInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_noRelease_Type)
   {
      asn1::NullType::ValueType v;
      _noRelease_Type.read(reader, v);
      value.set_noRelease(v);
   }
   else if (choosenType == &_release_Type)
   {
      _INTERNAL__SequenceType_releaseCause_INTERNAL_asn1__generated__ReleaseCause::ValueType v;
      _release_Type.read(reader, v);
      value.set_release(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _noRelease_Type.toString() + ", " + _release_Type.toString());
   }
}

void RRC-ConnectionReleaseInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_noRelease_Choosen())
      _noRelease_Type.write(writer, value.get_noRelease());
   else if (value.has_release_Choosen())
      _release_Type.write(writer, value.get_release());
}


void SecurityCapability::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _cipheringAlgorithmCap_Type.read(reader, v);
      value.set_cipheringAlgorithmCap(v);
   }
   {
      _INTERNAL_::ValueType v;
      _integrityProtectionAlgorithmCap_Type.read(reader, v);
      value.set_integrityProtectionAlgorithmCap(v);
   }

   reader.readSequenceEnd(*this);
}

void SecurityCapability::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cipheringAlgorithmCap_Type.write(writer, value.get_cipheringAlgorithmCap());
   _integrityProtectionAlgorithmCap_Type.write(writer, value.get_integrityProtectionAlgorithmCap());

   writer.writeSequenceEnd();
}


void Serving_HSDSCH_CellInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DeltaACK::ValueType v;
      _deltaACK_Type.read(reader, v);
      value.set_deltaACK(v);
   }
   {
      asn1::generated::DeltaNACK::ValueType v;
      _deltaNACK_Type.read(reader, v);
      value.set_deltaNACK(v);
   }
   {
      asn1::generated::HARQ_Preamble_Mode::ValueType v;
      _harq_Preamble_Mode_Type.read(reader, v);
      value.set_harq_Preamble_Mode(v);
   }
   {
      asn1::generated::PrimaryCPICH_Info::ValueType v;
      _primaryCPICH_Info_Type.read(reader, v);
      value.set_primaryCPICH_Info(v);
   }
   {
      asn1::generated::DL_HSPDSCH_Information::ValueType v;
      _dl_hspdsch_Information_Type.read(reader, v);
      value.set_dl_hspdsch_Information(v);
   }
   {
      asn1::generated::HARQ_Info::ValueType v;
      _harqInfo_Type.read(reader, v);
      value.set_harqInfo(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _mac_hsResetIndicator_Type.read(reader, v);
      value.set_mac_hsResetIndicator(v);
   }

   reader.readSequenceEnd(*this);
}

void Serving_HSDSCH_CellInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _deltaACK_Type.write(writer, value.get_deltaACK());
   _deltaNACK_Type.write(writer, value.get_deltaNACK());
   _harq_Preamble_Mode_Type.write(writer, value.get_harq_Preamble_Mode());
   _primaryCPICH_Info_Type.write(writer, value.get_primaryCPICH_Info());
   _dl_hspdsch_Information_Type.write(writer, value.get_dl_hspdsch_Information());
   _harqInfo_Type.write(writer, value.get_harqInfo());
   _mac_hsResetIndicator_Type.write(writer, value.get_mac_hsResetIndicator());

   writer.writeSequenceEnd();
}


void SimultaneousSCCPCH-DPCH-Reception::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_notSupported_Type)
   {
      asn1::NullType::ValueType v;
      _notSupported_Type.read(reader, v);
      value.set_notSupported(v);
   }
   else if (choosenType == &_supported_Type)
   {
      _INTERNAL__SequenceType_maxNoSCCPCH-RL_INTERNAL_asn1__generated__MaxNoSCCPCH_RL_simultaneousSCCPCH-DPCH-DPDCH-Reception_INTERNAL_asn1__BooleanType::ValueType v;
      _supported_Type.read(reader, v);
      value.set_supported(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _notSupported_Type.toString() + ", " + _supported_Type.toString());
   }
}

void SimultaneousSCCPCH-DPCH-Reception::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_notSupported_Choosen())
      _notSupported_Type.write(writer, value.get_notSupported());
   else if (value.has_supported_Choosen())
      _supported_Type.write(writer, value.get_supported());
}


void STARTSingle::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _cn_DomainIdentity_Type.read(reader, v);
      value.set_cn_DomainIdentity(v);
   }
   {
      asn1::generated::START_Value::ValueType v;
      _start_Value_Type.read(reader, v);
      value.set_start_Value(v);
   }

   reader.readSequenceEnd(*this);
}

void STARTSingle::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cn_DomainIdentity_Type.write(writer, value.get_cn_DomainIdentity());
   _start_Value_Type.write(writer, value.get_start_Value());

   writer.writeSequenceEnd();
}


void CapabilityUpdateRequirement_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _ue_RadioCapabilityFDDUpdateRequirement_FDD_Type.read(reader, v);
      value.set_ue_RadioCapabilityFDDUpdateRequirement_FDD(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _ue_RadioCapabilityTDDUpdateRequirement_TDD384_Type.read(reader, v);
      value.set_ue_RadioCapabilityTDDUpdateRequirement_TDD384(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _ue_RadioCapabilityTDDUpdateRequirement_TDD128_Type.read(reader, v);
      value.set_ue_RadioCapabilityTDDUpdateRequirement_TDD128(v);
   }
   {
      asn1::generated::SystemSpecificCapUpdateReqList_r5::ValueType v;
      _systemSpecificCapUpdateReqList_Type.read(reader, v);
      value.set_systemSpecificCapUpdateReqList(v);
   }

   reader.readSequenceEnd(*this);
}

void CapabilityUpdateRequirement_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioCapabilityFDDUpdateRequirement_FDD_Type.write(writer, value.get_ue_RadioCapabilityFDDUpdateRequirement_FDD());
   _ue_RadioCapabilityTDDUpdateRequirement_TDD384_Type.write(writer, value.get_ue_RadioCapabilityTDDUpdateRequirement_TDD384());
   _ue_RadioCapabilityTDDUpdateRequirement_TDD128_Type.write(writer, value.get_ue_RadioCapabilityTDDUpdateRequirement_TDD128());
   _systemSpecificCapUpdateReqList_Type.write(writer, value.get_systemSpecificCapUpdateReqList());

   writer.writeSequenceEnd();
}


void TMSI_and_LAI_GSM_MAP::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TMSI_GSM_MAP::ValueType v;
      _tmsi_Type.read(reader, v);
      value.set_tmsi(v);
   }
   {
      asn1::generated::LAI::ValueType v;
      _lai_Type.read(reader, v);
      value.set_lai(v);
   }

   reader.readSequenceEnd(*this);
}

void TMSI_and_LAI_GSM_MAP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tmsi_Type.write(writer, value.get_tmsi());
   _lai_Type.write(writer, value.get_lai());

   writer.writeSequenceEnd();
}


void TransportChannelCapability::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_TransChCapability::ValueType v;
      _dl_TransChCapability_Type.read(reader, v);
      value.set_dl_TransChCapability(v);
   }
   {
      asn1::generated::UL_TransChCapability::ValueType v;
      _ul_TransChCapability_Type.read(reader, v);
      value.set_ul_TransChCapability(v);
   }

   reader.readSequenceEnd(*this);
}

void TransportChannelCapability::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_TransChCapability_Type.write(writer, value.get_dl_TransChCapability());
   _ul_TransChCapability_Type.write(writer, value.get_ul_TransChCapability());

   writer.writeSequenceEnd();
}


void TurboSupport::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_notSupported_Type)
   {
      asn1::NullType::ValueType v;
      _notSupported_Type.read(reader, v);
      value.set_notSupported(v);
   }
   else if (choosenType == &_supported_Type)
   {
      asn1::generated::MaxNoBits::ValueType v;
      _supported_Type.read(reader, v);
      value.set_supported(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _notSupported_Type.toString() + ", " + _supported_Type.toString());
   }
}

void TurboSupport::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_notSupported_Choosen())
      _notSupported_Type.write(writer, value.get_notSupported());
   else if (value.has_supported_Choosen())
      _supported_Type.write(writer, value.get_supported());
}


void U_RNTI::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SRNC_Identity::ValueType v;
      _srnc_Identity_Type.read(reader, v);
      value.set_srnc_Identity(v);
   }
   {
      asn1::generated::S_RNTI::ValueType v;
      _s_RNTI_Type.read(reader, v);
      value.set_s_RNTI(v);
   }

   reader.readSequenceEnd(*this);
}

void U_RNTI::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _srnc_Identity_Type.write(writer, value.get_srnc_Identity());
   _s_RNTI_Type.write(writer, value.get_s_RNTI());

   writer.writeSequenceEnd();
}


void U-RNTI-Group::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_all_Type)
   {
      asn1::NullType::ValueType v;
      _all_Type.read(reader, v);
      value.set_all(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b1_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b1_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b1(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b2_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b2_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b2(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b3_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b3_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b3(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b4_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b4_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b4(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b5_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b5_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b5(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b6_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b6_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b6(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b7_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b7_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b7(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b8_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b8_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b8(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b9_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b9_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b9(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b10_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b10_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b10(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b11_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b11_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b11(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b12_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b12_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b12(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b13_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b13_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b13(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b14_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b14_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b14(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b15_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b15_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b15(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b16_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b16_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b16(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b17_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b17_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b17(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b18_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b18_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b18(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b19_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b19_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b19(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b20_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b20_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b20(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b21_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b21_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b21(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b22_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b22_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b22(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b23_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b23_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b23(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b24_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b24_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b24(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b25_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b25_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b25(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b26_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b26_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b26(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b27_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b27_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b27(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b28_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b28_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b28(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b29_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b29_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b29(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b30_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b30_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b30(v);
   }
   else if (choosenType == &_u-RNTI-BitMaskIndex-b31_Type)
   {
      _INTERNAL_::ValueType v;
      _u_RNTI_BitMaskIndex_b31_Type.read(reader, v);
      value.set_u_RNTI_BitMaskIndex_b31(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _all_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b1_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b2_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b3_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b4_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b5_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b6_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b7_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b8_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b9_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b10_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b11_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b12_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b13_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b14_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b15_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b16_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b17_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b18_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b19_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b20_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b21_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b22_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b23_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b24_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b25_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b26_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b27_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b28_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b29_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b30_Type.toString() + ", " + _u-RNTI-BitMaskIndex-b31_Type.toString());
   }
}

void U-RNTI-Group::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_all_Choosen())
      _all_Type.write(writer, value.get_all());
   else if (value.has_u-RNTI-BitMaskIndex-b1_Choosen())
      _u-RNTI-BitMaskIndex-b1_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b1());
   else if (value.has_u-RNTI-BitMaskIndex-b2_Choosen())
      _u-RNTI-BitMaskIndex-b2_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b2());
   else if (value.has_u-RNTI-BitMaskIndex-b3_Choosen())
      _u-RNTI-BitMaskIndex-b3_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b3());
   else if (value.has_u-RNTI-BitMaskIndex-b4_Choosen())
      _u-RNTI-BitMaskIndex-b4_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b4());
   else if (value.has_u-RNTI-BitMaskIndex-b5_Choosen())
      _u-RNTI-BitMaskIndex-b5_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b5());
   else if (value.has_u-RNTI-BitMaskIndex-b6_Choosen())
      _u-RNTI-BitMaskIndex-b6_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b6());
   else if (value.has_u-RNTI-BitMaskIndex-b7_Choosen())
      _u-RNTI-BitMaskIndex-b7_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b7());
   else if (value.has_u-RNTI-BitMaskIndex-b8_Choosen())
      _u-RNTI-BitMaskIndex-b8_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b8());
   else if (value.has_u-RNTI-BitMaskIndex-b9_Choosen())
      _u-RNTI-BitMaskIndex-b9_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b9());
   else if (value.has_u-RNTI-BitMaskIndex-b10_Choosen())
      _u-RNTI-BitMaskIndex-b10_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b10());
   else if (value.has_u-RNTI-BitMaskIndex-b11_Choosen())
      _u-RNTI-BitMaskIndex-b11_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b11());
   else if (value.has_u-RNTI-BitMaskIndex-b12_Choosen())
      _u-RNTI-BitMaskIndex-b12_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b12());
   else if (value.has_u-RNTI-BitMaskIndex-b13_Choosen())
      _u-RNTI-BitMaskIndex-b13_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b13());
   else if (value.has_u-RNTI-BitMaskIndex-b14_Choosen())
      _u-RNTI-BitMaskIndex-b14_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b14());
   else if (value.has_u-RNTI-BitMaskIndex-b15_Choosen())
      _u-RNTI-BitMaskIndex-b15_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b15());
   else if (value.has_u-RNTI-BitMaskIndex-b16_Choosen())
      _u-RNTI-BitMaskIndex-b16_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b16());
   else if (value.has_u-RNTI-BitMaskIndex-b17_Choosen())
      _u-RNTI-BitMaskIndex-b17_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b17());
   else if (value.has_u-RNTI-BitMaskIndex-b18_Choosen())
      _u-RNTI-BitMaskIndex-b18_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b18());
   else if (value.has_u-RNTI-BitMaskIndex-b19_Choosen())
      _u-RNTI-BitMaskIndex-b19_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b19());
   else if (value.has_u-RNTI-BitMaskIndex-b20_Choosen())
      _u-RNTI-BitMaskIndex-b20_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b20());
   else if (value.has_u-RNTI-BitMaskIndex-b21_Choosen())
      _u-RNTI-BitMaskIndex-b21_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b21());
   else if (value.has_u-RNTI-BitMaskIndex-b22_Choosen())
      _u-RNTI-BitMaskIndex-b22_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b22());
   else if (value.has_u-RNTI-BitMaskIndex-b23_Choosen())
      _u-RNTI-BitMaskIndex-b23_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b23());
   else if (value.has_u-RNTI-BitMaskIndex-b24_Choosen())
      _u-RNTI-BitMaskIndex-b24_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b24());
   else if (value.has_u-RNTI-BitMaskIndex-b25_Choosen())
      _u-RNTI-BitMaskIndex-b25_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b25());
   else if (value.has_u-RNTI-BitMaskIndex-b26_Choosen())
      _u-RNTI-BitMaskIndex-b26_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b26());
   else if (value.has_u-RNTI-BitMaskIndex-b27_Choosen())
      _u-RNTI-BitMaskIndex-b27_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b27());
   else if (value.has_u-RNTI-BitMaskIndex-b28_Choosen())
      _u-RNTI-BitMaskIndex-b28_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b28());
   else if (value.has_u-RNTI-BitMaskIndex-b29_Choosen())
      _u-RNTI-BitMaskIndex-b29_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b29());
   else if (value.has_u-RNTI-BitMaskIndex-b30_Choosen())
      _u-RNTI-BitMaskIndex-b30_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b30());
   else if (value.has_u-RNTI-BitMaskIndex-b31_Choosen())
      _u-RNTI-BitMaskIndex-b31_Type.write(writer, value.get_u-RNTI-BitMaskIndex-b31());
}


void U_RNTI_Short::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SRNC_Identity::ValueType v;
      _srnc_Identity_Type.read(reader, v);
      value.set_srnc_Identity(v);
   }
   {
      asn1::generated::S_RNTI_2::ValueType v;
      _s_RNTI_2_Type.read(reader, v);
      value.set_s_RNTI_2(v);
   }

   reader.readSequenceEnd(*this);
}

void U_RNTI_Short::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _srnc_Identity_Type.write(writer, value.get_srnc_Identity());
   _s_RNTI_2_Type.write(writer, value.get_s_RNTI_2());

   writer.writeSequenceEnd();
}


void UE_CapabilityContainer_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v690ext::ValueType v;
      _ue_RadioAccessCapability_v690ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v690ext(v);
   }
   {
      asn1::generated::InterRAT_UE_RadioAccessCapability_v690ext::ValueType v;
      _ue_RATSpecificCapability_v690ext_Type.read(reader, v);
      value.set_ue_RATSpecificCapability_v690ext(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_CapabilityContainer_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v690ext_Type.write(writer, value.get_ue_RadioAccessCapability_v690ext());
   _ue_RATSpecificCapability_v690ext_Type.write(writer, value.get_ue_RATSpecificCapability_v690ext());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void UE_ConnTimersAndConstants::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::T_301::ValueType v;
      _t_301_Type.read(reader, v);
      value.set_t_301(v);
   }
   {
      asn1::generated::N_301::ValueType v;
      _n_301_Type.read(reader, v);
      value.set_n_301(v);
   }
   {
      asn1::generated::T_302::ValueType v;
      _t_302_Type.read(reader, v);
      value.set_t_302(v);
   }
   {
      asn1::generated::N_302::ValueType v;
      _n_302_Type.read(reader, v);
      value.set_n_302(v);
   }
   {
      asn1::generated::T_304::ValueType v;
      _t_304_Type.read(reader, v);
      value.set_t_304(v);
   }
   {
      asn1::generated::N_304::ValueType v;
      _n_304_Type.read(reader, v);
      value.set_n_304(v);
   }
   {
      asn1::generated::T_305::ValueType v;
      _t_305_Type.read(reader, v);
      value.set_t_305(v);
   }
   {
      asn1::generated::T_307::ValueType v;
      _t_307_Type.read(reader, v);
      value.set_t_307(v);
   }
   {
      asn1::generated::T_308::ValueType v;
      _t_308_Type.read(reader, v);
      value.set_t_308(v);
   }
   {
      asn1::generated::T_309::ValueType v;
      _t_309_Type.read(reader, v);
      value.set_t_309(v);
   }
   {
      asn1::generated::T_310::ValueType v;
      _t_310_Type.read(reader, v);
      value.set_t_310(v);
   }
   {
      asn1::generated::N_310::ValueType v;
      _n_310_Type.read(reader, v);
      value.set_n_310(v);
   }
   {
      asn1::generated::T_311::ValueType v;
      _t_311_Type.read(reader, v);
      value.set_t_311(v);
   }
   {
      asn1::generated::T_312::ValueType v;
      _t_312_Type.read(reader, v);
      value.set_t_312(v);
   }
   {
      asn1::generated::N_312::ValueType v;
      _n_312_Type.read(reader, v);
      value.set_n_312(v);
   }
   {
      asn1::generated::T_313::ValueType v;
      _t_313_Type.read(reader, v);
      value.set_t_313(v);
   }
   {
      asn1::generated::N_313::ValueType v;
      _n_313_Type.read(reader, v);
      value.set_n_313(v);
   }
   {
      asn1::generated::T_314::ValueType v;
      _t_314_Type.read(reader, v);
      value.set_t_314(v);
   }
   {
      asn1::generated::T_315::ValueType v;
      _t_315_Type.read(reader, v);
      value.set_t_315(v);
   }
   {
      asn1::generated::N_315::ValueType v;
      _n_315_Type.read(reader, v);
      value.set_n_315(v);
   }
   {
      asn1::generated::T_316::ValueType v;
      _t_316_Type.read(reader, v);
      value.set_t_316(v);
   }
   {
      asn1::generated::T_317::ValueType v;
      _t_317_Type.read(reader, v);
      value.set_t_317(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_ConnTimersAndConstants::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _t_301_Type.write(writer, value.get_t_301());
   _n_301_Type.write(writer, value.get_n_301());
   _t_302_Type.write(writer, value.get_t_302());
   _n_302_Type.write(writer, value.get_n_302());
   _t_304_Type.write(writer, value.get_t_304());
   _n_304_Type.write(writer, value.get_n_304());
   _t_305_Type.write(writer, value.get_t_305());
   _t_307_Type.write(writer, value.get_t_307());
   _t_308_Type.write(writer, value.get_t_308());
   _t_309_Type.write(writer, value.get_t_309());
   _t_310_Type.write(writer, value.get_t_310());
   _n_310_Type.write(writer, value.get_n_310());
   _t_311_Type.write(writer, value.get_t_311());
   _t_312_Type.write(writer, value.get_t_312());
   _n_312_Type.write(writer, value.get_n_312());
   _t_313_Type.write(writer, value.get_t_313());
   _n_313_Type.write(writer, value.get_n_313());
   _t_314_Type.write(writer, value.get_t_314());
   _t_315_Type.write(writer, value.get_t_315());
   _n_315_Type.write(writer, value.get_n_315());
   _t_316_Type.write(writer, value.get_t_316());
   _t_317_Type.write(writer, value.get_t_317());

   writer.writeSequenceEnd();
}


void UE_ConnTimersAndConstants_v3a0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::N_312ext::ValueType v;
      _n_312_Type.read(reader, v);
      value.set_n_312(v);
   }
   {
      asn1::generated::N_315ext::ValueType v;
      _n_315_Type.read(reader, v);
      value.set_n_315(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_ConnTimersAndConstants_v3a0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _n_312_Type.write(writer, value.get_n_312());
   _n_315_Type.write(writer, value.get_n_315());

   writer.writeSequenceEnd();
}


void UE_ConnTimersAndConstants_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::T_301::ValueType v;
      _t_301_Type.read(reader, v);
      value.set_t_301(v);
   }
   {
      asn1::generated::N_301::ValueType v;
      _n_301_Type.read(reader, v);
      value.set_n_301(v);
   }
   {
      asn1::generated::T_302::ValueType v;
      _t_302_Type.read(reader, v);
      value.set_t_302(v);
   }
   {
      asn1::generated::N_302::ValueType v;
      _n_302_Type.read(reader, v);
      value.set_n_302(v);
   }
   {
      asn1::generated::T_304::ValueType v;
      _t_304_Type.read(reader, v);
      value.set_t_304(v);
   }
   {
      asn1::generated::N_304::ValueType v;
      _n_304_Type.read(reader, v);
      value.set_n_304(v);
   }
   {
      asn1::generated::T_305::ValueType v;
      _t_305_Type.read(reader, v);
      value.set_t_305(v);
   }
   {
      asn1::generated::T_307::ValueType v;
      _t_307_Type.read(reader, v);
      value.set_t_307(v);
   }
   {
      asn1::generated::T_308::ValueType v;
      _t_308_Type.read(reader, v);
      value.set_t_308(v);
   }
   {
      asn1::generated::T_309::ValueType v;
      _t_309_Type.read(reader, v);
      value.set_t_309(v);
   }
   {
      asn1::generated::T_310::ValueType v;
      _t_310_Type.read(reader, v);
      value.set_t_310(v);
   }
   {
      asn1::generated::N_310::ValueType v;
      _n_310_Type.read(reader, v);
      value.set_n_310(v);
   }
   {
      asn1::generated::T_311::ValueType v;
      _t_311_Type.read(reader, v);
      value.set_t_311(v);
   }
   {
      asn1::generated::T_312::ValueType v;
      _t_312_Type.read(reader, v);
      value.set_t_312(v);
   }
   {
      asn1::generated::N_312_r5::ValueType v;
      _n_312_Type.read(reader, v);
      value.set_n_312(v);
   }
   {
      asn1::generated::T_313::ValueType v;
      _t_313_Type.read(reader, v);
      value.set_t_313(v);
   }
   {
      asn1::generated::N_313::ValueType v;
      _n_313_Type.read(reader, v);
      value.set_n_313(v);
   }
   {
      asn1::generated::T_314::ValueType v;
      _t_314_Type.read(reader, v);
      value.set_t_314(v);
   }
   {
      asn1::generated::T_315::ValueType v;
      _t_315_Type.read(reader, v);
      value.set_t_315(v);
   }
   {
      asn1::generated::N_315_r5::ValueType v;
      _n_315_Type.read(reader, v);
      value.set_n_315(v);
   }
   {
      asn1::generated::T_316::ValueType v;
      _t_316_Type.read(reader, v);
      value.set_t_316(v);
   }
   {
      asn1::generated::T_317::ValueType v;
      _t_317_Type.read(reader, v);
      value.set_t_317(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_ConnTimersAndConstants_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _t_301_Type.write(writer, value.get_t_301());
   _n_301_Type.write(writer, value.get_n_301());
   _t_302_Type.write(writer, value.get_t_302());
   _n_302_Type.write(writer, value.get_n_302());
   _t_304_Type.write(writer, value.get_t_304());
   _n_304_Type.write(writer, value.get_n_304());
   _t_305_Type.write(writer, value.get_t_305());
   _t_307_Type.write(writer, value.get_t_307());
   _t_308_Type.write(writer, value.get_t_308());
   _t_309_Type.write(writer, value.get_t_309());
   _t_310_Type.write(writer, value.get_t_310());
   _n_310_Type.write(writer, value.get_n_310());
   _t_311_Type.write(writer, value.get_t_311());
   _t_312_Type.write(writer, value.get_t_312());
   _n_312_Type.write(writer, value.get_n_312());
   _t_313_Type.write(writer, value.get_t_313());
   _n_313_Type.write(writer, value.get_n_313());
   _t_314_Type.write(writer, value.get_t_314());
   _t_315_Type.write(writer, value.get_t_315());
   _n_315_Type.write(writer, value.get_n_315());
   _t_316_Type.write(writer, value.get_t_316());
   _t_317_Type.write(writer, value.get_t_317());

   writer.writeSequenceEnd();
}


void UE_IdleTimersAndConstants::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::T_300::ValueType v;
      _t_300_Type.read(reader, v);
      value.set_t_300(v);
   }
   {
      asn1::generated::N_300::ValueType v;
      _n_300_Type.read(reader, v);
      value.set_n_300(v);
   }
   {
      asn1::generated::T_312::ValueType v;
      _t_312_Type.read(reader, v);
      value.set_t_312(v);
   }
   {
      asn1::generated::N_312::ValueType v;
      _n_312_Type.read(reader, v);
      value.set_n_312(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_IdleTimersAndConstants::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _t_300_Type.write(writer, value.get_t_300());
   _n_300_Type.write(writer, value.get_n_300());
   _t_312_Type.write(writer, value.get_t_312());
   _n_312_Type.write(writer, value.get_n_312());

   writer.writeSequenceEnd();
}


void UE_IdleTimersAndConstants_v3a0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::N_312ext::ValueType v;
      _n_312_Type.read(reader, v);
      value.set_n_312(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_IdleTimersAndConstants_v3a0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _n_312_Type.write(writer, value.get_n_312());

   writer.writeSequenceEnd();
}


void UE_MultiModeRAT_Capability::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MultiRAT_Capability::ValueType v;
      _multiRAT_CapabilityList_Type.read(reader, v);
      value.set_multiRAT_CapabilityList(v);
   }
   {
      asn1::generated::MultiModeCapability::ValueType v;
      _multiModeCapability_Type.read(reader, v);
      value.set_multiModeCapability(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_MultiModeRAT_Capability::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _multiRAT_CapabilityList_Type.write(writer, value.get_multiRAT_CapabilityList());
   _multiModeCapability_Type.write(writer, value.get_multiModeCapability());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapability::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PDCP_Capability::ValueType v;
      _pdcp_Capability_Type.read(reader, v);
      value.set_pdcp_Capability(v);
   }
   {
      asn1::generated::RLC_Capability::ValueType v;
      _rlc_Capability_Type.read(reader, v);
      value.set_rlc_Capability(v);
   }
   {
      asn1::generated::TransportChannelCapability::ValueType v;
      _transportChannelCapability_Type.read(reader, v);
      value.set_transportChannelCapability(v);
   }
   {
      asn1::generated::RF_Capability::ValueType v;
      _rf_Capability_Type.read(reader, v);
      value.set_rf_Capability(v);
   }
   {
      asn1::generated::PhysicalChannelCapability::ValueType v;
      _physicalChannelCapability_Type.read(reader, v);
      value.set_physicalChannelCapability(v);
   }
   {
      asn1::generated::UE_MultiModeRAT_Capability::ValueType v;
      _ue_MultiModeRAT_Capability_Type.read(reader, v);
      value.set_ue_MultiModeRAT_Capability(v);
   }
   {
      asn1::generated::SecurityCapability::ValueType v;
      _securityCapability_Type.read(reader, v);
      value.set_securityCapability(v);
   }
   {
      asn1::generated::UE_Positioning_Capability::ValueType v;
      _ue_positioning_Capability_Type.read(reader, v);
      value.set_ue_positioning_Capability(v);
   }
   {
      asn1::generated::MeasurementCapability::ValueType v;
      _measurementCapability_Type.read(reader, v);
      value.set_measurementCapability(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapability::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pdcp_Capability_Type.write(writer, value.get_pdcp_Capability());
   _rlc_Capability_Type.write(writer, value.get_rlc_Capability());
   _transportChannelCapability_Type.write(writer, value.get_transportChannelCapability());
   _rf_Capability_Type.write(writer, value.get_rf_Capability());
   _physicalChannelCapability_Type.write(writer, value.get_physicalChannelCapability());
   _ue_MultiModeRAT_Capability_Type.write(writer, value.get_ue_MultiModeRAT_Capability());
   _securityCapability_Type.write(writer, value.get_securityCapability());
   _ue_positioning_Capability_Type.write(writer, value.get_ue_positioning_Capability());
   _measurementCapability_Type.write(writer, value.get_measurementCapability());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapabilityInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability::ValueType v;
      _ue_RadioAccessCapability_Type.read(reader, v);
      value.set_ue_RadioAccessCapability(v);
   }
   {
      asn1::generated::UE_RadioAccessCapability_v370ext::ValueType v;
      _ue_RadioAccessCapability_v370ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v370ext(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapabilityInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_Type.write(writer, value.get_ue_RadioAccessCapability());
   _ue_RadioAccessCapability_v370ext_Type.write(writer, value.get_ue_RadioAccessCapability_v370ext());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapability_v370ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapabBandFDDList::ValueType v;
      _ue_RadioAccessCapabBandFDDList_Type.read(reader, v);
      value.set_ue_RadioAccessCapabBandFDDList(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapability_v370ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapabBandFDDList_Type.write(writer, value.get_ue_RadioAccessCapabBandFDDList());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapability_v380ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_PositioningCapabilityExt_v380::ValueType v;
      _ue_PositioningCapabilityExt_v380_Type.read(reader, v);
      value.set_ue_PositioningCapabilityExt_v380(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapability_v380ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_PositioningCapabilityExt_v380_Type.write(writer, value.get_ue_PositioningCapabilityExt_v380());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapability_v3a0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_PositioningCapabilityExt_v3a0::ValueType v;
      _ue_PositioningCapabilityExt_v3a0_Type.read(reader, v);
      value.set_ue_PositioningCapabilityExt_v3a0(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapability_v3a0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_PositioningCapabilityExt_v3a0_Type.write(writer, value.get_ue_PositioningCapabilityExt_v3a0());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapability_v3g0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_PositioningCapabilityExt_v3g0::ValueType v;
      _ue_PositioningCapabilityExt_v3g0_Type.read(reader, v);
      value.set_ue_PositioningCapabilityExt_v3g0(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapability_v3g0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_PositioningCapabilityExt_v3g0_Type.write(writer, value.get_ue_PositioningCapabilityExt_v3g0());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapability_v650ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapabBandFDDList2::ValueType v;
      _ue_RadioAccessCapabBandFDDList2_Type.read(reader, v);
      value.set_ue_RadioAccessCapabBandFDDList2(v);
   }
   {
      asn1::generated::UE_RadioAccessCapabBandFDDList_ext::ValueType v;
      _ue_RadioAccessCapabBandFDDList_ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapabBandFDDList_ext(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapability_v650ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapabBandFDDList2_Type.write(writer, value.get_ue_RadioAccessCapabBandFDDList2());
   _ue_RadioAccessCapabBandFDDList_ext_Type.write(writer, value.get_ue_RadioAccessCapabBandFDDList_ext());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapability_v690ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PhysicalChannelCapability_edch_r6::ValueType v;
      _physicalchannelcapability_edch_Type.read(reader, v);
      value.set_physicalchannelcapability_edch(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _deviceType_Type.read(reader, v);
      value.set_deviceType(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapability_v690ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _physicalchannelcapability_edch_Type.write(writer, value.get_physicalchannelcapability_edch());
   _deviceType_Type.write(writer, value.get_deviceType());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapability_v7xyext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RF_Capability_r7::ValueType v;
      _rf_Capability_Type.read(reader, v);
      value.set_rf_Capability(v);
   }
   {
      asn1::generated::PhysicalChannelCapability_r7::ValueType v;
      _physicalChannelCapability_r7_Type.read(reader, v);
      value.set_physicalChannelCapability_r7(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapability_v7xyext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rf_Capability_Type.write(writer, value.get_rf_Capability());
   _physicalChannelCapability_r7_Type.write(writer, value.get_physicalChannelCapability_r7());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapabBandFDD2::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RadioFrequencyBandFDD2::ValueType v;
      _radioFrequencyBandFDD2_Type.read(reader, v);
      value.set_radioFrequencyBandFDD2(v);
   }
   {
      _INTERNAL__SequenceType_ue-PowerClass_INTERNAL_asn1__generated__UE_PowerClassExt_txRxFrequencySeparation_INTERNAL_asn1__generated__TxRxFrequencySeparation::ValueType v;
      _fddRF_Capability_Type.read(reader, v);
      value.set_fddRF_Capability(v);
   }
   {
      asn1::generated::MeasurementCapabilityExt2::ValueType v;
      _measurementCapability2_Type.read(reader, v);
      value.set_measurementCapability2(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapabBandFDD2::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _radioFrequencyBandFDD2_Type.write(writer, value.get_radioFrequencyBandFDD2());
   _fddRF_Capability_Type.write(writer, value.get_fddRF_Capability());
   _measurementCapability2_Type.write(writer, value.get_measurementCapability2());

   writer.writeSequenceEnd();
}


void UE_PositioningCapabilityExt_v380::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _rx_tx_TimeDifferenceType2Capable_Type.read(reader, v);
      value.set_rx_tx_TimeDifferenceType2Capable(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_PositioningCapabilityExt_v380::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rx_tx_TimeDifferenceType2Capable_Type.write(writer, value.get_rx_tx_TimeDifferenceType2Capable());

   writer.writeSequenceEnd();
}


void UE_PositioningCapabilityExt_v3a0::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__EnumeratedType::ValueType v;
      _validity_CellPCH_UraPCH_Type.read(reader, v);
      value.set_validity_CellPCH_UraPCH(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_PositioningCapabilityExt_v3a0::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _validity_CellPCH_UraPCH_Type.write(writer, value.get_validity_CellPCH_UraPCH());

   writer.writeSequenceEnd();
}


void UE_PositioningCapabilityExt_v3g0::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__EnumeratedType::ValueType v;
      _sfn_sfnType2Capability_Type.read(reader, v);
      value.set_sfn_sfnType2Capability(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_PositioningCapabilityExt_v3g0::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sfn_sfnType2Capability_Type.write(writer, value.get_sfn_sfnType2Capability());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapabBandFDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RadioFrequencyBandFDD::ValueType v;
      _radioFrequencyBandFDD_Type.read(reader, v);
      value.set_radioFrequencyBandFDD(v);
   }
   {
      _INTERNAL__SequenceType_ue-PowerClass_INTERNAL_asn1__generated__UE_PowerClassExt_txRxFrequencySeparation_INTERNAL_asn1__generated__TxRxFrequencySeparation::ValueType v;
      _fddRF_Capability_Type.read(reader, v);
      value.set_fddRF_Capability(v);
   }
   {
      asn1::generated::MeasurementCapabilityExt::ValueType v;
      _measurementCapability_Type.read(reader, v);
      value.set_measurementCapability(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapabBandFDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _radioFrequencyBandFDD_Type.write(writer, value.get_radioFrequencyBandFDD());
   _fddRF_Capability_Type.write(writer, value.get_fddRF_Capability());
   _measurementCapability_Type.write(writer, value.get_measurementCapability());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapabBandFDD_ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RadioFrequencyBandFDD::ValueType v;
      _radioFrequencyBandFDD_Type.read(reader, v);
      value.set_radioFrequencyBandFDD(v);
   }
   {
      asn1::generated::CompressedModeMeasCapabFDDList_ext::ValueType v;
      _compressedModeMeasCapabFDDList_ext_Type.read(reader, v);
      value.set_compressedModeMeasCapabFDDList_ext(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapabBandFDD_ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _radioFrequencyBandFDD_Type.write(writer, value.get_radioFrequencyBandFDD());
   _compressedModeMeasCapabFDDList_ext_Type.write(writer, value.get_compressedModeMeasCapabFDDList_ext());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapability_v4b0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PDCP_Capability_r4_ext::ValueType v;
      _pdcp_Capability_r4_ext_Type.read(reader, v);
      value.set_pdcp_Capability_r4_ext(v);
   }
   {
      _INTERNAL__SequenceType_rf-Capability_INTERNAL_asn1__generated__RF_Capability_r4_ext_physicalChannelCapability-LCR_INTERNAL_asn1__generated__PhysicalChannelCapability_LCR_r4_measurementCapability-r4-ext_INTERNAL_asn1__generated__MeasurementCapability_r4_ext::ValueType v;
      _tdd_CapabilityExt_Type.read(reader, v);
      value.set_tdd_CapabilityExt(v);
   }
   {
      asn1::generated::AccessStratumReleaseIndicator::ValueType v;
      _accessStratumReleaseIndicator_Type.read(reader, v);
      value.set_accessStratumReleaseIndicator(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapability_v4b0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pdcp_Capability_r4_ext_Type.write(writer, value.get_pdcp_Capability_r4_ext());
   _tdd_CapabilityExt_Type.write(writer, value.get_tdd_CapabilityExt());
   _accessStratumReleaseIndicator_Type.write(writer, value.get_accessStratumReleaseIndicator());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapabilityComp::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _totalAM_RLCMemoryExceeds10kB_Type.read(reader, v);
      value.set_totalAM_RLCMemoryExceeds10kB(v);
   }
   {
      asn1::generated::RF_CapabilityComp::ValueType v;
      _rf_CapabilityComp_Type.read(reader, v);
      value.set_rf_CapabilityComp(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapabilityComp::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _totalAM_RLCMemoryExceeds10kB_Type.write(writer, value.get_totalAM_RLCMemoryExceeds10kB());
   _rf_CapabilityComp_Type.write(writer, value.get_rf_CapabilityComp());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapabilityComp_ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RF_CapabBandListFDDComp_ext::ValueType v;
      _rf_CapabilityFDDComp_Type.read(reader, v);
      value.set_rf_CapabilityFDDComp(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapabilityComp_ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rf_CapabilityFDDComp_Type.write(writer, value.get_rf_CapabilityFDDComp());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapabilityComp_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _totalAM_RLCMemoryExceeds10kB_Type.read(reader, v);
      value.set_totalAM_RLCMemoryExceeds10kB(v);
   }
   {
      asn1::generated::RF_CapabilityComp_r7::ValueType v;
      _rf_CapabilityComp_Type.read(reader, v);
      value.set_rf_CapabilityComp(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapabilityComp_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _totalAM_RLCMemoryExceeds10kB_Type.write(writer, value.get_totalAM_RLCMemoryExceeds10kB());
   _rf_CapabilityComp_Type.write(writer, value.get_rf_CapabilityComp());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapabilityComp2::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__SequenceType_dl-CapabilityWithSimultaneousHS-DSCHConfig_INTERNAL_asn1__generated__DL_CapabilityWithSimultaneousHS_DSCHConfig_physicalChannelCapabComp-hspdsch-r6_INTERNAL_asn1__generated__HSDSCH_physical_layer_category_physicalChannelCapability-edch-r6_INTERNAL_asn1__generated__PhysicalChannelCapability_edch_r6::ValueType v;
      _fddPhysicalChannelCapab_hspdsch_edch_Type.read(reader, v);
      value.set_fddPhysicalChannelCapab_hspdsch_edch(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapabilityComp2::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _fddPhysicalChannelCapab_hspdsch_edch_Type.write(writer, value.get_fddPhysicalChannelCapab_hspdsch_edch());

   writer.writeSequenceEnd();
}


void RF_CapabilityComp::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_notSupported_INTERNAL_asn1__NullType_supported_INTERNAL_asn1__generated__RF_CapabBandListFDDComp::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   {
      _INTERNAL__ChoiceType_notSupported_INTERNAL_asn1__NullType_supported_INTERNAL_asn1__generated__RadioFrequencyBandTDDList::ValueType v;
      _tdd384_RF_Capability_Type.read(reader, v);
      value.set_tdd384_RF_Capability(v);
   }
   {
      _INTERNAL__ChoiceType_notSupported_INTERNAL_asn1__NullType_supported_INTERNAL_asn1__generated__RadioFrequencyBandTDDList::ValueType v;
      _tdd128_RF_Capability_Type.read(reader, v);
      value.set_tdd128_RF_Capability(v);
   }

   reader.readSequenceEnd(*this);
}

void RF_CapabilityComp::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _fdd_Type.write(writer, value.get_fdd());
   _tdd384_RF_Capability_Type.write(writer, value.get_tdd384_RF_Capability());
   _tdd128_RF_Capability_Type.write(writer, value.get_tdd128_RF_Capability());

   writer.writeSequenceEnd();
}


void RF_CapabilityComp_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_notSupported_INTERNAL_asn1__NullType_supported_INTERNAL_asn1__generated__RF_CapabBandListFDDComp::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   {
      _INTERNAL__ChoiceType_notSupported_INTERNAL_asn1__NullType_supported_INTERNAL_asn1__generated__RadioFrequencyBandTDDList::ValueType v;
      _tdd384_RF_Capability_Type.read(reader, v);
      value.set_tdd384_RF_Capability(v);
   }
   {
      _INTERNAL__ChoiceType_notSupported_INTERNAL_asn1__NullType_supported_INTERNAL_asn1__generated__RadioFrequencyBandTDDList::ValueType v;
      _tdd768_RF_Capability_Type.read(reader, v);
      value.set_tdd768_RF_Capability(v);
   }
   {
      _INTERNAL__ChoiceType_notSupported_INTERNAL_asn1__NullType_supported_INTERNAL_asn1__generated__RadioFrequencyBandTDDList::ValueType v;
      _tdd128_RF_Capability_Type.read(reader, v);
      value.set_tdd128_RF_Capability(v);
   }

   reader.readSequenceEnd(*this);
}

void RF_CapabilityComp_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _fdd_Type.write(writer, value.get_fdd());
   _tdd384_RF_Capability_Type.write(writer, value.get_tdd384_RF_Capability());
   _tdd768_RF_Capability_Type.write(writer, value.get_tdd768_RF_Capability());
   _tdd128_RF_Capability_Type.write(writer, value.get_tdd128_RF_Capability());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapability_v590ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_CapabilityWithSimultaneousHS_DSCHConfig::ValueType v;
      _dl_CapabilityWithSimultaneousHS_DSCHConfig_Type.read(reader, v);
      value.set_dl_CapabilityWithSimultaneousHS_DSCHConfig(v);
   }
   {
      asn1::generated::PDCP_Capability_r5_ext::ValueType v;
      _pdcp_Capability_r5_ext_Type.read(reader, v);
      value.set_pdcp_Capability_r5_ext(v);
   }
   {
      asn1::generated::RLC_Capability_r5_ext::ValueType v;
      _rlc_Capability_r5_ext_Type.read(reader, v);
      value.set_rlc_Capability_r5_ext(v);
   }
   {
      asn1::generated::PhysicalChannelCapability_hspdsch_r5::ValueType v;
      _physicalChannelCapability_Type.read(reader, v);
      value.set_physicalChannelCapability(v);
   }
   {
      asn1::generated::MultiModeRAT_Capability_v590ext::ValueType v;
      _multiModeRAT_Capability_v590ext_Type.read(reader, v);
      value.set_multiModeRAT_Capability_v590ext(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapability_v590ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_CapabilityWithSimultaneousHS_DSCHConfig_Type.write(writer, value.get_dl_CapabilityWithSimultaneousHS_DSCHConfig());
   _pdcp_Capability_r5_ext_Type.write(writer, value.get_pdcp_Capability_r5_ext());
   _rlc_Capability_r5_ext_Type.write(writer, value.get_rlc_Capability_r5_ext());
   _physicalChannelCapability_Type.write(writer, value.get_physicalChannelCapability());
   _multiModeRAT_Capability_v590ext_Type.write(writer, value.get_multiModeRAT_Capability_v590ext());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapability_v5c0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PDCP_Capability_r5_ext2::ValueType v;
      _pdcp_Capability_r5_ext2_Type.read(reader, v);
      value.set_pdcp_Capability_r5_ext2(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapability_v5c0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pdcp_Capability_r5_ext2_Type.write(writer, value.get_pdcp_Capability_r5_ext2());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapability_v680ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MultiModeRAT_Capability_v680ext::ValueType v;
      _multiModeRAT_Capability_v680ext_Type.read(reader, v);
      value.set_multiModeRAT_Capability_v680ext(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapability_v680ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _multiModeRAT_Capability_v680ext_Type.write(writer, value.get_multiModeRAT_Capability_v680ext());

   writer.writeSequenceEnd();
}


void UL_PhysChCapabilityFDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MaxNoDPDCH_BitsTransmitted::ValueType v;
      _maxNoDPDCH_BitsTransmitted_Type.read(reader, v);
      value.set_maxNoDPDCH_BitsTransmitted(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_PhysChCapabilityFDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _maxNoDPDCH_BitsTransmitted_Type.write(writer, value.get_maxNoDPDCH_BitsTransmitted());
   _dummy_Type.write(writer, value.get_dummy());

   writer.writeSequenceEnd();
}


void UL_PhysChCapabilityFDD_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MaxNoDPDCH_BitsTransmitted::ValueType v;
      _maxNoDPDCH_BitsTransmitted_Type.read(reader, v);
      value.set_maxNoDPDCH_BitsTransmitted(v);
   }
   {
      asn1::generated::PhysicalChannelCapability_edch_r6::ValueType v;
      _physicalchannelcapability_edch_Type.read(reader, v);
      value.set_physicalchannelcapability_edch(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_PhysChCapabilityFDD_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _maxNoDPDCH_BitsTransmitted_Type.write(writer, value.get_maxNoDPDCH_BitsTransmitted());
   _physicalchannelcapability_edch_Type.write(writer, value.get_physicalchannelcapability_edch());

   writer.writeSequenceEnd();
}


void UL_PhysChCapabilityTDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MaxTS_PerFrame::ValueType v;
      _maxTS_PerFrame_Type.read(reader, v);
      value.set_maxTS_PerFrame(v);
   }
   {
      asn1::generated::MaxPhysChPerTimeslot::ValueType v;
      _maxPhysChPerTimeslot_Type.read(reader, v);
      value.set_maxPhysChPerTimeslot(v);
   }
   {
      asn1::generated::MinimumSF_UL::ValueType v;
      _minimumSF_Type.read(reader, v);
      value.set_minimumSF(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _supportOfPUSCH_Type.read(reader, v);
      value.set_supportOfPUSCH(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_PhysChCapabilityTDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _maxTS_PerFrame_Type.write(writer, value.get_maxTS_PerFrame());
   _maxPhysChPerTimeslot_Type.write(writer, value.get_maxPhysChPerTimeslot());
   _minimumSF_Type.write(writer, value.get_minimumSF());
   _supportOfPUSCH_Type.write(writer, value.get_supportOfPUSCH());

   writer.writeSequenceEnd();
}


void UL_PhysChCapabilityTDD_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MaxTS_PerSubFrame_r4::ValueType v;
      _maxTS_PerSubFrame_Type.read(reader, v);
      value.set_maxTS_PerSubFrame(v);
   }
   {
      asn1::generated::MaxPhysChPerTimeslot::ValueType v;
      _maxPhysChPerTimeslot_Type.read(reader, v);
      value.set_maxPhysChPerTimeslot(v);
   }
   {
      asn1::generated::MinimumSF_UL::ValueType v;
      _minimumSF_Type.read(reader, v);
      value.set_minimumSF(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _supportOfPUSCH_Type.read(reader, v);
      value.set_supportOfPUSCH(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _supportOf8PSK_Type.read(reader, v);
      value.set_supportOf8PSK(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_PhysChCapabilityTDD_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _maxTS_PerSubFrame_Type.write(writer, value.get_maxTS_PerSubFrame());
   _maxPhysChPerTimeslot_Type.write(writer, value.get_maxPhysChPerTimeslot());
   _minimumSF_Type.write(writer, value.get_minimumSF());
   _supportOfPUSCH_Type.write(writer, value.get_supportOfPUSCH());
   _supportOf8PSK_Type.write(writer, value.get_supportOf8PSK());

   writer.writeSequenceEnd();
}


void PhysicalChannelCapability_edch_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_supported_INTERNAL__SequenceType_edch-PhysicalLayerCategory_INTERNAL_asn1__IntegerType_unsupported_INTERNAL_asn1__NullType::ValueType v;
      _fdd_edch_Type.read(reader, v);
      value.set_fdd_edch(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalChannelCapability_edch_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _fdd_edch_Type.write(writer, value.get_fdd_edch());

   writer.writeSequenceEnd();
}


void UL_TransChCapability::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MaxNoBits::ValueType v;
      _maxNoBitsTransmitted_Type.read(reader, v);
      value.set_maxNoBitsTransmitted(v);
   }
   {
      asn1::generated::MaxNoBits::ValueType v;
      _maxConvCodeBitsTransmitted_Type.read(reader, v);
      value.set_maxConvCodeBitsTransmitted(v);
   }
   {
      asn1::generated::TurboSupport::ValueType v;
      _turboEncodingSupport_Type.read(reader, v);
      value.set_turboEncodingSupport(v);
   }
   {
      asn1::generated::MaxSimultaneousTransChsUL::ValueType v;
      _maxSimultaneousTransChs_Type.read(reader, v);
      value.set_maxSimultaneousTransChs(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL_asn1__NullType_tdd_INTERNAL__SequenceType_maxSimultaneousCCTrCH-Count_INTERNAL_asn1__generated__MaxSimultaneousCCTrCH_Count::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::MaxTransportBlocksUL::ValueType v;
      _maxTransmittedBlocks_Type.read(reader, v);
      value.set_maxTransmittedBlocks(v);
   }
   {
      asn1::generated::MaxNumberOfTFC_UL::ValueType v;
      _maxNumberOfTFC_Type.read(reader, v);
      value.set_maxNumberOfTFC(v);
   }
   {
      asn1::generated::MaxNumberOfTF::ValueType v;
      _maxNumberOfTF_Type.read(reader, v);
      value.set_maxNumberOfTF(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_TransChCapability::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _maxNoBitsTransmitted_Type.write(writer, value.get_maxNoBitsTransmitted());
   _maxConvCodeBitsTransmitted_Type.write(writer, value.get_maxConvCodeBitsTransmitted());
   _turboEncodingSupport_Type.write(writer, value.get_turboEncodingSupport());
   _maxSimultaneousTransChs_Type.write(writer, value.get_maxSimultaneousTransChs());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _maxTransmittedBlocks_Type.write(writer, value.get_maxTransmittedBlocks());
   _maxNumberOfTFC_Type.write(writer, value.get_maxNumberOfTFC());
   _maxNumberOfTF_Type.write(writer, value.get_maxNumberOfTF());

   writer.writeSequenceEnd();
}


void UE_Positioning_Capability::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _standaloneLocMethodsSupported_Type.read(reader, v);
      value.set_standaloneLocMethodsSupported(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _ue_BasedOTDOA_Supported_Type.read(reader, v);
      value.set_ue_BasedOTDOA_Supported(v);
   }
   {
      asn1::generated::NetworkAssistedGPS_Supported::ValueType v;
      _networkAssistedGPS_Supported_Type.read(reader, v);
      value.set_networkAssistedGPS_Supported(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _supportForUE_GPS_TimingOfCellFrames_Type.read(reader, v);
      value.set_supportForUE_GPS_TimingOfCellFrames(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _supportForIPDL_Type.read(reader, v);
      value.set_supportForIPDL(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_Capability::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _standaloneLocMethodsSupported_Type.write(writer, value.get_standaloneLocMethodsSupported());
   _ue_BasedOTDOA_Supported_Type.write(writer, value.get_ue_BasedOTDOA_Supported());
   _networkAssistedGPS_Supported_Type.write(writer, value.get_networkAssistedGPS_Supported());
   _supportForUE_GPS_TimingOfCellFrames_Type.write(writer, value.get_supportForUE_GPS_TimingOfCellFrames());
   _supportForIPDL_Type.write(writer, value.get_supportForIPDL());

   writer.writeSequenceEnd();
}


void UE_SecurityInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::START_Value::ValueType v;
      _start_CS_Type.read(reader, v);
      value.set_start_CS(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_SecurityInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _start_CS_Type.write(writer, value.get_start_CS());

   writer.writeSequenceEnd();
}


void UE_SecurityInformation2::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::START_Value::ValueType v;
      _start_PS_Type.read(reader, v);
      value.set_start_PS(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_SecurityInformation2::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _start_PS_Type.write(writer, value.get_start_PS());

   writer.writeSequenceEnd();
}


void AlgorithmSpecificInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_rfc2507-Info_Type)
   {
      asn1::generated::RFC2507_Info::ValueType v;
      _rfc2507_Info_Type.read(reader, v);
      value.set_rfc2507_Info(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _rfc2507-Info_Type.toString());
   }
}

void AlgorithmSpecificInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_rfc2507-Info_Choosen())
      _rfc2507-Info_Type.write(writer, value.get_rfc2507-Info());
}


void AlgorithmSpecificInfo-r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_rfc2507-Info_Type)
   {
      asn1::generated::RFC2507_Info::ValueType v;
      _rfc2507_Info_Type.read(reader, v);
      value.set_rfc2507_Info(v);
   }
   else if (choosenType == &_rfc3095-Info_Type)
   {
      asn1::generated::RFC3095_Info_r4::ValueType v;
      _rfc3095_Info_Type.read(reader, v);
      value.set_rfc3095_Info(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _rfc2507-Info_Type.toString() + ", " + _rfc3095-Info_Type.toString());
   }
}

void AlgorithmSpecificInfo-r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_rfc2507-Info_Choosen())
      _rfc2507-Info_Type.write(writer, value.get_rfc2507-Info());
   else if (value.has_rfc3095-Info_Choosen())
      _rfc3095-Info_Type.write(writer, value.get_rfc3095-Info());
}


void DL_AM_RLC_Mode::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _inSequenceDelivery_Type.read(reader, v);
      value.set_inSequenceDelivery(v);
   }
   {
      asn1::generated::ReceivingWindowSize::ValueType v;
      _receivingWindowSize_Type.read(reader, v);
      value.set_receivingWindowSize(v);
   }
   {
      asn1::generated::DL_RLC_StatusInfo::ValueType v;
      _dl_RLC_StatusInfo_Type.read(reader, v);
      value.set_dl_RLC_StatusInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_AM_RLC_Mode::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _inSequenceDelivery_Type.write(writer, value.get_inSequenceDelivery());
   _receivingWindowSize_Type.write(writer, value.get_receivingWindowSize());
   _dl_RLC_StatusInfo_Type.write(writer, value.get_dl_RLC_StatusInfo());

   writer.writeSequenceEnd();
}


void DL_AM_RLC_Mode_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::OctetModeRLC_SizeInfoType1::ValueType v;
      _dl_RLC_PDU_size_Type.read(reader, v);
      value.set_dl_RLC_PDU_size(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _inSequenceDelivery_Type.read(reader, v);
      value.set_inSequenceDelivery(v);
   }
   {
      asn1::generated::ReceivingWindowSize::ValueType v;
      _receivingWindowSize_Type.read(reader, v);
      value.set_receivingWindowSize(v);
   }
   {
      asn1::generated::DL_RLC_StatusInfo::ValueType v;
      _dl_RLC_StatusInfo_Type.read(reader, v);
      value.set_dl_RLC_StatusInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_AM_RLC_Mode_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_RLC_PDU_size_Type.write(writer, value.get_dl_RLC_PDU_size());
   _inSequenceDelivery_Type.write(writer, value.get_inSequenceDelivery());
   _receivingWindowSize_Type.write(writer, value.get_receivingWindowSize());
   _dl_RLC_StatusInfo_Type.write(writer, value.get_dl_RLC_StatusInfo());

   writer.writeSequenceEnd();
}


void DL_CounterSynchronisationInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_WithPDCP_InfoList::ValueType v;
      _rB_WithPDCP_InfoList_Type.read(reader, v);
      value.set_rB_WithPDCP_InfoList(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_CounterSynchronisationInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rB_WithPDCP_InfoList_Type.write(writer, value.get_rB_WithPDCP_InfoList());

   writer.writeSequenceEnd();
}


void DL_CounterSynchronisationInfo_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_WithPDCP_InfoList::ValueType v;
      _rb_WithPDCP_InfoList_Type.read(reader, v);
      value.set_rb_WithPDCP_InfoList(v);
   }
   {
      asn1::generated::RB_PDCPContextRelocationList::ValueType v;
      _rb_PDCPContextRelocationList_Type.read(reader, v);
      value.set_rb_PDCPContextRelocationList(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_CounterSynchronisationInfo_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_WithPDCP_InfoList_Type.write(writer, value.get_rb_WithPDCP_InfoList());
   _rb_PDCPContextRelocationList_Type.write(writer, value.get_rb_PDCPContextRelocationList());

   writer.writeSequenceEnd();
}


void DL_LogicalChannelMapping::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_TransportChannelType::ValueType v;
      _dl_TransportChannelType_Type.read(reader, v);
      value.set_dl_TransportChannelType(v);
   }
   {
      asn1::generated::LogicalChannelIdentity::ValueType v;
      _logicalChannelIdentity_Type.read(reader, v);
      value.set_logicalChannelIdentity(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_LogicalChannelMapping::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_TransportChannelType_Type.write(writer, value.get_dl_TransportChannelType());
   _logicalChannelIdentity_Type.write(writer, value.get_logicalChannelIdentity());

   writer.writeSequenceEnd();
}


void DL_LogicalChannelMapping_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_TransportChannelType_r5::ValueType v;
      _dl_TransportChannelType_Type.read(reader, v);
      value.set_dl_TransportChannelType(v);
   }
   {
      asn1::generated::LogicalChannelIdentity::ValueType v;
      _logicalChannelIdentity_Type.read(reader, v);
      value.set_logicalChannelIdentity(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_LogicalChannelMapping_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_TransportChannelType_Type.write(writer, value.get_dl_TransportChannelType());
   _logicalChannelIdentity_Type.write(writer, value.get_logicalChannelIdentity());

   writer.writeSequenceEnd();
}


void DL_RFC3095_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CID_InclusionInfo_r4::ValueType v;
      _cid_InclusionInfo_Type.read(reader, v);
      value.set_cid_InclusionInfo(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _max_CID_Type.read(reader, v);
      value.set_max_CID(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _reverseDecompressionDepth_Type.read(reader, v);
      value.set_reverseDecompressionDepth(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_RFC3095_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cid_InclusionInfo_Type.write(writer, value.get_cid_InclusionInfo());
   _max_CID_Type.write(writer, value.get_max_CID());
   _reverseDecompressionDepth_Type.write(writer, value.get_reverseDecompressionDepth());

   writer.writeSequenceEnd();
}


void DL-RLC-Mode::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_dl-AM-RLC-Mode_Type)
   {
      asn1::generated::DL_AM_RLC_Mode::ValueType v;
      _dl_AM_RLC_Mode_Type.read(reader, v);
      value.set_dl_AM_RLC_Mode(v);
   }
   else if (choosenType == &_dl-UM-RLC-Mode_Type)
   {
      asn1::NullType::ValueType v;
      _dl_UM_RLC_Mode_Type.read(reader, v);
      value.set_dl_UM_RLC_Mode(v);
   }
   else if (choosenType == &_dl-TM-RLC-Mode_Type)
   {
      asn1::generated::DL_TM_RLC_Mode::ValueType v;
      _dl_TM_RLC_Mode_Type.read(reader, v);
      value.set_dl_TM_RLC_Mode(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _dl-AM-RLC-Mode_Type.toString() + ", " + _dl-UM-RLC-Mode_Type.toString() + ", " + _dl-TM-RLC-Mode_Type.toString());
   }
}

void DL-RLC-Mode::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_dl-AM-RLC-Mode_Choosen())
      _dl-AM-RLC-Mode_Type.write(writer, value.get_dl-AM-RLC-Mode());
   else if (value.has_dl-UM-RLC-Mode_Choosen())
      _dl-UM-RLC-Mode_Type.write(writer, value.get_dl-UM-RLC-Mode());
   else if (value.has_dl-TM-RLC-Mode_Choosen())
      _dl-TM-RLC-Mode_Type.write(writer, value.get_dl-TM-RLC-Mode());
}


void DL-RLC-Mode-r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_dl-AM-RLC-Mode_Type)
   {
      asn1::generated::DL_AM_RLC_Mode_r5::ValueType v;
      _dl_AM_RLC_Mode_Type.read(reader, v);
      value.set_dl_AM_RLC_Mode(v);
   }
   else if (choosenType == &_dl-UM-RLC-Mode_Type)
   {
      asn1::generated::DL_UM_RLC_Mode_r5::ValueType v;
      _dl_UM_RLC_Mode_Type.read(reader, v);
      value.set_dl_UM_RLC_Mode(v);
   }
   else if (choosenType == &_dl-TM-RLC-Mode_Type)
   {
      asn1::generated::DL_TM_RLC_Mode::ValueType v;
      _dl_TM_RLC_Mode_Type.read(reader, v);
      value.set_dl_TM_RLC_Mode(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _dl-AM-RLC-Mode_Type.toString() + ", " + _dl-UM-RLC-Mode_Type.toString() + ", " + _dl-TM-RLC-Mode_Type.toString());
   }
}

void DL-RLC-Mode-r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_dl-AM-RLC-Mode_Choosen())
      _dl-AM-RLC-Mode_Type.write(writer, value.get_dl-AM-RLC-Mode());
   else if (value.has_dl-UM-RLC-Mode_Choosen())
      _dl-UM-RLC-Mode_Type.write(writer, value.get_dl-UM-RLC-Mode());
   else if (value.has_dl-TM-RLC-Mode_Choosen())
      _dl-TM-RLC-Mode_Type.write(writer, value.get_dl-TM-RLC-Mode());
}


void DL-RLC-Mode-r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_dl-AM-RLC-Mode_Type)
   {
      asn1::generated::DL_AM_RLC_Mode_r5::ValueType v;
      _dl_AM_RLC_Mode_Type.read(reader, v);
      value.set_dl_AM_RLC_Mode(v);
   }
   else if (choosenType == &_dl-UM-RLC-Mode_Type)
   {
      asn1::generated::DL_UM_RLC_Mode_r6::ValueType v;
      _dl_UM_RLC_Mode_Type.read(reader, v);
      value.set_dl_UM_RLC_Mode(v);
   }
   else if (choosenType == &_dl-TM-RLC-Mode_Type)
   {
      asn1::generated::DL_TM_RLC_Mode::ValueType v;
      _dl_TM_RLC_Mode_Type.read(reader, v);
      value.set_dl_TM_RLC_Mode(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _dl-AM-RLC-Mode_Type.toString() + ", " + _dl-UM-RLC-Mode_Type.toString() + ", " + _dl-TM-RLC-Mode_Type.toString());
   }
}

void DL-RLC-Mode-r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_dl-AM-RLC-Mode_Choosen())
      _dl-AM-RLC-Mode_Type.write(writer, value.get_dl-AM-RLC-Mode());
   else if (value.has_dl-UM-RLC-Mode_Choosen())
      _dl-UM-RLC-Mode_Type.write(writer, value.get_dl-UM-RLC-Mode());
   else if (value.has_dl-TM-RLC-Mode_Choosen())
      _dl-TM-RLC-Mode_Type.write(writer, value.get_dl-TM-RLC-Mode());
}


void DL_RLC_StatusInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimerStatusProhibit::ValueType v;
      _timerStatusProhibit_Type.read(reader, v);
      value.set_timerStatusProhibit(v);
   }
   {
      asn1::generated::TimerEPC::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _missingPDU_Indicator_Type.read(reader, v);
      value.set_missingPDU_Indicator(v);
   }
   {
      asn1::generated::TimerStatusPeriodic::ValueType v;
      _timerStatusPeriodic_Type.read(reader, v);
      value.set_timerStatusPeriodic(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_RLC_StatusInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timerStatusProhibit_Type.write(writer, value.get_timerStatusProhibit());
   _dummy_Type.write(writer, value.get_dummy());
   _missingPDU_Indicator_Type.write(writer, value.get_missingPDU_Indicator());
   _timerStatusPeriodic_Type.write(writer, value.get_timerStatusPeriodic());

   writer.writeSequenceEnd();
}


void DL_TM_RLC_Mode::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _segmentationIndication_Type.read(reader, v);
      value.set_segmentationIndication(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_TM_RLC_Mode::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _segmentationIndication_Type.write(writer, value.get_segmentationIndication());

   writer.writeSequenceEnd();
}


void DL-TransportChannelType::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_dch_Type)
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _dch_Type.read(reader, v);
      value.set_dch(v);
   }
   else if (choosenType == &_fach_Type)
   {
      asn1::NullType::ValueType v;
      _fach_Type.read(reader, v);
      value.set_fach(v);
   }
   else if (choosenType == &_dsch_Type)
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _dsch_Type.read(reader, v);
      value.set_dsch(v);
   }
   else if (choosenType == &_dch-and-dsch_Type)
   {
      asn1::generated::TransportChannelIdentityDCHandDSCH::ValueType v;
      _dch_and_dsch_Type.read(reader, v);
      value.set_dch_and_dsch(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _dch_Type.toString() + ", " + _fach_Type.toString() + ", " + _dsch_Type.toString() + ", " + _dch-and-dsch_Type.toString());
   }
}

void DL-TransportChannelType::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_dch_Choosen())
      _dch_Type.write(writer, value.get_dch());
   else if (value.has_fach_Choosen())
      _fach_Type.write(writer, value.get_fach());
   else if (value.has_dsch_Choosen())
      _dsch_Type.write(writer, value.get_dsch());
   else if (value.has_dch-and-dsch_Choosen())
      _dch-and-dsch_Type.write(writer, value.get_dch-and-dsch());
}


void DL-TransportChannelType-r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_dch_Type)
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _dch_Type.read(reader, v);
      value.set_dch(v);
   }
   else if (choosenType == &_fach_Type)
   {
      asn1::NullType::ValueType v;
      _fach_Type.read(reader, v);
      value.set_fach(v);
   }
   else if (choosenType == &_dsch_Type)
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _dsch_Type.read(reader, v);
      value.set_dsch(v);
   }
   else if (choosenType == &_dch-and-dsch_Type)
   {
      asn1::generated::TransportChannelIdentityDCHandDSCH::ValueType v;
      _dch_and_dsch_Type.read(reader, v);
      value.set_dch_and_dsch(v);
   }
   else if (choosenType == &_hsdsch_Type)
   {
      asn1::generated::MAC_d_FlowIdentity::ValueType v;
      _hsdsch_Type.read(reader, v);
      value.set_hsdsch(v);
   }
   else if (choosenType == &_dch-and-hsdsch_Type)
   {
      asn1::generated::MAC_d_FlowIdentityDCHandHSDSCH::ValueType v;
      _dch_and_hsdsch_Type.read(reader, v);
      value.set_dch_and_hsdsch(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _dch_Type.toString() + ", " + _fach_Type.toString() + ", " + _dsch_Type.toString() + ", " + _dch-and-dsch_Type.toString() + ", " + _hsdsch_Type.toString() + ", " + _dch-and-hsdsch_Type.toString());
   }
}

void DL-TransportChannelType-r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_dch_Choosen())
      _dch_Type.write(writer, value.get_dch());
   else if (value.has_fach_Choosen())
      _fach_Type.write(writer, value.get_fach());
   else if (value.has_dsch_Choosen())
      _dsch_Type.write(writer, value.get_dsch());
   else if (value.has_dch-and-dsch_Choosen())
      _dch-and-dsch_Type.write(writer, value.get_dch-and-dsch());
   else if (value.has_hsdsch_Choosen())
      _hsdsch_Type.write(writer, value.get_hsdsch());
   else if (value.has_dch-and-hsdsch_Choosen())
      _dch-and-hsdsch_Type.write(writer, value.get_dch-and-hsdsch());
}


void DL_UM_RLC_Mode_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_UM_RLC_LI_size::ValueType v;
      _dl_UM_RLC_LI_size_Type.read(reader, v);
      value.set_dl_UM_RLC_LI_size(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_UM_RLC_Mode_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_UM_RLC_LI_size_Type.write(writer, value.get_dl_UM_RLC_LI_size());

   writer.writeSequenceEnd();
}


void DL_UM_RLC_Mode_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_UM_RLC_LI_size::ValueType v;
      _dl_UM_RLC_LI_size_Type.read(reader, v);
      value.set_dl_UM_RLC_LI_size(v);
   }
   {
      asn1::generated::DL_Reception_Window_Size_r6::ValueType v;
      _dl_Reception_Window_Size_Type.read(reader, v);
      value.set_dl_Reception_Window_Size(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_UM_RLC_Mode_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_UM_RLC_LI_size_Type.write(writer, value.get_dl_UM_RLC_LI_size());
   _dl_Reception_Window_Size_Type.write(writer, value.get_dl_Reception_Window_Size());

   writer.writeSequenceEnd();
}


void ExplicitDiscard::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimerMRW::ValueType v;
      _timerMRW_Type.read(reader, v);
      value.set_timerMRW(v);
   }
   {
      asn1::generated::TimerDiscard::ValueType v;
      _timerDiscard_Type.read(reader, v);
      value.set_timerDiscard(v);
   }
   {
      asn1::generated::MaxMRW::ValueType v;
      _maxMRW_Type.read(reader, v);
      value.set_maxMRW(v);
   }

   reader.readSequenceEnd(*this);
}

void ExplicitDiscard::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timerMRW_Type.write(writer, value.get_timerMRW());
   _timerDiscard_Type.write(writer, value.get_timerDiscard());
   _maxMRW_Type.write(writer, value.get_maxMRW());

   writer.writeSequenceEnd();
}


void HeaderCompressionInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::AlgorithmSpecificInfo::ValueType v;
      _algorithmSpecificInfo_Type.read(reader, v);
      value.set_algorithmSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void HeaderCompressionInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _algorithmSpecificInfo_Type.write(writer, value.get_algorithmSpecificInfo());

   writer.writeSequenceEnd();
}


void HeaderCompressionInfo_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::AlgorithmSpecificInfo_r4::ValueType v;
      _algorithmSpecificInfo_Type.read(reader, v);
      value.set_algorithmSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void HeaderCompressionInfo_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _algorithmSpecificInfo_Type.write(writer, value.get_algorithmSpecificInfo());

   writer.writeSequenceEnd();
}


void LosslessSRNS-RelocSupport::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_supported_Type)
   {
      asn1::generated::MaxPDCP_SN_WindowSize::ValueType v;
      _supported_Type.read(reader, v);
      value.set_supported(v);
   }
   else if (choosenType == &_notSupported_Type)
   {
      asn1::NullType::ValueType v;
      _notSupported_Type.read(reader, v);
      value.set_notSupported(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _supported_Type.toString() + ", " + _notSupported_Type.toString());
   }
}

void LosslessSRNS-RelocSupport::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_supported_Choosen())
      _supported_Type.write(writer, value.get_supported());
   else if (value.has_notSupported_Choosen())
      _notSupported_Type.write(writer, value.get_notSupported());
}


void MaxDAT_Retransmissions::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MaxDAT::ValueType v;
      _maxDAT_Type.read(reader, v);
      value.set_maxDAT(v);
   }
   {
      asn1::generated::TimerMRW::ValueType v;
      _timerMRW_Type.read(reader, v);
      value.set_timerMRW(v);
   }
   {
      asn1::generated::MaxMRW::ValueType v;
      _maxMRW_Type.read(reader, v);
      value.set_maxMRW(v);
   }

   reader.readSequenceEnd(*this);
}

void MaxDAT_Retransmissions::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _maxDAT_Type.write(writer, value.get_maxDAT());
   _timerMRW_Type.write(writer, value.get_timerMRW());
   _maxMRW_Type.write(writer, value.get_maxMRW());

   writer.writeSequenceEnd();
}


void PDCP_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::LosslessSRNS_RelocSupport::ValueType v;
      _losslessSRNS_RelocSupport_Type.read(reader, v);
      value.set_losslessSRNS_RelocSupport(v);
   }
   {
      asn1::generated::PDCP_PDU_Header::ValueType v;
      _pdcp_PDU_Header_Type.read(reader, v);
      value.set_pdcp_PDU_Header(v);
   }
   {
      asn1::generated::HeaderCompressionInfoList::ValueType v;
      _headerCompressionInfoList_Type.read(reader, v);
      value.set_headerCompressionInfoList(v);
   }

   reader.readSequenceEnd(*this);
}

void PDCP_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _losslessSRNS_RelocSupport_Type.write(writer, value.get_losslessSRNS_RelocSupport());
   _pdcp_PDU_Header_Type.write(writer, value.get_pdcp_PDU_Header());
   _headerCompressionInfoList_Type.write(writer, value.get_headerCompressionInfoList());

   writer.writeSequenceEnd();
}


void PDCP_Info_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::LosslessSRNS_RelocSupport::ValueType v;
      _losslessSRNS_RelocSupport_Type.read(reader, v);
      value.set_losslessSRNS_RelocSupport(v);
   }
   {
      asn1::generated::PDCP_PDU_Header::ValueType v;
      _pdcp_PDU_Header_Type.read(reader, v);
      value.set_pdcp_PDU_Header(v);
   }
   {
      asn1::generated::HeaderCompressionInfoList_r4::ValueType v;
      _headerCompressionInfoList_Type.read(reader, v);
      value.set_headerCompressionInfoList(v);
   }

   reader.readSequenceEnd(*this);
}

void PDCP_Info_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _losslessSRNS_RelocSupport_Type.write(writer, value.get_losslessSRNS_RelocSupport());
   _pdcp_PDU_Header_Type.write(writer, value.get_pdcp_PDU_Header());
   _headerCompressionInfoList_Type.write(writer, value.get_headerCompressionInfoList());

   writer.writeSequenceEnd();
}


void PDCP_InfoReconfig::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PDCP_Info::ValueType v;
      _pdcp_Info_Type.read(reader, v);
      value.set_pdcp_Info(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }

   reader.readSequenceEnd(*this);
}

void PDCP_InfoReconfig::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pdcp_Info_Type.write(writer, value.get_pdcp_Info());
   _dummy_Type.write(writer, value.get_dummy());

   writer.writeSequenceEnd();
}


void PDCP_InfoReconfig_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PDCP_Info_r4::ValueType v;
      _pdcp_Info_Type.read(reader, v);
      value.set_pdcp_Info(v);
   }

   reader.readSequenceEnd(*this);
}

void PDCP_InfoReconfig_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pdcp_Info_Type.write(writer, value.get_pdcp_Info());

   writer.writeSequenceEnd();
}


void PollingInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimerPollProhibit::ValueType v;
      _timerPollProhibit_Type.read(reader, v);
      value.set_timerPollProhibit(v);
   }
   {
      asn1::generated::TimerPoll::ValueType v;
      _timerPoll_Type.read(reader, v);
      value.set_timerPoll(v);
   }
   {
      asn1::generated::Poll_PDU::ValueType v;
      _poll_PDU_Type.read(reader, v);
      value.set_poll_PDU(v);
   }
   {
      asn1::generated::Poll_SDU::ValueType v;
      _poll_SDU_Type.read(reader, v);
      value.set_poll_SDU(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _lastTransmissionPDU_Poll_Type.read(reader, v);
      value.set_lastTransmissionPDU_Poll(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _lastRetransmissionPDU_Poll_Type.read(reader, v);
      value.set_lastRetransmissionPDU_Poll(v);
   }
   {
      asn1::generated::PollWindow::ValueType v;
      _pollWindow_Type.read(reader, v);
      value.set_pollWindow(v);
   }
   {
      asn1::generated::TimerPollPeriodic::ValueType v;
      _timerPollPeriodic_Type.read(reader, v);
      value.set_timerPollPeriodic(v);
   }

   reader.readSequenceEnd(*this);
}

void PollingInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timerPollProhibit_Type.write(writer, value.get_timerPollProhibit());
   _timerPoll_Type.write(writer, value.get_timerPoll());
   _poll_PDU_Type.write(writer, value.get_poll_PDU());
   _poll_SDU_Type.write(writer, value.get_poll_SDU());
   _lastTransmissionPDU_Poll_Type.write(writer, value.get_lastTransmissionPDU_Poll());
   _lastRetransmissionPDU_Poll_Type.write(writer, value.get_lastRetransmissionPDU_Poll());
   _pollWindow_Type.write(writer, value.get_pollWindow());
   _timerPollPeriodic_Type.write(writer, value.get_timerPollPeriodic());

   writer.writeSequenceEnd();
}


void PredefinedRB_Configuration::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Re_EstablishmentTimer::ValueType v;
      _re_EstablishmentTimer_Type.read(reader, v);
      value.set_re_EstablishmentTimer(v);
   }
   {
      asn1::generated::SRB_InformationSetupList::ValueType v;
      _srb_InformationList_Type.read(reader, v);
      value.set_srb_InformationList(v);
   }
   {
      asn1::generated::RB_InformationSetupList::ValueType v;
      _rb_InformationList_Type.read(reader, v);
      value.set_rb_InformationList(v);
   }

   reader.readSequenceEnd(*this);
}

void PredefinedRB_Configuration::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _re_EstablishmentTimer_Type.write(writer, value.get_re_EstablishmentTimer());
   _srb_InformationList_Type.write(writer, value.get_srb_InformationList());
   _rb_InformationList_Type.write(writer, value.get_rb_InformationList());

   writer.writeSequenceEnd();
}


void PreDefRadioConfiguration::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PredefinedRB_Configuration::ValueType v;
      _predefinedRB_Configuration_Type.read(reader, v);
      value.set_predefinedRB_Configuration(v);
   }
   {
      asn1::generated::PreDefTransChConfiguration::ValueType v;
      _preDefTransChConfiguration_Type.read(reader, v);
      value.set_preDefTransChConfiguration(v);
   }
   {
      asn1::generated::PreDefPhyChConfiguration::ValueType v;
      _preDefPhyChConfiguration_Type.read(reader, v);
      value.set_preDefPhyChConfiguration(v);
   }

   reader.readSequenceEnd(*this);
}

void PreDefRadioConfiguration::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _predefinedRB_Configuration_Type.write(writer, value.get_predefinedRB_Configuration());
   _preDefTransChConfiguration_Type.write(writer, value.get_preDefTransChConfiguration());
   _preDefPhyChConfiguration_Type.write(writer, value.get_preDefPhyChConfiguration());

   writer.writeSequenceEnd();
}


void PredefinedConfigStatusInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_storedWithValueTagSameAsPrevius_Type)
   {
      asn1::NullType::ValueType v;
      _storedWithValueTagSameAsPrevius_Type.read(reader, v);
      value.set_storedWithValueTagSameAsPrevius(v);
   }
   else if (choosenType == &_other_Type)
   {
      _INTERNAL__ChoiceType_notStored_INTERNAL_asn1__NullType_storedWithDifferentValueTag_INTERNAL_asn1__generated__PredefinedConfigValueTag::ValueType v;
      _other_Type.read(reader, v);
      value.set_other(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _storedWithValueTagSameAsPrevius_Type.toString() + ", " + _other_Type.toString());
   }
}

void PredefinedConfigStatusInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_storedWithValueTagSameAsPrevius_Choosen())
      _storedWithValueTagSameAsPrevius_Type.write(writer, value.get_storedWithValueTagSameAsPrevius());
   else if (value.has_other_Choosen())
      _other_Type.write(writer, value.get_other());
}


void PredefinedConfigStatusListComp::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PredefinedConfigSetsWithDifferentValueTag::ValueType v;
      _setsWithDifferentValueTag_Type.read(reader, v);
      value.set_setsWithDifferentValueTag(v);
   }
   {
      asn1::generated::PredefinedConfigStatusListVarSz::ValueType v;
      _otherEntries_Type.read(reader, v);
      value.set_otherEntries(v);
   }

   reader.readSequenceEnd(*this);
}

void PredefinedConfigStatusListComp::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _setsWithDifferentValueTag_Type.write(writer, value.get_setsWithDifferentValueTag());
   _otherEntries_Type.write(writer, value.get_otherEntries());

   writer.writeSequenceEnd();
}


void PredefinedConfigSetWithDifferentValueTag::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _startPosition_Type.read(reader, v);
      value.set_startPosition(v);
   }
   {
      asn1::generated::PredefinedConfigValueTagList::ValueType v;
      _valueTagList_Type.read(reader, v);
      value.set_valueTagList(v);
   }

   reader.readSequenceEnd(*this);
}

void PredefinedConfigSetWithDifferentValueTag::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _startPosition_Type.write(writer, value.get_startPosition());
   _valueTagList_Type.write(writer, value.get_valueTagList());

   writer.writeSequenceEnd();
}


void RAB_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RAB_Identity::ValueType v;
      _rab_Identity_Type.read(reader, v);
      value.set_rab_Identity(v);
   }
   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _cn_DomainIdentity_Type.read(reader, v);
      value.set_cn_DomainIdentity(v);
   }
   {
      asn1::generated::NAS_Synchronisation_Indicator::ValueType v;
      _nas_Synchronisation_Indicator_Type.read(reader, v);
      value.set_nas_Synchronisation_Indicator(v);
   }
   {
      asn1::generated::Re_EstablishmentTimer::ValueType v;
      _re_EstablishmentTimer_Type.read(reader, v);
      value.set_re_EstablishmentTimer(v);
   }

   reader.readSequenceEnd(*this);
}

void RAB_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rab_Identity_Type.write(writer, value.get_rab_Identity());
   _cn_DomainIdentity_Type.write(writer, value.get_cn_DomainIdentity());
   _nas_Synchronisation_Indicator_Type.write(writer, value.get_nas_Synchronisation_Indicator());
   _re_EstablishmentTimer_Type.write(writer, value.get_re_EstablishmentTimer());

   writer.writeSequenceEnd();
}


void RAB_Info_r6_ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_SessionIdentity::ValueType v;
      _mbms_SessionIdentity_Type.read(reader, v);
      value.set_mbms_SessionIdentity(v);
   }

   reader.readSequenceEnd(*this);
}

void RAB_Info_r6_ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mbms_SessionIdentity_Type.write(writer, value.get_mbms_SessionIdentity());

   writer.writeSequenceEnd();
}


void RAB_Info_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RAB_Identity::ValueType v;
      _rab_Identity_Type.read(reader, v);
      value.set_rab_Identity(v);
   }
   {
      asn1::generated::MBMS_SessionIdentity::ValueType v;
      _mbms_SessionIdentity_Type.read(reader, v);
      value.set_mbms_SessionIdentity(v);
   }
   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _cn_DomainIdentity_Type.read(reader, v);
      value.set_cn_DomainIdentity(v);
   }
   {
      asn1::generated::NAS_Synchronisation_Indicator::ValueType v;
      _nas_Synchronisation_Indicator_Type.read(reader, v);
      value.set_nas_Synchronisation_Indicator(v);
   }
   {
      asn1::generated::Re_EstablishmentTimer::ValueType v;
      _re_EstablishmentTimer_Type.read(reader, v);
      value.set_re_EstablishmentTimer(v);
   }

   reader.readSequenceEnd(*this);
}

void RAB_Info_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rab_Identity_Type.write(writer, value.get_rab_Identity());
   _mbms_SessionIdentity_Type.write(writer, value.get_mbms_SessionIdentity());
   _cn_DomainIdentity_Type.write(writer, value.get_cn_DomainIdentity());
   _nas_Synchronisation_Indicator_Type.write(writer, value.get_nas_Synchronisation_Indicator());
   _re_EstablishmentTimer_Type.write(writer, value.get_re_EstablishmentTimer());

   writer.writeSequenceEnd();
}


void RAB_InformationReconfig::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RAB_Identity::ValueType v;
      _rab_Identity_Type.read(reader, v);
      value.set_rab_Identity(v);
   }
   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _cn_DomainIdentity_Type.read(reader, v);
      value.set_cn_DomainIdentity(v);
   }
   {
      asn1::generated::NAS_Synchronisation_Indicator::ValueType v;
      _nas_Synchronisation_Indicator_Type.read(reader, v);
      value.set_nas_Synchronisation_Indicator(v);
   }

   reader.readSequenceEnd(*this);
}

void RAB_InformationReconfig::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rab_Identity_Type.write(writer, value.get_rab_Identity());
   _cn_DomainIdentity_Type.write(writer, value.get_cn_DomainIdentity());
   _nas_Synchronisation_Indicator_Type.write(writer, value.get_nas_Synchronisation_Indicator());

   writer.writeSequenceEnd();
}


void RAB_Info_Post::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RAB_Identity::ValueType v;
      _rab_Identity_Type.read(reader, v);
      value.set_rab_Identity(v);
   }
   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _cn_DomainIdentity_Type.read(reader, v);
      value.set_cn_DomainIdentity(v);
   }
   {
      asn1::generated::NAS_Synchronisation_Indicator::ValueType v;
      _nas_Synchronisation_Indicator_Type.read(reader, v);
      value.set_nas_Synchronisation_Indicator(v);
   }

   reader.readSequenceEnd(*this);
}

void RAB_Info_Post::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rab_Identity_Type.write(writer, value.get_rab_Identity());
   _cn_DomainIdentity_Type.write(writer, value.get_cn_DomainIdentity());
   _nas_Synchronisation_Indicator_Type.write(writer, value.get_nas_Synchronisation_Indicator());

   writer.writeSequenceEnd();
}


void RAB_InformationSetup::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RAB_Info::ValueType v;
      _rab_Info_Type.read(reader, v);
      value.set_rab_Info(v);
   }
   {
      asn1::generated::RB_InformationSetupList::ValueType v;
      _rb_InformationSetupList_Type.read(reader, v);
      value.set_rb_InformationSetupList(v);
   }

   reader.readSequenceEnd(*this);
}

void RAB_InformationSetup::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rab_Info_Type.write(writer, value.get_rab_Info());
   _rb_InformationSetupList_Type.write(writer, value.get_rb_InformationSetupList());

   writer.writeSequenceEnd();
}


void RAB_InformationSetup_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RAB_Info::ValueType v;
      _rab_Info_Type.read(reader, v);
      value.set_rab_Info(v);
   }
   {
      asn1::generated::RB_InformationSetupList_r4::ValueType v;
      _rb_InformationSetupList_Type.read(reader, v);
      value.set_rb_InformationSetupList(v);
   }

   reader.readSequenceEnd(*this);
}

void RAB_InformationSetup_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rab_Info_Type.write(writer, value.get_rab_Info());
   _rb_InformationSetupList_Type.write(writer, value.get_rb_InformationSetupList());

   writer.writeSequenceEnd();
}


void RAB_InformationSetup_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RAB_Info::ValueType v;
      _rab_Info_Type.read(reader, v);
      value.set_rab_Info(v);
   }
   {
      asn1::generated::RB_InformationSetupList_r5::ValueType v;
      _rb_InformationSetupList_Type.read(reader, v);
      value.set_rb_InformationSetupList(v);
   }

   reader.readSequenceEnd(*this);
}

void RAB_InformationSetup_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rab_Info_Type.write(writer, value.get_rab_Info());
   _rb_InformationSetupList_Type.write(writer, value.get_rb_InformationSetupList());

   writer.writeSequenceEnd();
}


void RAB_InformationSetup_r6_ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RAB_Info_r6_ext::ValueType v;
      _rab_Info_r6_ext_Type.read(reader, v);
      value.set_rab_Info_r6_ext(v);
   }

   reader.readSequenceEnd(*this);
}

void RAB_InformationSetup_r6_ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rab_Info_r6_ext_Type.write(writer, value.get_rab_Info_r6_ext());

   writer.writeSequenceEnd();
}


void RAB_InformationSetup_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RAB_Info_r6::ValueType v;
      _rab_Info_Type.read(reader, v);
      value.set_rab_Info(v);
   }
   {
      asn1::generated::RB_InformationSetupList_r6::ValueType v;
      _rb_InformationSetupList_Type.read(reader, v);
      value.set_rb_InformationSetupList(v);
   }

   reader.readSequenceEnd(*this);
}

void RAB_InformationSetup_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rab_Info_Type.write(writer, value.get_rab_Info());
   _rb_InformationSetupList_Type.write(writer, value.get_rb_InformationSetupList());

   writer.writeSequenceEnd();
}


void RB_ActivationTimeInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::generated::RLC_SequenceNumber::ValueType v;
      _rlc_SequenceNumber_Type.read(reader, v);
      value.set_rlc_SequenceNumber(v);
   }

   reader.readSequenceEnd(*this);
}

void RB_ActivationTimeInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _rlc_SequenceNumber_Type.write(writer, value.get_rlc_SequenceNumber());

   writer.writeSequenceEnd();
}


void RB_COUNT_C_Information::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::generated::COUNT_C::ValueType v;
      _count_C_UL_Type.read(reader, v);
      value.set_count_C_UL(v);
   }
   {
      asn1::generated::COUNT_C::ValueType v;
      _count_C_DL_Type.read(reader, v);
      value.set_count_C_DL(v);
   }

   reader.readSequenceEnd(*this);
}

void RB_COUNT_C_Information::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _count_C_UL_Type.write(writer, value.get_count_C_UL());
   _count_C_DL_Type.write(writer, value.get_count_C_DL());

   writer.writeSequenceEnd();
}


void RB_COUNT_C_MSB_Information::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::generated::COUNT_C_MSB::ValueType v;
      _count_C_MSB_UL_Type.read(reader, v);
      value.set_count_C_MSB_UL(v);
   }
   {
      asn1::generated::COUNT_C_MSB::ValueType v;
      _count_C_MSB_DL_Type.read(reader, v);
      value.set_count_C_MSB_DL(v);
   }

   reader.readSequenceEnd(*this);
}

void RB_COUNT_C_MSB_Information::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _count_C_MSB_UL_Type.write(writer, value.get_count_C_MSB_UL());
   _count_C_MSB_DL_Type.write(writer, value.get_count_C_MSB_DL());

   writer.writeSequenceEnd();
}


void RB_InformationAffected::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::generated::RB_MappingInfo::ValueType v;
      _rb_MappingInfo_Type.read(reader, v);
      value.set_rb_MappingInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void RB_InformationAffected::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _rb_MappingInfo_Type.write(writer, value.get_rb_MappingInfo());

   writer.writeSequenceEnd();
}


void RB_InformationAffected_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::generated::RB_MappingInfo_r5::ValueType v;
      _rb_MappingInfo_Type.read(reader, v);
      value.set_rb_MappingInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void RB_InformationAffected_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _rb_MappingInfo_Type.write(writer, value.get_rb_MappingInfo());

   writer.writeSequenceEnd();
}


void RB_InformationAffected_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::generated::RB_MappingInfo_r6::ValueType v;
      _rb_MappingInfo_Type.read(reader, v);
      value.set_rb_MappingInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void RB_InformationAffected_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _rb_MappingInfo_Type.write(writer, value.get_rb_MappingInfo());

   writer.writeSequenceEnd();
}


void RB_InformationChanged_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      _INTERNAL__ChoiceType_release_INTERNAL_asn1__NullType_re-mapToDefaultRb_INTERNAL_asn1__generated__RB_Identity::ValueType v;
      _rb_Change_Type.read(reader, v);
      value.set_rb_Change(v);
   }

   reader.readSequenceEnd(*this);
}

void RB_InformationChanged_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _rb_Change_Type.write(writer, value.get_rb_Change());

   writer.writeSequenceEnd();
}


void RB_InformationReconfig::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::generated::PDCP_InfoReconfig::ValueType v;
      _pdcp_Info_Type.read(reader, v);
      value.set_pdcp_Info(v);
   }
   {
      asn1::generated::PDCP_SN_Info::ValueType v;
      _pdcp_SN_Info_Type.read(reader, v);
      value.set_pdcp_SN_Info(v);
   }
   {
      asn1::generated::RLC_Info::ValueType v;
      _rlc_Info_Type.read(reader, v);
      value.set_rlc_Info(v);
   }
   {
      asn1::generated::RB_MappingInfo::ValueType v;
      _rb_MappingInfo_Type.read(reader, v);
      value.set_rb_MappingInfo(v);
   }
   {
      asn1::generated::RB_StopContinue::ValueType v;
      _rb_StopContinue_Type.read(reader, v);
      value.set_rb_StopContinue(v);
   }

   reader.readSequenceEnd(*this);
}

void RB_InformationReconfig::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _pdcp_Info_Type.write(writer, value.get_pdcp_Info());
   _pdcp_SN_Info_Type.write(writer, value.get_pdcp_SN_Info());
   _rlc_Info_Type.write(writer, value.get_rlc_Info());
   _rb_MappingInfo_Type.write(writer, value.get_rb_MappingInfo());
   _rb_StopContinue_Type.write(writer, value.get_rb_StopContinue());

   writer.writeSequenceEnd();
}


void RB_InformationReconfig_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::generated::PDCP_InfoReconfig_r4::ValueType v;
      _pdcp_Info_Type.read(reader, v);
      value.set_pdcp_Info(v);
   }
   {
      asn1::generated::PDCP_SN_Info::ValueType v;
      _pdcp_SN_Info_Type.read(reader, v);
      value.set_pdcp_SN_Info(v);
   }
   {
      asn1::generated::RLC_Info::ValueType v;
      _rlc_Info_Type.read(reader, v);
      value.set_rlc_Info(v);
   }
   {
      asn1::generated::RB_MappingInfo::ValueType v;
      _rb_MappingInfo_Type.read(reader, v);
      value.set_rb_MappingInfo(v);
   }
   {
      asn1::generated::RB_StopContinue::ValueType v;
      _rb_StopContinue_Type.read(reader, v);
      value.set_rb_StopContinue(v);
   }

   reader.readSequenceEnd(*this);
}

void RB_InformationReconfig_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _pdcp_Info_Type.write(writer, value.get_pdcp_Info());
   _pdcp_SN_Info_Type.write(writer, value.get_pdcp_SN_Info());
   _rlc_Info_Type.write(writer, value.get_rlc_Info());
   _rb_MappingInfo_Type.write(writer, value.get_rb_MappingInfo());
   _rb_StopContinue_Type.write(writer, value.get_rb_StopContinue());

   writer.writeSequenceEnd();
}


void RB_InformationReconfig_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::generated::PDCP_InfoReconfig_r4::ValueType v;
      _pdcp_Info_Type.read(reader, v);
      value.set_pdcp_Info(v);
   }
   {
      asn1::generated::PDCP_SN_Info::ValueType v;
      _pdcp_SN_Info_Type.read(reader, v);
      value.set_pdcp_SN_Info(v);
   }
   {
      asn1::generated::RLC_Info_r5::ValueType v;
      _rlc_Info_Type.read(reader, v);
      value.set_rlc_Info(v);
   }
   {
      asn1::generated::RB_MappingInfo_r5::ValueType v;
      _rb_MappingInfo_Type.read(reader, v);
      value.set_rb_MappingInfo(v);
   }
   {
      asn1::generated::RB_StopContinue::ValueType v;
      _rb_StopContinue_Type.read(reader, v);
      value.set_rb_StopContinue(v);
   }

   reader.readSequenceEnd(*this);
}

void RB_InformationReconfig_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _pdcp_Info_Type.write(writer, value.get_pdcp_Info());
   _pdcp_SN_Info_Type.write(writer, value.get_pdcp_SN_Info());
   _rlc_Info_Type.write(writer, value.get_rlc_Info());
   _rb_MappingInfo_Type.write(writer, value.get_rb_MappingInfo());
   _rb_StopContinue_Type.write(writer, value.get_rb_StopContinue());

   writer.writeSequenceEnd();
}


void RB_InformationReconfig_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::generated::PDCP_InfoReconfig_r4::ValueType v;
      _pdcp_Info_Type.read(reader, v);
      value.set_pdcp_Info(v);
   }
   {
      asn1::generated::PDCP_SN_Info::ValueType v;
      _pdcp_SN_Info_Type.read(reader, v);
      value.set_pdcp_SN_Info(v);
   }
   {
      asn1::generated::RLC_Info_r6::ValueType v;
      _rlc_Info_Type.read(reader, v);
      value.set_rlc_Info(v);
   }
   {
      asn1::generated::RB_MappingInfo_r6::ValueType v;
      _rb_MappingInfo_Type.read(reader, v);
      value.set_rb_MappingInfo(v);
   }
   {
      asn1::generated::RB_StopContinue::ValueType v;
      _rb_StopContinue_Type.read(reader, v);
      value.set_rb_StopContinue(v);
   }

   reader.readSequenceEnd(*this);
}

void RB_InformationReconfig_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _pdcp_Info_Type.write(writer, value.get_pdcp_Info());
   _pdcp_SN_Info_Type.write(writer, value.get_pdcp_SN_Info());
   _rlc_Info_Type.write(writer, value.get_rlc_Info());
   _rb_MappingInfo_Type.write(writer, value.get_rb_MappingInfo());
   _rb_StopContinue_Type.write(writer, value.get_rb_StopContinue());

   writer.writeSequenceEnd();
}


void RB_InformationSetup::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::generated::PDCP_Info::ValueType v;
      _pdcp_Info_Type.read(reader, v);
      value.set_pdcp_Info(v);
   }
   {
      asn1::generated::RLC_InfoChoice::ValueType v;
      _rlc_InfoChoice_Type.read(reader, v);
      value.set_rlc_InfoChoice(v);
   }
   {
      asn1::generated::RB_MappingInfo::ValueType v;
      _rb_MappingInfo_Type.read(reader, v);
      value.set_rb_MappingInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void RB_InformationSetup::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _pdcp_Info_Type.write(writer, value.get_pdcp_Info());
   _rlc_InfoChoice_Type.write(writer, value.get_rlc_InfoChoice());
   _rb_MappingInfo_Type.write(writer, value.get_rb_MappingInfo());

   writer.writeSequenceEnd();
}


void RB_InformationSetup_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::generated::PDCP_Info_r4::ValueType v;
      _pdcp_Info_Type.read(reader, v);
      value.set_pdcp_Info(v);
   }
   {
      asn1::generated::RLC_InfoChoice::ValueType v;
      _rlc_InfoChoice_Type.read(reader, v);
      value.set_rlc_InfoChoice(v);
   }
   {
      asn1::generated::RB_MappingInfo::ValueType v;
      _rb_MappingInfo_Type.read(reader, v);
      value.set_rb_MappingInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void RB_InformationSetup_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _pdcp_Info_Type.write(writer, value.get_pdcp_Info());
   _rlc_InfoChoice_Type.write(writer, value.get_rlc_InfoChoice());
   _rb_MappingInfo_Type.write(writer, value.get_rb_MappingInfo());

   writer.writeSequenceEnd();
}


void RB_InformationSetup_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::generated::PDCP_Info_r4::ValueType v;
      _pdcp_Info_Type.read(reader, v);
      value.set_pdcp_Info(v);
   }
   {
      asn1::generated::RLC_InfoChoice_r5::ValueType v;
      _rlc_InfoChoice_Type.read(reader, v);
      value.set_rlc_InfoChoice(v);
   }
   {
      asn1::generated::RB_MappingInfo_r5::ValueType v;
      _rb_MappingInfo_Type.read(reader, v);
      value.set_rb_MappingInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void RB_InformationSetup_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _pdcp_Info_Type.write(writer, value.get_pdcp_Info());
   _rlc_InfoChoice_Type.write(writer, value.get_rlc_InfoChoice());
   _rb_MappingInfo_Type.write(writer, value.get_rb_MappingInfo());

   writer.writeSequenceEnd();
}


void RB_InformationSetup_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::generated::PDCP_Info_r4::ValueType v;
      _pdcp_Info_Type.read(reader, v);
      value.set_pdcp_Info(v);
   }
   {
      asn1::generated::RLC_InfoChoice_r6::ValueType v;
      _rlc_InfoChoice_Type.read(reader, v);
      value.set_rlc_InfoChoice(v);
   }
   {
      asn1::generated::RB_MappingInfo_r6::ValueType v;
      _rb_MappingInfo_Type.read(reader, v);
      value.set_rb_MappingInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void RB_InformationSetup_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _pdcp_Info_Type.write(writer, value.get_pdcp_Info());
   _rlc_InfoChoice_Type.write(writer, value.get_rlc_InfoChoice());
   _rb_MappingInfo_Type.write(writer, value.get_rb_MappingInfo());

   writer.writeSequenceEnd();
}


void RB_MappingOption::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_LogicalChannelMappings::ValueType v;
      _ul_LogicalChannelMappings_Type.read(reader, v);
      value.set_ul_LogicalChannelMappings(v);
   }
   {
      asn1::generated::DL_LogicalChannelMappingList::ValueType v;
      _dl_LogicalChannelMappingList_Type.read(reader, v);
      value.set_dl_LogicalChannelMappingList(v);
   }

   reader.readSequenceEnd(*this);
}

void RB_MappingOption::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_LogicalChannelMappings_Type.write(writer, value.get_ul_LogicalChannelMappings());
   _dl_LogicalChannelMappingList_Type.write(writer, value.get_dl_LogicalChannelMappingList());

   writer.writeSequenceEnd();
}


void RB_MappingOption_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_LogicalChannelMappings::ValueType v;
      _ul_LogicalChannelMappings_Type.read(reader, v);
      value.set_ul_LogicalChannelMappings(v);
   }
   {
      asn1::generated::DL_LogicalChannelMappingList_r5::ValueType v;
      _dl_LogicalChannelMappingList_Type.read(reader, v);
      value.set_dl_LogicalChannelMappingList(v);
   }

   reader.readSequenceEnd(*this);
}

void RB_MappingOption_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_LogicalChannelMappings_Type.write(writer, value.get_ul_LogicalChannelMappings());
   _dl_LogicalChannelMappingList_Type.write(writer, value.get_dl_LogicalChannelMappingList());

   writer.writeSequenceEnd();
}


void RB_MappingOption_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_LogicalChannelMappings_r6::ValueType v;
      _ul_LogicalChannelMappings_Type.read(reader, v);
      value.set_ul_LogicalChannelMappings(v);
   }
   {
      asn1::generated::DL_LogicalChannelMappingList_r5::ValueType v;
      _dl_LogicalChannelMappingList_Type.read(reader, v);
      value.set_dl_LogicalChannelMappingList(v);
   }

   reader.readSequenceEnd(*this);
}

void RB_MappingOption_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_LogicalChannelMappings_Type.write(writer, value.get_ul_LogicalChannelMappings());
   _dl_LogicalChannelMappingList_Type.write(writer, value.get_dl_LogicalChannelMappingList());

   writer.writeSequenceEnd();
}


void RB_PDCPContextRelocation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _dl_RFC3095_Context_Relocation_Type.read(reader, v);
      value.set_dl_RFC3095_Context_Relocation(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _ul_RFC3095_Context_Relocation_Type.read(reader, v);
      value.set_ul_RFC3095_Context_Relocation(v);
   }

   reader.readSequenceEnd(*this);
}

void RB_PDCPContextRelocation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _dl_RFC3095_Context_Relocation_Type.write(writer, value.get_dl_RFC3095_Context_Relocation());
   _ul_RFC3095_Context_Relocation_Type.write(writer, value.get_ul_RFC3095_Context_Relocation());

   writer.writeSequenceEnd();
}


void RB_WithPDCP_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::generated::PDCP_SN_Info::ValueType v;
      _pdcp_SN_Info_Type.read(reader, v);
      value.set_pdcp_SN_Info(v);
   }

   reader.readSequenceEnd(*this);
}

void RB_WithPDCP_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _pdcp_SN_Info_Type.write(writer, value.get_pdcp_SN_Info());

   writer.writeSequenceEnd();
}


void RFC2507_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _f_MAX_PERIOD_Type.read(reader, v);
      value.set_f_MAX_PERIOD(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _f_MAX_TIME_Type.read(reader, v);
      value.set_f_MAX_TIME(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _max_HEADER_Type.read(reader, v);
      value.set_max_HEADER(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _tcp_SPACE_Type.read(reader, v);
      value.set_tcp_SPACE(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _non_TCP_SPACE_Type.read(reader, v);
      value.set_non_TCP_SPACE(v);
   }
   {
      asn1::generated::ExpectReordering::ValueType v;
      _expectReordering_Type.read(reader, v);
      value.set_expectReordering(v);
   }

   reader.readSequenceEnd(*this);
}

void RFC2507_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _f_MAX_PERIOD_Type.write(writer, value.get_f_MAX_PERIOD());
   _f_MAX_TIME_Type.write(writer, value.get_f_MAX_TIME());
   _max_HEADER_Type.write(writer, value.get_max_HEADER());
   _tcp_SPACE_Type.write(writer, value.get_tcp_SPACE());
   _non_TCP_SPACE_Type.write(writer, value.get_non_TCP_SPACE());
   _expectReordering_Type.write(writer, value.get_expectReordering());

   writer.writeSequenceEnd();
}


void RFC3095_Info_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ROHC_ProfileList_r4::ValueType v;
      _rohcProfileList_Type.read(reader, v);
      value.set_rohcProfileList(v);
   }
   {
      asn1::generated::UL_RFC3095_r4::ValueType v;
      _ul_RFC3095_Type.read(reader, v);
      value.set_ul_RFC3095(v);
   }
   {
      asn1::generated::DL_RFC3095_r4::ValueType v;
      _dl_RFC3095_Type.read(reader, v);
      value.set_dl_RFC3095(v);
   }

   reader.readSequenceEnd(*this);
}

void RFC3095_Info_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rohcProfileList_Type.write(writer, value.get_rohcProfileList());
   _ul_RFC3095_Type.write(writer, value.get_ul_RFC3095());
   _dl_RFC3095_Type.write(writer, value.get_dl_RFC3095());

   writer.writeSequenceEnd();
}


void RLC_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_RLC_Mode::ValueType v;
      _ul_RLC_Mode_Type.read(reader, v);
      value.set_ul_RLC_Mode(v);
   }
   {
      asn1::generated::DL_RLC_Mode::ValueType v;
      _dl_RLC_Mode_Type.read(reader, v);
      value.set_dl_RLC_Mode(v);
   }

   reader.readSequenceEnd(*this);
}

void RLC_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_RLC_Mode_Type.write(writer, value.get_ul_RLC_Mode());
   _dl_RLC_Mode_Type.write(writer, value.get_dl_RLC_Mode());

   writer.writeSequenceEnd();
}


void RLC_Info_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_RLC_Mode::ValueType v;
      _ul_RLC_Mode_Type.read(reader, v);
      value.set_ul_RLC_Mode(v);
   }
   {
      asn1::generated::DL_RLC_Mode_r5::ValueType v;
      _dl_RLC_Mode_Type.read(reader, v);
      value.set_dl_RLC_Mode(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _rlc_OneSidedReEst_Type.read(reader, v);
      value.set_rlc_OneSidedReEst(v);
   }

   reader.readSequenceEnd(*this);
}

void RLC_Info_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_RLC_Mode_Type.write(writer, value.get_ul_RLC_Mode());
   _dl_RLC_Mode_Type.write(writer, value.get_dl_RLC_Mode());
   _rlc_OneSidedReEst_Type.write(writer, value.get_rlc_OneSidedReEst());

   writer.writeSequenceEnd();
}


void RLC_Info_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_RLC_Mode::ValueType v;
      _ul_RLC_Mode_Type.read(reader, v);
      value.set_ul_RLC_Mode(v);
   }
   {
      asn1::generated::DL_RLC_Mode_r6::ValueType v;
      _dl_RLC_Mode_Type.read(reader, v);
      value.set_dl_RLC_Mode(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _rlc_OneSidedReEst_Type.read(reader, v);
      value.set_rlc_OneSidedReEst(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _altE_bitInterpretation_Type.read(reader, v);
      value.set_altE_bitInterpretation(v);
   }

   reader.readSequenceEnd(*this);
}

void RLC_Info_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_RLC_Mode_Type.write(writer, value.get_ul_RLC_Mode());
   _dl_RLC_Mode_Type.write(writer, value.get_dl_RLC_Mode());
   _rlc_OneSidedReEst_Type.write(writer, value.get_rlc_OneSidedReEst());
   _altE_bitInterpretation_Type.write(writer, value.get_altE_bitInterpretation());

   writer.writeSequenceEnd();
}


void RLC_Info_MCCH_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_UM_RLC_LI_size::ValueType v;
      _dl_UM_RLC_LI_size_Type.read(reader, v);
      value.set_dl_UM_RLC_LI_size(v);
   }
   {
      asn1::generated::UM_RLC_OutOSeqDelivery_Info_r6::ValueType v;
      _dl_UM_RLC_OutOSeqDelivery_Info_Type.read(reader, v);
      value.set_dl_UM_RLC_OutOSeqDelivery_Info(v);
   }

   reader.readSequenceEnd(*this);
}

void RLC_Info_MCCH_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_UM_RLC_LI_size_Type.write(writer, value.get_dl_UM_RLC_LI_size());
   _dl_UM_RLC_OutOSeqDelivery_Info_Type.write(writer, value.get_dl_UM_RLC_OutOSeqDelivery_Info());

   writer.writeSequenceEnd();
}


void RLC_Info_MSCH_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_UM_RLC_LI_size::ValueType v;
      _dl_UM_RLC_LI_size_Type.read(reader, v);
      value.set_dl_UM_RLC_LI_size(v);
   }

   reader.readSequenceEnd(*this);
}

void RLC_Info_MSCH_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_UM_RLC_LI_size_Type.write(writer, value.get_dl_UM_RLC_LI_size());

   writer.writeSequenceEnd();
}


void RLC_Info_MTCH_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_UM_RLC_LI_size::ValueType v;
      _dl_UM_RLC_LI_size_Type.read(reader, v);
      value.set_dl_UM_RLC_LI_size(v);
   }
   {
      asn1::generated::UM_RLC_DuplAvoid_Reord_Info_r6::ValueType v;
      _dl_UM_RLC_DuplAvoid_Reord_Info_Type.read(reader, v);
      value.set_dl_UM_RLC_DuplAvoid_Reord_Info(v);
   }

   reader.readSequenceEnd(*this);
}

void RLC_Info_MTCH_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_UM_RLC_LI_size_Type.write(writer, value.get_dl_UM_RLC_LI_size());
   _dl_UM_RLC_DuplAvoid_Reord_Info_Type.write(writer, value.get_dl_UM_RLC_DuplAvoid_Reord_Info());

   writer.writeSequenceEnd();
}


void RLC-InfoChoice::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_rlc-Info_Type)
   {
      asn1::generated::RLC_Info::ValueType v;
      _rlc_Info_Type.read(reader, v);
      value.set_rlc_Info(v);
   }
   else if (choosenType == &_same-as-RB_Type)
   {
      asn1::generated::RB_Identity::ValueType v;
      _same_as_RB_Type.read(reader, v);
      value.set_same_as_RB(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _rlc-Info_Type.toString() + ", " + _same-as-RB_Type.toString());
   }
}

void RLC-InfoChoice::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_rlc-Info_Choosen())
      _rlc-Info_Type.write(writer, value.get_rlc-Info());
   else if (value.has_same-as-RB_Choosen())
      _same-as-RB_Type.write(writer, value.get_same-as-RB());
}


void RLC-InfoChoice-r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_rlc-Info_Type)
   {
      asn1::generated::RLC_Info_r5::ValueType v;
      _rlc_Info_Type.read(reader, v);
      value.set_rlc_Info(v);
   }
   else if (choosenType == &_same-as-RB_Type)
   {
      asn1::generated::RB_Identity::ValueType v;
      _same_as_RB_Type.read(reader, v);
      value.set_same_as_RB(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _rlc-Info_Type.toString() + ", " + _same-as-RB_Type.toString());
   }
}

void RLC-InfoChoice-r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_rlc-Info_Choosen())
      _rlc-Info_Type.write(writer, value.get_rlc-Info());
   else if (value.has_same-as-RB_Choosen())
      _same-as-RB_Type.write(writer, value.get_same-as-RB());
}


void RLC-InfoChoice-r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_rlc-Info_Type)
   {
      asn1::generated::RLC_Info_r6::ValueType v;
      _rlc_Info_Type.read(reader, v);
      value.set_rlc_Info(v);
   }
   else if (choosenType == &_same-as-RB_Type)
   {
      asn1::generated::RB_Identity::ValueType v;
      _same_as_RB_Type.read(reader, v);
      value.set_same_as_RB(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _rlc-Info_Type.toString() + ", " + _same-as-RB_Type.toString());
   }
}

void RLC-InfoChoice-r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_rlc-Info_Choosen())
      _rlc-Info_Type.write(writer, value.get_rlc-Info());
   else if (value.has_same-as-RB_Choosen())
      _same-as-RB_Type.write(writer, value.get_same-as-RB());
}


void RLC_SizeInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _rlc_SizeIndex_Type.read(reader, v);
      value.set_rlc_SizeIndex(v);
   }

   reader.readSequenceEnd(*this);
}

void RLC_SizeInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rlc_SizeIndex_Type.write(writer, value.get_rlc_SizeIndex());

   writer.writeSequenceEnd();
}


void SRB_InformationSetup::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::generated::RLC_InfoChoice::ValueType v;
      _rlc_InfoChoice_Type.read(reader, v);
      value.set_rlc_InfoChoice(v);
   }
   {
      asn1::generated::RB_MappingInfo::ValueType v;
      _rb_MappingInfo_Type.read(reader, v);
      value.set_rb_MappingInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void SRB_InformationSetup::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _rlc_InfoChoice_Type.write(writer, value.get_rlc_InfoChoice());
   _rb_MappingInfo_Type.write(writer, value.get_rb_MappingInfo());

   writer.writeSequenceEnd();
}


void SRB_InformationSetup_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::generated::RLC_InfoChoice_r5::ValueType v;
      _rlc_InfoChoice_Type.read(reader, v);
      value.set_rlc_InfoChoice(v);
   }
   {
      asn1::generated::RB_MappingInfo_r5::ValueType v;
      _rb_MappingInfo_Type.read(reader, v);
      value.set_rb_MappingInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void SRB_InformationSetup_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _rlc_InfoChoice_Type.write(writer, value.get_rlc_InfoChoice());
   _rb_MappingInfo_Type.write(writer, value.get_rb_MappingInfo());

   writer.writeSequenceEnd();
}


void SRB_InformationSetup_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::generated::RLC_InfoChoice_r6::ValueType v;
      _rlc_InfoChoice_Type.read(reader, v);
      value.set_rlc_InfoChoice(v);
   }
   {
      asn1::generated::RB_MappingInfo_r6::ValueType v;
      _rb_MappingInfo_Type.read(reader, v);
      value.set_rb_MappingInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void SRB_InformationSetup_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _rlc_InfoChoice_Type.write(writer, value.get_rlc_InfoChoice());
   _rb_MappingInfo_Type.write(writer, value.get_rb_MappingInfo());

   writer.writeSequenceEnd();
}


void TransmissionRLC-Discard::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_timerBasedExplicit_Type)
   {
      asn1::generated::ExplicitDiscard::ValueType v;
      _timerBasedExplicit_Type.read(reader, v);
      value.set_timerBasedExplicit(v);
   }
   else if (choosenType == &_timerBasedNoExplicit_Type)
   {
      asn1::generated::NoExplicitDiscard::ValueType v;
      _timerBasedNoExplicit_Type.read(reader, v);
      value.set_timerBasedNoExplicit(v);
   }
   else if (choosenType == &_maxDAT-Retransmissions_Type)
   {
      asn1::generated::MaxDAT_Retransmissions::ValueType v;
      _maxDAT_Retransmissions_Type.read(reader, v);
      value.set_maxDAT_Retransmissions(v);
   }
   else if (choosenType == &_noDiscard_Type)
   {
      asn1::generated::MaxDAT::ValueType v;
      _noDiscard_Type.read(reader, v);
      value.set_noDiscard(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _timerBasedExplicit_Type.toString() + ", " + _timerBasedNoExplicit_Type.toString() + ", " + _maxDAT-Retransmissions_Type.toString() + ", " + _noDiscard_Type.toString());
   }
}

void TransmissionRLC-Discard::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_timerBasedExplicit_Choosen())
      _timerBasedExplicit_Type.write(writer, value.get_timerBasedExplicit());
   else if (value.has_timerBasedNoExplicit_Choosen())
      _timerBasedNoExplicit_Type.write(writer, value.get_timerBasedNoExplicit());
   else if (value.has_maxDAT-Retransmissions_Choosen())
      _maxDAT-Retransmissions_Type.write(writer, value.get_maxDAT-Retransmissions());
   else if (value.has_noDiscard_Choosen())
      _noDiscard_Type.write(writer, value.get_noDiscard());
}


void UL_AM_RLC_Mode::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TransmissionRLC_Discard::ValueType v;
      _transmissionRLC_Discard_Type.read(reader, v);
      value.set_transmissionRLC_Discard(v);
   }
   {
      asn1::generated::TransmissionWindowSize::ValueType v;
      _transmissionWindowSize_Type.read(reader, v);
      value.set_transmissionWindowSize(v);
   }
   {
      asn1::generated::TimerRST::ValueType v;
      _timerRST_Type.read(reader, v);
      value.set_timerRST(v);
   }
   {
      asn1::generated::MaxRST::ValueType v;
      _max_RST_Type.read(reader, v);
      value.set_max_RST(v);
   }
   {
      asn1::generated::PollingInfo::ValueType v;
      _pollingInfo_Type.read(reader, v);
      value.set_pollingInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_AM_RLC_Mode::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _transmissionRLC_Discard_Type.write(writer, value.get_transmissionRLC_Discard());
   _transmissionWindowSize_Type.write(writer, value.get_transmissionWindowSize());
   _timerRST_Type.write(writer, value.get_timerRST());
   _max_RST_Type.write(writer, value.get_max_RST());
   _pollingInfo_Type.write(writer, value.get_pollingInfo());

   writer.writeSequenceEnd();
}


void UL_CounterSynchronisationInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_WithPDCP_InfoList::ValueType v;
      _rB_WithPDCP_InfoList_Type.read(reader, v);
      value.set_rB_WithPDCP_InfoList(v);
   }
   {
      asn1::generated::STARTList::ValueType v;
      _startList_Type.read(reader, v);
      value.set_startList(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_CounterSynchronisationInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rB_WithPDCP_InfoList_Type.write(writer, value.get_rB_WithPDCP_InfoList());
   _startList_Type.write(writer, value.get_startList());

   writer.writeSequenceEnd();
}


void UL_LogicalChannelMapping::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_TransportChannelType::ValueType v;
      _ul_TransportChannelType_Type.read(reader, v);
      value.set_ul_TransportChannelType(v);
   }
   {
      asn1::generated::LogicalChannelIdentity::ValueType v;
      _logicalChannelIdentity_Type.read(reader, v);
      value.set_logicalChannelIdentity(v);
   }
   {
      _INTERNAL__ChoiceType_allSizes_INTERNAL_asn1__NullType_configured_INTERNAL_asn1__NullType_explicitList_INTERNAL_asn1__generated__RLC_SizeExplicitList::ValueType v;
      _rlc_SizeList_Type.read(reader, v);
      value.set_rlc_SizeList(v);
   }
   {
      asn1::generated::MAC_LogicalChannelPriority::ValueType v;
      _mac_LogicalChannelPriority_Type.read(reader, v);
      value.set_mac_LogicalChannelPriority(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_LogicalChannelMapping::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_TransportChannelType_Type.write(writer, value.get_ul_TransportChannelType());
   _logicalChannelIdentity_Type.write(writer, value.get_logicalChannelIdentity());
   _rlc_SizeList_Type.write(writer, value.get_rlc_SizeList());
   _mac_LogicalChannelPriority_Type.write(writer, value.get_mac_LogicalChannelPriority());

   writer.writeSequenceEnd();
}


void UL_LogicalChannelMapping_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_dch-rach-usch_INTERNAL__SequenceType_ul-TransportChannelType_INTERNAL_asn1__generated__UL_TransportChannelType_logicalChannelIdentity_INTERNAL_asn1__generated__LogicalChannelIdentity_rlc-SizeList_INTERNAL__ChoiceType_allSizes_INTERNAL_asn1__NullType_configured_INTERNAL_asn1__NullType_explicitList_INTERNAL_asn1__generated__RLC_SizeExplicitList_e-dch_INTERNAL__SequenceType_logicalChannelIdentity_INTERNAL_asn1__generated__LogicalChannelIdentity_e-DCH-MAC-d-FlowIdentity_INTERNAL_asn1__generated__E_DCH_MAC_d_FlowIdentity_ddi_INTERNAL_asn1__generated__DDI_rlc-PDU-SizeList_INTERNAL_asn1__generated__RLC_PDU_SizeList_includeInSchedulingInfo_INTERNAL_asn1__BooleanType::ValueType v;
      _ul_TrCH_Type_Type.read(reader, v);
      value.set_ul_TrCH_Type(v);
   }
   {
      asn1::generated::MAC_LogicalChannelPriority::ValueType v;
      _mac_LogicalChannelPriority_Type.read(reader, v);
      value.set_mac_LogicalChannelPriority(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_LogicalChannelMapping_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_TrCH_Type_Type.write(writer, value.get_ul_TrCH_Type());
   _mac_LogicalChannelPriority_Type.write(writer, value.get_mac_LogicalChannelPriority());

   writer.writeSequenceEnd();
}


void UL_LogicalChannelMappingList::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _rlc_LogicalChannelMappingIndicator_Type.read(reader, v);
      value.set_rlc_LogicalChannelMappingIndicator(v);
   }
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__UL_LogicalChannelMapping::ValueType v;
      _ul_LogicalChannelMapping_Type.read(reader, v);
      value.set_ul_LogicalChannelMapping(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_LogicalChannelMappingList::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rlc_LogicalChannelMappingIndicator_Type.write(writer, value.get_rlc_LogicalChannelMappingIndicator());
   _ul_LogicalChannelMapping_Type.write(writer, value.get_ul_LogicalChannelMapping());

   writer.writeSequenceEnd();
}


void UL_LogicalChannelMappingList_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _rlc_LogicalChannelMappingIndicator_Type.read(reader, v);
      value.set_rlc_LogicalChannelMappingIndicator(v);
   }
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__UL_LogicalChannelMapping_r6::ValueType v;
      _ul_LogicalChannelMapping_Type.read(reader, v);
      value.set_ul_LogicalChannelMapping(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_LogicalChannelMappingList_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rlc_LogicalChannelMappingIndicator_Type.write(writer, value.get_rlc_LogicalChannelMappingIndicator());
   _ul_LogicalChannelMapping_Type.write(writer, value.get_ul_LogicalChannelMapping());

   writer.writeSequenceEnd();
}


void UL-LogicalChannelMappings::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_oneLogicalChannel_Type)
   {
      asn1::generated::UL_LogicalChannelMapping::ValueType v;
      _oneLogicalChannel_Type.read(reader, v);
      value.set_oneLogicalChannel(v);
   }
   else if (choosenType == &_twoLogicalChannels_Type)
   {
      asn1::generated::UL_LogicalChannelMappingList::ValueType v;
      _twoLogicalChannels_Type.read(reader, v);
      value.set_twoLogicalChannels(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _oneLogicalChannel_Type.toString() + ", " + _twoLogicalChannels_Type.toString());
   }
}

void UL-LogicalChannelMappings::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_oneLogicalChannel_Choosen())
      _oneLogicalChannel_Type.write(writer, value.get_oneLogicalChannel());
   else if (value.has_twoLogicalChannels_Choosen())
      _twoLogicalChannels_Type.write(writer, value.get_twoLogicalChannels());
}


void UL-LogicalChannelMappings-r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_oneLogicalChannel_Type)
   {
      asn1::generated::UL_LogicalChannelMapping_r6::ValueType v;
      _oneLogicalChannel_Type.read(reader, v);
      value.set_oneLogicalChannel(v);
   }
   else if (choosenType == &_twoLogicalChannels_Type)
   {
      asn1::generated::UL_LogicalChannelMappingList_r6::ValueType v;
      _twoLogicalChannels_Type.read(reader, v);
      value.set_twoLogicalChannels(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _oneLogicalChannel_Type.toString() + ", " + _twoLogicalChannels_Type.toString());
   }
}

void UL-LogicalChannelMappings-r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_oneLogicalChannel_Choosen())
      _oneLogicalChannel_Type.write(writer, value.get_oneLogicalChannel());
   else if (value.has_twoLogicalChannels_Choosen())
      _twoLogicalChannels_Type.write(writer, value.get_twoLogicalChannels());
}


void UL_RFC3095_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CID_InclusionInfo_r4::ValueType v;
      _cid_InclusionInfo_Type.read(reader, v);
      value.set_cid_InclusionInfo(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _max_CID_Type.read(reader, v);
      value.set_max_CID(v);
   }
   {
      asn1::generated::ROHC_PacketSizeList_r4::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_RFC3095_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cid_InclusionInfo_Type.write(writer, value.get_cid_InclusionInfo());
   _max_CID_Type.write(writer, value.get_max_CID());
   _dummy_Type.write(writer, value.get_dummy());

   writer.writeSequenceEnd();
}


void UL-RLC-Mode::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_ul-AM-RLC-Mode_Type)
   {
      asn1::generated::UL_AM_RLC_Mode::ValueType v;
      _ul_AM_RLC_Mode_Type.read(reader, v);
      value.set_ul_AM_RLC_Mode(v);
   }
   else if (choosenType == &_ul-UM-RLC-Mode_Type)
   {
      asn1::generated::UL_UM_RLC_Mode::ValueType v;
      _ul_UM_RLC_Mode_Type.read(reader, v);
      value.set_ul_UM_RLC_Mode(v);
   }
   else if (choosenType == &_ul-TM-RLC-Mode_Type)
   {
      asn1::generated::UL_TM_RLC_Mode::ValueType v;
      _ul_TM_RLC_Mode_Type.read(reader, v);
      value.set_ul_TM_RLC_Mode(v);
   }
   else if (choosenType == &_spare_Type)
   {
      asn1::NullType::ValueType v;
      _spare_Type.read(reader, v);
      value.set_spare(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _ul-AM-RLC-Mode_Type.toString() + ", " + _ul-UM-RLC-Mode_Type.toString() + ", " + _ul-TM-RLC-Mode_Type.toString() + ", " + _spare_Type.toString());
   }
}

void UL-RLC-Mode::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_ul-AM-RLC-Mode_Choosen())
      _ul-AM-RLC-Mode_Type.write(writer, value.get_ul-AM-RLC-Mode());
   else if (value.has_ul-UM-RLC-Mode_Choosen())
      _ul-UM-RLC-Mode_Type.write(writer, value.get_ul-UM-RLC-Mode());
   else if (value.has_ul-TM-RLC-Mode_Choosen())
      _ul-TM-RLC-Mode_Type.write(writer, value.get_ul-TM-RLC-Mode());
   else if (value.has_spare_Choosen())
      _spare_Type.write(writer, value.get_spare());
}


void UL_TM_RLC_Mode::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TransmissionRLC_Discard::ValueType v;
      _transmissionRLC_Discard_Type.read(reader, v);
      value.set_transmissionRLC_Discard(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _segmentationIndication_Type.read(reader, v);
      value.set_segmentationIndication(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_TM_RLC_Mode::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _transmissionRLC_Discard_Type.write(writer, value.get_transmissionRLC_Discard());
   _segmentationIndication_Type.write(writer, value.get_segmentationIndication());

   writer.writeSequenceEnd();
}


void UL_UM_RLC_Mode::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TransmissionRLC_Discard::ValueType v;
      _transmissionRLC_Discard_Type.read(reader, v);
      value.set_transmissionRLC_Discard(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_UM_RLC_Mode::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _transmissionRLC_Discard_Type.write(writer, value.get_transmissionRLC_Discard());

   writer.writeSequenceEnd();
}


void UL-TransportChannelType::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_dch_Type)
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _dch_Type.read(reader, v);
      value.set_dch(v);
   }
   else if (choosenType == &_rach_Type)
   {
      asn1::NullType::ValueType v;
      _rach_Type.read(reader, v);
      value.set_rach(v);
   }
   else if (choosenType == &_dummy_Type)
   {
      asn1::NullType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   else if (choosenType == &_usch_Type)
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _usch_Type.read(reader, v);
      value.set_usch(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _dch_Type.toString() + ", " + _rach_Type.toString() + ", " + _dummy_Type.toString() + ", " + _usch_Type.toString());
   }
}

void UL-TransportChannelType::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_dch_Choosen())
      _dch_Type.write(writer, value.get_dch());
   else if (value.has_rach_Choosen())
      _rach_Type.write(writer, value.get_rach());
   else if (value.has_dummy_Choosen())
      _dummy_Type.write(writer, value.get_dummy());
   else if (value.has_usch_Choosen())
      _usch_Type.write(writer, value.get_usch());
}


void UM_RLC_DuplAvoid_Reord_Info_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimerDAR_r6::ValueType v;
      _timer_DAR_Type.read(reader, v);
      value.set_timer_DAR(v);
   }
   {
      asn1::generated::WindowSizeDAR_r6::ValueType v;
      _widowSize_DAR_Type.read(reader, v);
      value.set_widowSize_DAR(v);
   }

   reader.readSequenceEnd(*this);
}

void UM_RLC_DuplAvoid_Reord_Info_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timer_DAR_Type.write(writer, value.get_timer_DAR());
   _widowSize_DAR_Type.write(writer, value.get_widowSize_DAR());

   writer.writeSequenceEnd();
}


void UM_RLC_OutOSeqDelivery_Info_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimerOSD_r6::ValueType v;
      _timer_OSD_Type.read(reader, v);
      value.set_timer_OSD(v);
   }
   {
      asn1::generated::WindowSizeOSD_r6::ValueType v;
      _windowSize_OSD_Type.read(reader, v);
      value.set_windowSize_OSD(v);
   }

   reader.readSequenceEnd(*this);
}

void UM_RLC_OutOSeqDelivery_Info_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timer_OSD_Type.write(writer, value.get_timer_OSD());
   _windowSize_OSD_Type.write(writer, value.get_windowSize_OSD());

   writer.writeSequenceEnd();
}


void AddOrReconfMAC_dFlow::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MAC_hs_AddReconfQueue_List::ValueType v;
      _mac_hs_AddReconfQueue_List_Type.read(reader, v);
      value.set_mac_hs_AddReconfQueue_List(v);
   }
   {
      asn1::generated::MAC_hs_DelQueue_List::ValueType v;
      _mac_hs_DelQueue_List_Type.read(reader, v);
      value.set_mac_hs_DelQueue_List(v);
   }

   reader.readSequenceEnd(*this);
}

void AddOrReconfMAC_dFlow::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mac_hs_AddReconfQueue_List_Type.write(writer, value.get_mac_hs_AddReconfQueue_List());
   _mac_hs_DelQueue_List_Type.write(writer, value.get_mac_hs_DelQueue_List());

   writer.writeSequenceEnd();
}


void BitModeRLC-SizeInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_sizeType1_Type)
   {
      asn1::IntegerType::ValueType v;
      _sizeType1_Type.read(reader, v);
      value.set_sizeType1(v);
   }
   else if (choosenType == &_sizeType2_Type)
   {
      _INTERNAL__SequenceType_part1_INTERNAL_asn1__IntegerType_part2_INTERNAL_asn1__IntegerType::ValueType v;
      _sizeType2_Type.read(reader, v);
      value.set_sizeType2(v);
   }
   else if (choosenType == &_sizeType3_Type)
   {
      _INTERNAL__SequenceType_part1_INTERNAL_asn1__IntegerType_part2_INTERNAL_asn1__IntegerType::ValueType v;
      _sizeType3_Type.read(reader, v);
      value.set_sizeType3(v);
   }
   else if (choosenType == &_sizeType4_Type)
   {
      _INTERNAL__SequenceType_part1_INTERNAL_asn1__IntegerType_part2_INTERNAL_asn1__IntegerType::ValueType v;
      _sizeType4_Type.read(reader, v);
      value.set_sizeType4(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _sizeType1_Type.toString() + ", " + _sizeType2_Type.toString() + ", " + _sizeType3_Type.toString() + ", " + _sizeType4_Type.toString());
   }
}

void BitModeRLC-SizeInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_sizeType1_Choosen())
      _sizeType1_Type.write(writer, value.get_sizeType1());
   else if (value.has_sizeType2_Choosen())
      _sizeType2_Type.write(writer, value.get_sizeType2());
   else if (value.has_sizeType3_Choosen())
      _sizeType3_Type.write(writer, value.get_sizeType3());
   else if (value.has_sizeType4_Choosen())
      _sizeType4_Type.write(writer, value.get_sizeType4());
}


void ChannelCodingType::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_noCoding_Type)
   {
      asn1::NullType::ValueType v;
      _noCoding_Type.read(reader, v);
      value.set_noCoding(v);
   }
   else if (choosenType == &_convolutional_Type)
   {
      asn1::generated::CodingRate::ValueType v;
      _convolutional_Type.read(reader, v);
      value.set_convolutional(v);
   }
   else if (choosenType == &_turbo_Type)
   {
      asn1::NullType::ValueType v;
      _turbo_Type.read(reader, v);
      value.set_turbo(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _noCoding_Type.toString() + ", " + _convolutional_Type.toString() + ", " + _turbo_Type.toString());
   }
}

void ChannelCodingType::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_noCoding_Choosen())
      _noCoding_Type.write(writer, value.get_noCoding());
   else if (value.has_convolutional_Choosen())
      _convolutional_Type.write(writer, value.get_convolutional());
   else if (value.has_turbo_Choosen())
      _turbo_Type.write(writer, value.get_turbo());
}


void CommonDynamicTF_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_octetModeRLC-SizeInfoType2_INTERNAL_asn1__generated__OctetModeRLC_SizeInfoType2_tdd_INTERNAL__SequenceType_commonTDD-Choice_INTERNAL__ChoiceType_bitModeRLC-SizeInfo_INTERNAL_asn1__generated__BitModeRLC_SizeInfo_octetModeRLC-SizeInfoType1_INTERNAL_asn1__generated__OctetModeRLC_SizeInfoType1::ValueType v;
      _rlc_Size_Type.read(reader, v);
      value.set_rlc_Size(v);
   }
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__NumberOfTransportBlocks::ValueType v;
      _numberOfTbSizeList_Type.read(reader, v);
      value.set_numberOfTbSizeList(v);
   }
   {
      asn1::generated::LogicalChannelList::ValueType v;
      _logicalChannelList_Type.read(reader, v);
      value.set_logicalChannelList(v);
   }

   reader.readSequenceEnd(*this);
}

void CommonDynamicTF_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rlc_Size_Type.write(writer, value.get_rlc_Size());
   _numberOfTbSizeList_Type.write(writer, value.get_numberOfTbSizeList());
   _logicalChannelList_Type.write(writer, value.get_logicalChannelList());

   writer.writeSequenceEnd();
}


void CommonDynamicTF_Info_DynamicTTI::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_bitModeRLC-SizeInfo_INTERNAL_asn1__generated__BitModeRLC_SizeInfo_octetModeRLC-SizeInfoType1_INTERNAL_asn1__generated__OctetModeRLC_SizeInfoType1::ValueType v;
      _commonTDD_Choice_Type.read(reader, v);
      value.set_commonTDD_Choice(v);
   }
   {
      asn1::generated::NumberOfTbSizeAndTTIList::ValueType v;
      _numberOfTbSizeAndTTIList_Type.read(reader, v);
      value.set_numberOfTbSizeAndTTIList(v);
   }
   {
      asn1::generated::LogicalChannelList::ValueType v;
      _logicalChannelList_Type.read(reader, v);
      value.set_logicalChannelList(v);
   }

   reader.readSequenceEnd(*this);
}

void CommonDynamicTF_Info_DynamicTTI::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _commonTDD_Choice_Type.write(writer, value.get_commonTDD_Choice());
   _numberOfTbSizeAndTTIList_Type.write(writer, value.get_numberOfTbSizeAndTTIList());
   _logicalChannelList_Type.write(writer, value.get_logicalChannelList());

   writer.writeSequenceEnd();
}


void CommonTransChTFS::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_tti10_INTERNAL_asn1__generated__CommonDynamicTF_InfoList_tti20_INTERNAL_asn1__generated__CommonDynamicTF_InfoList_tti40_INTERNAL_asn1__generated__CommonDynamicTF_InfoList_tti80_INTERNAL_asn1__generated__CommonDynamicTF_InfoList_dynamic_INTERNAL_asn1__generated__CommonDynamicTF_InfoList_DynamicTTI::ValueType v;
      _tti_Type.read(reader, v);
      value.set_tti(v);
   }
   {
      asn1::generated::SemistaticTF_Information::ValueType v;
      _semistaticTF_Information_Type.read(reader, v);
      value.set_semistaticTF_Information(v);
   }

   reader.readSequenceEnd(*this);
}

void CommonTransChTFS::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tti_Type.write(writer, value.get_tti());
   _semistaticTF_Information_Type.write(writer, value.get_semistaticTF_Information());

   writer.writeSequenceEnd();
}


void CommonTransChTFS_LCR::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_tti5_INTERNAL_asn1__generated__CommonDynamicTF_InfoList_tti10_INTERNAL_asn1__generated__CommonDynamicTF_InfoList_tti20_INTERNAL_asn1__generated__CommonDynamicTF_InfoList_tti40_INTERNAL_asn1__generated__CommonDynamicTF_InfoList_tti80_INTERNAL_asn1__generated__CommonDynamicTF_InfoList_dynamic_INTERNAL_asn1__generated__CommonDynamicTF_InfoList_DynamicTTI::ValueType v;
      _tti_Type.read(reader, v);
      value.set_tti(v);
   }
   {
      asn1::generated::SemistaticTF_Information::ValueType v;
      _semistaticTF_Information_Type.read(reader, v);
      value.set_semistaticTF_Information(v);
   }

   reader.readSequenceEnd(*this);
}

void CommonTransChTFS_LCR::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tti_Type.write(writer, value.get_tti());
   _semistaticTF_Information_Type.write(writer, value.get_semistaticTF_Information());

   writer.writeSequenceEnd();
}


void DedicatedDynamicTF_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_bitMode_INTERNAL_asn1__generated__BitModeRLC_SizeInfo_octetModeType1_INTERNAL_asn1__generated__OctetModeRLC_SizeInfoType1::ValueType v;
      _rlc_Size_Type.read(reader, v);
      value.set_rlc_Size(v);
   }
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__NumberOfTransportBlocks::ValueType v;
      _numberOfTbSizeList_Type.read(reader, v);
      value.set_numberOfTbSizeList(v);
   }
   {
      asn1::generated::LogicalChannelList::ValueType v;
      _logicalChannelList_Type.read(reader, v);
      value.set_logicalChannelList(v);
   }

   reader.readSequenceEnd(*this);
}

void DedicatedDynamicTF_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rlc_Size_Type.write(writer, value.get_rlc_Size());
   _numberOfTbSizeList_Type.write(writer, value.get_numberOfTbSizeList());
   _logicalChannelList_Type.write(writer, value.get_logicalChannelList());

   writer.writeSequenceEnd();
}


void DedicatedDynamicTF_Info_DynamicTTI::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_bitMode_INTERNAL_asn1__generated__BitModeRLC_SizeInfo_octetModeType1_INTERNAL_asn1__generated__OctetModeRLC_SizeInfoType1::ValueType v;
      _rlc_Size_Type.read(reader, v);
      value.set_rlc_Size(v);
   }
   {
      asn1::generated::NumberOfTbSizeAndTTIList::ValueType v;
      _numberOfTbSizeAndTTIList_Type.read(reader, v);
      value.set_numberOfTbSizeAndTTIList(v);
   }
   {
      asn1::generated::LogicalChannelList::ValueType v;
      _logicalChannelList_Type.read(reader, v);
      value.set_logicalChannelList(v);
   }

   reader.readSequenceEnd(*this);
}

void DedicatedDynamicTF_Info_DynamicTTI::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rlc_Size_Type.write(writer, value.get_rlc_Size());
   _numberOfTbSizeAndTTIList_Type.write(writer, value.get_numberOfTbSizeAndTTIList());
   _logicalChannelList_Type.write(writer, value.get_logicalChannelList());

   writer.writeSequenceEnd();
}


void DedicatedTransChTFS::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_tti10_INTERNAL_asn1__generated__DedicatedDynamicTF_InfoList_tti20_INTERNAL_asn1__generated__DedicatedDynamicTF_InfoList_tti40_INTERNAL_asn1__generated__DedicatedDynamicTF_InfoList_tti80_INTERNAL_asn1__generated__DedicatedDynamicTF_InfoList_dynamic_INTERNAL_asn1__generated__DedicatedDynamicTF_InfoList_DynamicTTI::ValueType v;
      _tti_Type.read(reader, v);
      value.set_tti(v);
   }
   {
      asn1::generated::SemistaticTF_Information::ValueType v;
      _semistaticTF_Information_Type.read(reader, v);
      value.set_semistaticTF_Information(v);
   }

   reader.readSequenceEnd(*this);
}

void DedicatedTransChTFS::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tti_Type.write(writer, value.get_tti());
   _semistaticTF_Information_Type.write(writer, value.get_semistaticTF_Information());

   writer.writeSequenceEnd();
}


void DL_AddReconfTransChInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_TrCH_Type::ValueType v;
      _dl_TransportChannelType_Type.read(reader, v);
      value.set_dl_TransportChannelType(v);
   }
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _dl_transportChannelIdentity_Type.read(reader, v);
      value.set_dl_transportChannelIdentity(v);
   }
   {
      _INTERNAL__ChoiceType_explicit-config_INTERNAL_asn1__generated__TransportFormatSet_sameAsULTrCH_INTERNAL_asn1__generated__UL_TransportChannelIdentity::ValueType v;
      _tfs_SignallingMode_Type.read(reader, v);
      value.set_tfs_SignallingMode(v);
   }
   {
      asn1::generated::QualityTarget::ValueType v;
      _dch_QualityTarget_Type.read(reader, v);
      value.set_dch_QualityTarget(v);
   }
   {
      asn1::generated::TM_SignallingInfo::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_AddReconfTransChInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_TransportChannelType_Type.write(writer, value.get_dl_TransportChannelType());
   _dl_transportChannelIdentity_Type.write(writer, value.get_dl_transportChannelIdentity());
   _tfs_SignallingMode_Type.write(writer, value.get_tfs_SignallingMode());
   _dch_QualityTarget_Type.write(writer, value.get_dch_QualityTarget());
   _dummy_Type.write(writer, value.get_dummy());

   writer.writeSequenceEnd();
}


void DL_AddReconfTransChInformation_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_TrCH_Type::ValueType v;
      _dl_TransportChannelType_Type.read(reader, v);
      value.set_dl_TransportChannelType(v);
   }
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _dl_transportChannelIdentity_Type.read(reader, v);
      value.set_dl_transportChannelIdentity(v);
   }
   {
      _INTERNAL__ChoiceType_explicit-config_INTERNAL_asn1__generated__TransportFormatSet_sameAsULTrCH_INTERNAL_asn1__generated__UL_TransportChannelIdentity::ValueType v;
      _tfs_SignallingMode_Type.read(reader, v);
      value.set_tfs_SignallingMode(v);
   }
   {
      asn1::generated::QualityTarget::ValueType v;
      _dch_QualityTarget_Type.read(reader, v);
      value.set_dch_QualityTarget(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_AddReconfTransChInformation_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_TransportChannelType_Type.write(writer, value.get_dl_TransportChannelType());
   _dl_transportChannelIdentity_Type.write(writer, value.get_dl_transportChannelIdentity());
   _tfs_SignallingMode_Type.write(writer, value.get_tfs_SignallingMode());
   _dch_QualityTarget_Type.write(writer, value.get_dch_QualityTarget());

   writer.writeSequenceEnd();
}


void DL_AddReconfTransChInformation_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_TrCH_TypeId1_r5::ValueType v;
      _dl_TransportChannelType_Type.read(reader, v);
      value.set_dl_TransportChannelType(v);
   }
   {
      _INTERNAL__ChoiceType_explicit-config_INTERNAL_asn1__generated__TransportFormatSet_sameAsULTrCH_INTERNAL_asn1__generated__UL_TransportChannelIdentity_hsdsch_INTERNAL_asn1__generated__HSDSCH_Info::ValueType v;
      _tfs_SignallingMode_Type.read(reader, v);
      value.set_tfs_SignallingMode(v);
   }
   {
      asn1::generated::QualityTarget::ValueType v;
      _dch_QualityTarget_Type.read(reader, v);
      value.set_dch_QualityTarget(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_AddReconfTransChInformation_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_TransportChannelType_Type.write(writer, value.get_dl_TransportChannelType());
   _tfs_SignallingMode_Type.write(writer, value.get_tfs_SignallingMode());
   _dch_QualityTarget_Type.write(writer, value.get_dch_QualityTarget());

   writer.writeSequenceEnd();
}


void DL_AddReconfTransChInformation2::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_TrCH_Type::ValueType v;
      _dl_TransportChannelType_Type.read(reader, v);
      value.set_dl_TransportChannelType(v);
   }
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _transportChannelIdentity_Type.read(reader, v);
      value.set_transportChannelIdentity(v);
   }
   {
      _INTERNAL__ChoiceType_explicit-config_INTERNAL_asn1__generated__TransportFormatSet_sameAsULTrCH_INTERNAL_asn1__generated__UL_TransportChannelIdentity::ValueType v;
      _tfs_SignallingMode_Type.read(reader, v);
      value.set_tfs_SignallingMode(v);
   }
   {
      asn1::generated::QualityTarget::ValueType v;
      _qualityTarget_Type.read(reader, v);
      value.set_qualityTarget(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_AddReconfTransChInformation2::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_TransportChannelType_Type.write(writer, value.get_dl_TransportChannelType());
   _transportChannelIdentity_Type.write(writer, value.get_transportChannelIdentity());
   _tfs_SignallingMode_Type.write(writer, value.get_tfs_SignallingMode());
   _qualityTarget_Type.write(writer, value.get_qualityTarget());

   writer.writeSequenceEnd();
}


void DL_CommonTransChInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS::ValueType v;
      _sccpch_TFCS_Type.read(reader, v);
      value.set_sccpch_TFCS(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dl-Parameters_INTERNAL__ChoiceType_dl-DCH-TFCS_INTERNAL_asn1__generated__TFCS_sameAsUL_INTERNAL_asn1__NullType_tdd_INTERNAL__SequenceType_individualDL-CCTrCH-InfoList_INTERNAL_asn1__generated__IndividualDL_CCTrCH_InfoList::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_CommonTransChInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sccpch_TFCS_Type.write(writer, value.get_sccpch_TFCS());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void DL_CommonTransChInfo_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS::ValueType v;
      _sccpch_TFCS_Type.read(reader, v);
      value.set_sccpch_TFCS(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dl-Parameters_INTERNAL__ChoiceType_dl-DCH-TFCS_INTERNAL__SequenceType_tfcs_INTERNAL_asn1__generated__TFCS_sameAsUL_INTERNAL_asn1__NullType_tdd_INTERNAL__SequenceType_individualDL-CCTrCH-InfoList_INTERNAL_asn1__generated__IndividualDL_CCTrCH_InfoList::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_CommonTransChInfo_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sccpch_TFCS_Type.write(writer, value.get_sccpch_TFCS());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void DL_TransportChannelIdentity::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_TrCH_Type::ValueType v;
      _dl_TransportChannelType_Type.read(reader, v);
      value.set_dl_TransportChannelType(v);
   }
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _dl_TransportChannelIdentity_Type.read(reader, v);
      value.set_dl_TransportChannelIdentity(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_TransportChannelIdentity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_TransportChannelType_Type.write(writer, value.get_dl_TransportChannelType());
   _dl_TransportChannelIdentity_Type.write(writer, value.get_dl_TransportChannelIdentity());

   writer.writeSequenceEnd();
}


void DL_TransportChannelIdentity_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_TrCH_TypeId2_r5::ValueType v;
      _dl_TransportChannelType_Type.read(reader, v);
      value.set_dl_TransportChannelType(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_TransportChannelIdentity_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_TransportChannelType_Type.write(writer, value.get_dl_TransportChannelType());

   writer.writeSequenceEnd();
}


void DL-TrCH-TypeId1-r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_dch_Type)
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _dch_Type.read(reader, v);
      value.set_dch(v);
   }
   else if (choosenType == &_dsch_Type)
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _dsch_Type.read(reader, v);
      value.set_dsch(v);
   }
   else if (choosenType == &_hsdsch_Type)
   {
      asn1::NullType::ValueType v;
      _hsdsch_Type.read(reader, v);
      value.set_hsdsch(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _dch_Type.toString() + ", " + _dsch_Type.toString() + ", " + _hsdsch_Type.toString());
   }
}

void DL-TrCH-TypeId1-r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_dch_Choosen())
      _dch_Type.write(writer, value.get_dch());
   else if (value.has_dsch_Choosen())
      _dsch_Type.write(writer, value.get_dsch());
   else if (value.has_hsdsch_Choosen())
      _hsdsch_Type.write(writer, value.get_hsdsch());
}


void DL-TrCH-TypeId2-r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_dch_Type)
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _dch_Type.read(reader, v);
      value.set_dch(v);
   }
   else if (choosenType == &_dsch_Type)
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _dsch_Type.read(reader, v);
      value.set_dsch(v);
   }
   else if (choosenType == &_hsdsch_Type)
   {
      asn1::generated::MAC_d_FlowIdentity::ValueType v;
      _hsdsch_Type.read(reader, v);
      value.set_hsdsch(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _dch_Type.toString() + ", " + _dsch_Type.toString() + ", " + _hsdsch_Type.toString());
   }
}

void DL-TrCH-TypeId2-r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_dch_Choosen())
      _dch_Type.write(writer, value.get_dch());
   else if (value.has_dsch_Choosen())
      _dsch_Type.write(writer, value.get_dsch());
   else if (value.has_hsdsch_Choosen())
      _hsdsch_Type.write(writer, value.get_hsdsch());
}


void DRAC_StaticInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TransmissionTimeValidity::ValueType v;
      _transmissionTimeValidity_Type.read(reader, v);
      value.set_transmissionTimeValidity(v);
   }
   {
      asn1::generated::TimeDurationBeforeRetry::ValueType v;
      _timeDurationBeforeRetry_Type.read(reader, v);
      value.set_timeDurationBeforeRetry(v);
   }
   {
      asn1::generated::DRAC_ClassIdentity::ValueType v;
      _drac_ClassIdentity_Type.read(reader, v);
      value.set_drac_ClassIdentity(v);
   }

   reader.readSequenceEnd(*this);
}

void DRAC_StaticInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _transmissionTimeValidity_Type.write(writer, value.get_transmissionTimeValidity());
   _timeDurationBeforeRetry_Type.write(writer, value.get_timeDurationBeforeRetry());
   _drac_ClassIdentity_Type.write(writer, value.get_drac_ClassIdentity());

   writer.writeSequenceEnd();
}


void E_DCH_AddReconf_MAC_d_Flow::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::E_DCH_MAC_d_FlowIdentity::ValueType v;
      _mac_d_FlowIdentity_Type.read(reader, v);
      value.set_mac_d_FlowIdentity(v);
   }
   {
      asn1::generated::E_DCH_MAC_d_FlowPowerOffset::ValueType v;
      _mac_d_FlowPowerOffset_Type.read(reader, v);
      value.set_mac_d_FlowPowerOffset(v);
   }
   {
      asn1::generated::E_DCH_MAC_d_FlowMaxRetrans::ValueType v;
      _mac_d_FlowMaxRetrans_Type.read(reader, v);
      value.set_mac_d_FlowMaxRetrans(v);
   }
   {
      asn1::generated::E_DCH_MAC_d_FlowMultiplexingList::ValueType v;
      _mac_d_FlowMultiplexingList_Type.read(reader, v);
      value.set_mac_d_FlowMultiplexingList(v);
   }
   {
      _INTERNAL__ChoiceType_non-ScheduledTransGrantInfo_INTERNAL__SequenceType_maxMAC-e-PDUContents_INTERNAL_asn1__IntegerType_ms2-NonSchedTransmGrantHARQAlloc_INTERNAL__scheduledTransmissionGrantInfo_INTERNAL_asn1__NullType::ValueType v;
      _transmissionGrantType_Type.read(reader, v);
      value.set_transmissionGrantType(v);
   }

   reader.readSequenceEnd(*this);
}

void E_DCH_AddReconf_MAC_d_Flow::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mac_d_FlowIdentity_Type.write(writer, value.get_mac_d_FlowIdentity());
   _mac_d_FlowPowerOffset_Type.write(writer, value.get_mac_d_FlowPowerOffset());
   _mac_d_FlowMaxRetrans_Type.write(writer, value.get_mac_d_FlowMaxRetrans());
   _mac_d_FlowMultiplexingList_Type.write(writer, value.get_mac_d_FlowMultiplexingList());
   _transmissionGrantType_Type.write(writer, value.get_transmissionGrantType());

   writer.writeSequenceEnd();
}


void ExplicitTFCS-Configuration::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_complete_Type)
   {
      asn1::generated::TFCS_ReconfAdd::ValueType v;
      _complete_Type.read(reader, v);
      value.set_complete(v);
   }
   else if (choosenType == &_addition_Type)
   {
      asn1::generated::TFCS_ReconfAdd::ValueType v;
      _addition_Type.read(reader, v);
      value.set_addition(v);
   }
   else if (choosenType == &_removal_Type)
   {
      asn1::generated::TFCS_RemovalList::ValueType v;
      _removal_Type.read(reader, v);
      value.set_removal(v);
   }
   else if (choosenType == &_replacement_Type)
   {
      _INTERNAL__SequenceType_tfcsRemoval_INTERNAL_asn1__generated__TFCS_RemovalList_tfcsAdd_INTERNAL_asn1__generated__TFCS_ReconfAdd::ValueType v;
      _replacement_Type.read(reader, v);
      value.set_replacement(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _complete_Type.toString() + ", " + _addition_Type.toString() + ", " + _removal_Type.toString() + ", " + _replacement_Type.toString());
   }
}

void ExplicitTFCS-Configuration::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_complete_Choosen())
      _complete_Type.write(writer, value.get_complete());
   else if (value.has_addition_Choosen())
      _addition_Type.write(writer, value.get_addition());
   else if (value.has_removal_Choosen())
      _removal_Type.write(writer, value.get_removal());
   else if (value.has_replacement_Choosen())
      _replacement_Type.write(writer, value.get_replacement());
}


void GainFactorInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_signalledGainFactors_Type)
   {
      asn1::generated::SignalledGainFactors::ValueType v;
      _signalledGainFactors_Type.read(reader, v);
      value.set_signalledGainFactors(v);
   }
   else if (choosenType == &_computedGainFactors_Type)
   {
      asn1::generated::ReferenceTFC_ID::ValueType v;
      _computedGainFactors_Type.read(reader, v);
      value.set_computedGainFactors(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _signalledGainFactors_Type.toString() + ", " + _computedGainFactors_Type.toString());
   }
}

void GainFactorInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_signalledGainFactors_Choosen())
      _signalledGainFactors_Type.write(writer, value.get_signalledGainFactors());
   else if (value.has_computedGainFactors_Choosen())
      _computedGainFactors_Type.write(writer, value.get_computedGainFactors());
}


void HSDSCH_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::HARQ_Info::ValueType v;
      _harqInfo_Type.read(reader, v);
      value.set_harqInfo(v);
   }
   {
      asn1::generated::AddOrReconfMAC_dFlow::ValueType v;
      _addOrReconfMAC_dFlow_Type.read(reader, v);
      value.set_addOrReconfMAC_dFlow(v);
   }

   reader.readSequenceEnd(*this);
}

void HSDSCH_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _harqInfo_Type.write(writer, value.get_harqInfo());
   _addOrReconfMAC_dFlow_Type.write(writer, value.get_addOrReconfMAC_dFlow());

   writer.writeSequenceEnd();
}


void HARQ_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _numberOfProcesses_Type.read(reader, v);
      value.set_numberOfProcesses(v);
   }
   {
      _INTERNAL__ChoiceType_implicit_INTERNAL_asn1__NullType_explicit_INTERNAL__SequenceOfType_INTERNAL_asn1__generated__HARQMemorySize::ValueType v;
      _memoryPartitioning_Type.read(reader, v);
      value.set_memoryPartitioning(v);
   }

   reader.readSequenceEnd(*this);
}

void HARQ_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _numberOfProcesses_Type.write(writer, value.get_numberOfProcesses());
   _memoryPartitioning_Type.write(writer, value.get_memoryPartitioning());

   writer.writeSequenceEnd();
}


void IndividualDL_CCTrCH_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_Identity::ValueType v;
      _dl_TFCS_Identity_Type.read(reader, v);
      value.set_dl_TFCS_Identity(v);
   }
   {
      _INTERNAL__ChoiceType_explicit-config_INTERNAL_asn1__generated__TFCS_sameAsUL_INTERNAL_asn1__generated__TFCS_Identity::ValueType v;
      _tfcs_SignallingMode_Type.read(reader, v);
      value.set_tfcs_SignallingMode(v);
   }

   reader.readSequenceEnd(*this);
}

void IndividualDL_CCTrCH_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_TFCS_Identity_Type.write(writer, value.get_dl_TFCS_Identity());
   _tfcs_SignallingMode_Type.write(writer, value.get_tfcs_SignallingMode());

   writer.writeSequenceEnd();
}


void IndividualUL_CCTrCH_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_Identity::ValueType v;
      _ul_TFCS_Identity_Type.read(reader, v);
      value.set_ul_TFCS_Identity(v);
   }
   {
      asn1::generated::TFCS::ValueType v;
      _ul_TFCS_Type.read(reader, v);
      value.set_ul_TFCS(v);
   }
   {
      asn1::generated::TFC_Subset::ValueType v;
      _tfc_Subset_Type.read(reader, v);
      value.set_tfc_Subset(v);
   }

   reader.readSequenceEnd(*this);
}

void IndividualUL_CCTrCH_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_TFCS_Identity_Type.write(writer, value.get_ul_TFCS_Identity());
   _ul_TFCS_Type.write(writer, value.get_ul_TFCS());
   _tfc_Subset_Type.write(writer, value.get_tfc_Subset());

   writer.writeSequenceEnd();
}


void LogicalChannelByRB::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _logChOfRb_Type.read(reader, v);
      value.set_logChOfRb(v);
   }

   reader.readSequenceEnd(*this);
}

void LogicalChannelByRB::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _logChOfRb_Type.write(writer, value.get_logChOfRb());

   writer.writeSequenceEnd();
}


void LogicalChannelList::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_allSizes_Type)
   {
      asn1::NullType::ValueType v;
      _allSizes_Type.read(reader, v);
      value.set_allSizes(v);
   }
   else if (choosenType == &_configured_Type)
   {
      asn1::NullType::ValueType v;
      _configured_Type.read(reader, v);
      value.set_configured(v);
   }
   else if (choosenType == &_explicitList_Type)
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__LogicalChannelByRB::ValueType v;
      _explicitList_Type.read(reader, v);
      value.set_explicitList(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _allSizes_Type.toString() + ", " + _configured_Type.toString() + ", " + _explicitList_Type.toString());
   }
}

void LogicalChannelList::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_allSizes_Choosen())
      _allSizes_Type.write(writer, value.get_allSizes());
   else if (value.has_configured_Choosen())
      _configured_Type.write(writer, value.get_configured());
   else if (value.has_explicitList_Choosen())
      _explicitList_Type.write(writer, value.get_explicitList());
}


void MAC_d_FlowIdentityDCHandHSDSCH::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _dch_transport_ch_id_Type.read(reader, v);
      value.set_dch_transport_ch_id(v);
   }
   {
      asn1::generated::MAC_d_FlowIdentity::ValueType v;
      _hsdsch_mac_d_flow_id_Type.read(reader, v);
      value.set_hsdsch_mac_d_flow_id(v);
   }

   reader.readSequenceEnd(*this);
}

void MAC_d_FlowIdentityDCHandHSDSCH::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dch_transport_ch_id_Type.write(writer, value.get_dch_transport_ch_id());
   _hsdsch_mac_d_flow_id_Type.write(writer, value.get_hsdsch_mac_d_flow_id());

   writer.writeSequenceEnd();
}


void MAC_d_PDUsizeInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _mac_d_PDU_Size_Type.read(reader, v);
      value.set_mac_d_PDU_Size(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _mac_d_PDU_Index_Type.read(reader, v);
      value.set_mac_d_PDU_Index(v);
   }

   reader.readSequenceEnd(*this);
}

void MAC_d_PDUsizeInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mac_d_PDU_Size_Type.write(writer, value.get_mac_d_PDU_Size());
   _mac_d_PDU_Index_Type.write(writer, value.get_mac_d_PDU_Index());

   writer.writeSequenceEnd();
}


void MAC_hs_AddReconfQueue::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _mac_hsQueueId_Type.read(reader, v);
      value.set_mac_hsQueueId(v);
   }
   {
      asn1::generated::MAC_d_FlowIdentity::ValueType v;
      _mac_dFlowId_Type.read(reader, v);
      value.set_mac_dFlowId(v);
   }
   {
      asn1::generated::T1_ReleaseTimer::ValueType v;
      _reorderingReleaseTimer_Type.read(reader, v);
      value.set_reorderingReleaseTimer(v);
   }
   {
      asn1::generated::MAC_hs_WindowSize::ValueType v;
      _mac_hsWindowSize_Type.read(reader, v);
      value.set_mac_hsWindowSize(v);
   }
   {
      asn1::generated::MAC_d_PDU_SizeInfo_List::ValueType v;
      _mac_d_PDU_SizeInfo_List_Type.read(reader, v);
      value.set_mac_d_PDU_SizeInfo_List(v);
   }

   reader.readSequenceEnd(*this);
}

void MAC_hs_AddReconfQueue::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mac_hsQueueId_Type.write(writer, value.get_mac_hsQueueId());
   _mac_dFlowId_Type.write(writer, value.get_mac_dFlowId());
   _reorderingReleaseTimer_Type.write(writer, value.get_reorderingReleaseTimer());
   _mac_hsWindowSize_Type.write(writer, value.get_mac_hsWindowSize());
   _mac_d_PDU_SizeInfo_List_Type.write(writer, value.get_mac_d_PDU_SizeInfo_List());

   writer.writeSequenceEnd();
}


void MAC_hs_DelQueue::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _mac_hsQueueId_Type.read(reader, v);
      value.set_mac_hsQueueId(v);
   }

   reader.readSequenceEnd(*this);
}

void MAC_hs_DelQueue::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mac_hsQueueId_Type.write(writer, value.get_mac_hsQueueId());

   writer.writeSequenceEnd();
}


void NumberOfTransportBlocks::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_zero_Type)
   {
      asn1::NullType::ValueType v;
      _zero_Type.read(reader, v);
      value.set_zero(v);
   }
   else if (choosenType == &_one_Type)
   {
      asn1::NullType::ValueType v;
      _one_Type.read(reader, v);
      value.set_one(v);
   }
   else if (choosenType == &_small_Type)
   {
      asn1::IntegerType::ValueType v;
      _small_Type.read(reader, v);
      value.set_small(v);
   }
   else if (choosenType == &_large_Type)
   {
      asn1::IntegerType::ValueType v;
      _large_Type.read(reader, v);
      value.set_large(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _zero_Type.toString() + ", " + _one_Type.toString() + ", " + _small_Type.toString() + ", " + _large_Type.toString());
   }
}

void NumberOfTransportBlocks::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_zero_Choosen())
      _zero_Type.write(writer, value.get_zero());
   else if (value.has_one_Choosen())
      _one_Type.write(writer, value.get_one());
   else if (value.has_small_Choosen())
      _small_Type.write(writer, value.get_small());
   else if (value.has_large_Choosen())
      _large_Type.write(writer, value.get_large());
}


void OctetModeRLC-SizeInfoType1::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_sizeType1_Type)
   {
      asn1::IntegerType::ValueType v;
      _sizeType1_Type.read(reader, v);
      value.set_sizeType1(v);
   }
   else if (choosenType == &_sizeType2_Type)
   {
      _INTERNAL__SequenceType_part1_INTERNAL_asn1__IntegerType_part2_INTERNAL_asn1__IntegerType::ValueType v;
      _sizeType2_Type.read(reader, v);
      value.set_sizeType2(v);
   }
   else if (choosenType == &_sizeType3_Type)
   {
      _INTERNAL__SequenceType_part1_INTERNAL_asn1__IntegerType_part2_INTERNAL_asn1__IntegerType::ValueType v;
      _sizeType3_Type.read(reader, v);
      value.set_sizeType3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _sizeType1_Type.toString() + ", " + _sizeType2_Type.toString() + ", " + _sizeType3_Type.toString());
   }
}

void OctetModeRLC-SizeInfoType1::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_sizeType1_Choosen())
      _sizeType1_Type.write(writer, value.get_sizeType1());
   else if (value.has_sizeType2_Choosen())
      _sizeType2_Type.write(writer, value.get_sizeType2());
   else if (value.has_sizeType3_Choosen())
      _sizeType3_Type.write(writer, value.get_sizeType3());
}


void OctetModeRLC-SizeInfoType2::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_sizeType1_Type)
   {
      asn1::IntegerType::ValueType v;
      _sizeType1_Type.read(reader, v);
      value.set_sizeType1(v);
   }
   else if (choosenType == &_sizeType2_Type)
   {
      asn1::IntegerType::ValueType v;
      _sizeType2_Type.read(reader, v);
      value.set_sizeType2(v);
   }
   else if (choosenType == &_sizeType3_Type)
   {
      asn1::IntegerType::ValueType v;
      _sizeType3_Type.read(reader, v);
      value.set_sizeType3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _sizeType1_Type.toString() + ", " + _sizeType2_Type.toString() + ", " + _sizeType3_Type.toString());
   }
}

void OctetModeRLC-SizeInfoType2::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_sizeType1_Choosen())
      _sizeType1_Type.write(writer, value.get_sizeType1());
   else if (value.has_sizeType2_Choosen())
      _sizeType2_Type.write(writer, value.get_sizeType2());
   else if (value.has_sizeType3_Choosen())
      _sizeType3_Type.write(writer, value.get_sizeType3());
}


void PowerOffsetInfoShort::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFC_Value::ValueType v;
      _referenceTFC_Type.read(reader, v);
      value.set_referenceTFC(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_gainFactorBetaC_INTERNAL_asn1__generated__GainFactor_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::GainFactor::ValueType v;
      _gainFactorBetaD_Type.read(reader, v);
      value.set_gainFactorBetaD(v);
   }

   reader.readSequenceEnd(*this);
}

void PowerOffsetInfoShort::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _referenceTFC_Type.write(writer, value.get_referenceTFC());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _gainFactorBetaD_Type.write(writer, value.get_gainFactorBetaD());

   writer.writeSequenceEnd();
}


void PowerOffsetInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::GainFactorInformation::ValueType v;
      _gainFactorInformation_Type.read(reader, v);
      value.set_gainFactorInformation(v);
   }
   {
      asn1::generated::PowerOffsetPp_m::ValueType v;
      _powerOffsetPp_m_Type.read(reader, v);
      value.set_powerOffsetPp_m(v);
   }

   reader.readSequenceEnd(*this);
}

void PowerOffsetInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _gainFactorInformation_Type.write(writer, value.get_gainFactorInformation());
   _powerOffsetPp_m_Type.write(writer, value.get_powerOffsetPp_m());

   writer.writeSequenceEnd();
}


void PreDefTransChConfiguration::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_CommonTransChInfo::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList::ValueType v;
      _ul_AddReconfTrChInfoList_Type.read(reader, v);
      value.set_ul_AddReconfTrChInfoList(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList::ValueType v;
      _dl_TrChInfoList_Type.read(reader, v);
      value.set_dl_TrChInfoList(v);
   }

   reader.readSequenceEnd(*this);
}

void PreDefTransChConfiguration::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_AddReconfTrChInfoList_Type.write(writer, value.get_ul_AddReconfTrChInfoList());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_TrChInfoList_Type.write(writer, value.get_dl_TrChInfoList());

   writer.writeSequenceEnd();
}


void QualityTarget::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::BLER_QualityValue::ValueType v;
      _bler_QualityValue_Type.read(reader, v);
      value.set_bler_QualityValue(v);
   }

   reader.readSequenceEnd(*this);
}

void QualityTarget::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _bler_QualityValue_Type.write(writer, value.get_bler_QualityValue());

   writer.writeSequenceEnd();
}


void RestrictedTrChInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_TrCH_Type::ValueType v;
      _ul_TransportChannelType_Type.read(reader, v);
      value.set_ul_TransportChannelType(v);
   }
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _restrictedTrChIdentity_Type.read(reader, v);
      value.set_restrictedTrChIdentity(v);
   }
   {
      asn1::generated::AllowedTFI_List::ValueType v;
      _allowedTFI_List_Type.read(reader, v);
      value.set_allowedTFI_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RestrictedTrChInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_TransportChannelType_Type.write(writer, value.get_ul_TransportChannelType());
   _restrictedTrChIdentity_Type.write(writer, value.get_restrictedTrChIdentity());
   _allowedTFI_List_Type.write(writer, value.get_allowedTFI_List());

   writer.writeSequenceEnd();
}


void SemistaticTF_Information::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ChannelCodingType::ValueType v;
      _channelCodingType_Type.read(reader, v);
      value.set_channelCodingType(v);
   }
   {
      asn1::generated::RateMatchingAttribute::ValueType v;
      _rateMatchingAttribute_Type.read(reader, v);
      value.set_rateMatchingAttribute(v);
   }
   {
      asn1::generated::CRC_Size::ValueType v;
      _crc_Size_Type.read(reader, v);
      value.set_crc_Size(v);
   }

   reader.readSequenceEnd(*this);
}

void SemistaticTF_Information::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _channelCodingType_Type.write(writer, value.get_channelCodingType());
   _rateMatchingAttribute_Type.write(writer, value.get_rateMatchingAttribute());
   _crc_Size_Type.write(writer, value.get_crc_Size());

   writer.writeSequenceEnd();
}


void SignalledGainFactors::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_gainFactorBetaC_INTERNAL_asn1__generated__GainFactor_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::GainFactor::ValueType v;
      _gainFactorBetaD_Type.read(reader, v);
      value.set_gainFactorBetaD(v);
   }
   {
      asn1::generated::ReferenceTFC_ID::ValueType v;
      _referenceTFC_ID_Type.read(reader, v);
      value.set_referenceTFC_ID(v);
   }

   reader.readSequenceEnd(*this);
}

void SignalledGainFactors::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _gainFactorBetaD_Type.write(writer, value.get_gainFactorBetaD());
   _referenceTFC_ID_Type.write(writer, value.get_referenceTFC_ID());

   writer.writeSequenceEnd();
}


void SplitTFCI_Signalling::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SplitType::ValueType v;
      _splitType_Type.read(reader, v);
      value.set_splitType(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _tfci_Field2_Length_Type.read(reader, v);
      value.set_tfci_Field2_Length(v);
   }
   {
      asn1::generated::ExplicitTFCS_Configuration::ValueType v;
      _tfci_Field1_Information_Type.read(reader, v);
      value.set_tfci_Field1_Information(v);
   }
   {
      asn1::generated::TFCI_Field2_Information::ValueType v;
      _tfci_Field2_Information_Type.read(reader, v);
      value.set_tfci_Field2_Information(v);
   }

   reader.readSequenceEnd(*this);
}

void SplitTFCI_Signalling::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _splitType_Type.write(writer, value.get_splitType());
   _tfci_Field2_Length_Type.write(writer, value.get_tfci_Field2_Length());
   _tfci_Field1_Information_Type.write(writer, value.get_tfci_Field1_Information());
   _tfci_Field2_Information_Type.write(writer, value.get_tfci_Field2_Information());

   writer.writeSequenceEnd();
}


void TFC-Subset::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_minimumAllowedTFC-Number_Type)
   {
      asn1::generated::TFC_Value::ValueType v;
      _minimumAllowedTFC_Number_Type.read(reader, v);
      value.set_minimumAllowedTFC_Number(v);
   }
   else if (choosenType == &_allowedTFC-List_Type)
   {
      asn1::generated::AllowedTFC_List::ValueType v;
      _allowedTFC_List_Type.read(reader, v);
      value.set_allowedTFC_List(v);
   }
   else if (choosenType == &_non-allowedTFC-List_Type)
   {
      asn1::generated::Non_allowedTFC_List::ValueType v;
      _non_allowedTFC_List_Type.read(reader, v);
      value.set_non_allowedTFC_List(v);
   }
   else if (choosenType == &_restrictedTrChInfoList_Type)
   {
      asn1::generated::RestrictedTrChInfoList::ValueType v;
      _restrictedTrChInfoList_Type.read(reader, v);
      value.set_restrictedTrChInfoList(v);
   }
   else if (choosenType == &_fullTFCS_Type)
   {
      asn1::NullType::ValueType v;
      _fullTFCS_Type.read(reader, v);
      value.set_fullTFCS(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _minimumAllowedTFC-Number_Type.toString() + ", " + _allowedTFC-List_Type.toString() + ", " + _non-allowedTFC-List_Type.toString() + ", " + _restrictedTrChInfoList_Type.toString() + ", " + _fullTFCS_Type.toString());
   }
}

void TFC-Subset::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_minimumAllowedTFC-Number_Choosen())
      _minimumAllowedTFC-Number_Type.write(writer, value.get_minimumAllowedTFC-Number());
   else if (value.has_allowedTFC-List_Choosen())
      _allowedTFC-List_Type.write(writer, value.get_allowedTFC-List());
   else if (value.has_non-allowedTFC-List_Choosen())
      _non-allowedTFC-List_Type.write(writer, value.get_non-allowedTFC-List());
   else if (value.has_restrictedTrChInfoList_Choosen())
      _restrictedTrChInfoList_Type.write(writer, value.get_restrictedTrChInfoList());
   else if (value.has_fullTFCS_Choosen())
      _fullTFCS_Type.write(writer, value.get_fullTFCS());
}


void TFCI-Field2-Information::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_tfci-Range_Type)
   {
      asn1::generated::TFCI_RangeList::ValueType v;
      _tfci_Range_Type.read(reader, v);
      value.set_tfci_Range(v);
   }
   else if (choosenType == &_explicit-config_Type)
   {
      asn1::generated::ExplicitTFCS_Configuration::ValueType v;
      _explicit_config_Type.read(reader, v);
      value.set_explicit_config(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _tfci-Range_Type.toString() + ", " + _explicit-config_Type.toString());
   }
}

void TFCI-Field2-Information::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_tfci-Range_Choosen())
      _tfci-Range_Type.write(writer, value.get_tfci-Range());
   else if (value.has_explicit-config_Choosen())
      _explicit-config_Type.write(writer, value.get_explicit-config());
}


void TFCI_Range::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _maxTFCIField2Value_Type.read(reader, v);
      value.set_maxTFCIField2Value(v);
   }
   {
      asn1::generated::TFCS_InfoForDSCH::ValueType v;
      _tfcs_InfoForDSCH_Type.read(reader, v);
      value.set_tfcs_InfoForDSCH(v);
   }

   reader.readSequenceEnd(*this);
}

void TFCI_Range::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _maxTFCIField2Value_Type.write(writer, value.get_maxTFCIField2Value());
   _tfcs_InfoForDSCH_Type.write(writer, value.get_tfcs_InfoForDSCH());

   writer.writeSequenceEnd();
}


void TFCS::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_normalTFCI-Signalling_Type)
   {
      asn1::generated::ExplicitTFCS_Configuration::ValueType v;
      _normalTFCI_Signalling_Type.read(reader, v);
      value.set_normalTFCI_Signalling(v);
   }
   else if (choosenType == &_dummy_Type)
   {
      asn1::generated::SplitTFCI_Signalling::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _normalTFCI-Signalling_Type.toString() + ", " + _dummy_Type.toString());
   }
}

void TFCS::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_normalTFCI-Signalling_Choosen())
      _normalTFCI-Signalling_Type.write(writer, value.get_normalTFCI-Signalling());
   else if (value.has_dummy_Choosen())
      _dummy_Type.write(writer, value.get_dummy());
}


void TFCS_Identity::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_IdentityPlain::ValueType v;
      _tfcs_ID_Type.read(reader, v);
      value.set_tfcs_ID(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _sharedChannelIndicator_Type.read(reader, v);
      value.set_sharedChannelIndicator(v);
   }

   reader.readSequenceEnd(*this);
}

void TFCS_Identity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfcs_ID_Type.write(writer, value.get_tfcs_ID());
   _sharedChannelIndicator_Type.write(writer, value.get_sharedChannelIndicator());

   writer.writeSequenceEnd();
}


void TFCS-InfoForDSCH::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_ctfc2bit_Type)
   {
      asn1::IntegerType::ValueType v;
      _ctfc2bit_Type.read(reader, v);
      value.set_ctfc2bit(v);
   }
   else if (choosenType == &_ctfc4bit_Type)
   {
      asn1::IntegerType::ValueType v;
      _ctfc4bit_Type.read(reader, v);
      value.set_ctfc4bit(v);
   }
   else if (choosenType == &_ctfc6bit_Type)
   {
      asn1::IntegerType::ValueType v;
      _ctfc6bit_Type.read(reader, v);
      value.set_ctfc6bit(v);
   }
   else if (choosenType == &_ctfc8bit_Type)
   {
      asn1::IntegerType::ValueType v;
      _ctfc8bit_Type.read(reader, v);
      value.set_ctfc8bit(v);
   }
   else if (choosenType == &_ctfc12bit_Type)
   {
      asn1::IntegerType::ValueType v;
      _ctfc12bit_Type.read(reader, v);
      value.set_ctfc12bit(v);
   }
   else if (choosenType == &_ctfc16bit_Type)
   {
      asn1::IntegerType::ValueType v;
      _ctfc16bit_Type.read(reader, v);
      value.set_ctfc16bit(v);
   }
   else if (choosenType == &_ctfc24bit_Type)
   {
      asn1::IntegerType::ValueType v;
      _ctfc24bit_Type.read(reader, v);
      value.set_ctfc24bit(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _ctfc2bit_Type.toString() + ", " + _ctfc4bit_Type.toString() + ", " + _ctfc6bit_Type.toString() + ", " + _ctfc8bit_Type.toString() + ", " + _ctfc12bit_Type.toString() + ", " + _ctfc16bit_Type.toString() + ", " + _ctfc24bit_Type.toString());
   }
}

void TFCS-InfoForDSCH::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_ctfc2bit_Choosen())
      _ctfc2bit_Type.write(writer, value.get_ctfc2bit());
   else if (value.has_ctfc4bit_Choosen())
      _ctfc4bit_Type.write(writer, value.get_ctfc4bit());
   else if (value.has_ctfc6bit_Choosen())
      _ctfc6bit_Type.write(writer, value.get_ctfc6bit());
   else if (value.has_ctfc8bit_Choosen())
      _ctfc8bit_Type.write(writer, value.get_ctfc8bit());
   else if (value.has_ctfc12bit_Choosen())
      _ctfc12bit_Type.write(writer, value.get_ctfc12bit());
   else if (value.has_ctfc16bit_Choosen())
      _ctfc16bit_Type.write(writer, value.get_ctfc16bit());
   else if (value.has_ctfc24bit_Choosen())
      _ctfc24bit_Type.write(writer, value.get_ctfc24bit());
}


void TFCS_ReconfAdd::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_ctfc2Bit_INTERNAL__SequenceOfType_INTERNAL__SequenceType_ctfc2_INTERNAL_asn1__IntegerType_powerOffsetInformation_INTERNAL_asn1__generated__PowerOffsetInformation_ctfc4Bit_INTERNAL__SequenceOfType_INTERNAL__SequenceType_ctfc4_INTERNAL_asn1__IntegerType_powerOffsetInformation_INTERNAL_asn1__generated__PowerOffsetInformation_ctfc6Bit_INTERNAL__SequenceOfType_INTERNAL__SequenceType_ctfc6_INTERNAL_asn1__IntegerType_powerOffsetInformation_INTERNAL_asn1__generated__PowerOffsetInformation_ctfc8Bit_INTERNAL__SequenceOfType_INTERNAL__SequenceType_ctfc8_INTERNAL_asn1__IntegerType_powerOffsetInformation_INTERNAL_asn1__generated__PowerOffsetInformation_ctfc12Bit_INTERNAL__SequenceOfType_INTERNAL__SequenceType_ctfc12_INTERNAL_asn1__IntegerType_powerOffsetInformation_INTERNAL_asn1__generated__PowerOffsetInformation_ctfc16Bit_INTERNAL__SequenceOfType_INTERNAL__SequenceType_ctfc16_INTERNAL_asn1__IntegerType_powerOffsetInformation_INTERNAL_asn1__generated__PowerOffsetInformation_ctfc24Bit_INTERNAL__SequenceOfType_INTERNAL__SequenceType_ctfc24_INTERNAL_asn1__IntegerType_powerOffsetInformation_INTERNAL_asn1__generated__PowerOffsetInformation::ValueType v;
      _ctfcSize_Type.read(reader, v);
      value.set_ctfcSize(v);
   }

   reader.readSequenceEnd(*this);
}

void TFCS_ReconfAdd::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ctfcSize_Type.write(writer, value.get_ctfcSize());

   writer.writeSequenceEnd();
}


void TFCS_Removal::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _tfci_Type.read(reader, v);
      value.set_tfci(v);
   }

   reader.readSequenceEnd(*this);
}

void TFCS_Removal::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfci_Type.write(writer, value.get_tfci());

   writer.writeSequenceEnd();
}


void TM_SignallingInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MessType::ValueType v;
      _messType_Type.read(reader, v);
      value.set_messType(v);
   }
   {
      _INTERNAL__ChoiceType_mode1_INTERNAL_asn1__NullType_mode2_INTERNAL__SequenceType_ul-controlledTrChList_INTERNAL_asn1__generated__UL_ControlledTrChList::ValueType v;
      _tm_SignallingMode_Type.read(reader, v);
      value.set_tm_SignallingMode(v);
   }

   reader.readSequenceEnd(*this);
}

void TM_SignallingInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _messType_Type.write(writer, value.get_messType());
   _tm_SignallingMode_Type.write(writer, value.get_tm_SignallingMode());

   writer.writeSequenceEnd();
}


void TransportChannelIdentityDCHandDSCH::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _dch_transport_ch_id_Type.read(reader, v);
      value.set_dch_transport_ch_id(v);
   }
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _dsch_transport_ch_id_Type.read(reader, v);
      value.set_dsch_transport_ch_id(v);
   }

   reader.readSequenceEnd(*this);
}

void TransportChannelIdentityDCHandDSCH::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dch_transport_ch_id_Type.write(writer, value.get_dch_transport_ch_id());
   _dsch_transport_ch_id_Type.write(writer, value.get_dsch_transport_ch_id());

   writer.writeSequenceEnd();
}


void TransportFormatSet::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_dedicatedTransChTFS_Type)
   {
      asn1::generated::DedicatedTransChTFS::ValueType v;
      _dedicatedTransChTFS_Type.read(reader, v);
      value.set_dedicatedTransChTFS(v);
   }
   else if (choosenType == &_commonTransChTFS_Type)
   {
      asn1::generated::CommonTransChTFS::ValueType v;
      _commonTransChTFS_Type.read(reader, v);
      value.set_commonTransChTFS(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _dedicatedTransChTFS_Type.toString() + ", " + _commonTransChTFS_Type.toString());
   }
}

void TransportFormatSet::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_dedicatedTransChTFS_Choosen())
      _dedicatedTransChTFS_Type.write(writer, value.get_dedicatedTransChTFS());
   else if (value.has_commonTransChTFS_Choosen())
      _commonTransChTFS_Type.write(writer, value.get_commonTransChTFS());
}


void TransportFormatSet-LCR::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_dedicatedTransChTFS_Type)
   {
      asn1::generated::DedicatedTransChTFS::ValueType v;
      _dedicatedTransChTFS_Type.read(reader, v);
      value.set_dedicatedTransChTFS(v);
   }
   else if (choosenType == &_commonTransChTFS-LCR_Type)
   {
      asn1::generated::CommonTransChTFS_LCR::ValueType v;
      _commonTransChTFS_LCR_Type.read(reader, v);
      value.set_commonTransChTFS_LCR(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _dedicatedTransChTFS_Type.toString() + ", " + _commonTransChTFS-LCR_Type.toString());
   }
}

void TransportFormatSet-LCR::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_dedicatedTransChTFS_Choosen())
      _dedicatedTransChTFS_Type.write(writer, value.get_dedicatedTransChTFS());
   else if (value.has_commonTransChTFS-LCR_Choosen())
      _commonTransChTFS-LCR_Type.write(writer, value.get_commonTransChTFS-LCR());
}


void UL_AddReconfTransChInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_TrCH_Type::ValueType v;
      _ul_TransportChannelType_Type.read(reader, v);
      value.set_ul_TransportChannelType(v);
   }
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _transportChannelIdentity_Type.read(reader, v);
      value.set_transportChannelIdentity(v);
   }
   {
      asn1::generated::TransportFormatSet::ValueType v;
      _transportFormatSet_Type.read(reader, v);
      value.set_transportFormatSet(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_AddReconfTransChInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_TransportChannelType_Type.write(writer, value.get_ul_TransportChannelType());
   _transportChannelIdentity_Type.write(writer, value.get_transportChannelIdentity());
   _transportFormatSet_Type.write(writer, value.get_transportFormatSet());

   writer.writeSequenceEnd();
}


void UL-AddReconfTransChInformation-r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_dch-usch_Type)
   {
      _INTERNAL__SequenceType_ul-TransportChannelType_INTERNAL_asn1__generated__UL_TrCH_Type_transportChannelIdentity_INTERNAL_asn1__generated__TransportChannelIdentity_transportFormatSet_INTERNAL_asn1__generated__TransportFormatSet::ValueType v;
      _dch_usch_Type.read(reader, v);
      value.set_dch_usch(v);
   }
   else if (choosenType == &_e-dch_Type)
   {
      _INTERNAL__SequenceType_tti_INTERNAL_asn1__generated__E_DCH_TTI_harq-Info_INTERNAL__EnumeratedType_addReconf-MAC-d-FlowList_INTERNAL_asn1__generated__E_DCH_AddReconf_MAC_d_FlowList::ValueType v;
      _e_dch_Type.read(reader, v);
      value.set_e_dch(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _dch-usch_Type.toString() + ", " + _e-dch_Type.toString());
   }
}

void UL-AddReconfTransChInformation-r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_dch-usch_Choosen())
      _dch-usch_Type.write(writer, value.get_dch-usch());
   else if (value.has_e-dch_Choosen())
      _e-dch_Type.write(writer, value.get_e-dch());
}


void UL_CommonTransChInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFC_Subset::ValueType v;
      _tfc_Subset_Type.read(reader, v);
      value.set_tfc_Subset(v);
   }
   {
      asn1::generated::TFCS::ValueType v;
      _prach_TFCS_Type.read(reader, v);
      value.set_prach_TFCS(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_ul-TFCS_INTERNAL_asn1__generated__TFCS_tdd_INTERNAL__SequenceType_individualUL-CCTrCH-InfoList_INTERNAL_asn1__generated__IndividualUL_CCTrCH_InfoList::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_CommonTransChInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfc_Subset_Type.write(writer, value.get_tfc_Subset());
   _prach_TFCS_Type.write(writer, value.get_prach_TFCS());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void UL_CommonTransChInfo_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFC_Subset::ValueType v;
      _tfc_Subset_Type.read(reader, v);
      value.set_tfc_Subset(v);
   }
   {
      asn1::generated::TFCS::ValueType v;
      _prach_TFCS_Type.read(reader, v);
      value.set_prach_TFCS(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_ul-TFCS_INTERNAL_asn1__generated__TFCS_tdd_INTERNAL__SequenceType_individualUL-CCTrCH-InfoList_INTERNAL_asn1__generated__IndividualUL_CCTrCH_InfoList::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::TFC_SubsetList::ValueType v;
      _tfc_SubsetList_Type.read(reader, v);
      value.set_tfc_SubsetList(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_CommonTransChInfo_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfc_Subset_Type.write(writer, value.get_tfc_Subset());
   _prach_TFCS_Type.write(writer, value.get_prach_TFCS());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _tfc_SubsetList_Type.write(writer, value.get_tfc_SubsetList());

   writer.writeSequenceEnd();
}


void UL_TransportChannelIdentity::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_TrCH_Type::ValueType v;
      _ul_TransportChannelType_Type.read(reader, v);
      value.set_ul_TransportChannelType(v);
   }
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _ul_TransportChannelIdentity_Type.read(reader, v);
      value.set_ul_TransportChannelIdentity(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_TransportChannelIdentity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_TransportChannelType_Type.write(writer, value.get_ul_TransportChannelType());
   _ul_TransportChannelIdentity_Type.write(writer, value.get_ul_TransportChannelIdentity());

   writer.writeSequenceEnd();
}


void UL-TransportChannelIdentity-r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_dch-usch_Type)
   {
      _INTERNAL__SequenceType_ul-TransportChannelType_INTERNAL_asn1__generated__UL_TrCH_Type_ul-TransportChannelIdentity_INTERNAL_asn1__generated__TransportChannelIdentity::ValueType v;
      _dch_usch_Type.read(reader, v);
      value.set_dch_usch(v);
   }
   else if (choosenType == &_e-dch_Type)
   {
      asn1::generated::E_DCH_MAC_d_FlowIdentity::ValueType v;
      _e_dch_Type.read(reader, v);
      value.set_e_dch(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _dch-usch_Type.toString() + ", " + _e-dch_Type.toString());
   }
}

void UL-TransportChannelIdentity-r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_dch-usch_Choosen())
      _dch-usch_Type.write(writer, value.get_dch-usch());
   else if (value.has_e-dch_Choosen())
      _e-dch_Type.write(writer, value.get_e-dch());
}


void AccessServiceClass_FDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _availableSignatureStartIndex_Type.read(reader, v);
      value.set_availableSignatureStartIndex(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _availableSignatureEndIndex_Type.read(reader, v);
      value.set_availableSignatureEndIndex(v);
   }
   {
      _INTERNAL_::ValueType v;
      _assignedSubChannelNumber_Type.read(reader, v);
      value.set_assignedSubChannelNumber(v);
   }

   reader.readSequenceEnd(*this);
}

void AccessServiceClass_FDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _availableSignatureStartIndex_Type.write(writer, value.get_availableSignatureStartIndex());
   _availableSignatureEndIndex_Type.write(writer, value.get_availableSignatureEndIndex());
   _assignedSubChannelNumber_Type.write(writer, value.get_assignedSubChannelNumber());

   writer.writeSequenceEnd();
}


void AccessServiceClass_TDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _channelisationCodeIndices_Type.read(reader, v);
      value.set_channelisationCodeIndices(v);
   }
   {
      _INTERNAL__ChoiceType_size1_INTERNAL_asn1__NullType_size2_INTERNAL__SequenceType_subchannels_INTERNAL__EnumeratedType_size4_INTERNAL__SequenceType_subchannels_INTERNAL__size8_INTERNAL__SequenceType_subchannels_INTERNAL_::ValueType v;
      _subchannelSize_Type.read(reader, v);
      value.set_subchannelSize(v);
   }

   reader.readSequenceEnd(*this);
}

void AccessServiceClass_TDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _channelisationCodeIndices_Type.write(writer, value.get_channelisationCodeIndices());
   _subchannelSize_Type.write(writer, value.get_subchannelSize());

   writer.writeSequenceEnd();
}


void AccessServiceClass_TDD_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _channelisationCodeIndices_Type.read(reader, v);
      value.set_channelisationCodeIndices(v);
   }
   {
      _INTERNAL__ChoiceType_size1_INTERNAL_asn1__NullType_size2_INTERNAL__SequenceType_subchannels_INTERNAL__EnumeratedType_size4_INTERNAL__SequenceType_subchannels_INTERNAL__size8_INTERNAL__SequenceType_subchannels_INTERNAL__size16_INTERNAL__SequenceType_subchannels_INTERNAL_::ValueType v;
      _subchannelSize_Type.read(reader, v);
      value.set_subchannelSize(v);
   }

   reader.readSequenceEnd(*this);
}

void AccessServiceClass_TDD_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _channelisationCodeIndices_Type.write(writer, value.get_channelisationCodeIndices());
   _subchannelSize_Type.write(writer, value.get_subchannelSize());

   writer.writeSequenceEnd();
}


void AccessServiceClass_TDD_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _availableSYNC_UlCodesIndics_Type.read(reader, v);
      value.set_availableSYNC_UlCodesIndics(v);
   }
   {
      _INTERNAL__ChoiceType_size1_INTERNAL_asn1__NullType_size2_INTERNAL__SequenceType_subchannels_INTERNAL__EnumeratedType_size4_INTERNAL__SequenceType_subchannels_INTERNAL__size8_INTERNAL__SequenceType_subchannels_INTERNAL_::ValueType v;
      _subchannelSize_Type.read(reader, v);
      value.set_subchannelSize(v);
   }

   reader.readSequenceEnd(*this);
}

void AccessServiceClass_TDD_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _availableSYNC_UlCodesIndics_Type.write(writer, value.get_availableSYNC_UlCodesIndics());
   _subchannelSize_Type.write(writer, value.get_subchannelSize());

   writer.writeSequenceEnd();
}


void AdditionalPRACH_TF_and_TFCS_CCCH_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PowerOffsetInformation::ValueType v;
      _powerOffsetInformation_Type.read(reader, v);
      value.set_powerOffsetInformation(v);
   }
   {
      asn1::generated::DynamicTFInformationCCCH::ValueType v;
      _dynamicTFInformationCCCH_Type.read(reader, v);
      value.set_dynamicTFInformationCCCH(v);
   }

   reader.readSequenceEnd(*this);
}

void AdditionalPRACH_TF_and_TFCS_CCCH_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _powerOffsetInformation_Type.write(writer, value.get_powerOffsetInformation());
   _dynamicTFInformationCCCH_Type.write(writer, value.get_dynamicTFInformationCCCH());

   writer.writeSequenceEnd();
}


void AdditionalPRACH_TF_and_TFCS_CCCH::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::AdditionalPRACH_TF_and_TFCS_CCCH_IEs::ValueType v;
      _additionalPRACH_TF_and_TFCS_CCCH_IEs_Type.read(reader, v);
      value.set_additionalPRACH_TF_and_TFCS_CCCH_IEs(v);
   }

   reader.readSequenceEnd(*this);
}

void AdditionalPRACH_TF_and_TFCS_CCCH::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _additionalPRACH_TF_and_TFCS_CCCH_IEs_Type.write(writer, value.get_additionalPRACH_TF_and_TFCS_CCCH_IEs());

   writer.writeSequenceEnd();
}


void AICH_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ChannelisationCode256::ValueType v;
      _channelisationCode256_Type.read(reader, v);
      value.set_channelisationCode256(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _sttd_Indicator_Type.read(reader, v);
      value.set_sttd_Indicator(v);
   }
   {
      asn1::generated::AICH_TransmissionTiming::ValueType v;
      _aich_TransmissionTiming_Type.read(reader, v);
      value.set_aich_TransmissionTiming(v);
   }

   reader.readSequenceEnd(*this);
}

void AICH_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _channelisationCode256_Type.write(writer, value.get_channelisationCode256());
   _sttd_Indicator_Type.write(writer, value.get_sttd_Indicator());
   _aich_TransmissionTiming_Type.write(writer, value.get_aich_TransmissionTiming());

   writer.writeSequenceEnd();
}


void AllocationPeriodInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _allocationActivationTime_Type.read(reader, v);
      value.set_allocationActivationTime(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _allocationDuration_Type.read(reader, v);
      value.set_allocationDuration(v);
   }

   reader.readSequenceEnd(*this);
}

void AllocationPeriodInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _allocationActivationTime_Type.write(writer, value.get_allocationActivationTime());
   _allocationDuration_Type.write(writer, value.get_allocationDuration());

   writer.writeSequenceEnd();
}


void AP_Signature_VCAM::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::AP_Signature::ValueType v;
      _ap_Signature_Type.read(reader, v);
      value.set_ap_Signature(v);
   }
   {
      asn1::generated::AvailableAP_SubchannelList::ValueType v;
      _availableAP_SubchannelList_Type.read(reader, v);
      value.set_availableAP_SubchannelList(v);
   }

   reader.readSequenceEnd(*this);
}

void AP_Signature_VCAM::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ap_Signature_Type.write(writer, value.get_ap_Signature());
   _availableAP_SubchannelList_Type.write(writer, value.get_availableAP_SubchannelList());

   writer.writeSequenceEnd();
}


void ASCSetting_FDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::AccessServiceClass_FDD::ValueType v;
      _accessServiceClass_FDD_Type.read(reader, v);
      value.set_accessServiceClass_FDD(v);
   }

   reader.readSequenceEnd(*this);
}

void ASCSetting_FDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _accessServiceClass_FDD_Type.write(writer, value.get_accessServiceClass_FDD());

   writer.writeSequenceEnd();
}


void ASCSetting_TDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::AccessServiceClass_TDD::ValueType v;
      _accessServiceClass_TDD_Type.read(reader, v);
      value.set_accessServiceClass_TDD(v);
   }

   reader.readSequenceEnd(*this);
}

void ASCSetting_TDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _accessServiceClass_TDD_Type.write(writer, value.get_accessServiceClass_TDD());

   writer.writeSequenceEnd();
}


void ASCSetting_TDD_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::AccessServiceClass_TDD_r7::ValueType v;
      _accessServiceClass_TDD_Type.read(reader, v);
      value.set_accessServiceClass_TDD(v);
   }

   reader.readSequenceEnd(*this);
}

void ASCSetting_TDD_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _accessServiceClass_TDD_Type.write(writer, value.get_accessServiceClass_TDD());

   writer.writeSequenceEnd();
}


void ASCSetting_TDD_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::AccessServiceClass_TDD_LCR_r4::ValueType v;
      _accessServiceClass_TDD_LCR_Type.read(reader, v);
      value.set_accessServiceClass_TDD_LCR(v);
   }

   reader.readSequenceEnd(*this);
}

void ASCSetting_TDD_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _accessServiceClass_TDD_LCR_Type.write(writer, value.get_accessServiceClass_TDD_LCR());

   writer.writeSequenceEnd();
}


void AvailableMinimumSF_VCAM::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MinimumSpreadingFactor::ValueType v;
      _minimumSpreadingFactor_Type.read(reader, v);
      value.set_minimumSpreadingFactor(v);
   }
   {
      asn1::generated::NF_Max::ValueType v;
      _nf_Max_Type.read(reader, v);
      value.set_nf_Max(v);
   }
   {
      asn1::generated::MaxAvailablePCPCH_Number::ValueType v;
      _maxAvailablePCPCH_Number_Type.read(reader, v);
      value.set_maxAvailablePCPCH_Number(v);
   }
   {
      asn1::generated::AvailableAP_Signature_VCAMList::ValueType v;
      _availableAP_Signature_VCAMList_Type.read(reader, v);
      value.set_availableAP_Signature_VCAMList(v);
   }

   reader.readSequenceEnd(*this);
}

void AvailableMinimumSF_VCAM::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _minimumSpreadingFactor_Type.write(writer, value.get_minimumSpreadingFactor());
   _nf_Max_Type.write(writer, value.get_nf_Max());
   _maxAvailablePCPCH_Number_Type.write(writer, value.get_maxAvailablePCPCH_Number());
   _availableAP_Signature_VCAMList_Type.write(writer, value.get_availableAP_Signature_VCAMList());

   writer.writeSequenceEnd();
}


void CCTrCH_PowerControlInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_Identity::ValueType v;
      _tfcs_Identity_Type.read(reader, v);
      value.set_tfcs_Identity(v);
   }
   {
      asn1::generated::UL_DPCH_PowerControlInfo::ValueType v;
      _ul_DPCH_PowerControlInfo_Type.read(reader, v);
      value.set_ul_DPCH_PowerControlInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CCTrCH_PowerControlInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfcs_Identity_Type.write(writer, value.get_tfcs_Identity());
   _ul_DPCH_PowerControlInfo_Type.write(writer, value.get_ul_DPCH_PowerControlInfo());

   writer.writeSequenceEnd();
}


void CCTrCH_PowerControlInfo_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_Identity::ValueType v;
      _tfcs_Identity_Type.read(reader, v);
      value.set_tfcs_Identity(v);
   }
   {
      asn1::generated::UL_DPCH_PowerControlInfo_r4::ValueType v;
      _ul_DPCH_PowerControlInfo_Type.read(reader, v);
      value.set_ul_DPCH_PowerControlInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CCTrCH_PowerControlInfo_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfcs_Identity_Type.write(writer, value.get_tfcs_Identity());
   _ul_DPCH_PowerControlInfo_Type.write(writer, value.get_ul_DPCH_PowerControlInfo());

   writer.writeSequenceEnd();
}


void CCTrCH_PowerControlInfo_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_Identity::ValueType v;
      _tfcs_Identity_Type.read(reader, v);
      value.set_tfcs_Identity(v);
   }
   {
      asn1::generated::UL_DPCH_PowerControlInfo_r5::ValueType v;
      _ul_DPCH_PowerControlInfo_Type.read(reader, v);
      value.set_ul_DPCH_PowerControlInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CCTrCH_PowerControlInfo_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfcs_Identity_Type.write(writer, value.get_tfcs_Identity());
   _ul_DPCH_PowerControlInfo_Type.write(writer, value.get_ul_DPCH_PowerControlInfo());

   writer.writeSequenceEnd();
}


void CCTrCH_PowerControlInfo_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_Identity::ValueType v;
      _tfcs_Identity_Type.read(reader, v);
      value.set_tfcs_Identity(v);
   }
   {
      asn1::generated::UL_DPCH_PowerControlInfo_r7::ValueType v;
      _ul_DPCH_PowerControlInfo_Type.read(reader, v);
      value.set_ul_DPCH_PowerControlInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CCTrCH_PowerControlInfo_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfcs_Identity_Type.write(writer, value.get_tfcs_Identity());
   _ul_DPCH_PowerControlInfo_Type.write(writer, value.get_ul_DPCH_PowerControlInfo());

   writer.writeSequenceEnd();
}


void CellAndChannelIdentity::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::BurstType::ValueType v;
      _burstType_Type.read(reader, v);
      value.set_burstType(v);
   }
   {
      asn1::generated::MidambleShiftLong::ValueType v;
      _midambleShift_Type.read(reader, v);
      value.set_midambleShift(v);
   }
   {
      asn1::generated::TimeslotNumber::ValueType v;
      _timeslot_Type.read(reader, v);
      value.set_timeslot(v);
   }
   {
      asn1::generated::CellParametersID::ValueType v;
      _cellParametersID_Type.read(reader, v);
      value.set_cellParametersID(v);
   }

   reader.readSequenceEnd(*this);
}

void CellAndChannelIdentity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _burstType_Type.write(writer, value.get_burstType());
   _midambleShift_Type.write(writer, value.get_midambleShift());
   _timeslot_Type.write(writer, value.get_timeslot());
   _cellParametersID_Type.write(writer, value.get_cellParametersID());

   writer.writeSequenceEnd();
}


void ChannelAssignmentActive::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_notActive_Type)
   {
      asn1::NullType::ValueType v;
      _notActive_Type.read(reader, v);
      value.set_notActive(v);
   }
   else if (choosenType == &_isActive_Type)
   {
      asn1::generated::AvailableMinimumSF_ListVCAM::ValueType v;
      _isActive_Type.read(reader, v);
      value.set_isActive(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _notActive_Type.toString() + ", " + _isActive_Type.toString());
   }
}

void ChannelAssignmentActive::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_notActive_Choosen())
      _notActive_Type.write(writer, value.get_notActive());
   else if (value.has_isActive_Choosen())
      _isActive_Type.write(writer, value.get_isActive());
}


void ChannelReqParamsForUCSM::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::AvailableAP_SignatureList::ValueType v;
      _availableAP_SignatureList_Type.read(reader, v);
      value.set_availableAP_SignatureList(v);
   }
   {
      asn1::generated::AvailableAP_SubchannelList::ValueType v;
      _availableAP_SubchannelList_Type.read(reader, v);
      value.set_availableAP_SubchannelList(v);
   }

   reader.readSequenceEnd(*this);
}

void ChannelReqParamsForUCSM::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _availableAP_SignatureList_Type.write(writer, value.get_availableAP_SignatureList());
   _availableAP_SubchannelList_Type.write(writer, value.get_availableAP_SubchannelList());

   writer.writeSequenceEnd();
}


void CodeRange::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PDSCH_CodeMapList::ValueType v;
      _pdsch_CodeMapList_Type.read(reader, v);
      value.set_pdsch_CodeMapList(v);
   }

   reader.readSequenceEnd(*this);
}

void CodeRange::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pdsch_CodeMapList_Type.write(writer, value.get_pdsch_CodeMapList());

   writer.writeSequenceEnd();
}


void CommonTimeslotInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SecondInterleavingMode::ValueType v;
      _secondInterleavingMode_Type.read(reader, v);
      value.set_secondInterleavingMode(v);
   }
   {
      asn1::generated::TFCI_Coding::ValueType v;
      _tfci_Coding_Type.read(reader, v);
      value.set_tfci_Coding(v);
   }
   {
      asn1::generated::PuncturingLimit::ValueType v;
      _puncturingLimit_Type.read(reader, v);
      value.set_puncturingLimit(v);
   }
   {
      asn1::generated::RepetitionPeriodAndLength::ValueType v;
      _repetitionPeriodAndLength_Type.read(reader, v);
      value.set_repetitionPeriodAndLength(v);
   }

   reader.readSequenceEnd(*this);
}

void CommonTimeslotInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _secondInterleavingMode_Type.write(writer, value.get_secondInterleavingMode());
   _tfci_Coding_Type.write(writer, value.get_tfci_Coding());
   _puncturingLimit_Type.write(writer, value.get_puncturingLimit());
   _repetitionPeriodAndLength_Type.write(writer, value.get_repetitionPeriodAndLength());

   writer.writeSequenceEnd();
}


void CommonTimeslotInfoSCCPCH::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SecondInterleavingMode::ValueType v;
      _secondInterleavingMode_Type.read(reader, v);
      value.set_secondInterleavingMode(v);
   }
   {
      asn1::generated::TFCI_Coding::ValueType v;
      _tfci_Coding_Type.read(reader, v);
      value.set_tfci_Coding(v);
   }
   {
      asn1::generated::PuncturingLimit::ValueType v;
      _puncturingLimit_Type.read(reader, v);
      value.set_puncturingLimit(v);
   }
   {
      asn1::generated::RepetitionPeriodLengthAndOffset::ValueType v;
      _repetitionPeriodLengthAndOffset_Type.read(reader, v);
      value.set_repetitionPeriodLengthAndOffset(v);
   }

   reader.readSequenceEnd(*this);
}

void CommonTimeslotInfoSCCPCH::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _secondInterleavingMode_Type.write(writer, value.get_secondInterleavingMode());
   _tfci_Coding_Type.write(writer, value.get_tfci_Coding());
   _puncturingLimit_Type.write(writer, value.get_puncturingLimit());
   _repetitionPeriodLengthAndOffset_Type.write(writer, value.get_repetitionPeriodLengthAndOffset());

   writer.writeSequenceEnd();
}


void CPCH_PersistenceLevels::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CPCH_SetID::ValueType v;
      _cpch_SetID_Type.read(reader, v);
      value.set_cpch_SetID(v);
   }
   {
      asn1::generated::DynamicPersistenceLevelTF_List::ValueType v;
      _dynamicPersistenceLevelTF_List_Type.read(reader, v);
      value.set_dynamicPersistenceLevelTF_List(v);
   }

   reader.readSequenceEnd(*this);
}

void CPCH_PersistenceLevels::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cpch_SetID_Type.write(writer, value.get_cpch_SetID());
   _dynamicPersistenceLevelTF_List_Type.write(writer, value.get_dynamicPersistenceLevelTF_List());

   writer.writeSequenceEnd();
}


void CPCH_SetInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CPCH_SetID::ValueType v;
      _cpch_SetID_Type.read(reader, v);
      value.set_cpch_SetID(v);
   }
   {
      asn1::generated::TransportFormatSet::ValueType v;
      _transportFormatSet_Type.read(reader, v);
      value.set_transportFormatSet(v);
   }
   {
      asn1::generated::TFCS::ValueType v;
      _tfcs_Type.read(reader, v);
      value.set_tfcs(v);
   }
   {
      asn1::generated::AP_PreambleScramblingCode::ValueType v;
      _ap_PreambleScramblingCode_Type.read(reader, v);
      value.set_ap_PreambleScramblingCode(v);
   }
   {
      asn1::generated::AP_AICH_ChannelisationCode::ValueType v;
      _ap_AICH_ChannelisationCode_Type.read(reader, v);
      value.set_ap_AICH_ChannelisationCode(v);
   }
   {
      asn1::generated::CD_PreambleScramblingCode::ValueType v;
      _cd_PreambleScramblingCode_Type.read(reader, v);
      value.set_cd_PreambleScramblingCode(v);
   }
   {
      asn1::generated::CD_CA_ICH_ChannelisationCode::ValueType v;
      _cd_CA_ICH_ChannelisationCode_Type.read(reader, v);
      value.set_cd_CA_ICH_ChannelisationCode(v);
   }
   {
      asn1::generated::CD_AccessSlotSubchannelList::ValueType v;
      _cd_AccessSlotSubchannelList_Type.read(reader, v);
      value.set_cd_AccessSlotSubchannelList(v);
   }
   {
      asn1::generated::CD_SignatureCodeList::ValueType v;
      _cd_SignatureCodeList_Type.read(reader, v);
      value.set_cd_SignatureCodeList(v);
   }
   {
      asn1::generated::DeltaPp_m::ValueType v;
      _deltaPp_m_Type.read(reader, v);
      value.set_deltaPp_m(v);
   }
   {
      asn1::generated::UL_DPCCH_SlotFormat::ValueType v;
      _ul_DPCCH_SlotFormat_Type.read(reader, v);
      value.set_ul_DPCCH_SlotFormat(v);
   }
   {
      asn1::generated::N_StartMessage::ValueType v;
      _n_StartMessage_Type.read(reader, v);
      value.set_n_StartMessage(v);
   }
   {
      asn1::generated::N_EOT::ValueType v;
      _n_EOT_Type.read(reader, v);
      value.set_n_EOT(v);
   }
   {
      asn1::generated::ChannelAssignmentActive::ValueType v;
      _channelAssignmentActive_Type.read(reader, v);
      value.set_channelAssignmentActive(v);
   }
   {
      asn1::generated::CPCH_StatusIndicationMode::ValueType v;
      _cpch_StatusIndicationMode_Type.read(reader, v);
      value.set_cpch_StatusIndicationMode(v);
   }
   {
      asn1::generated::PCPCH_ChannelInfoList::ValueType v;
      _pcpch_ChannelInfoList_Type.read(reader, v);
      value.set_pcpch_ChannelInfoList(v);
   }

   reader.readSequenceEnd(*this);
}

void CPCH_SetInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cpch_SetID_Type.write(writer, value.get_cpch_SetID());
   _transportFormatSet_Type.write(writer, value.get_transportFormatSet());
   _tfcs_Type.write(writer, value.get_tfcs());
   _ap_PreambleScramblingCode_Type.write(writer, value.get_ap_PreambleScramblingCode());
   _ap_AICH_ChannelisationCode_Type.write(writer, value.get_ap_AICH_ChannelisationCode());
   _cd_PreambleScramblingCode_Type.write(writer, value.get_cd_PreambleScramblingCode());
   _cd_CA_ICH_ChannelisationCode_Type.write(writer, value.get_cd_CA_ICH_ChannelisationCode());
   _cd_AccessSlotSubchannelList_Type.write(writer, value.get_cd_AccessSlotSubchannelList());
   _cd_SignatureCodeList_Type.write(writer, value.get_cd_SignatureCodeList());
   _deltaPp_m_Type.write(writer, value.get_deltaPp_m());
   _ul_DPCCH_SlotFormat_Type.write(writer, value.get_ul_DPCCH_SlotFormat());
   _n_StartMessage_Type.write(writer, value.get_n_StartMessage());
   _n_EOT_Type.write(writer, value.get_n_EOT());
   _channelAssignmentActive_Type.write(writer, value.get_channelAssignmentActive());
   _cpch_StatusIndicationMode_Type.write(writer, value.get_cpch_StatusIndicationMode());
   _pcpch_ChannelInfoList_Type.write(writer, value.get_pcpch_ChannelInfoList());

   writer.writeSequenceEnd();
}


void DL_CCTrCh::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_IdentityPlain::ValueType v;
      _tfcs_ID_Type.read(reader, v);
      value.set_tfcs_ID(v);
   }
   {
      asn1::generated::TimeInfo::ValueType v;
      _timeInfo_Type.read(reader, v);
      value.set_timeInfo(v);
   }
   {
      asn1::generated::CommonTimeslotInfo::ValueType v;
      _commonTimeslotInfo_Type.read(reader, v);
      value.set_commonTimeslotInfo(v);
   }
   {
      asn1::generated::DownlinkTimeslotsCodes::ValueType v;
      _dl_CCTrCH_TimeslotsCodes_Type.read(reader, v);
      value.set_dl_CCTrCH_TimeslotsCodes(v);
   }
   {
      asn1::generated::UL_CCTrChTPCList::ValueType v;
      _ul_CCTrChTPCList_Type.read(reader, v);
      value.set_ul_CCTrChTPCList(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_CCTrCh::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfcs_ID_Type.write(writer, value.get_tfcs_ID());
   _timeInfo_Type.write(writer, value.get_timeInfo());
   _commonTimeslotInfo_Type.write(writer, value.get_commonTimeslotInfo());
   _dl_CCTrCH_TimeslotsCodes_Type.write(writer, value.get_dl_CCTrCH_TimeslotsCodes());
   _ul_CCTrChTPCList_Type.write(writer, value.get_ul_CCTrChTPCList());

   writer.writeSequenceEnd();
}


void DL_CCTrCh_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_IdentityPlain::ValueType v;
      _tfcs_ID_Type.read(reader, v);
      value.set_tfcs_ID(v);
   }
   {
      asn1::generated::TimeInfo::ValueType v;
      _timeInfo_Type.read(reader, v);
      value.set_timeInfo(v);
   }
   {
      asn1::generated::CommonTimeslotInfo::ValueType v;
      _commonTimeslotInfo_Type.read(reader, v);
      value.set_commonTimeslotInfo(v);
   }
   {
      _INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_dl-CCTrCH-TimeslotsCodes_INTERNAL_asn1__generated__DownlinkTimeslotsCodes_tdd128_INTERNAL__SequenceType_dl-CCTrCH-TimeslotsCodes_INTERNAL_asn1__generated__DownlinkTimeslotsCodes_LCR_r4::ValueType v;
      _tddOption_Type.read(reader, v);
      value.set_tddOption(v);
   }
   {
      asn1::generated::UL_CCTrChTPCList::ValueType v;
      _ul_CCTrChTPCList_Type.read(reader, v);
      value.set_ul_CCTrChTPCList(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_CCTrCh_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfcs_ID_Type.write(writer, value.get_tfcs_ID());
   _timeInfo_Type.write(writer, value.get_timeInfo());
   _commonTimeslotInfo_Type.write(writer, value.get_commonTimeslotInfo());
   _tddOption_Type.write(writer, value.get_tddOption());
   _ul_CCTrChTPCList_Type.write(writer, value.get_ul_CCTrChTPCList());

   writer.writeSequenceEnd();
}


void DL_CCTrCh_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_IdentityPlain::ValueType v;
      _tfcs_ID_Type.read(reader, v);
      value.set_tfcs_ID(v);
   }
   {
      asn1::generated::TimeInfo::ValueType v;
      _timeInfo_Type.read(reader, v);
      value.set_timeInfo(v);
   }
   {
      asn1::generated::CommonTimeslotInfo::ValueType v;
      _commonTimeslotInfo_Type.read(reader, v);
      value.set_commonTimeslotInfo(v);
   }
   {
      _INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_dl-CCTrCH-TimeslotsCodes_INTERNAL_asn1__generated__DownlinkTimeslotsCodes_tdd768_INTERNAL__SequenceType_dl-CCTrCH-TimeslotsCodes_INTERNAL_asn1__generated__DownlinkTimeslotsCodes_VHCR_tdd128_INTERNAL__SequenceType_dl-CCTrCH-TimeslotsCodes_INTERNAL_asn1__generated__DownlinkTimeslotsCodes_LCR_r4::ValueType v;
      _tddOption_Type.read(reader, v);
      value.set_tddOption(v);
   }
   {
      asn1::generated::UL_CCTrChTPCList::ValueType v;
      _ul_CCTrChTPCList_Type.read(reader, v);
      value.set_ul_CCTrChTPCList(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_CCTrCh_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfcs_ID_Type.write(writer, value.get_tfcs_ID());
   _timeInfo_Type.write(writer, value.get_timeInfo());
   _commonTimeslotInfo_Type.write(writer, value.get_commonTimeslotInfo());
   _tddOption_Type.write(writer, value.get_tddOption());
   _ul_CCTrChTPCList_Type.write(writer, value.get_ul_CCTrChTPCList());

   writer.writeSequenceEnd();
}


void DL_ChannelisationCode::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SecondaryScramblingCode::ValueType v;
      _secondaryScramblingCode_Type.read(reader, v);
      value.set_secondaryScramblingCode(v);
   }
   {
      asn1::generated::SF512_AndCodeNumber::ValueType v;
      _sf_AndCodeNumber_Type.read(reader, v);
      value.set_sf_AndCodeNumber(v);
   }
   {
      asn1::generated::ScramblingCodeChange::ValueType v;
      _scramblingCodeChange_Type.read(reader, v);
      value.set_scramblingCodeChange(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_ChannelisationCode::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _secondaryScramblingCode_Type.write(writer, value.get_secondaryScramblingCode());
   _sf_AndCodeNumber_Type.write(writer, value.get_sf_AndCodeNumber());
   _scramblingCodeChange_Type.write(writer, value.get_scramblingCodeChange());

   writer.writeSequenceEnd();
}


void DL_CommonInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_DPCH_InfoCommon::ValueType v;
      _dl_DPCH_InfoCommon_Type.read(reader, v);
      value.set_dl_DPCH_InfoCommon(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_defaultDPCH-OffsetValue_INTERNAL_asn1__generated__DefaultDPCH_OffsetValueFDD_dpch-CompressedModeInfo_INTERNAL_asn1__generated__DPCH_CompressedModeInfo_tx-DiversityMode_INTERNAL_asn1__generated__TX_DiversityMode_dummy_INTERNAL_asn1__generated__SSDT_Information_tdd_INTERNAL__SequenceType_defaultDPCH-OffsetValue_INTERNAL_asn1__generated__DefaultDPCH_OffsetValueTDD::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_CommonInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_DPCH_InfoCommon_Type.write(writer, value.get_dl_DPCH_InfoCommon());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void DL_CommonInformation_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_DPCH_InfoCommon_r4::ValueType v;
      _dl_DPCH_InfoCommon_Type.read(reader, v);
      value.set_dl_DPCH_InfoCommon(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_defaultDPCH-OffsetValue_INTERNAL_asn1__generated__DefaultDPCH_OffsetValueFDD_dpch-CompressedModeInfo_INTERNAL_asn1__generated__DPCH_CompressedModeInfo_tx-DiversityMode_INTERNAL_asn1__generated__TX_DiversityMode_dummy_INTERNAL_asn1__generated__SSDT_Information_r4_tdd_INTERNAL__SequenceType_tddOption_INTERNAL__ChoiceType_tdd384_INTERNAL_asn1__NullType_tdd128_INTERNAL__SequenceType_tstd-Indicator_INTERNAL_asn1__BooleanType_defaultDPCH-OffsetValue_INTERNAL_asn1__generated__DefaultDPCH_OffsetValueTDD::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_CommonInformation_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_DPCH_InfoCommon_Type.write(writer, value.get_dl_DPCH_InfoCommon());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void DL_CommonInformation_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_DPCH_InfoCommon_r4::ValueType v;
      _dl_DPCH_InfoCommon_Type.read(reader, v);
      value.set_dl_DPCH_InfoCommon(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_defaultDPCH-OffsetValue_INTERNAL_asn1__generated__DefaultDPCH_OffsetValueFDD_dpch-CompressedModeInfo_INTERNAL_asn1__generated__DPCH_CompressedModeInfo_tx-DiversityMode_INTERNAL_asn1__generated__TX_DiversityMode_dummy_INTERNAL_asn1__generated__SSDT_Information_r4_tdd_INTERNAL__SequenceType_tddOption_INTERNAL__ChoiceType_tdd384_INTERNAL_asn1__NullType_tdd128_INTERNAL__SequenceType_tstd-Indicator_INTERNAL_asn1__BooleanType_defaultDPCH-OffsetValue_INTERNAL_asn1__generated__DefaultDPCH_OffsetValueTDD::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _mac_hsResetIndicator_Type.read(reader, v);
      value.set_mac_hsResetIndicator(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_CommonInformation_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_DPCH_InfoCommon_Type.write(writer, value.get_dl_DPCH_InfoCommon());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _mac_hsResetIndicator_Type.write(writer, value.get_mac_hsResetIndicator());

   writer.writeSequenceEnd();
}


void DL_CommonInformation_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_dl-DPCH-InfoCommon_INTERNAL_asn1__generated__DL_DPCH_InfoCommon_r6_dl-FDPCH-InfoCommon_INTERNAL_asn1__generated__DL_FDPCH_InfoCommon_r6::ValueType v;
      _dl_dpchInfoCommon_Type.read(reader, v);
      value.set_dl_dpchInfoCommon(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_defaultDPCH-OffsetValue_INTERNAL_asn1__generated__DefaultDPCH_OffsetValueFDD_dpch-CompressedModeInfo_INTERNAL_asn1__generated__DPCH_CompressedModeInfo_tx-DiversityMode_INTERNAL_asn1__generated__TX_DiversityMode_tdd_INTERNAL__SequenceType_tddOption_INTERNAL__ChoiceType_tdd384_INTERNAL_asn1__NullType_tdd128_INTERNAL__SequenceType_tstd-Indicator_INTERNAL_asn1__BooleanType_defaultDPCH-OffsetValue_INTERNAL_asn1__generated__DefaultDPCH_OffsetValueTDD::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _mac_hsResetIndicator_Type.read(reader, v);
      value.set_mac_hsResetIndicator(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _postVerificationPeriod_Type.read(reader, v);
      value.set_postVerificationPeriod(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_CommonInformation_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_dpchInfoCommon_Type.write(writer, value.get_dl_dpchInfoCommon());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _mac_hsResetIndicator_Type.write(writer, value.get_mac_hsResetIndicator());
   _postVerificationPeriod_Type.write(writer, value.get_postVerificationPeriod());

   writer.writeSequenceEnd();
}


void DL_CommonInformation_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_dl-DPCH-InfoCommon_INTERNAL_asn1__generated__DL_DPCH_InfoCommon_r6_dl-FDPCH-InfoCommon_INTERNAL_asn1__generated__DL_FDPCH_InfoCommon_r6::ValueType v;
      _dl_dpchInfoCommon_Type.read(reader, v);
      value.set_dl_dpchInfoCommon(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_defaultDPCH-OffsetValue_INTERNAL_asn1__generated__DefaultDPCH_OffsetValueFDD_dpch-CompressedModeInfo_INTERNAL_asn1__generated__DPCH_CompressedModeInfo_tx-DiversityMode_INTERNAL_asn1__generated__TX_DiversityMode_tdd_INTERNAL__SequenceType_tddOption_INTERNAL__ChoiceType_tdd384_INTERNAL_asn1__NullType_tdd768_INTERNAL_asn1__NullType_tdd128_INTERNAL__SequenceType_tstd-Indicator_INTERNAL_asn1__BooleanType_defaultDPCH-OffsetValue_INTERNAL_asn1__generated__DefaultDPCH_OffsetValueTDD::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _mac_hsResetIndicator_Type.read(reader, v);
      value.set_mac_hsResetIndicator(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _postVerificationPeriod_Type.read(reader, v);
      value.set_postVerificationPeriod(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_CommonInformation_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_dpchInfoCommon_Type.write(writer, value.get_dl_dpchInfoCommon());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _mac_hsResetIndicator_Type.write(writer, value.get_mac_hsResetIndicator());
   _postVerificationPeriod_Type.write(writer, value.get_postVerificationPeriod());

   writer.writeSequenceEnd();
}


void DL_CommonInformationPost::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_DPCH_InfoCommonPost::ValueType v;
      _dl_DPCH_InfoCommon_Type.read(reader, v);
      value.set_dl_DPCH_InfoCommon(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_CommonInformationPost::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_DPCH_InfoCommon_Type.write(writer, value.get_dl_DPCH_InfoCommon());

   writer.writeSequenceEnd();
}


void DL_CommonInformationPredef::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_DPCH_InfoCommonPredef::ValueType v;
      _dl_DPCH_InfoCommon_Type.read(reader, v);
      value.set_dl_DPCH_InfoCommon(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_CommonInformationPredef::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_DPCH_InfoCommon_Type.write(writer, value.get_dl_DPCH_InfoCommon());

   writer.writeSequenceEnd();
}


void DL_DPCH_InfoCommon::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_maintain_INTERNAL_asn1__NullType_initialise_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__Cfntargetsfnframeoffset::ValueType v;
      _cfnHandling_Type.read(reader, v);
      value.set_cfnHandling(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dl-DPCH-PowerControlInfo_INTERNAL_asn1__generated__DL_DPCH_PowerControlInfo_powerOffsetPilot-pdpdch_INTERNAL_asn1__generated__PowerOffsetPilot_pdpdch_dl-rate-matching-restriction_INTERNAL_asn1__generated__Dl_rate_matching_restriction_spreadingFactorAndPilot_INTERNAL_asn1__generated__SF512_AndPilot_positionFixedOrFlexible_INTERNAL_asn1__generated__PositionFixedOrFlexible_tfci-Existence_INTERNAL_asn1__BooleanType_tdd_INTERNAL__SequenceType_dl-DPCH-PowerControlInfo_INTERNAL_asn1__generated__DL_DPCH_PowerControlInfo::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_DPCH_InfoCommon::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cfnHandling_Type.write(writer, value.get_cfnHandling());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void DL_DPCH_InfoCommon_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_maintain_INTERNAL_asn1__NullType_initialise_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__Cfntargetsfnframeoffset::ValueType v;
      _cfnHandling_Type.read(reader, v);
      value.set_cfnHandling(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dl-DPCH-PowerControlInfo_INTERNAL_asn1__generated__DL_DPCH_PowerControlInfo_powerOffsetPilot-pdpdch_INTERNAL_asn1__generated__PowerOffsetPilot_pdpdch_dl-rate-matching-restriction_INTERNAL_asn1__generated__Dl_rate_matching_restriction_spreadingFactorAndPilot_INTERNAL_asn1__generated__SF512_AndPilot_positionFixedOrFlexible_INTERNAL_asn1__generated__PositionFixedOrFlexible_tfci-Existence_INTERNAL_asn1__BooleanType_tdd_INTERNAL__SequenceType_dl-DPCH-PowerControlInfo_INTERNAL_asn1__generated__DL_DPCH_PowerControlInfo::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::MAC_d_HFN_initial_value::ValueType v;
      _mac_d_HFN_initial_value_Type.read(reader, v);
      value.set_mac_d_HFN_initial_value(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_DPCH_InfoCommon_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cfnHandling_Type.write(writer, value.get_cfnHandling());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _mac_d_HFN_initial_value_Type.write(writer, value.get_mac_d_HFN_initial_value());

   writer.writeSequenceEnd();
}


void DL_DPCH_InfoCommon_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_maintain_INTERNAL__SequenceType_timingmaintainedsynchind_INTERNAL_asn1__generated__TimingMaintainedSynchInd_initialise_INTERNAL_asn1__NullType::ValueType v;
      _cfnHandling_Type.read(reader, v);
      value.set_cfnHandling(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dl-DPCH-PowerControlInfo_INTERNAL_asn1__generated__DL_DPCH_PowerControlInfo_powerOffsetPilot-pdpdch_INTERNAL_asn1__generated__PowerOffsetPilot_pdpdch_dl-rate-matching-restriction_INTERNAL_asn1__generated__Dl_rate_matching_restriction_spreadingFactorAndPilot_INTERNAL_asn1__generated__SF512_AndPilot_positionFixedOrFlexible_INTERNAL_asn1__generated__PositionFixedOrFlexible_tfci-Existence_INTERNAL_asn1__BooleanType_tdd_INTERNAL__SequenceType_dl-DPCH-PowerControlInfo_INTERNAL_asn1__generated__DL_DPCH_PowerControlInfo::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::MAC_d_HFN_initial_value::ValueType v;
      _mac_d_HFN_initial_value_Type.read(reader, v);
      value.set_mac_d_HFN_initial_value(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_DPCH_InfoCommon_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cfnHandling_Type.write(writer, value.get_cfnHandling());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _mac_d_HFN_initial_value_Type.write(writer, value.get_mac_d_HFN_initial_value());

   writer.writeSequenceEnd();
}


void DL_DPCH_InfoCommonPost::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_DPCH_PowerControlInfo::ValueType v;
      _dl_DPCH_PowerControlInfo_Type.read(reader, v);
      value.set_dl_DPCH_PowerControlInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_DPCH_InfoCommonPost::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_DPCH_PowerControlInfo_Type.write(writer, value.get_dl_DPCH_PowerControlInfo());

   writer.writeSequenceEnd();
}


void DL_DPCH_InfoCommonPredef::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_spreadingFactorAndPilot_INTERNAL_asn1__generated__SF512_AndPilot_positionFixedOrFlexible_INTERNAL_asn1__generated__PositionFixedOrFlexible_tfci-Existence_INTERNAL_asn1__BooleanType_tdd_INTERNAL__SequenceType_commonTimeslotInfo_INTERNAL_asn1__generated__CommonTimeslotInfo::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_DPCH_InfoCommonPredef::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void DL-DPCH-InfoPerRL::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_fdd_Type)
   {
      _INTERNAL__SequenceType_pCPICH-UsageForChannelEst_INTERNAL_asn1__generated__PCPICH_UsageForChannelEst_dpch-FrameOffset_INTERNAL_asn1__generated__DPCH_FrameOffset_secondaryCPICH-Info_INTERNAL_asn1__generated__SecondaryCPICH_Info_dl-ChannelisationCodeList_INTERNAL_asn1__generated__DL_ChannelisationCodeList_tpc-CombinationIndex_INTERNAL_asn1__generated__TPC_CombinationIndex_dummy_INTERNAL_asn1__generated__SSDT_CellIdentity_closedLoopTimingAdjMode_INTERNAL_asn1__generated__ClosedLoopTimingAdjMode::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   else if (choosenType == &_tdd_Type)
   {
      _INTERNAL__SequenceType_dl-CCTrChListToEstablish_INTERNAL_asn1__generated__DL_CCTrChList_dl-CCTrChListToRemove_INTERNAL_asn1__generated__DL_CCTrChListToRemove::ValueType v;
      _tdd_Type.read(reader, v);
      value.set_tdd(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _fdd_Type.toString() + ", " + _tdd_Type.toString());
   }
}

void DL-DPCH-InfoPerRL::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_fdd_Choosen())
      _fdd_Type.write(writer, value.get_fdd());
   else if (value.has_tdd_Choosen())
      _tdd_Type.write(writer, value.get_tdd());
}


void DL-DPCH-InfoPerRL-r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_fdd_Type)
   {
      _INTERNAL__SequenceType_pCPICH-UsageForChannelEst_INTERNAL_asn1__generated__PCPICH_UsageForChannelEst_dpch-FrameOffset_INTERNAL_asn1__generated__DPCH_FrameOffset_secondaryCPICH-Info_INTERNAL_asn1__generated__SecondaryCPICH_Info_dl-ChannelisationCodeList_INTERNAL_asn1__generated__DL_ChannelisationCodeList_tpc-CombinationIndex_INTERNAL_asn1__generated__TPC_CombinationIndex_dummy_INTERNAL_asn1__generated__SSDT_CellIdentity_closedLoopTimingAdjMode_INTERNAL_asn1__generated__ClosedLoopTimingAdjMode::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   else if (choosenType == &_tdd_Type)
   {
      _INTERNAL__SequenceType_dl-CCTrChListToEstablish_INTERNAL_asn1__generated__DL_CCTrChList_r4_dl-CCTrChListToRemove_INTERNAL_asn1__generated__DL_CCTrChListToRemove::ValueType v;
      _tdd_Type.read(reader, v);
      value.set_tdd(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _fdd_Type.toString() + ", " + _tdd_Type.toString());
   }
}

void DL-DPCH-InfoPerRL-r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_fdd_Choosen())
      _fdd_Type.write(writer, value.get_fdd());
   else if (value.has_tdd_Choosen())
      _tdd_Type.write(writer, value.get_tdd());
}


void DL-DPCH-InfoPerRL-r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_fdd_Type)
   {
      _INTERNAL__SequenceType_pCPICH-UsageForChannelEst_INTERNAL_asn1__generated__PCPICH_UsageForChannelEst_dpch-FrameOffset_INTERNAL_asn1__generated__DPCH_FrameOffset_secondaryCPICH-Info_INTERNAL_asn1__generated__SecondaryCPICH_Info_dl-ChannelisationCodeList_INTERNAL_asn1__generated__DL_ChannelisationCodeList_tpc-CombinationIndex_INTERNAL_asn1__generated__TPC_CombinationIndex_powerOffsetTPC-pdpdch_INTERNAL_asn1__generated__PowerOffsetTPC_pdpdch_dummy_INTERNAL_asn1__generated__SSDT_CellIdentity_closedLoopTimingAdjMode_INTERNAL_asn1__generated__ClosedLoopTimingAdjMode::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   else if (choosenType == &_tdd_Type)
   {
      _INTERNAL__SequenceType_dl-CCTrChListToEstablish_INTERNAL_asn1__generated__DL_CCTrChList_r4_dl-CCTrChListToRemove_INTERNAL_asn1__generated__DL_CCTrChListToRemove::ValueType v;
      _tdd_Type.read(reader, v);
      value.set_tdd(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _fdd_Type.toString() + ", " + _tdd_Type.toString());
   }
}

void DL-DPCH-InfoPerRL-r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_fdd_Choosen())
      _fdd_Type.write(writer, value.get_fdd());
   else if (value.has_tdd_Choosen())
      _tdd_Type.write(writer, value.get_tdd());
}


void DL-DPCH-InfoPerRL-r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_fdd_Type)
   {
      _INTERNAL__SequenceType_pCPICH-UsageForChannelEst_INTERNAL_asn1__generated__PCPICH_UsageForChannelEst_dpch-FrameOffset_INTERNAL_asn1__generated__DPCH_FrameOffset_secondaryCPICH-Info_INTERNAL_asn1__generated__SecondaryCPICH_Info_dl-ChannelisationCodeList_INTERNAL_asn1__generated__DL_ChannelisationCodeList_tpc-CombinationIndex_INTERNAL_asn1__generated__TPC_CombinationIndex_powerOffsetTPC-pdpdch_INTERNAL_asn1__generated__PowerOffsetTPC_pdpdch_closedLoopTimingAdjMode_INTERNAL_asn1__generated__ClosedLoopTimingAdjMode::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   else if (choosenType == &_tdd_Type)
   {
      _INTERNAL__SequenceType_dl-CCTrChListToEstablish_INTERNAL_asn1__generated__DL_CCTrChList_r4_dl-CCTrChListToRemove_INTERNAL_asn1__generated__DL_CCTrChListToRemove::ValueType v;
      _tdd_Type.read(reader, v);
      value.set_tdd(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _fdd_Type.toString() + ", " + _tdd_Type.toString());
   }
}

void DL-DPCH-InfoPerRL-r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_fdd_Choosen())
      _fdd_Type.write(writer, value.get_fdd());
   else if (value.has_tdd_Choosen())
      _tdd_Type.write(writer, value.get_tdd());
}


void DL-DPCH-InfoPerRL-r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_fdd_Type)
   {
      _INTERNAL__SequenceType_pCPICH-UsageForChannelEst_INTERNAL_asn1__generated__PCPICH_UsageForChannelEst_dpch-FrameOffset_INTERNAL_asn1__generated__DPCH_FrameOffset_secondaryCPICH-Info_INTERNAL_asn1__generated__SecondaryCPICH_Info_dl-ChannelisationCodeList_INTERNAL_asn1__generated__DL_ChannelisationCodeList_tpc-CombinationIndex_INTERNAL_asn1__generated__TPC_CombinationIndex_powerOffsetTPC-pdpdch_INTERNAL_asn1__generated__PowerOffsetTPC_pdpdch_closedLoopTimingAdjMode_INTERNAL_asn1__generated__ClosedLoopTimingAdjMode::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   else if (choosenType == &_tdd_Type)
   {
      _INTERNAL__SequenceType_dl-CCTrChListToEstablish_INTERNAL_asn1__generated__DL_CCTrChList_r7_dl-CCTrChListToRemove_INTERNAL_asn1__generated__DL_CCTrChListToRemove::ValueType v;
      _tdd_Type.read(reader, v);
      value.set_tdd(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _fdd_Type.toString() + ", " + _tdd_Type.toString());
   }
}

void DL-DPCH-InfoPerRL-r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_fdd_Choosen())
      _fdd_Type.write(writer, value.get_fdd());
   else if (value.has_tdd_Choosen())
      _tdd_Type.write(writer, value.get_tdd());
}


void DL_FDPCH_InfoPerRL_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PCPICH_UsageForChannelEst::ValueType v;
      _pCPICH_UsageForChannelEst_Type.read(reader, v);
      value.set_pCPICH_UsageForChannelEst(v);
   }
   {
      asn1::generated::DPCH_FrameOffset::ValueType v;
      _fdpch_FrameOffset_Type.read(reader, v);
      value.set_fdpch_FrameOffset(v);
   }
   {
      asn1::generated::SecondaryCPICH_Info::ValueType v;
      _secondaryCPICH_Info_Type.read(reader, v);
      value.set_secondaryCPICH_Info(v);
   }
   {
      asn1::generated::SecondaryScramblingCode::ValueType v;
      _secondaryScramblingCode_Type.read(reader, v);
      value.set_secondaryScramblingCode(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _dl_ChannelisationCode_Type.read(reader, v);
      value.set_dl_ChannelisationCode(v);
   }
   {
      asn1::generated::TPC_CombinationIndex::ValueType v;
      _tpc_CombinationIndex_Type.read(reader, v);
      value.set_tpc_CombinationIndex(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_FDPCH_InfoPerRL_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pCPICH_UsageForChannelEst_Type.write(writer, value.get_pCPICH_UsageForChannelEst());
   _fdpch_FrameOffset_Type.write(writer, value.get_fdpch_FrameOffset());
   _secondaryCPICH_Info_Type.write(writer, value.get_secondaryCPICH_Info());
   _secondaryScramblingCode_Type.write(writer, value.get_secondaryScramblingCode());
   _dl_ChannelisationCode_Type.write(writer, value.get_dl_ChannelisationCode());
   _tpc_CombinationIndex_Type.write(writer, value.get_tpc_CombinationIndex());

   writer.writeSequenceEnd();
}


void DL_DPCH_InfoPerRL_PostFDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PCPICH_UsageForChannelEst::ValueType v;
      _pCPICH_UsageForChannelEst_Type.read(reader, v);
      value.set_pCPICH_UsageForChannelEst(v);
   }
   {
      asn1::generated::DL_ChannelisationCode::ValueType v;
      _dl_ChannelisationCode_Type.read(reader, v);
      value.set_dl_ChannelisationCode(v);
   }
   {
      asn1::generated::TPC_CombinationIndex::ValueType v;
      _tpc_CombinationIndex_Type.read(reader, v);
      value.set_tpc_CombinationIndex(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_DPCH_InfoPerRL_PostFDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pCPICH_UsageForChannelEst_Type.write(writer, value.get_pCPICH_UsageForChannelEst());
   _dl_ChannelisationCode_Type.write(writer, value.get_dl_ChannelisationCode());
   _tpc_CombinationIndex_Type.write(writer, value.get_tpc_CombinationIndex());

   writer.writeSequenceEnd();
}


void DL_DPCH_InfoPerRL_PostTDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DownlinkTimeslotsCodes::ValueType v;
      _dl_DPCH_TimeslotsCodes_Type.read(reader, v);
      value.set_dl_DPCH_TimeslotsCodes(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_DPCH_InfoPerRL_PostTDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_DPCH_TimeslotsCodes_Type.write(writer, value.get_dl_DPCH_TimeslotsCodes());

   writer.writeSequenceEnd();
}


void DL_DPCH_InfoPerRL_PostTDD_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DownlinkTimeslotsCodes_LCR_r4::ValueType v;
      _dl_CCTrCH_TimeslotsCodes_Type.read(reader, v);
      value.set_dl_CCTrCH_TimeslotsCodes(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_DPCH_InfoPerRL_PostTDD_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_CCTrCH_TimeslotsCodes_Type.write(writer, value.get_dl_CCTrCH_TimeslotsCodes());

   writer.writeSequenceEnd();
}


void DL_DPCH_PowerControlInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dpc-Mode_INTERNAL_asn1__generated__DPC_Mode_tdd_INTERNAL__SequenceType_tpc-StepSizeTDD_INTERNAL_asn1__generated__TPC_StepSizeTDD::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_DPCH_PowerControlInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void DL_FDPCH_InfoCommon_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_maintain_INTERNAL__SequenceType_timingmaintainedsynchind_INTERNAL_asn1__generated__TimingMaintainedSynchInd_initialise_INTERNAL_asn1__NullType::ValueType v;
      _cfnHandling_Type.read(reader, v);
      value.set_cfnHandling(v);
   }
   {
      asn1::generated::DL_DPCH_PowerControlInfo::ValueType v;
      _dl_FDPCH_PowerControlInfo_Type.read(reader, v);
      value.set_dl_FDPCH_PowerControlInfo(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _dl_FDPCH_TPCcommandErrorRate_Type.read(reader, v);
      value.set_dl_FDPCH_TPCcommandErrorRate(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_FDPCH_InfoCommon_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cfnHandling_Type.write(writer, value.get_cfnHandling());
   _dl_FDPCH_PowerControlInfo_Type.write(writer, value.get_dl_FDPCH_PowerControlInfo());
   _dl_FDPCH_TPCcommandErrorRate_Type.write(writer, value.get_dl_FDPCH_TPCcommandErrorRate());

   writer.writeSequenceEnd();
}


void DL_HSPDSCH_Information::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::HS_SCCH_Info::ValueType v;
      _hs_scch_Info_Type.read(reader, v);
      value.set_hs_scch_Info(v);
   }
   {
      asn1::generated::Measurement_Feedback_Info::ValueType v;
      _measurement_feedback_Info_Type.read(reader, v);
      value.set_measurement_feedback_Info(v);
   }
   {
      _INTERNAL__ChoiceType_tdd_INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_dl-HSPDSCH-TS-Configuration_INTERNAL_asn1__generated__DL_HSPDSCH_TS_Configuration_tdd128_INTERNAL__SequenceType_hs-PDSCH-Midamble-Configuration-tdd128_INTERNAL_asn1__generated__HS_PDSCH_Midamble_Configuration_TDD128_fdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_HSPDSCH_Information::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _hs_scch_Info_Type.write(writer, value.get_hs_scch_Info());
   _measurement_feedback_Info_Type.write(writer, value.get_measurement_feedback_Info());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void DL_HSPDSCH_Information_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::HS_SCCH_Info_r6::ValueType v;
      _hs_scch_Info_Type.read(reader, v);
      value.set_hs_scch_Info(v);
   }
   {
      asn1::generated::Measurement_Feedback_Info::ValueType v;
      _measurement_feedback_Info_Type.read(reader, v);
      value.set_measurement_feedback_Info(v);
   }
   {
      _INTERNAL__ChoiceType_tdd_INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_dl-HSPDSCH-TS-Configuration_INTERNAL_asn1__generated__DL_HSPDSCH_TS_Configuration_tdd128_INTERNAL__SequenceType_hs-PDSCH-Midamble-Configuration-tdd128_INTERNAL_asn1__generated__HS_PDSCH_Midamble_Configuration_TDD128_fdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_HSPDSCH_Information_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _hs_scch_Info_Type.write(writer, value.get_hs_scch_Info());
   _measurement_feedback_Info_Type.write(writer, value.get_measurement_feedback_Info());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void DL_HSPDSCH_Information_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::HS_SCCH_Info_r7::ValueType v;
      _hs_scch_Info_Type.read(reader, v);
      value.set_hs_scch_Info(v);
   }
   {
      asn1::generated::Measurement_Feedback_Info::ValueType v;
      _measurement_feedback_Info_Type.read(reader, v);
      value.set_measurement_feedback_Info(v);
   }
   {
      _INTERNAL__ChoiceType_tdd_INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_dl-HSPDSCH-TS-Configuration_INTERNAL_asn1__generated__DL_HSPDSCH_TS_Configuration_tdd768_INTERNAL__SequenceType_dl-HSPDSCH-TS-Configuration_INTERNAL_asn1__generated__DL_HSPDSCH_TS_Configuration_VHCR_tdd128_INTERNAL__SequenceType_hs-PDSCH-Midamble-Configuration-tdd128_INTERNAL_asn1__generated__HS_PDSCH_Midamble_Configuration_TDD128_fdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_HSPDSCH_Information_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _hs_scch_Info_Type.write(writer, value.get_hs_scch_Info());
   _measurement_feedback_Info_Type.write(writer, value.get_measurement_feedback_Info());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void DL_InformationPerRL::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-Info_INTERNAL_asn1__generated__PrimaryCPICH_Info_dummy1_INTERNAL_asn1__generated__PDSCH_SHO_DCH_Info_dummy2_INTERNAL_asn1__generated__PDSCH_CodeMapping_tdd_INTERNAL_asn1__generated__PrimaryCCPCH_Info::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::DL_DPCH_InfoPerRL::ValueType v;
      _dl_DPCH_InfoPerRL_Type.read(reader, v);
      value.set_dl_DPCH_InfoPerRL(v);
   }
   {
      asn1::generated::SCCPCH_InfoForFACH::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_InformationPerRL::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _dl_DPCH_InfoPerRL_Type.write(writer, value.get_dl_DPCH_InfoPerRL());
   _dummy_Type.write(writer, value.get_dummy());

   writer.writeSequenceEnd();
}


void DL_InformationPerRL_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-Info_INTERNAL_asn1__generated__PrimaryCPICH_Info_dummy1_INTERNAL_asn1__generated__PDSCH_SHO_DCH_Info_dummy2_INTERNAL_asn1__generated__PDSCH_CodeMapping_tdd_INTERNAL_asn1__generated__PrimaryCCPCH_Info_r4::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::DL_DPCH_InfoPerRL_r4::ValueType v;
      _dl_DPCH_InfoPerRL_Type.read(reader, v);
      value.set_dl_DPCH_InfoPerRL(v);
   }
   {
      asn1::generated::SCCPCH_InfoForFACH_r4::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::CellIdentity::ValueType v;
      _cell_id_Type.read(reader, v);
      value.set_cell_id(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_InformationPerRL_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _dl_DPCH_InfoPerRL_Type.write(writer, value.get_dl_DPCH_InfoPerRL());
   _dummy_Type.write(writer, value.get_dummy());
   _cell_id_Type.write(writer, value.get_cell_id());

   writer.writeSequenceEnd();
}


void DL_InformationPerRL_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-Info_INTERNAL_asn1__generated__PrimaryCPICH_Info_dummy1_INTERNAL_asn1__generated__PDSCH_SHO_DCH_Info_dummy2_INTERNAL_asn1__generated__PDSCH_CodeMapping_servingHSDSCH-RL-indicator_INTERNAL_asn1__BooleanType_tdd_INTERNAL_asn1__generated__PrimaryCCPCH_Info_r4::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::DL_DPCH_InfoPerRL_r5::ValueType v;
      _dl_DPCH_InfoPerRL_Type.read(reader, v);
      value.set_dl_DPCH_InfoPerRL(v);
   }
   {
      asn1::generated::SCCPCH_InfoForFACH_r4::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::CellIdentity::ValueType v;
      _cell_id_Type.read(reader, v);
      value.set_cell_id(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_InformationPerRL_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _dl_DPCH_InfoPerRL_Type.write(writer, value.get_dl_DPCH_InfoPerRL());
   _dummy_Type.write(writer, value.get_dummy());
   _cell_id_Type.write(writer, value.get_cell_id());

   writer.writeSequenceEnd();
}


void DL_InformationPerRL_r5bis::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-Info_INTERNAL_asn1__generated__PrimaryCPICH_Info_dummy1_INTERNAL_asn1__generated__PDSCH_SHO_DCH_Info_dummy2_INTERNAL_asn1__generated__PDSCH_CodeMapping_tdd_INTERNAL_asn1__generated__PrimaryCCPCH_Info_r4::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::DL_DPCH_InfoPerRL_r5::ValueType v;
      _dl_DPCH_InfoPerRL_Type.read(reader, v);
      value.set_dl_DPCH_InfoPerRL(v);
   }
   {
      asn1::generated::SCCPCH_InfoForFACH_r4::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::CellIdentity::ValueType v;
      _cell_id_Type.read(reader, v);
      value.set_cell_id(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_InformationPerRL_r5bis::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _dl_DPCH_InfoPerRL_Type.write(writer, value.get_dl_DPCH_InfoPerRL());
   _dummy_Type.write(writer, value.get_dummy());
   _cell_id_Type.write(writer, value.get_cell_id());

   writer.writeSequenceEnd();
}


void DL_InformationPerRL_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-Info_INTERNAL_asn1__generated__PrimaryCPICH_Info_servingHSDSCH-RL-indicator_INTERNAL_asn1__BooleanType_servingEDCH-RL-indicator_INTERNAL_asn1__BooleanType_tdd_INTERNAL_asn1__generated__PrimaryCCPCH_Info_r4::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      _INTERNAL__ChoiceType_dl-DPCH-InfoPerRL_INTERNAL_asn1__generated__DL_DPCH_InfoPerRL_r6_dl-FDPCH-InfoPerRL_INTERNAL_asn1__generated__DL_FDPCH_InfoPerRL_r6::ValueType v;
      _dl_dpchInfo_Type.read(reader, v);
      value.set_dl_dpchInfo(v);
   }
   {
      asn1::generated::E_AGCH_Information::ValueType v;
      _e_AGCH_Information_Type.read(reader, v);
      value.set_e_AGCH_Information(v);
   }
   {
      _INTERNAL__ChoiceType_e-HICH-Information_INTERNAL_asn1__generated__E_HICH_Information_releaseIndicator_INTERNAL_asn1__NullType::ValueType v;
      _e_HICH_Info_Type.read(reader, v);
      value.set_e_HICH_Info(v);
   }
   {
      _INTERNAL__ChoiceType_e-RGCH-Information_INTERNAL_asn1__generated__E_RGCH_Information_releaseIndicator_INTERNAL_asn1__NullType::ValueType v;
      _e_RGCH_Info_Type.read(reader, v);
      value.set_e_RGCH_Info(v);
   }
   {
      asn1::generated::CellIdentity::ValueType v;
      _cell_id_Type.read(reader, v);
      value.set_cell_id(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_InformationPerRL_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _dl_dpchInfo_Type.write(writer, value.get_dl_dpchInfo());
   _e_AGCH_Information_Type.write(writer, value.get_e_AGCH_Information());
   _e_HICH_Info_Type.write(writer, value.get_e_HICH_Info());
   _e_RGCH_Info_Type.write(writer, value.get_e_RGCH_Info());
   _cell_id_Type.write(writer, value.get_cell_id());

   writer.writeSequenceEnd();
}


void DL_InformationPerRL_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-Info_INTERNAL_asn1__generated__PrimaryCPICH_Info_servingHSDSCH-RL-indicator_INTERNAL_asn1__BooleanType_servingEDCH-RL-indicator_INTERNAL_asn1__BooleanType_tdd_INTERNAL_asn1__generated__PrimaryCCPCH_Info_r7::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      _INTERNAL__ChoiceType_dl-DPCH-InfoPerRL_INTERNAL_asn1__generated__DL_DPCH_InfoPerRL_r7_dl-FDPCH-InfoPerRL_INTERNAL_asn1__generated__DL_FDPCH_InfoPerRL_r6::ValueType v;
      _dl_dpchInfo_Type.read(reader, v);
      value.set_dl_dpchInfo(v);
   }
   {
      asn1::generated::E_AGCH_Information::ValueType v;
      _e_AGCH_Information_Type.read(reader, v);
      value.set_e_AGCH_Information(v);
   }
   {
      _INTERNAL__ChoiceType_e-HICH-Information_INTERNAL_asn1__generated__E_HICH_Information_releaseIndicator_INTERNAL_asn1__NullType::ValueType v;
      _e_HICH_Info_Type.read(reader, v);
      value.set_e_HICH_Info(v);
   }
   {
      _INTERNAL__ChoiceType_e-RGCH-Information_INTERNAL_asn1__generated__E_RGCH_Information_releaseIndicator_INTERNAL_asn1__NullType::ValueType v;
      _e_RGCH_Info_Type.read(reader, v);
      value.set_e_RGCH_Info(v);
   }
   {
      asn1::generated::CellIdentity::ValueType v;
      _cell_id_Type.read(reader, v);
      value.set_cell_id(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_InformationPerRL_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _dl_dpchInfo_Type.write(writer, value.get_dl_dpchInfo());
   _e_AGCH_Information_Type.write(writer, value.get_e_AGCH_Information());
   _e_HICH_Info_Type.write(writer, value.get_e_HICH_Info());
   _e_RGCH_Info_Type.write(writer, value.get_e_RGCH_Info());
   _cell_id_Type.write(writer, value.get_cell_id());

   writer.writeSequenceEnd();
}


void DL_InformationPerRL_PostFDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PrimaryCPICH_Info::ValueType v;
      _primaryCPICH_Info_Type.read(reader, v);
      value.set_primaryCPICH_Info(v);
   }
   {
      asn1::generated::DL_DPCH_InfoPerRL_PostFDD::ValueType v;
      _dl_DPCH_InfoPerRL_Type.read(reader, v);
      value.set_dl_DPCH_InfoPerRL(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_InformationPerRL_PostFDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _primaryCPICH_Info_Type.write(writer, value.get_primaryCPICH_Info());
   _dl_DPCH_InfoPerRL_Type.write(writer, value.get_dl_DPCH_InfoPerRL());

   writer.writeSequenceEnd();
}


void DL_InformationPerRL_PostTDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PrimaryCCPCH_InfoPost::ValueType v;
      _primaryCCPCH_Info_Type.read(reader, v);
      value.set_primaryCCPCH_Info(v);
   }
   {
      asn1::generated::DL_DPCH_InfoPerRL_PostTDD::ValueType v;
      _dl_DPCH_InfoPerRL_Type.read(reader, v);
      value.set_dl_DPCH_InfoPerRL(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_InformationPerRL_PostTDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _primaryCCPCH_Info_Type.write(writer, value.get_primaryCCPCH_Info());
   _dl_DPCH_InfoPerRL_Type.write(writer, value.get_dl_DPCH_InfoPerRL());

   writer.writeSequenceEnd();
}


void DL_InformationPerRL_PostTDD_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PrimaryCCPCH_InfoPostTDD_LCR_r4::ValueType v;
      _primaryCCPCH_Info_Type.read(reader, v);
      value.set_primaryCCPCH_Info(v);
   }
   {
      asn1::generated::DL_DPCH_InfoPerRL_PostTDD_LCR_r4::ValueType v;
      _dl_DPCH_InfoPerRL_Type.read(reader, v);
      value.set_dl_DPCH_InfoPerRL(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_InformationPerRL_PostTDD_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _primaryCCPCH_Info_Type.write(writer, value.get_primaryCCPCH_Info());
   _dl_DPCH_InfoPerRL_Type.write(writer, value.get_dl_DPCH_InfoPerRL());

   writer.writeSequenceEnd();
}


void DL_PDSCH_Information::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PDSCH_SHO_DCH_Info::ValueType v;
      _dummy1_Type.read(reader, v);
      value.set_dummy1(v);
   }
   {
      asn1::generated::PDSCH_CodeMapping::ValueType v;
      _dummy2_Type.read(reader, v);
      value.set_dummy2(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_PDSCH_Information::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dummy1_Type.write(writer, value.get_dummy1());
   _dummy2_Type.write(writer, value.get_dummy2());

   writer.writeSequenceEnd();
}


void Dl_rate_matching_restriction::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RestrictedTrCH_InfoList::ValueType v;
      _restrictedTrCH_InfoList_Type.read(reader, v);
      value.set_restrictedTrCH_InfoList(v);
   }

   reader.readSequenceEnd(*this);
}

void Dl_rate_matching_restriction::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _restrictedTrCH_InfoList_Type.write(writer, value.get_restrictedTrCH_InfoList());

   writer.writeSequenceEnd();
}


void DL_TPC_PowerOffsetPerRL::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PowerOffsetTPC_pdpdch::ValueType v;
      _powerOffsetTPC_pdpdch_Type.read(reader, v);
      value.set_powerOffsetTPC_pdpdch(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_TPC_PowerOffsetPerRL::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _powerOffsetTPC_pdpdch_Type.write(writer, value.get_powerOffsetTPC_pdpdch());

   writer.writeSequenceEnd();
}


void DL_TS_ChannelisationCodesShort::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_consecutive_INTERNAL__SequenceType_firstChannelisationCode_INTERNAL_asn1__generated__DL_TS_ChannelisationCode_lastChannelisationCode_INTERNAL_asn1__generated__DL_TS_ChannelisationCode_bitmap_INTERNAL_::ValueType v;
      _codesRepresentation_Type.read(reader, v);
      value.set_codesRepresentation(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_TS_ChannelisationCodesShort::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _codesRepresentation_Type.write(writer, value.get_codesRepresentation());

   writer.writeSequenceEnd();
}


void DL_TS_ChannelisationCodesShort_VHCR::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_consecutive_INTERNAL__SequenceType_firstChannelisationCode_INTERNAL_asn1__generated__DL_TS_ChannelisationCode_VHCR_lastChannelisationCode_INTERNAL_asn1__generated__DL_TS_ChannelisationCode_VHCR_bitmap_INTERNAL_::ValueType v;
      _codesRepresentation_Type.read(reader, v);
      value.set_codesRepresentation(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_TS_ChannelisationCodesShort_VHCR::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _codesRepresentation_Type.write(writer, value.get_codesRepresentation());

   writer.writeSequenceEnd();
}


void DownlinkAdditionalTimeslots::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_sameAsLast_INTERNAL__SequenceType_timeslotNumber_INTERNAL_asn1__generated__TimeslotNumber_newParameters_INTERNAL__SequenceType_individualTimeslotInfo_INTERNAL_asn1__generated__IndividualTimeslotInfo_dl-TS-ChannelisationCodesShort_INTERNAL_asn1__generated__DL_TS_ChannelisationCodesShort::ValueType v;
      _parameters_Type.read(reader, v);
      value.set_parameters(v);
   }

   reader.readSequenceEnd(*this);
}

void DownlinkAdditionalTimeslots::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _parameters_Type.write(writer, value.get_parameters());

   writer.writeSequenceEnd();
}


void DownlinkAdditionalTimeslots_VHCR::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_sameAsLast_INTERNAL__SequenceType_timeslotNumber_INTERNAL_asn1__generated__TimeslotNumber_newParameters_INTERNAL__SequenceType_individualTimeslotInfo_INTERNAL_asn1__generated__IndividualTimeslotInfo_VHCR_dl-TS-ChannelisationCodesShort_INTERNAL_asn1__generated__DL_TS_ChannelisationCodesShort_VHCR::ValueType v;
      _parameters_Type.read(reader, v);
      value.set_parameters(v);
   }

   reader.readSequenceEnd(*this);
}

void DownlinkAdditionalTimeslots_VHCR::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _parameters_Type.write(writer, value.get_parameters());

   writer.writeSequenceEnd();
}


void DownlinkAdditionalTimeslots_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_sameAsLast_INTERNAL__SequenceType_timeslotNumber_INTERNAL_asn1__generated__TimeslotNumber_LCR_r4_newParameters_INTERNAL__SequenceType_individualTimeslotInfo_INTERNAL_asn1__generated__IndividualTimeslotInfo_LCR_r4_dl-TS-ChannelisationCodesShort_INTERNAL_asn1__generated__DL_TS_ChannelisationCodesShort::ValueType v;
      _parameters_Type.read(reader, v);
      value.set_parameters(v);
   }

   reader.readSequenceEnd(*this);
}

void DownlinkAdditionalTimeslots_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _parameters_Type.write(writer, value.get_parameters());

   writer.writeSequenceEnd();
}


void DownlinkTimeslotsCodes::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IndividualTimeslotInfo::ValueType v;
      _firstIndividualTimeslotInfo_Type.read(reader, v);
      value.set_firstIndividualTimeslotInfo(v);
   }
   {
      asn1::generated::DL_TS_ChannelisationCodesShort::ValueType v;
      _dl_TS_ChannelisationCodesShort_Type.read(reader, v);
      value.set_dl_TS_ChannelisationCodesShort(v);
   }
   {
      _INTERNAL__ChoiceType_noMore_INTERNAL_asn1__NullType_additionalTimeslots_INTERNAL__ChoiceType_consecutive_INTERNAL_asn1__IntegerType_timeslotList_INTERNAL__SequenceOfType_INTERNAL_asn1__generated__DownlinkAdditionalTimeslots::ValueType v;
      _moreTimeslots_Type.read(reader, v);
      value.set_moreTimeslots(v);
   }

   reader.readSequenceEnd(*this);
}

void DownlinkTimeslotsCodes::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _firstIndividualTimeslotInfo_Type.write(writer, value.get_firstIndividualTimeslotInfo());
   _dl_TS_ChannelisationCodesShort_Type.write(writer, value.get_dl_TS_ChannelisationCodesShort());
   _moreTimeslots_Type.write(writer, value.get_moreTimeslots());

   writer.writeSequenceEnd();
}


void DownlinkTimeslotsCodes_VHCR::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IndividualTimeslotInfo_VHCR::ValueType v;
      _firstIndividualTimeslotInfo_Type.read(reader, v);
      value.set_firstIndividualTimeslotInfo(v);
   }
   {
      asn1::generated::DL_TS_ChannelisationCodesShort::ValueType v;
      _dl_TS_ChannelisationCodesShort_Type.read(reader, v);
      value.set_dl_TS_ChannelisationCodesShort(v);
   }
   {
      _INTERNAL__ChoiceType_noMore_INTERNAL_asn1__NullType_additionalTimeslots_INTERNAL__ChoiceType_consecutive_INTERNAL_asn1__IntegerType_timeslotList_INTERNAL__SequenceOfType_INTERNAL_asn1__generated__DownlinkAdditionalTimeslots_VHCR::ValueType v;
      _moreTimeslots_Type.read(reader, v);
      value.set_moreTimeslots(v);
   }

   reader.readSequenceEnd(*this);
}

void DownlinkTimeslotsCodes_VHCR::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _firstIndividualTimeslotInfo_Type.write(writer, value.get_firstIndividualTimeslotInfo());
   _dl_TS_ChannelisationCodesShort_Type.write(writer, value.get_dl_TS_ChannelisationCodesShort());
   _moreTimeslots_Type.write(writer, value.get_moreTimeslots());

   writer.writeSequenceEnd();
}


void DownlinkTimeslotsCodes_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IndividualTimeslotInfo_LCR_r4::ValueType v;
      _firstIndividualTimeslotInfo_Type.read(reader, v);
      value.set_firstIndividualTimeslotInfo(v);
   }
   {
      asn1::generated::DL_TS_ChannelisationCodesShort::ValueType v;
      _dl_TS_ChannelisationCodesShort_Type.read(reader, v);
      value.set_dl_TS_ChannelisationCodesShort(v);
   }
   {
      _INTERNAL__ChoiceType_noMore_INTERNAL_asn1__NullType_additionalTimeslots_INTERNAL__ChoiceType_consecutive_INTERNAL_asn1__IntegerType_timeslotList_INTERNAL__SequenceOfType_INTERNAL_asn1__generated__DownlinkAdditionalTimeslots_LCR_r4::ValueType v;
      _moreTimeslots_Type.read(reader, v);
      value.set_moreTimeslots(v);
   }

   reader.readSequenceEnd(*this);
}

void DownlinkTimeslotsCodes_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _firstIndividualTimeslotInfo_Type.write(writer, value.get_firstIndividualTimeslotInfo());
   _dl_TS_ChannelisationCodesShort_Type.write(writer, value.get_dl_TS_ChannelisationCodesShort());
   _moreTimeslots_Type.write(writer, value.get_moreTimeslots());

   writer.writeSequenceEnd();
}


void DPCH_CompressedModeInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TGP_SequenceList::ValueType v;
      _tgp_SequenceList_Type.read(reader, v);
      value.set_tgp_SequenceList(v);
   }

   reader.readSequenceEnd(*this);
}

void DPCH_CompressedModeInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tgp_SequenceList_Type.write(writer, value.get_tgp_SequenceList());

   writer.writeSequenceEnd();
}


void DPCH_CompressedModeStatusInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TGPS_Reconfiguration_CFN::ValueType v;
      _tgps_Reconfiguration_CFN_Type.read(reader, v);
      value.set_tgps_Reconfiguration_CFN(v);
   }
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__TGP_SequenceShort::ValueType v;
      _tgp_SequenceShortList_Type.read(reader, v);
      value.set_tgp_SequenceShortList(v);
   }

   reader.readSequenceEnd(*this);
}

void DPCH_CompressedModeStatusInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tgps_Reconfiguration_CFN_Type.write(writer, value.get_tgps_Reconfiguration_CFN());
   _tgp_SequenceShortList_Type.write(writer, value.get_tgp_SequenceShortList());

   writer.writeSequenceEnd();
}


void DSCH_Mapping::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MaxTFCI_Field2Value::ValueType v;
      _maxTFCI_Field2Value_Type.read(reader, v);
      value.set_maxTFCI_Field2Value(v);
   }
   {
      asn1::generated::SF_PDSCH::ValueType v;
      _spreadingFactor_Type.read(reader, v);
      value.set_spreadingFactor(v);
   }
   {
      asn1::generated::CodeNumberDSCH::ValueType v;
      _codeNumber_Type.read(reader, v);
      value.set_codeNumber(v);
   }
   {
      asn1::generated::MultiCodeInfo::ValueType v;
      _multiCodeInfo_Type.read(reader, v);
      value.set_multiCodeInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void DSCH_Mapping::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _maxTFCI_Field2Value_Type.write(writer, value.get_maxTFCI_Field2Value());
   _spreadingFactor_Type.write(writer, value.get_spreadingFactor());
   _codeNumber_Type.write(writer, value.get_codeNumber());
   _multiCodeInfo_Type.write(writer, value.get_multiCodeInfo());

   writer.writeSequenceEnd();
}


void DynamicTFInformationCCCH::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::OctetModeRLC_SizeInfoType2::ValueType v;
      _octetModeRLC_SizeInfoType2_Type.read(reader, v);
      value.set_octetModeRLC_SizeInfoType2(v);
   }

   reader.readSequenceEnd(*this);
}

void DynamicTFInformationCCCH::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _octetModeRLC_SizeInfoType2_Type.write(writer, value.get_octetModeRLC_SizeInfoType2());

   writer.writeSequenceEnd();
}


void E_AGCH_Information::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::E_AGCH_ChannelisationCode::ValueType v;
      _e_AGCH_ChannelisationCode_Type.read(reader, v);
      value.set_e_AGCH_ChannelisationCode(v);
   }

   reader.readSequenceEnd(*this);
}

void E_AGCH_Information::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _e_AGCH_ChannelisationCode_Type.write(writer, value.get_e_AGCH_ChannelisationCode());

   writer.writeSequenceEnd();
}


void E_DCH_ReconfigurationInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::E_DCH_RL_InfoNewServingCell::ValueType v;
      _e_DCH_RL_InfoNewServingCell_Type.read(reader, v);
      value.set_e_DCH_RL_InfoNewServingCell(v);
   }
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__E_DCH_RL_InfoOtherCell::ValueType v;
      _e_DCH_RL_InfoOtherCellList_Type.read(reader, v);
      value.set_e_DCH_RL_InfoOtherCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void E_DCH_ReconfigurationInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _e_DCH_RL_InfoNewServingCell_Type.write(writer, value.get_e_DCH_RL_InfoNewServingCell());
   _e_DCH_RL_InfoOtherCellList_Type.write(writer, value.get_e_DCH_RL_InfoOtherCellList());

   writer.writeSequenceEnd();
}


void E_DCH_RL_InfoNewServingCell::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PrimaryCPICH_Info::ValueType v;
      _primaryCPICH_Info_Type.read(reader, v);
      value.set_primaryCPICH_Info(v);
   }
   {
      asn1::generated::E_AGCH_Information::ValueType v;
      _e_AGCH_Information_Type.read(reader, v);
      value.set_e_AGCH_Information(v);
   }
   {
      _INTERNAL__SequenceType_value_INTERNAL_asn1__IntegerType_primary-Secondary-GrantSelector_INTERNAL__EnumeratedType::ValueType v;
      _servingGrant_Type.read(reader, v);
      value.set_servingGrant(v);
   }
   {
      asn1::generated::E_DPCCH_DPCCH_PowerOffset::ValueType v;
      _e_DPCCH_DPCCH_PowerOffset_Type.read(reader, v);
      value.set_e_DPCCH_DPCCH_PowerOffset(v);
   }
   {
      asn1::generated::E_DPDCH_Reference_E_TFCIList::ValueType v;
      _reference_E_TFCIs_Type.read(reader, v);
      value.set_reference_E_TFCIs(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _powerOffsetForSchedInfo_Type.read(reader, v);
      value.set_powerOffsetForSchedInfo(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _threeIndexStepThreshold_Type.read(reader, v);
      value.set_threeIndexStepThreshold(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _twoIndexStepThreshold_Type.read(reader, v);
      value.set_twoIndexStepThreshold(v);
   }
   {
      asn1::generated::E_HICH_Information::ValueType v;
      _e_HICH_Information_Type.read(reader, v);
      value.set_e_HICH_Information(v);
   }
   {
      _INTERNAL__ChoiceType_e-RGCH-Information_INTERNAL_asn1__generated__E_RGCH_Information_releaseIndicator_INTERNAL_asn1__NullType::ValueType v;
      _e_RGCH_Info_Type.read(reader, v);
      value.set_e_RGCH_Info(v);
   }

   reader.readSequenceEnd(*this);
}

void E_DCH_RL_InfoNewServingCell::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _primaryCPICH_Info_Type.write(writer, value.get_primaryCPICH_Info());
   _e_AGCH_Information_Type.write(writer, value.get_e_AGCH_Information());
   _servingGrant_Type.write(writer, value.get_servingGrant());
   _e_DPCCH_DPCCH_PowerOffset_Type.write(writer, value.get_e_DPCCH_DPCCH_PowerOffset());
   _reference_E_TFCIs_Type.write(writer, value.get_reference_E_TFCIs());
   _powerOffsetForSchedInfo_Type.write(writer, value.get_powerOffsetForSchedInfo());
   _threeIndexStepThreshold_Type.write(writer, value.get_threeIndexStepThreshold());
   _twoIndexStepThreshold_Type.write(writer, value.get_twoIndexStepThreshold());
   _e_HICH_Information_Type.write(writer, value.get_e_HICH_Information());
   _e_RGCH_Info_Type.write(writer, value.get_e_RGCH_Info());

   writer.writeSequenceEnd();
}


void E_DCH_RL_InfoOtherCell::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PrimaryCPICH_Info::ValueType v;
      _primaryCPICH_Info_Type.read(reader, v);
      value.set_primaryCPICH_Info(v);
   }
   {
      _INTERNAL__ChoiceType_e-HICH-Information_INTERNAL_asn1__generated__E_HICH_Information_releaseIndicator_INTERNAL_asn1__NullType::ValueType v;
      _e_HICH_Info_Type.read(reader, v);
      value.set_e_HICH_Info(v);
   }
   {
      _INTERNAL__ChoiceType_e-RGCH-Information_INTERNAL_asn1__generated__E_RGCH_Information_releaseIndicator_INTERNAL_asn1__NullType::ValueType v;
      _e_RGCH_Info_Type.read(reader, v);
      value.set_e_RGCH_Info(v);
   }

   reader.readSequenceEnd(*this);
}

void E_DCH_RL_InfoOtherCell::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _primaryCPICH_Info_Type.write(writer, value.get_primaryCPICH_Info());
   _e_HICH_Info_Type.write(writer, value.get_e_HICH_Info());
   _e_RGCH_Info_Type.write(writer, value.get_e_RGCH_Info());

   writer.writeSequenceEnd();
}


void E_DPCCH_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::E_DPCCH_DPCCH_PowerOffset::ValueType v;
      _e_DPCCH_DPCCH_PowerOffset_Type.read(reader, v);
      value.set_e_DPCCH_DPCCH_PowerOffset(v);
   }
   {
      asn1::generated::HappyBit_DelayCondition::ValueType v;
      _happyBit_DelayCondition_Type.read(reader, v);
      value.set_happyBit_DelayCondition(v);
   }

   reader.readSequenceEnd(*this);
}

void E_DPCCH_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _e_DPCCH_DPCCH_PowerOffset_Type.write(writer, value.get_e_DPCCH_DPCCH_PowerOffset());
   _happyBit_DelayCondition_Type.write(writer, value.get_happyBit_DelayCondition());

   writer.writeSequenceEnd();
}


void E_DPDCH_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::E_TFCI_TableIndex::ValueType v;
      _e_TFCI_TableIndex_Type.read(reader, v);
      value.set_e_TFCI_TableIndex(v);
   }
   {
      asn1::generated::E_DCH_MinimumSet_E_TFCI::ValueType v;
      _e_DCH_MinimumSet_E_TFCI_Type.read(reader, v);
      value.set_e_DCH_MinimumSet_E_TFCI(v);
   }
   {
      asn1::generated::E_DPDCH_Reference_E_TFCIList::ValueType v;
      _reference_E_TFCIs_Type.read(reader, v);
      value.set_reference_E_TFCIs(v);
   }
   {
      asn1::generated::E_DPDCH_MaxChannelisationCodes::ValueType v;
      _maxChannelisationCodes_Type.read(reader, v);
      value.set_maxChannelisationCodes(v);
   }
   {
      asn1::generated::E_DPDCH_PL_NonMax::ValueType v;
      _pl_NonMax_Type.read(reader, v);
      value.set_pl_NonMax(v);
   }
   {
      asn1::generated::E_DPDCH_SchedulingInfoConfiguration::ValueType v;
      _schedulingInfoConfiguration_Type.read(reader, v);
      value.set_schedulingInfoConfiguration(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _threeIndexStepThreshold_Type.read(reader, v);
      value.set_threeIndexStepThreshold(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _twoIndexStepThreshold_Type.read(reader, v);
      value.set_twoIndexStepThreshold(v);
   }

   reader.readSequenceEnd(*this);
}

void E_DPDCH_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _e_TFCI_TableIndex_Type.write(writer, value.get_e_TFCI_TableIndex());
   _e_DCH_MinimumSet_E_TFCI_Type.write(writer, value.get_e_DCH_MinimumSet_E_TFCI());
   _reference_E_TFCIs_Type.write(writer, value.get_reference_E_TFCIs());
   _maxChannelisationCodes_Type.write(writer, value.get_maxChannelisationCodes());
   _pl_NonMax_Type.write(writer, value.get_pl_NonMax());
   _schedulingInfoConfiguration_Type.write(writer, value.get_schedulingInfoConfiguration());
   _threeIndexStepThreshold_Type.write(writer, value.get_threeIndexStepThreshold());
   _twoIndexStepThreshold_Type.write(writer, value.get_twoIndexStepThreshold());

   writer.writeSequenceEnd();
}


void E_DPDCH_Reference_E_TFCI::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _reference_E_TFCI_Type.read(reader, v);
      value.set_reference_E_TFCI(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _reference_E_TFCI_PO_Type.read(reader, v);
      value.set_reference_E_TFCI_PO(v);
   }

   reader.readSequenceEnd(*this);
}

void E_DPDCH_Reference_E_TFCI::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _reference_E_TFCI_Type.write(writer, value.get_reference_E_TFCI());
   _reference_E_TFCI_PO_Type.write(writer, value.get_reference_E_TFCI_PO());

   writer.writeSequenceEnd();
}


void E_DPDCH_SchedulingInfoConfiguration::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::E_DPDCH_PeriodicyOfSchedInfo::ValueType v;
      _periodicityOfSchedInfo_NoGrant_Type.read(reader, v);
      value.set_periodicityOfSchedInfo_NoGrant(v);
   }
   {
      asn1::generated::E_DPDCH_PeriodicyOfSchedInfo::ValueType v;
      _periodicityOfSchedInfo_Grant_Type.read(reader, v);
      value.set_periodicityOfSchedInfo_Grant(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _powerOffsetForSchedInfo_Type.read(reader, v);
      value.set_powerOffsetForSchedInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void E_DPDCH_SchedulingInfoConfiguration::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _periodicityOfSchedInfo_NoGrant_Type.write(writer, value.get_periodicityOfSchedInfo_NoGrant());
   _periodicityOfSchedInfo_Grant_Type.write(writer, value.get_periodicityOfSchedInfo_Grant());
   _powerOffsetForSchedInfo_Type.write(writer, value.get_powerOffsetForSchedInfo());

   writer.writeSequenceEnd();
}


void E_DPDCH_SchedulingTransmConfiguration::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _ms2_SchedTransmGrantHARQAlloc_Type.read(reader, v);
      value.set_ms2_SchedTransmGrantHARQAlloc(v);
   }
   {
      _INTERNAL__SequenceType_value_INTERNAL_asn1__IntegerType_primary-Secondary-GrantSelector_INTERNAL__EnumeratedType::ValueType v;
      _servingGrant_Type.read(reader, v);
      value.set_servingGrant(v);
   }

   reader.readSequenceEnd(*this);
}

void E_DPDCH_SchedulingTransmConfiguration::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ms2_SchedTransmGrantHARQAlloc_Type.write(writer, value.get_ms2_SchedTransmGrantHARQAlloc());
   _servingGrant_Type.write(writer, value.get_servingGrant());

   writer.writeSequenceEnd();
}


void E_HICH_Information::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::E_HICH_ChannelisationCode::ValueType v;
      _channelisationCode_Type.read(reader, v);
      value.set_channelisationCode(v);
   }
   {
      asn1::generated::E_HICH_RGCH_SignatureSequence::ValueType v;
      _signatureSequence_Type.read(reader, v);
      value.set_signatureSequence(v);
   }

   reader.readSequenceEnd(*this);
}

void E_HICH_Information::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _channelisationCode_Type.write(writer, value.get_channelisationCode());
   _signatureSequence_Type.write(writer, value.get_signatureSequence());

   writer.writeSequenceEnd();
}


void E_RGCH_Information::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::E_HICH_RGCH_SignatureSequence::ValueType v;
      _signatureSequence_Type.read(reader, v);
      value.set_signatureSequence(v);
   }
   {
      asn1::generated::E_RGCH_CombinationIndex::ValueType v;
      _rg_CombinationIndex_Type.read(reader, v);
      value.set_rg_CombinationIndex(v);
   }

   reader.readSequenceEnd(*this);
}

void E_RGCH_Information::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _signatureSequence_Type.write(writer, value.get_signatureSequence());
   _rg_CombinationIndex_Type.write(writer, value.get_rg_CombinationIndex());

   writer.writeSequenceEnd();
}


void EXT_UL_TimingAdvance::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_ex-ul-TimingAdvance_INTERNAL_asn1__IntegerType_tdd768_INTERNAL__SequenceType_ex-ul-TimingAdvance_INTERNAL_asn1__IntegerType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void EXT_UL_TimingAdvance::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void FACH_PCH_Information::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TransportFormatSet::ValueType v;
      _transportFormatSet_Type.read(reader, v);
      value.set_transportFormatSet(v);
   }
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _transportChannelIdentity_Type.read(reader, v);
      value.set_transportChannelIdentity(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _ctch_Indicator_Type.read(reader, v);
      value.set_ctch_Indicator(v);
   }

   reader.readSequenceEnd(*this);
}

void FACH_PCH_Information::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _transportFormatSet_Type.write(writer, value.get_transportFormatSet());
   _transportChannelIdentity_Type.write(writer, value.get_transportChannelIdentity());
   _ctch_Indicator_Type.write(writer, value.get_ctch_Indicator());

   writer.writeSequenceEnd();
}


void FPACH_Info_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimeslotNumber_LCR_r4::ValueType v;
      _timeslot_Type.read(reader, v);
      value.set_timeslot(v);
   }
   {
      asn1::generated::TDD_FPACH_CCode16_r4::ValueType v;
      _channelisationCode_Type.read(reader, v);
      value.set_channelisationCode(v);
   }
   {
      asn1::generated::MidambleShiftAndBurstType_LCR_r4::ValueType v;
      _midambleShiftAndBurstType_Type.read(reader, v);
      value.set_midambleShiftAndBurstType(v);
   }
   {
      asn1::generated::Wi_LCR::ValueType v;
      _wi_Type.read(reader, v);
      value.set_wi(v);
   }

   reader.readSequenceEnd(*this);
}

void FPACH_Info_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timeslot_Type.write(writer, value.get_timeslot());
   _channelisationCode_Type.write(writer, value.get_channelisationCode());
   _midambleShiftAndBurstType_Type.write(writer, value.get_midambleShiftAndBurstType());
   _wi_Type.write(writer, value.get_wi());

   writer.writeSequenceEnd();
}


void FrequencyInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL_asn1__generated__FrequencyInfoFDD_tdd_INTERNAL_asn1__generated__FrequencyInfoTDD::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void FrequencyInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void FrequencyInfoFDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UARFCN::ValueType v;
      _uarfcn_UL_Type.read(reader, v);
      value.set_uarfcn_UL(v);
   }
   {
      asn1::generated::UARFCN::ValueType v;
      _uarfcn_DL_Type.read(reader, v);
      value.set_uarfcn_DL(v);
   }

   reader.readSequenceEnd(*this);
}

void FrequencyInfoFDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _uarfcn_UL_Type.write(writer, value.get_uarfcn_UL());
   _uarfcn_DL_Type.write(writer, value.get_uarfcn_DL());

   writer.writeSequenceEnd();
}


void FrequencyInfoTDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UARFCN::ValueType v;
      _uarfcn_Nt_Type.read(reader, v);
      value.set_uarfcn_Nt(v);
   }

   reader.readSequenceEnd(*this);
}

void FrequencyInfoTDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _uarfcn_Nt_Type.write(writer, value.get_uarfcn_Nt());

   writer.writeSequenceEnd();
}


void HS_PDSCH_Midamble_Configuration_TDD128::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_defaultMidamble_INTERNAL_asn1__NullType_commonMidamble_INTERNAL_asn1__NullType_ueSpecificMidamble_INTERNAL_asn1__IntegerType::ValueType v;
      _midambleAllocationMode_Type.read(reader, v);
      value.set_midambleAllocationMode(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _midambleConfiguration_Type.read(reader, v);
      value.set_midambleConfiguration(v);
   }

   reader.readSequenceEnd(*this);
}

void HS_PDSCH_Midamble_Configuration_TDD128::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _midambleAllocationMode_Type.write(writer, value.get_midambleAllocationMode());
   _midambleConfiguration_Type.write(writer, value.get_midambleConfiguration());

   writer.writeSequenceEnd();
}


void HS_SCCH_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_hS-SCCHChannelisationCodeInfo_INTERNAL__SequenceOfType_INTERNAL_asn1__generated__HS_SCCH_Codes_dl-ScramblingCode_INTERNAL_asn1__generated__SecondaryScramblingCode_tdd_INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_nack-ack-power-offset_INTERNAL_asn1__IntegerType_hs-SICH-PowerControl-Info_INTERNAL_asn1__generated__HS_SICH_Power_Control_Info_TDD384_hS-SCCH-SetConfiguration_INTERNAL__SequenceOfType_INTERNAL_asn1__generated__HS_SCCH_TDD384_tdd128_INTERNAL__SequenceOfType_INTERNAL_asn1__generated__HS_SCCH_TDD128::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void HS_SCCH_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void HS_SCCH_Info_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_hS-SCCHChannelisationCodeInfo_INTERNAL__SequenceOfType_INTERNAL_asn1__generated__HS_SCCH_Codes_dl-ScramblingCode_INTERNAL_asn1__generated__SecondaryScramblingCode_tdd_INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_nack-ack-power-offset_INTERNAL_asn1__IntegerType_hs-SICH-PowerControl-Info_INTERNAL_asn1__generated__HS_SICH_Power_Control_Info_TDD384_dhs-sync_INTERNAL_asn1__generated__DHS_Sync_bler-target_INTERNAL_asn1__generated__Bler_Target_hS-SCCH-SetConfiguration_INTERNAL__SequenceOfType_INTERNAL_asn1__generated__HS_SCCH_TDD384_r6_tdd128_INTERNAL__SequenceOfType_INTERNAL_asn1__generated__HS_SCCH_TDD128::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void HS_SCCH_Info_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void HS_SCCH_Info_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_hS-SCCHChannelisationCodeInfo_INTERNAL__SequenceOfType_INTERNAL_asn1__generated__HS_SCCH_Codes_dl-ScramblingCode_INTERNAL_asn1__generated__SecondaryScramblingCode_tdd_INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_nack-ack-power-offset_INTERNAL_asn1__IntegerType_hs-SICH-PowerControl-Info_INTERNAL_asn1__generated__HS_SICH_Power_Control_Info_TDD384_dhs-sync_INTERNAL_asn1__generated__DHS_Sync_hS-SCCH-SetConfiguration_INTERNAL__SequenceOfType_INTERNAL_asn1__generated__HS_SCCH_TDD384_r6_tdd768_INTERNAL__SequenceType_nack-ack-power-offset_INTERNAL_asn1__IntegerType_hs-SICH-PowerControl-Info_INTERNAL_asn1__generated__HS_SICH_Power_Control_Info_TDD768_dhs-sync_INTERNAL_asn1__generated__DHS_Sync_bler-target_INTERNAL_asn1__generated__Bler_Target_hS-SCCH-SetConfiguration_INTERNAL__SequenceOfType_INTERNAL_asn1__generated__HS_SCCH_TDD768_tdd128_INTERNAL__SequenceOfType_INTERNAL_asn1__generated__HS_SCCH_TDD128::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void HS_SCCH_Info_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void HS_SCCH_TDD128::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimeslotNumber_LCR_r4::ValueType v;
      _timeslotNumber_Type.read(reader, v);
      value.set_timeslotNumber(v);
   }
   {
      asn1::generated::HS_ChannelisationCode_LCR::ValueType v;
      _firstChannelisationCode_Type.read(reader, v);
      value.set_firstChannelisationCode(v);
   }
   {
      asn1::generated::HS_ChannelisationCode_LCR::ValueType v;
      _secondChannelisationCode_Type.read(reader, v);
      value.set_secondChannelisationCode(v);
   }
   {
      _INTERNAL__ChoiceType_defaultMidamble_INTERNAL_asn1__NullType_commonMidamble_INTERNAL_asn1__NullType_ueSpecificMidamble_INTERNAL_asn1__IntegerType::ValueType v;
      _midambleAllocationMode_Type.read(reader, v);
      value.set_midambleAllocationMode(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _midambleConfiguration_Type.read(reader, v);
      value.set_midambleConfiguration(v);
   }
   {
      asn1::generated::Bler_Target::ValueType v;
      _bler_target_Type.read(reader, v);
      value.set_bler_target(v);
   }
   {
      asn1::generated::HS_SICH_Configuration_TDD128::ValueType v;
      _hs_sich_configuration_Type.read(reader, v);
      value.set_hs_sich_configuration(v);
   }

   reader.readSequenceEnd(*this);
}

void HS_SCCH_TDD128::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timeslotNumber_Type.write(writer, value.get_timeslotNumber());
   _firstChannelisationCode_Type.write(writer, value.get_firstChannelisationCode());
   _secondChannelisationCode_Type.write(writer, value.get_secondChannelisationCode());
   _midambleAllocationMode_Type.write(writer, value.get_midambleAllocationMode());
   _midambleConfiguration_Type.write(writer, value.get_midambleConfiguration());
   _bler_target_Type.write(writer, value.get_bler_target());
   _hs_sich_configuration_Type.write(writer, value.get_hs_sich_configuration());

   writer.writeSequenceEnd();
}


void HS_SICH_Configuration_TDD128::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimeslotNumber_LCR_r4::ValueType v;
      _timeslotNumber_Type.read(reader, v);
      value.set_timeslotNumber(v);
   }
   {
      asn1::generated::HS_ChannelisationCode_LCR::ValueType v;
      _channelisationCode_Type.read(reader, v);
      value.set_channelisationCode(v);
   }
   {
      _INTERNAL__ChoiceType_defaultMidamble_INTERNAL_asn1__NullType_ueSpecificMidamble_INTERNAL__SequenceType_midambleShift_INTERNAL_asn1__generated__MidambleShiftLong::ValueType v;
      _midambleAllocationMode_Type.read(reader, v);
      value.set_midambleAllocationMode(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _midambleConfiguration_Type.read(reader, v);
      value.set_midambleConfiguration(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _nack_ack_power_offset_Type.read(reader, v);
      value.set_nack_ack_power_offset(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _power_level_HSSICH_Type.read(reader, v);
      value.set_power_level_HSSICH(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _tpc_step_size_Type.read(reader, v);
      value.set_tpc_step_size(v);
   }

   reader.readSequenceEnd(*this);
}

void HS_SICH_Configuration_TDD128::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timeslotNumber_Type.write(writer, value.get_timeslotNumber());
   _channelisationCode_Type.write(writer, value.get_channelisationCode());
   _midambleAllocationMode_Type.write(writer, value.get_midambleAllocationMode());
   _midambleConfiguration_Type.write(writer, value.get_midambleConfiguration());
   _nack_ack_power_offset_Type.write(writer, value.get_nack_ack_power_offset());
   _power_level_HSSICH_Type.write(writer, value.get_power_level_HSSICH());
   _tpc_step_size_Type.write(writer, value.get_tpc_step_size());

   writer.writeSequenceEnd();
}


void HS_SCCH_TDD384::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimeslotNumber::ValueType v;
      _timeslotNumber_Type.read(reader, v);
      value.set_timeslotNumber(v);
   }
   {
      asn1::generated::DL_TS_ChannelisationCode::ValueType v;
      _channelisationCode_Type.read(reader, v);
      value.set_channelisationCode(v);
   }
   {
      _INTERNAL__ChoiceType_defaultMidamble_INTERNAL_asn1__NullType_commonMidamble_INTERNAL_asn1__NullType_ueSpecificMidamble_INTERNAL__SequenceType_midambleShift_INTERNAL_asn1__generated__MidambleShiftLong::ValueType v;
      _midambleAllocationMode_Type.read(reader, v);
      value.set_midambleAllocationMode(v);
   }
   {
      asn1::generated::MidambleConfigurationBurstType1and3::ValueType v;
      _midambleconfiguration_Type.read(reader, v);
      value.set_midambleconfiguration(v);
   }
   {
      asn1::generated::Bler_Target::ValueType v;
      _bler_target_Type.read(reader, v);
      value.set_bler_target(v);
   }
   {
      asn1::generated::HS_SICH_Configuration_TDD384::ValueType v;
      _hs_sich_configuration_Type.read(reader, v);
      value.set_hs_sich_configuration(v);
   }

   reader.readSequenceEnd(*this);
}

void HS_SCCH_TDD384::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timeslotNumber_Type.write(writer, value.get_timeslotNumber());
   _channelisationCode_Type.write(writer, value.get_channelisationCode());
   _midambleAllocationMode_Type.write(writer, value.get_midambleAllocationMode());
   _midambleconfiguration_Type.write(writer, value.get_midambleconfiguration());
   _bler_target_Type.write(writer, value.get_bler_target());
   _hs_sich_configuration_Type.write(writer, value.get_hs_sich_configuration());

   writer.writeSequenceEnd();
}


void HS_SCCH_TDD384_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimeslotNumber::ValueType v;
      _timeslotNumber_Type.read(reader, v);
      value.set_timeslotNumber(v);
   }
   {
      asn1::generated::DL_TS_ChannelisationCode::ValueType v;
      _channelisationCode_Type.read(reader, v);
      value.set_channelisationCode(v);
   }
   {
      _INTERNAL__ChoiceType_defaultMidamble_INTERNAL_asn1__NullType_commonMidamble_INTERNAL_asn1__NullType_ueSpecificMidamble_INTERNAL__SequenceType_midambleShift_INTERNAL_asn1__generated__MidambleShiftLong::ValueType v;
      _midambleAllocationMode_Type.read(reader, v);
      value.set_midambleAllocationMode(v);
   }
   {
      asn1::generated::MidambleConfigurationBurstType1and3::ValueType v;
      _midambleconfiguration_Type.read(reader, v);
      value.set_midambleconfiguration(v);
   }
   {
      asn1::generated::HS_SICH_Configuration_TDD384::ValueType v;
      _hs_sich_configuration_Type.read(reader, v);
      value.set_hs_sich_configuration(v);
   }

   reader.readSequenceEnd(*this);
}

void HS_SCCH_TDD384_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timeslotNumber_Type.write(writer, value.get_timeslotNumber());
   _channelisationCode_Type.write(writer, value.get_channelisationCode());
   _midambleAllocationMode_Type.write(writer, value.get_midambleAllocationMode());
   _midambleconfiguration_Type.write(writer, value.get_midambleconfiguration());
   _hs_sich_configuration_Type.write(writer, value.get_hs_sich_configuration());

   writer.writeSequenceEnd();
}


void HS_SCCH_TDD768::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimeslotNumber::ValueType v;
      _timeslotNumber_Type.read(reader, v);
      value.set_timeslotNumber(v);
   }
   {
      asn1::generated::DL_TS_ChannelisationCode_VHCR::ValueType v;
      _channelisationCode_Type.read(reader, v);
      value.set_channelisationCode(v);
   }
   {
      _INTERNAL__ChoiceType_defaultMidamble_INTERNAL_asn1__NullType_commonMidamble_INTERNAL_asn1__NullType_ueSpecificMidamble_INTERNAL__SequenceType_midambleShift_INTERNAL_asn1__generated__MidambleShiftLong::ValueType v;
      _midambleAllocationMode_Type.read(reader, v);
      value.set_midambleAllocationMode(v);
   }
   {
      asn1::generated::MidambleConfigurationBurstType1and3::ValueType v;
      _midambleconfiguration_Type.read(reader, v);
      value.set_midambleconfiguration(v);
   }
   {
      asn1::generated::HS_SICH_Configuration_TDD768::ValueType v;
      _hs_sich_configuration_Type.read(reader, v);
      value.set_hs_sich_configuration(v);
   }

   reader.readSequenceEnd(*this);
}

void HS_SCCH_TDD768::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timeslotNumber_Type.write(writer, value.get_timeslotNumber());
   _channelisationCode_Type.write(writer, value.get_channelisationCode());
   _midambleAllocationMode_Type.write(writer, value.get_midambleAllocationMode());
   _midambleconfiguration_Type.write(writer, value.get_midambleconfiguration());
   _hs_sich_configuration_Type.write(writer, value.get_hs_sich_configuration());

   writer.writeSequenceEnd();
}


void HS_SICH_Configuration_TDD384::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimeslotNumber::ValueType v;
      _timeslotNumber_Type.read(reader, v);
      value.set_timeslotNumber(v);
   }
   {
      asn1::generated::DL_TS_ChannelisationCode::ValueType v;
      _channelisationCode_Type.read(reader, v);
      value.set_channelisationCode(v);
   }
   {
      _INTERNAL__ChoiceType_defaultMidamble_INTERNAL_asn1__NullType_ueSpecificMidamble_INTERNAL__SequenceType_midambleShift_INTERNAL_asn1__generated__MidambleShiftLong::ValueType v;
      _midambleAllocationMode_Type.read(reader, v);
      value.set_midambleAllocationMode(v);
   }
   {
      asn1::generated::MidambleConfigurationBurstType1and3::ValueType v;
      _midambleconfiguration_Type.read(reader, v);
      value.set_midambleconfiguration(v);
   }

   reader.readSequenceEnd(*this);
}

void HS_SICH_Configuration_TDD384::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timeslotNumber_Type.write(writer, value.get_timeslotNumber());
   _channelisationCode_Type.write(writer, value.get_channelisationCode());
   _midambleAllocationMode_Type.write(writer, value.get_midambleAllocationMode());
   _midambleconfiguration_Type.write(writer, value.get_midambleconfiguration());

   writer.writeSequenceEnd();
}


void HS_SICH_Configuration_TDD768::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimeslotNumber::ValueType v;
      _timeslotNumber_Type.read(reader, v);
      value.set_timeslotNumber(v);
   }
   {
      asn1::generated::DL_TS_ChannelisationCode_VHCR::ValueType v;
      _channelisationCode_Type.read(reader, v);
      value.set_channelisationCode(v);
   }
   {
      _INTERNAL__ChoiceType_defaultMidamble_INTERNAL_asn1__NullType_ueSpecificMidamble_INTERNAL__SequenceType_midambleShift_INTERNAL_asn1__generated__MidambleShiftLong::ValueType v;
      _midambleAllocationMode_Type.read(reader, v);
      value.set_midambleAllocationMode(v);
   }
   {
      asn1::generated::MidambleConfigurationBurstType1and3::ValueType v;
      _midambleconfiguration_Type.read(reader, v);
      value.set_midambleconfiguration(v);
   }

   reader.readSequenceEnd(*this);
}

void HS_SICH_Configuration_TDD768::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timeslotNumber_Type.write(writer, value.get_timeslotNumber());
   _channelisationCode_Type.write(writer, value.get_channelisationCode());
   _midambleAllocationMode_Type.write(writer, value.get_midambleAllocationMode());
   _midambleconfiguration_Type.write(writer, value.get_midambleconfiguration());

   writer.writeSequenceEnd();
}


void HS_SICH_Power_Control_Info_TDD384::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _ul_target_SIR_Type.read(reader, v);
      value.set_ul_target_SIR(v);
   }
   {
      asn1::generated::ConstantValue::ValueType v;
      _hs_sich_ConstantValue_Type.read(reader, v);
      value.set_hs_sich_ConstantValue(v);
   }

   reader.readSequenceEnd(*this);
}

void HS_SICH_Power_Control_Info_TDD384::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_target_SIR_Type.write(writer, value.get_ul_target_SIR());
   _hs_sich_ConstantValue_Type.write(writer, value.get_hs_sich_ConstantValue());

   writer.writeSequenceEnd();
}


void HS_SICH_Power_Control_Info_TDD768::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _ul_target_SIR_Type.read(reader, v);
      value.set_ul_target_SIR(v);
   }
   {
      asn1::generated::ConstantValue::ValueType v;
      _hs_sich_ConstantValue_Type.read(reader, v);
      value.set_hs_sich_ConstantValue(v);
   }

   reader.readSequenceEnd(*this);
}

void HS_SICH_Power_Control_Info_TDD768::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_target_SIR_Type.write(writer, value.get_ul_target_SIR());
   _hs_sich_ConstantValue_Type.write(writer, value.get_hs_sich_ConstantValue());

   writer.writeSequenceEnd();
}


void IndividualTimeslotInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimeslotNumber::ValueType v;
      _timeslotNumber_Type.read(reader, v);
      value.set_timeslotNumber(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _tfci_Existence_Type.read(reader, v);
      value.set_tfci_Existence(v);
   }
   {
      asn1::generated::MidambleShiftAndBurstType::ValueType v;
      _midambleShiftAndBurstType_Type.read(reader, v);
      value.set_midambleShiftAndBurstType(v);
   }

   reader.readSequenceEnd(*this);
}

void IndividualTimeslotInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timeslotNumber_Type.write(writer, value.get_timeslotNumber());
   _tfci_Existence_Type.write(writer, value.get_tfci_Existence());
   _midambleShiftAndBurstType_Type.write(writer, value.get_midambleShiftAndBurstType());

   writer.writeSequenceEnd();
}


void IndividualTimeslotInfo_VHCR::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimeslotNumber::ValueType v;
      _timeslotNumber_Type.read(reader, v);
      value.set_timeslotNumber(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _tfci_Existence_Type.read(reader, v);
      value.set_tfci_Existence(v);
   }
   {
      asn1::generated::MidambleShiftAndBurstType_VHCR::ValueType v;
      _midambleShiftAndBurstType_VHCR_Type.read(reader, v);
      value.set_midambleShiftAndBurstType_VHCR(v);
   }

   reader.readSequenceEnd(*this);
}

void IndividualTimeslotInfo_VHCR::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timeslotNumber_Type.write(writer, value.get_timeslotNumber());
   _tfci_Existence_Type.write(writer, value.get_tfci_Existence());
   _midambleShiftAndBurstType_VHCR_Type.write(writer, value.get_midambleShiftAndBurstType_VHCR());

   writer.writeSequenceEnd();
}


void IndividualTimeslotInfo_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimeslotNumber_LCR_r4::ValueType v;
      _timeslotNumber_Type.read(reader, v);
      value.set_timeslotNumber(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _tfci_Existence_Type.read(reader, v);
      value.set_tfci_Existence(v);
   }
   {
      asn1::generated::MidambleShiftAndBurstType_LCR_r4::ValueType v;
      _midambleShiftAndBurstType_Type.read(reader, v);
      value.set_midambleShiftAndBurstType(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _modulation_Type.read(reader, v);
      value.set_modulation(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _ss_TPC_Symbols_Type.read(reader, v);
      value.set_ss_TPC_Symbols(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _additionalSS_TPC_Symbols_Type.read(reader, v);
      value.set_additionalSS_TPC_Symbols(v);
   }

   reader.readSequenceEnd(*this);
}

void IndividualTimeslotInfo_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timeslotNumber_Type.write(writer, value.get_timeslotNumber());
   _tfci_Existence_Type.write(writer, value.get_tfci_Existence());
   _midambleShiftAndBurstType_Type.write(writer, value.get_midambleShiftAndBurstType());
   _modulation_Type.write(writer, value.get_modulation());
   _ss_TPC_Symbols_Type.write(writer, value.get_ss_TPC_Symbols());
   _additionalSS_TPC_Symbols_Type.write(writer, value.get_additionalSS_TPC_Symbols());

   writer.writeSequenceEnd();
}


void IndividualTimeslotInfo_LCR_r4_ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MidambleShiftAndBurstType_LCR_r4::ValueType v;
      _midambleShiftAndBurstType_Type.read(reader, v);
      value.set_midambleShiftAndBurstType(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _modulation_Type.read(reader, v);
      value.set_modulation(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _ss_TPC_Symbols_Type.read(reader, v);
      value.set_ss_TPC_Symbols(v);
   }

   reader.readSequenceEnd(*this);
}

void IndividualTimeslotInfo_LCR_r4_ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _midambleShiftAndBurstType_Type.write(writer, value.get_midambleShiftAndBurstType());
   _modulation_Type.write(writer, value.get_modulation());
   _ss_TPC_Symbols_Type.write(writer, value.get_ss_TPC_Symbols());

   writer.writeSequenceEnd();
}


void IndividualTS_Interference::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimeslotNumber::ValueType v;
      _timeslot_Type.read(reader, v);
      value.set_timeslot(v);
   }
   {
      asn1::generated::TDD_UL_Interference::ValueType v;
      _ul_TimeslotInterference_Type.read(reader, v);
      value.set_ul_TimeslotInterference(v);
   }

   reader.readSequenceEnd(*this);
}

void IndividualTS_Interference::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timeslot_Type.write(writer, value.get_timeslot());
   _ul_TimeslotInterference_Type.write(writer, value.get_ul_TimeslotInterference());

   writer.writeSequenceEnd();
}


void Measurement_Feedback_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_measurementPowerOffset_INTERNAL_asn1__generated__MeasurementPowerOffset_feedback-cycle_INTERNAL_asn1__generated__Feedback_cycle_cqi-RepetitionFactor_INTERNAL_asn1__generated__CQI_RepetitionFactor_deltaCQI_INTERNAL_asn1__generated__DeltaCQI_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void Measurement_Feedback_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void MidambleShiftAndBurstType::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_type1_INTERNAL__SequenceType_midambleConfigurationBurstType1and3_INTERNAL_asn1__generated__MidambleConfigurationBurstType1and3_midambleAllocationMode_INTERNAL__ChoiceType_defaultMidamble_INTERNAL_asn1__NullType_commonMidamble_INTERNAL_asn1__NullType_ueSpecificMidamble_INTERNAL__SequenceType_midambleShift_INTERNAL_asn1__generated__MidambleShiftLong_type2_INTERNAL__SequenceType_midambleConfigurationBurstType2_INTERNAL_asn1__generated__MidambleConfigurationBurstType2_midambleAllocationMode_INTERNAL__ChoiceType_defaultMidamble_INTERNAL_asn1__NullType_commonMidamble_INTERNAL_asn1__NullType_ueSpecificMidamble_INTERNAL__SequenceType_midambleShift_INTERNAL_asn1__generated__MidambleShiftShort_type3_INTERNAL__SequenceType_midambleConfigurationBurstType1and3_INTERNAL_asn1__generated__MidambleConfigurationBurstType1and3_midambleAllocationMode_INTERNAL__ChoiceType_defaultMidamble_INTERNAL_asn1__NullType_ueSpecificMidamble_INTERNAL__SequenceType_midambleShift_INTERNAL_asn1__generated__MidambleShiftLong::ValueType v;
      _burstType_Type.read(reader, v);
      value.set_burstType(v);
   }

   reader.readSequenceEnd(*this);
}

void MidambleShiftAndBurstType::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _burstType_Type.write(writer, value.get_burstType());

   writer.writeSequenceEnd();
}


void MidambleShiftAndBurstType_VHCR::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_type1_INTERNAL__SequenceType_midambleConfigurationBurstType1and3_INTERNAL_asn1__generated__MidambleConfigurationBurstType1and3_midambleAllocationMode_INTERNAL__ChoiceType_defaultMidamble_INTERNAL_asn1__NullType_commonMidamble_INTERNAL_asn1__NullType_ueSpecificMidamble_INTERNAL__SequenceType_midambleShift_INTERNAL_asn1__generated__MidambleShiftLong_type2_INTERNAL__SequenceType_midambleConfigurationBurstType2_INTERNAL_asn1__generated__MidambleConfigurationBurstType2_VHCR_midambleAllocationMode_INTERNAL__ChoiceType_defaultMidamble_INTERNAL_asn1__NullType_commonMidamble_INTERNAL_asn1__NullType_ueSpecificMidamble_INTERNAL__SequenceType_midambleShift_INTERNAL_asn1__generated__MidambleShiftShort_VHCR_type3_INTERNAL__SequenceType_midambleConfigurationBurstType1and3_INTERNAL_asn1__generated__MidambleConfigurationBurstType1and3_midambleAllocationMode_INTERNAL__ChoiceType_defaultMidamble_INTERNAL_asn1__NullType_ueSpecificMidamble_INTERNAL__SequenceType_midambleShift_INTERNAL_asn1__generated__MidambleShiftLong::ValueType v;
      _burstType_Type.read(reader, v);
      value.set_burstType(v);
   }

   reader.readSequenceEnd(*this);
}

void MidambleShiftAndBurstType_VHCR::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _burstType_Type.write(writer, value.get_burstType());

   writer.writeSequenceEnd();
}


void MidambleShiftAndBurstType_DL::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_type1_INTERNAL__SequenceType_midambleConfigurationBurstType1and3_INTERNAL_asn1__generated__MidambleConfigurationBurstType1and3_midambleAllocationMode_INTERNAL__ChoiceType_defaultMidamble_INTERNAL_asn1__NullType_commonMidamble_INTERNAL_asn1__NullType_ueSpecificMidamble_INTERNAL__SequenceType_midambleShift_INTERNAL_asn1__generated__MidambleShiftLong_type2_INTERNAL__SequenceType_midambleConfigurationBurstType2_INTERNAL_asn1__generated__MidambleConfigurationBurstType2_midambleAllocationMode_INTERNAL__ChoiceType_defaultMidamble_INTERNAL_asn1__NullType_commonMidamble_INTERNAL_asn1__NullType_ueSpecificMidamble_INTERNAL__SequenceType_midambleShift_INTERNAL_asn1__generated__MidambleShiftShort::ValueType v;
      _burstType_Type.read(reader, v);
      value.set_burstType(v);
   }

   reader.readSequenceEnd(*this);
}

void MidambleShiftAndBurstType_DL::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _burstType_Type.write(writer, value.get_burstType());

   writer.writeSequenceEnd();
}


void MidambleShiftAndBurstType_DL_VHCR::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_type1_INTERNAL__SequenceType_midambleConfigurationBurstType1and3_INTERNAL_asn1__generated__MidambleConfigurationBurstType1and3_midambleAllocationMode_INTERNAL__ChoiceType_defaultMidamble_INTERNAL_asn1__NullType_commonMidamble_INTERNAL_asn1__NullType_ueSpecificMidamble_INTERNAL__SequenceType_midambleShift_INTERNAL_asn1__generated__MidambleShiftLong_type2_INTERNAL__SequenceType_midambleConfigurationBurstType2_INTERNAL_asn1__generated__MidambleConfigurationBurstType2_VHCR_midambleAllocationMode_INTERNAL__ChoiceType_defaultMidamble_INTERNAL_asn1__NullType_commonMidamble_INTERNAL_asn1__NullType_ueSpecificMidamble_INTERNAL__SequenceType_midambleShift_INTERNAL_asn1__generated__MidambleShiftShort_VHCR::ValueType v;
      _burstType_Type.read(reader, v);
      value.set_burstType(v);
   }

   reader.readSequenceEnd(*this);
}

void MidambleShiftAndBurstType_DL_VHCR::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _burstType_Type.write(writer, value.get_burstType());

   writer.writeSequenceEnd();
}


void MidambleShiftAndBurstType_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_defaultMidamble_INTERNAL_asn1__NullType_commonMidamble_INTERNAL_asn1__NullType_ueSpecificMidamble_INTERNAL__SequenceType_midambleShift_INTERNAL_asn1__IntegerType::ValueType v;
      _midambleAllocationMode_Type.read(reader, v);
      value.set_midambleAllocationMode(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _midambleConfiguration_Type.read(reader, v);
      value.set_midambleConfiguration(v);
   }

   reader.readSequenceEnd(*this);
}

void MidambleShiftAndBurstType_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _midambleAllocationMode_Type.write(writer, value.get_midambleAllocationMode());
   _midambleConfiguration_Type.write(writer, value.get_midambleConfiguration());

   writer.writeSequenceEnd();
}


void OpenLoopPowerControl_TDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PrimaryCCPCH_TX_Power::ValueType v;
      _primaryCCPCH_TX_Power_Type.read(reader, v);
      value.set_primaryCCPCH_TX_Power(v);
   }
   {
      asn1::generated::Alpha::ValueType v;
      _alpha_Type.read(reader, v);
      value.set_alpha(v);
   }
   {
      asn1::generated::ConstantValueTdd::ValueType v;
      _prach_ConstantValue_Type.read(reader, v);
      value.set_prach_ConstantValue(v);
   }
   {
      asn1::generated::ConstantValueTdd::ValueType v;
      _dpch_ConstantValue_Type.read(reader, v);
      value.set_dpch_ConstantValue(v);
   }
   {
      asn1::generated::ConstantValueTdd::ValueType v;
      _pusch_ConstantValue_Type.read(reader, v);
      value.set_pusch_ConstantValue(v);
   }

   reader.readSequenceEnd(*this);
}

void OpenLoopPowerControl_TDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _primaryCCPCH_TX_Power_Type.write(writer, value.get_primaryCCPCH_TX_Power());
   _alpha_Type.write(writer, value.get_alpha());
   _prach_ConstantValue_Type.write(writer, value.get_prach_ConstantValue());
   _dpch_ConstantValue_Type.write(writer, value.get_dpch_ConstantValue());
   _pusch_ConstantValue_Type.write(writer, value.get_pusch_ConstantValue());

   writer.writeSequenceEnd();
}


void OpenLoopPowerControl_IPDL_TDD_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Alpha::ValueType v;
      _ipdl_alpha_Type.read(reader, v);
      value.set_ipdl_alpha(v);
   }
   {
      asn1::generated::MaxPowerIncrease_r4::ValueType v;
      _maxPowerIncrease_Type.read(reader, v);
      value.set_maxPowerIncrease(v);
   }

   reader.readSequenceEnd(*this);
}

void OpenLoopPowerControl_IPDL_TDD_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ipdl_alpha_Type.write(writer, value.get_ipdl_alpha());
   _maxPowerIncrease_Type.write(writer, value.get_maxPowerIncrease());

   writer.writeSequenceEnd();
}


void PCPCH_ChannelInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _pcpch_UL_ScramblingCode_Type.read(reader, v);
      value.set_pcpch_UL_ScramblingCode(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _pcpch_DL_ChannelisationCode_Type.read(reader, v);
      value.set_pcpch_DL_ChannelisationCode(v);
   }
   {
      asn1::generated::SecondaryScramblingCode::ValueType v;
      _pcpch_DL_ScramblingCode_Type.read(reader, v);
      value.set_pcpch_DL_ScramblingCode(v);
   }
   {
      asn1::generated::PCP_Length::ValueType v;
      _pcp_Length_Type.read(reader, v);
      value.set_pcp_Length(v);
   }
   {
      asn1::generated::UCSM_Info::ValueType v;
      _ucsm_Info_Type.read(reader, v);
      value.set_ucsm_Info(v);
   }

   reader.readSequenceEnd(*this);
}

void PCPCH_ChannelInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pcpch_UL_ScramblingCode_Type.write(writer, value.get_pcpch_UL_ScramblingCode());
   _pcpch_DL_ChannelisationCode_Type.write(writer, value.get_pcpch_DL_ChannelisationCode());
   _pcpch_DL_ScramblingCode_Type.write(writer, value.get_pcpch_DL_ScramblingCode());
   _pcp_Length_Type.write(writer, value.get_pcp_Length());
   _ucsm_Info_Type.write(writer, value.get_ucsm_Info());

   writer.writeSequenceEnd();
}


void PDSCH_CapacityAllocationInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PDSCH_PowerControlInfo::ValueType v;
      _pdsch_PowerControlInfo_Type.read(reader, v);
      value.set_pdsch_PowerControlInfo(v);
   }
   {
      asn1::generated::AllocationPeriodInfo::ValueType v;
      _pdsch_AllocationPeriodInfo_Type.read(reader, v);
      value.set_pdsch_AllocationPeriodInfo(v);
   }
   {
      _INTERNAL__ChoiceType_old-Configuration_INTERNAL__SequenceType_tfcs-ID_INTERNAL_asn1__generated__TFCS_IdentityPlain_pdsch-Identity_INTERNAL_asn1__generated__PDSCH_Identity_new-Configuration_INTERNAL__SequenceType_pdsch-Info_INTERNAL_asn1__generated__PDSCH_Info_pdsch-Identity_INTERNAL_asn1__generated__PDSCH_Identity::ValueType v;
      _configuration_Type.read(reader, v);
      value.set_configuration(v);
   }

   reader.readSequenceEnd(*this);
}

void PDSCH_CapacityAllocationInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pdsch_PowerControlInfo_Type.write(writer, value.get_pdsch_PowerControlInfo());
   _pdsch_AllocationPeriodInfo_Type.write(writer, value.get_pdsch_AllocationPeriodInfo());
   _configuration_Type.write(writer, value.get_configuration());

   writer.writeSequenceEnd();
}


void PDSCH_CapacityAllocationInfo_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::AllocationPeriodInfo::ValueType v;
      _pdsch_AllocationPeriodInfo_Type.read(reader, v);
      value.set_pdsch_AllocationPeriodInfo(v);
   }
   {
      _INTERNAL__ChoiceType_old-Configuration_INTERNAL__SequenceType_tfcs-ID_INTERNAL_asn1__generated__TFCS_IdentityPlain_pdsch-Identity_INTERNAL_asn1__generated__PDSCH_Identity_new-Configuration_INTERNAL__SequenceType_pdsch-Info_INTERNAL_asn1__generated__PDSCH_Info_r4_pdsch-Identity_INTERNAL_asn1__generated__PDSCH_Identity_pdsch-PowerControlInfo_INTERNAL_asn1__generated__PDSCH_PowerControlInfo::ValueType v;
      _configuration_Type.read(reader, v);
      value.set_configuration(v);
   }

   reader.readSequenceEnd(*this);
}

void PDSCH_CapacityAllocationInfo_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pdsch_AllocationPeriodInfo_Type.write(writer, value.get_pdsch_AllocationPeriodInfo());
   _configuration_Type.write(writer, value.get_configuration());

   writer.writeSequenceEnd();
}


void PDSCH_CapacityAllocationInfo_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::AllocationPeriodInfo::ValueType v;
      _pdsch_AllocationPeriodInfo_Type.read(reader, v);
      value.set_pdsch_AllocationPeriodInfo(v);
   }
   {
      _INTERNAL__ChoiceType_old-Configuration_INTERNAL__SequenceType_tfcs-ID_INTERNAL_asn1__generated__TFCS_IdentityPlain_pdsch-Identity_INTERNAL_asn1__generated__PDSCH_Identity_new-Configuration_INTERNAL__SequenceType_pdsch-Info_INTERNAL_asn1__generated__PDSCH_Info_r7_pdsch-Identity_INTERNAL_asn1__generated__PDSCH_Identity_pdsch-PowerControlInfo_INTERNAL_asn1__generated__PDSCH_PowerControlInfo::ValueType v;
      _configuration_Type.read(reader, v);
      value.set_configuration(v);
   }

   reader.readSequenceEnd(*this);
}

void PDSCH_CapacityAllocationInfo_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pdsch_AllocationPeriodInfo_Type.write(writer, value.get_pdsch_AllocationPeriodInfo());
   _configuration_Type.write(writer, value.get_configuration());

   writer.writeSequenceEnd();
}


void PDSCH_CodeInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SF_PDSCH::ValueType v;
      _spreadingFactor_Type.read(reader, v);
      value.set_spreadingFactor(v);
   }
   {
      asn1::generated::CodeNumberDSCH::ValueType v;
      _codeNumber_Type.read(reader, v);
      value.set_codeNumber(v);
   }
   {
      asn1::generated::MultiCodeInfo::ValueType v;
      _multiCodeInfo_Type.read(reader, v);
      value.set_multiCodeInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void PDSCH_CodeInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _spreadingFactor_Type.write(writer, value.get_spreadingFactor());
   _codeNumber_Type.write(writer, value.get_codeNumber());
   _multiCodeInfo_Type.write(writer, value.get_multiCodeInfo());

   writer.writeSequenceEnd();
}


void PDSCH_CodeMap::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SF_PDSCH::ValueType v;
      _spreadingFactor_Type.read(reader, v);
      value.set_spreadingFactor(v);
   }
   {
      asn1::generated::MultiCodeInfo::ValueType v;
      _multiCodeInfo_Type.read(reader, v);
      value.set_multiCodeInfo(v);
   }
   {
      asn1::generated::CodeNumberDSCH::ValueType v;
      _codeNumberStart_Type.read(reader, v);
      value.set_codeNumberStart(v);
   }
   {
      asn1::generated::CodeNumberDSCH::ValueType v;
      _codeNumberStop_Type.read(reader, v);
      value.set_codeNumberStop(v);
   }

   reader.readSequenceEnd(*this);
}

void PDSCH_CodeMap::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _spreadingFactor_Type.write(writer, value.get_spreadingFactor());
   _multiCodeInfo_Type.write(writer, value.get_multiCodeInfo());
   _codeNumberStart_Type.write(writer, value.get_codeNumberStart());
   _codeNumberStop_Type.write(writer, value.get_codeNumberStop());

   writer.writeSequenceEnd();
}


void PDSCH_CodeMapping::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SecondaryScramblingCode::ValueType v;
      _dl_ScramblingCode_Type.read(reader, v);
      value.set_dl_ScramblingCode(v);
   }
   {
      _INTERNAL__ChoiceType_codeRange_INTERNAL_asn1__generated__CodeRange_tfci-Range_INTERNAL_asn1__generated__DSCH_MappingList_explicit-config_INTERNAL_asn1__generated__PDSCH_CodeInfoList_replace_INTERNAL_asn1__generated__ReplacedPDSCH_CodeInfoList::ValueType v;
      _signallingMethod_Type.read(reader, v);
      value.set_signallingMethod(v);
   }

   reader.readSequenceEnd(*this);
}

void PDSCH_CodeMapping::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_ScramblingCode_Type.write(writer, value.get_dl_ScramblingCode());
   _signallingMethod_Type.write(writer, value.get_signallingMethod());

   writer.writeSequenceEnd();
}


void PDSCH_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_IdentityPlain::ValueType v;
      _tfcs_ID_Type.read(reader, v);
      value.set_tfcs_ID(v);
   }
   {
      asn1::generated::CommonTimeslotInfo::ValueType v;
      _commonTimeslotInfo_Type.read(reader, v);
      value.set_commonTimeslotInfo(v);
   }
   {
      asn1::generated::DownlinkTimeslotsCodes::ValueType v;
      _pdsch_TimeslotsCodes_Type.read(reader, v);
      value.set_pdsch_TimeslotsCodes(v);
   }

   reader.readSequenceEnd(*this);
}

void PDSCH_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfcs_ID_Type.write(writer, value.get_tfcs_ID());
   _commonTimeslotInfo_Type.write(writer, value.get_commonTimeslotInfo());
   _pdsch_TimeslotsCodes_Type.write(writer, value.get_pdsch_TimeslotsCodes());

   writer.writeSequenceEnd();
}


void PDSCH_Info_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_IdentityPlain::ValueType v;
      _tfcs_ID_Type.read(reader, v);
      value.set_tfcs_ID(v);
   }
   {
      asn1::generated::CommonTimeslotInfo::ValueType v;
      _commonTimeslotInfo_Type.read(reader, v);
      value.set_commonTimeslotInfo(v);
   }
   {
      _INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_pdsch-TimeslotsCodes_INTERNAL_asn1__generated__DownlinkTimeslotsCodes_tdd128_INTERNAL__SequenceType_pdsch-TimeslotsCodes_INTERNAL_asn1__generated__DownlinkTimeslotsCodes_LCR_r4::ValueType v;
      _tddOption_Type.read(reader, v);
      value.set_tddOption(v);
   }

   reader.readSequenceEnd(*this);
}

void PDSCH_Info_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfcs_ID_Type.write(writer, value.get_tfcs_ID());
   _commonTimeslotInfo_Type.write(writer, value.get_commonTimeslotInfo());
   _tddOption_Type.write(writer, value.get_tddOption());

   writer.writeSequenceEnd();
}


void PDSCH_Info_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_IdentityPlain::ValueType v;
      _tfcs_ID_Type.read(reader, v);
      value.set_tfcs_ID(v);
   }
   {
      asn1::generated::CommonTimeslotInfo::ValueType v;
      _commonTimeslotInfo_Type.read(reader, v);
      value.set_commonTimeslotInfo(v);
   }
   {
      _INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_pdsch-TimeslotsCodes_INTERNAL_asn1__generated__DownlinkTimeslotsCodes_tdd768_INTERNAL__SequenceType_pdsch-TimeslotsCodes_INTERNAL_asn1__generated__DownlinkTimeslotsCodes_VHCR_tdd128_INTERNAL__SequenceType_pdsch-TimeslotsCodes_INTERNAL_asn1__generated__DownlinkTimeslotsCodes_LCR_r4::ValueType v;
      _tddOption_Type.read(reader, v);
      value.set_tddOption(v);
   }

   reader.readSequenceEnd(*this);
}

void PDSCH_Info_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfcs_ID_Type.write(writer, value.get_tfcs_ID());
   _commonTimeslotInfo_Type.write(writer, value.get_commonTimeslotInfo());
   _tddOption_Type.write(writer, value.get_tddOption());

   writer.writeSequenceEnd();
}


void PDSCH_Info_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_IdentityPlain::ValueType v;
      _tfcs_ID_Type.read(reader, v);
      value.set_tfcs_ID(v);
   }
   {
      asn1::generated::CommonTimeslotInfo::ValueType v;
      _commonTimeslotInfo_Type.read(reader, v);
      value.set_commonTimeslotInfo(v);
   }
   {
      asn1::generated::DownlinkTimeslotsCodes_LCR_r4::ValueType v;
      _pdsch_TimeslotsCodes_Type.read(reader, v);
      value.set_pdsch_TimeslotsCodes(v);
   }

   reader.readSequenceEnd(*this);
}

void PDSCH_Info_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfcs_ID_Type.write(writer, value.get_tfcs_ID());
   _commonTimeslotInfo_Type.write(writer, value.get_commonTimeslotInfo());
   _pdsch_TimeslotsCodes_Type.write(writer, value.get_pdsch_TimeslotsCodes());

   writer.writeSequenceEnd();
}


void PDSCH_PowerControlInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TPC_StepSizeTDD::ValueType v;
      _tpc_StepSizeTDD_Type.read(reader, v);
      value.set_tpc_StepSizeTDD(v);
   }
   {
      asn1::generated::UL_CCTrChTPCList::ValueType v;
      _ul_CCTrChTPCList_Type.read(reader, v);
      value.set_ul_CCTrChTPCList(v);
   }

   reader.readSequenceEnd(*this);
}

void PDSCH_PowerControlInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tpc_StepSizeTDD_Type.write(writer, value.get_tpc_StepSizeTDD());
   _ul_CCTrChTPCList_Type.write(writer, value.get_ul_CCTrChTPCList());

   writer.writeSequenceEnd();
}


void PDSCH_SHO_DCH_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DSCH_RadioLinkIdentifier::ValueType v;
      _dsch_RadioLinkIdentifier_Type.read(reader, v);
      value.set_dsch_RadioLinkIdentifier(v);
   }
   {
      asn1::generated::RL_IdentifierList::ValueType v;
      _rl_IdentifierList_Type.read(reader, v);
      value.set_rl_IdentifierList(v);
   }

   reader.readSequenceEnd(*this);
}

void PDSCH_SHO_DCH_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dsch_RadioLinkIdentifier_Type.write(writer, value.get_dsch_RadioLinkIdentifier());
   _rl_IdentifierList_Type.write(writer, value.get_rl_IdentifierList());

   writer.writeSequenceEnd();
}


void PDSCH_SysInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PDSCH_Identity::ValueType v;
      _pdsch_Identity_Type.read(reader, v);
      value.set_pdsch_Identity(v);
   }
   {
      asn1::generated::PDSCH_Info::ValueType v;
      _pdsch_Info_Type.read(reader, v);
      value.set_pdsch_Info(v);
   }
   {
      asn1::generated::TransportFormatSet::ValueType v;
      _dsch_TFS_Type.read(reader, v);
      value.set_dsch_TFS(v);
   }
   {
      asn1::generated::TFCS::ValueType v;
      _dsch_TFCS_Type.read(reader, v);
      value.set_dsch_TFCS(v);
   }

   reader.readSequenceEnd(*this);
}

void PDSCH_SysInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pdsch_Identity_Type.write(writer, value.get_pdsch_Identity());
   _pdsch_Info_Type.write(writer, value.get_pdsch_Info());
   _dsch_TFS_Type.write(writer, value.get_dsch_TFS());
   _dsch_TFCS_Type.write(writer, value.get_dsch_TFCS());

   writer.writeSequenceEnd();
}


void PDSCH_SysInfo_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PDSCH_Identity::ValueType v;
      _pdsch_Identity_Type.read(reader, v);
      value.set_pdsch_Identity(v);
   }
   {
      asn1::generated::PDSCH_Info_r7::ValueType v;
      _pdsch_Info_Type.read(reader, v);
      value.set_pdsch_Info(v);
   }
   {
      asn1::generated::DSCH_TransportChannelsInfo::ValueType v;
      _dsch_TransportChannelsInfo_Type.read(reader, v);
      value.set_dsch_TransportChannelsInfo(v);
   }
   {
      asn1::generated::TFCS::ValueType v;
      _dsch_TFCS_Type.read(reader, v);
      value.set_dsch_TFCS(v);
   }

   reader.readSequenceEnd(*this);
}

void PDSCH_SysInfo_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pdsch_Identity_Type.write(writer, value.get_pdsch_Identity());
   _pdsch_Info_Type.write(writer, value.get_pdsch_Info());
   _dsch_TransportChannelsInfo_Type.write(writer, value.get_dsch_TransportChannelsInfo());
   _dsch_TFCS_Type.write(writer, value.get_dsch_TFCS());

   writer.writeSequenceEnd();
}


void PDSCH_SysInfo_HCR_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PDSCH_Identity::ValueType v;
      _pdsch_Identity_Type.read(reader, v);
      value.set_pdsch_Identity(v);
   }
   {
      asn1::generated::PDSCH_Info::ValueType v;
      _pdsch_Info_Type.read(reader, v);
      value.set_pdsch_Info(v);
   }
   {
      asn1::generated::DSCH_TransportChannelsInfo::ValueType v;
      _dsch_TransportChannelsInfo_Type.read(reader, v);
      value.set_dsch_TransportChannelsInfo(v);
   }
   {
      asn1::generated::TFCS::ValueType v;
      _dsch_TFCS_Type.read(reader, v);
      value.set_dsch_TFCS(v);
   }

   reader.readSequenceEnd(*this);
}

void PDSCH_SysInfo_HCR_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pdsch_Identity_Type.write(writer, value.get_pdsch_Identity());
   _pdsch_Info_Type.write(writer, value.get_pdsch_Info());
   _dsch_TransportChannelsInfo_Type.write(writer, value.get_dsch_TransportChannelsInfo());
   _dsch_TFCS_Type.write(writer, value.get_dsch_TFCS());

   writer.writeSequenceEnd();
}


void PDSCH_SysInfo_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PDSCH_Identity::ValueType v;
      _pdsch_Identity_Type.read(reader, v);
      value.set_pdsch_Identity(v);
   }
   {
      asn1::generated::PDSCH_Info_LCR_r4::ValueType v;
      _pdsch_Info_Type.read(reader, v);
      value.set_pdsch_Info(v);
   }
   {
      asn1::generated::TransportFormatSet::ValueType v;
      _dsch_TFS_Type.read(reader, v);
      value.set_dsch_TFS(v);
   }
   {
      asn1::generated::TFCS::ValueType v;
      _dsch_TFCS_Type.read(reader, v);
      value.set_dsch_TFCS(v);
   }

   reader.readSequenceEnd(*this);
}

void PDSCH_SysInfo_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pdsch_Identity_Type.write(writer, value.get_pdsch_Identity());
   _pdsch_Info_Type.write(writer, value.get_pdsch_Info());
   _dsch_TFS_Type.write(writer, value.get_dsch_TFS());
   _dsch_TFCS_Type.write(writer, value.get_dsch_TFCS());

   writer.writeSequenceEnd();
}


void PICH-Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_fdd_Type)
   {
      _INTERNAL__SequenceType_channelisationCode256_INTERNAL_asn1__generated__ChannelisationCode256_pi-CountPerFrame_INTERNAL_asn1__generated__PI_CountPerFrame_sttd-Indicator_INTERNAL_asn1__BooleanType::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   else if (choosenType == &_tdd_Type)
   {
      _INTERNAL__SequenceType_channelisationCode_INTERNAL_asn1__generated__TDD_PICH_CCode_timeslot_INTERNAL_asn1__generated__TimeslotNumber_midambleShiftAndBurstType_INTERNAL_asn1__generated__MidambleShiftAndBurstType_repetitionPeriodLengthOffset_INTERNAL_asn1__generated__RepPerLengthOffset_PICH_pagingIndicatorLength_INTERNAL_asn1__generated__PagingIndicatorLength_n-GAP_INTERNAL_asn1__generated__N_GAP_n-PCH_INTERNAL_asn1__generated__N_PCH::ValueType v;
      _tdd_Type.read(reader, v);
      value.set_tdd(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _fdd_Type.toString() + ", " + _tdd_Type.toString());
   }
}

void PICH-Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_fdd_Choosen())
      _fdd_Type.write(writer, value.get_fdd());
   else if (value.has_tdd_Choosen())
      _tdd_Type.write(writer, value.get_tdd());
}


void PICH-Info-r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_fdd_Type)
   {
      _INTERNAL__SequenceType_channelisationCode256_INTERNAL_asn1__generated__ChannelisationCode256_pi-CountPerFrame_INTERNAL_asn1__generated__PI_CountPerFrame_sttd-Indicator_INTERNAL_asn1__BooleanType::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   else if (choosenType == &_tdd384_Type)
   {
      _INTERNAL__SequenceType_channelisationCode_INTERNAL_asn1__generated__TDD_PICH_CCode_timeslot_INTERNAL_asn1__generated__TimeslotNumber_midambleShiftAndBurstType_INTERNAL_asn1__generated__MidambleShiftAndBurstType_repetitionPeriodLengthOffset_INTERNAL_asn1__generated__RepPerLengthOffset_PICH_pagingIndicatorLength_INTERNAL_asn1__generated__PagingIndicatorLength_n-GAP_INTERNAL_asn1__generated__N_GAP_n-PCH_INTERNAL_asn1__generated__N_PCH::ValueType v;
      _tdd384_Type.read(reader, v);
      value.set_tdd384(v);
   }
   else if (choosenType == &_tdd768_Type)
   {
      _INTERNAL__SequenceType_channelisationCode_INTERNAL_asn1__generated__TDD768_PICH_CCode_timeslot_INTERNAL_asn1__generated__TimeslotNumber_midambleShiftAndBurstType_INTERNAL_asn1__generated__MidambleShiftAndBurstType_repetitionPeriodLengthOffset_INTERNAL_asn1__generated__RepPerLengthOffset_PICH_pagingIndicatorLength_INTERNAL_asn1__generated__PagingIndicatorLength_n-GAP_INTERNAL_asn1__generated__N_GAP_n-PCH_INTERNAL_asn1__generated__N_PCH::ValueType v;
      _tdd768_Type.read(reader, v);
      value.set_tdd768(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _fdd_Type.toString() + ", " + _tdd384_Type.toString() + ", " + _tdd768_Type.toString());
   }
}

void PICH-Info-r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_fdd_Choosen())
      _fdd_Type.write(writer, value.get_fdd());
   else if (value.has_tdd384_Choosen())
      _tdd384_Type.write(writer, value.get_tdd384());
   else if (value.has_tdd768_Choosen())
      _tdd768_Type.write(writer, value.get_tdd768());
}


void PICH_Info_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimeslotNumber_LCR_r4::ValueType v;
      _timeslot_Type.read(reader, v);
      value.set_timeslot(v);
   }
   {
      asn1::generated::PichChannelisationCodeList_LCR_r4::ValueType v;
      _pichChannelisationCodeList_LCR_r4_Type.read(reader, v);
      value.set_pichChannelisationCodeList_LCR_r4(v);
   }
   {
      asn1::generated::MidambleShiftAndBurstType_LCR_r4::ValueType v;
      _midambleShiftAndBurstType_Type.read(reader, v);
      value.set_midambleShiftAndBurstType(v);
   }
   {
      asn1::generated::RepPerLengthOffset_PICH::ValueType v;
      _repetitionPeriodLengthOffset_Type.read(reader, v);
      value.set_repetitionPeriodLengthOffset(v);
   }
   {
      asn1::generated::PagingIndicatorLength::ValueType v;
      _pagingIndicatorLength_Type.read(reader, v);
      value.set_pagingIndicatorLength(v);
   }
   {
      asn1::generated::N_GAP::ValueType v;
      _n_GAP_Type.read(reader, v);
      value.set_n_GAP(v);
   }
   {
      asn1::generated::N_PCH::ValueType v;
      _n_PCH_Type.read(reader, v);
      value.set_n_PCH(v);
   }

   reader.readSequenceEnd(*this);
}

void PICH_Info_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timeslot_Type.write(writer, value.get_timeslot());
   _pichChannelisationCodeList_LCR_r4_Type.write(writer, value.get_pichChannelisationCodeList_LCR_r4());
   _midambleShiftAndBurstType_Type.write(writer, value.get_midambleShiftAndBurstType());
   _repetitionPeriodLengthOffset_Type.write(writer, value.get_repetitionPeriodLengthOffset());
   _pagingIndicatorLength_Type.write(writer, value.get_pagingIndicatorLength());
   _n_GAP_Type.write(writer, value.get_n_GAP());
   _n_PCH_Type.write(writer, value.get_n_PCH());

   writer.writeSequenceEnd();
}


void PLCCH_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _plcchSequenceNumber_Type.read(reader, v);
      value.set_plcchSequenceNumber(v);
   }
   {
      asn1::generated::TimeslotNumber_LCR_r4::ValueType v;
      _timeslotNumber_Type.read(reader, v);
      value.set_timeslotNumber(v);
   }
   {
      asn1::generated::DL_TS_ChannelisationCode::ValueType v;
      _channelisationCode_Type.read(reader, v);
      value.set_channelisationCode(v);
   }
   {
      asn1::generated::TPC_CommandTargetRate::ValueType v;
      _tpcCommandTargetRate_Type.read(reader, v);
      value.set_tpcCommandTargetRate(v);
   }

   reader.readSequenceEnd(*this);
}

void PLCCH_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _plcchSequenceNumber_Type.write(writer, value.get_plcchSequenceNumber());
   _timeslotNumber_Type.write(writer, value.get_timeslotNumber());
   _channelisationCode_Type.write(writer, value.get_channelisationCode());
   _tpcCommandTargetRate_Type.write(writer, value.get_tpcCommandTargetRate());

   writer.writeSequenceEnd();
}


void PowerControlAlgorithm::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_algorithm1_Type)
   {
      asn1::generated::TPC_StepSizeFDD::ValueType v;
      _algorithm1_Type.read(reader, v);
      value.set_algorithm1(v);
   }
   else if (choosenType == &_algorithm2_Type)
   {
      asn1::NullType::ValueType v;
      _algorithm2_Type.read(reader, v);
      value.set_algorithm2(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _algorithm1_Type.toString() + ", " + _algorithm2_Type.toString());
   }
}

void PowerControlAlgorithm::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_algorithm1_Choosen())
      _algorithm1_Type.write(writer, value.get_algorithm1());
   else if (value.has_algorithm2_Choosen())
      _algorithm2_Type.write(writer, value.get_algorithm2());
}


void PRACH_Definition_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimeslotNumber_PRACH_LCR_r4::ValueType v;
      _timeslot_Type.read(reader, v);
      value.set_timeslot(v);
   }
   {
      asn1::generated::PRACH_ChanCodes_LCR_r4::ValueType v;
      _prach_ChanCodes_LCR_Type.read(reader, v);
      value.set_prach_ChanCodes_LCR(v);
   }
   {
      asn1::generated::MidambleShiftAndBurstType_LCR_r4::ValueType v;
      _midambleShiftAndBurstType_Type.read(reader, v);
      value.set_midambleShiftAndBurstType(v);
   }
   {
      asn1::generated::FPACH_Info_r4::ValueType v;
      _fpach_Info_Type.read(reader, v);
      value.set_fpach_Info(v);
   }

   reader.readSequenceEnd(*this);
}

void PRACH_Definition_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timeslot_Type.write(writer, value.get_timeslot());
   _prach_ChanCodes_LCR_Type.write(writer, value.get_prach_ChanCodes_LCR());
   _midambleShiftAndBurstType_Type.write(writer, value.get_midambleShiftAndBurstType());
   _fpach_Info_Type.write(writer, value.get_fpach_Info());

   writer.writeSequenceEnd();
}


void PRACH-Partitioning::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_fdd_Type)
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__ASCSetting_FDD::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   else if (choosenType == &_tdd_Type)
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__ASCSetting_TDD::ValueType v;
      _tdd_Type.read(reader, v);
      value.set_tdd(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _fdd_Type.toString() + ", " + _tdd_Type.toString());
   }
}

void PRACH-Partitioning::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_fdd_Choosen())
      _fdd_Type.write(writer, value.get_fdd());
   else if (value.has_tdd_Choosen())
      _tdd_Type.write(writer, value.get_tdd());
}


void PRACH-Partitioning-r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_fdd_Type)
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__ASCSetting_FDD::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   else if (choosenType == &_tdd_Type)
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__ASCSetting_TDD_r7::ValueType v;
      _tdd_Type.read(reader, v);
      value.set_tdd(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _fdd_Type.toString() + ", " + _tdd_Type.toString());
   }
}

void PRACH-Partitioning-r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_fdd_Choosen())
      _fdd_Type.write(writer, value.get_fdd());
   else if (value.has_tdd_Choosen())
      _tdd_Type.write(writer, value.get_tdd());
}


void PRACH_PowerOffset::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PowerRampStep::ValueType v;
      _powerRampStep_Type.read(reader, v);
      value.set_powerRampStep(v);
   }
   {
      asn1::generated::PreambleRetransMax::ValueType v;
      _preambleRetransMax_Type.read(reader, v);
      value.set_preambleRetransMax(v);
   }

   reader.readSequenceEnd(*this);
}

void PRACH_PowerOffset::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _powerRampStep_Type.write(writer, value.get_powerRampStep());
   _preambleRetransMax_Type.write(writer, value.get_preambleRetransMax());

   writer.writeSequenceEnd();
}


void PRACH_RACH_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_availableSignatures_INTERNAL_asn1__generated__AvailableSignatures_availableSF_INTERNAL_asn1__generated__SF_PRACH_preambleScramblingCodeWordNumber_INTERNAL_asn1__generated__PreambleScramblingCodeWordNumber_puncturingLimit_INTERNAL_asn1__generated__PuncturingLimit_availableSubChannelNumbers_INTERNAL_asn1__generated__AvailableSubChannelNumbers_tdd_INTERNAL__SequenceType_timeslot_INTERNAL_asn1__generated__TimeslotNumber_channelisationCodeList_INTERNAL_asn1__generated__TDD_PRACH_CCodeList_prach-Midamble_INTERNAL_asn1__generated__PRACH_Midamble::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void PRACH_RACH_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void PRACH_RACH_Info_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_availableSignatures_INTERNAL_asn1__generated__AvailableSignatures_availableSF_INTERNAL_asn1__generated__SF_PRACH_preambleScramblingCodeWordNumber_INTERNAL_asn1__generated__PreambleScramblingCodeWordNumber_puncturingLimit_INTERNAL_asn1__generated__PuncturingLimit_availableSubChannelNumbers_INTERNAL_asn1__generated__AvailableSubChannelNumbers_tdd384_INTERNAL__SequenceType_timeslot_INTERNAL_asn1__generated__TimeslotNumber_channelisationCodeList_INTERNAL_asn1__generated__TDD_PRACH_CCodeList_prach-Midamble_INTERNAL_asn1__generated__PRACH_Midamble_tdd768_INTERNAL__SequenceType_timeslot_INTERNAL_asn1__generated__TimeslotNumber_channelisationCodeList_INTERNAL_asn1__generated__TDD768_PRACH_CCodeList_prach-Midamble_INTERNAL_asn1__generated__PRACH_Midamble::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void PRACH_RACH_Info_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void PRACH_RACH_Info_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SYNC_UL_Info_r4::ValueType v;
      _sync_UL_Info_Type.read(reader, v);
      value.set_sync_UL_Info(v);
   }
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__PRACH_Definition_LCR_r4::ValueType v;
      _prach_DefinitionList_Type.read(reader, v);
      value.set_prach_DefinitionList(v);
   }

   reader.readSequenceEnd(*this);
}

void PRACH_RACH_Info_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sync_UL_Info_Type.write(writer, value.get_sync_UL_Info());
   _prach_DefinitionList_Type.write(writer, value.get_prach_DefinitionList());

   writer.writeSequenceEnd();
}


void PRACH_SystemInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PRACH_RACH_Info::ValueType v;
      _prach_RACH_Info_Type.read(reader, v);
      value.set_prach_RACH_Info(v);
   }
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _transportChannelIdentity_Type.read(reader, v);
      value.set_transportChannelIdentity(v);
   }
   {
      asn1::generated::TransportFormatSet::ValueType v;
      _rach_TransportFormatSet_Type.read(reader, v);
      value.set_rach_TransportFormatSet(v);
   }
   {
      asn1::generated::TFCS::ValueType v;
      _rach_TFCS_Type.read(reader, v);
      value.set_rach_TFCS(v);
   }
   {
      asn1::generated::PRACH_Partitioning::ValueType v;
      _prach_Partitioning_Type.read(reader, v);
      value.set_prach_Partitioning(v);
   }
   {
      asn1::generated::PersistenceScalingFactorList::ValueType v;
      _persistenceScalingFactorList_Type.read(reader, v);
      value.set_persistenceScalingFactorList(v);
   }
   {
      asn1::generated::AC_To_ASC_MappingTable::ValueType v;
      _ac_To_ASC_MappingTable_Type.read(reader, v);
      value.set_ac_To_ASC_MappingTable(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-TX-Power_INTERNAL_asn1__generated__PrimaryCPICH_TX_Power_constantValue_INTERNAL_asn1__generated__ConstantValue_prach-PowerOffset_INTERNAL_asn1__generated__PRACH_PowerOffset_rach-TransmissionParameters_INTERNAL_asn1__generated__RACH_TransmissionParameters_aich-Info_INTERNAL_asn1__generated__AICH_Info_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void PRACH_SystemInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _prach_RACH_Info_Type.write(writer, value.get_prach_RACH_Info());
   _transportChannelIdentity_Type.write(writer, value.get_transportChannelIdentity());
   _rach_TransportFormatSet_Type.write(writer, value.get_rach_TransportFormatSet());
   _rach_TFCS_Type.write(writer, value.get_rach_TFCS());
   _prach_Partitioning_Type.write(writer, value.get_prach_Partitioning());
   _persistenceScalingFactorList_Type.write(writer, value.get_persistenceScalingFactorList());
   _ac_To_ASC_MappingTable_Type.write(writer, value.get_ac_To_ASC_MappingTable());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void PRACH_SystemInformation_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PRACH_RACH_Info_r7::ValueType v;
      _prach_RACH_Info_Type.read(reader, v);
      value.set_prach_RACH_Info(v);
   }
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _transportChannelIdentity_Type.read(reader, v);
      value.set_transportChannelIdentity(v);
   }
   {
      asn1::generated::TransportFormatSet::ValueType v;
      _rach_TransportFormatSet_Type.read(reader, v);
      value.set_rach_TransportFormatSet(v);
   }
   {
      asn1::generated::TFCS::ValueType v;
      _rach_TFCS_Type.read(reader, v);
      value.set_rach_TFCS(v);
   }
   {
      asn1::generated::PRACH_Partitioning_r7::ValueType v;
      _prach_Partitioning_Type.read(reader, v);
      value.set_prach_Partitioning(v);
   }
   {
      asn1::generated::PersistenceScalingFactorList::ValueType v;
      _persistenceScalingFactorList_Type.read(reader, v);
      value.set_persistenceScalingFactorList(v);
   }
   {
      asn1::generated::AC_To_ASC_MappingTable::ValueType v;
      _ac_To_ASC_MappingTable_Type.read(reader, v);
      value.set_ac_To_ASC_MappingTable(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-TX-Power_INTERNAL_asn1__generated__PrimaryCPICH_TX_Power_constantValue_INTERNAL_asn1__generated__ConstantValue_prach-PowerOffset_INTERNAL_asn1__generated__PRACH_PowerOffset_rach-TransmissionParameters_INTERNAL_asn1__generated__RACH_TransmissionParameters_aich-Info_INTERNAL_asn1__generated__AICH_Info_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void PRACH_SystemInformation_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _prach_RACH_Info_Type.write(writer, value.get_prach_RACH_Info());
   _transportChannelIdentity_Type.write(writer, value.get_transportChannelIdentity());
   _rach_TransportFormatSet_Type.write(writer, value.get_rach_TransportFormatSet());
   _rach_TFCS_Type.write(writer, value.get_rach_TFCS());
   _prach_Partitioning_Type.write(writer, value.get_prach_Partitioning());
   _persistenceScalingFactorList_Type.write(writer, value.get_persistenceScalingFactorList());
   _ac_To_ASC_MappingTable_Type.write(writer, value.get_ac_To_ASC_MappingTable());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void PRACH_SystemInformation_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PRACH_RACH_Info_LCR_r4::ValueType v;
      _prach_RACH_Info_LCR_Type.read(reader, v);
      value.set_prach_RACH_Info_LCR(v);
   }
   {
      asn1::generated::TransportFormatSet_LCR::ValueType v;
      _rach_TransportFormatSet_LCR_Type.read(reader, v);
      value.set_rach_TransportFormatSet_LCR(v);
   }
   {
      asn1::generated::PRACH_Partitioning_LCR_r4::ValueType v;
      _prach_Partitioning_LCR_Type.read(reader, v);
      value.set_prach_Partitioning_LCR(v);
   }

   reader.readSequenceEnd(*this);
}

void PRACH_SystemInformation_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _prach_RACH_Info_LCR_Type.write(writer, value.get_prach_RACH_Info_LCR());
   _rach_TransportFormatSet_LCR_Type.write(writer, value.get_rach_TransportFormatSet_LCR());
   _prach_Partitioning_LCR_Type.write(writer, value.get_prach_Partitioning_LCR());

   writer.writeSequenceEnd();
}


void PreDefPhyChConfiguration::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_DPCH_InfoPredef::ValueType v;
      _ul_DPCH_InfoPredef_Type.read(reader, v);
      value.set_ul_DPCH_InfoPredef(v);
   }
   {
      asn1::generated::DL_CommonInformationPredef::ValueType v;
      _dl_CommonInformationPredef_Type.read(reader, v);
      value.set_dl_CommonInformationPredef(v);
   }

   reader.readSequenceEnd(*this);
}

void PreDefPhyChConfiguration::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_DPCH_InfoPredef_Type.write(writer, value.get_ul_DPCH_InfoPredef());
   _dl_CommonInformationPredef_Type.write(writer, value.get_dl_CommonInformationPredef());

   writer.writeSequenceEnd();
}


void PrimaryCCPCH-Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_fdd_Type)
   {
      _INTERNAL__SequenceType_tx-DiversityIndicator_INTERNAL_asn1__BooleanType::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   else if (choosenType == &_tdd_Type)
   {
      _INTERNAL__SequenceType_syncCase_INTERNAL__ChoiceType_syncCase1_INTERNAL__SequenceType_timeslot_INTERNAL_asn1__generated__TimeslotNumber_syncCase2_INTERNAL__SequenceType_timeslotSync2_INTERNAL_asn1__generated__TimeslotSync2_cellParametersID_INTERNAL_asn1__generated__CellParametersID_sctd-Indicator_INTERNAL_asn1__BooleanType::ValueType v;
      _tdd_Type.read(reader, v);
      value.set_tdd(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _fdd_Type.toString() + ", " + _tdd_Type.toString());
   }
}

void PrimaryCCPCH-Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_fdd_Choosen())
      _fdd_Type.write(writer, value.get_fdd());
   else if (value.has_tdd_Choosen())
      _tdd_Type.write(writer, value.get_tdd());
}


void PrimaryCCPCH-Info-r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_fdd_Type)
   {
      _INTERNAL__SequenceType_tx-DiversityIndicator_INTERNAL_asn1__BooleanType::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   else if (choosenType == &_tdd_Type)
   {
      _INTERNAL__SequenceType_tddOption_INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_syncCase_INTERNAL__ChoiceType_syncCase1_INTERNAL__SequenceType_timeslot_INTERNAL_asn1__generated__TimeslotNumber_syncCase2_INTERNAL__SequenceType_timeslotSync2_INTERNAL_asn1__generated__TimeslotSync2_tdd128_INTERNAL__SequenceType_tstd-Indicator_INTERNAL_asn1__BooleanType_cellParametersID_INTERNAL_asn1__generated__CellParametersID_sctd-Indicator_INTERNAL_asn1__BooleanType::ValueType v;
      _tdd_Type.read(reader, v);
      value.set_tdd(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _fdd_Type.toString() + ", " + _tdd_Type.toString());
   }
}

void PrimaryCCPCH-Info-r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_fdd_Choosen())
      _fdd_Type.write(writer, value.get_fdd());
   else if (value.has_tdd_Choosen())
      _tdd_Type.write(writer, value.get_tdd());
}


void PrimaryCCPCH-Info-r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_fdd_Type)
   {
      _INTERNAL__SequenceType_tx-DiversityIndicator_INTERNAL_asn1__BooleanType::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   else if (choosenType == &_tdd_Type)
   {
      _INTERNAL__SequenceType_tddOption_INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_syncCase_INTERNAL__ChoiceType_syncCase1_INTERNAL__SequenceType_timeslot_INTERNAL_asn1__generated__TimeslotNumber_syncCase2_INTERNAL__SequenceType_timeslotSync2_INTERNAL_asn1__generated__TimeslotSync2_tdd768_INTERNAL__SequenceType_syncCase_INTERNAL__ChoiceType_syncCase1_INTERNAL__SequenceType_timeslot_INTERNAL_asn1__generated__TimeslotNumber_syncCase2_INTERNAL__SequenceType_timeslotSync2_INTERNAL_asn1__generated__TimeslotSync2_tdd128_INTERNAL__SequenceType_tstd-Indicator_INTERNAL_asn1__BooleanType_cellParametersID_INTERNAL_asn1__generated__CellParametersID_sctd-Indicator_INTERNAL_asn1__BooleanType::ValueType v;
      _tdd_Type.read(reader, v);
      value.set_tdd(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _fdd_Type.toString() + ", " + _tdd_Type.toString());
   }
}

void PrimaryCCPCH-Info-r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_fdd_Choosen())
      _fdd_Type.write(writer, value.get_fdd());
   else if (value.has_tdd_Choosen())
      _tdd_Type.write(writer, value.get_tdd());
}


void PrimaryCCPCH_Info_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _tstd_Indicator_Type.read(reader, v);
      value.set_tstd_Indicator(v);
   }
   {
      asn1::generated::CellParametersID::ValueType v;
      _cellParametersID_Type.read(reader, v);
      value.set_cellParametersID(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _sctd_Indicator_Type.read(reader, v);
      value.set_sctd_Indicator(v);
   }

   reader.readSequenceEnd(*this);
}

void PrimaryCCPCH_Info_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tstd_Indicator_Type.write(writer, value.get_tstd_Indicator());
   _cellParametersID_Type.write(writer, value.get_cellParametersID());
   _sctd_Indicator_Type.write(writer, value.get_sctd_Indicator());

   writer.writeSequenceEnd();
}


void PrimaryCCPCH_Info_LCR_r4_ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _tstd_Indicator_Type.read(reader, v);
      value.set_tstd_Indicator(v);
   }

   reader.readSequenceEnd(*this);
}

void PrimaryCCPCH_Info_LCR_r4_ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tstd_Indicator_Type.write(writer, value.get_tstd_Indicator());

   writer.writeSequenceEnd();
}


void PrimaryCCPCH_InfoPost::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_syncCase1_INTERNAL__SequenceType_timeslot_INTERNAL_asn1__generated__TimeslotNumber_syncCase2_INTERNAL__SequenceType_timeslotSync2_INTERNAL_asn1__generated__TimeslotSync2::ValueType v;
      _syncCase_Type.read(reader, v);
      value.set_syncCase(v);
   }
   {
      asn1::generated::CellParametersID::ValueType v;
      _cellParametersID_Type.read(reader, v);
      value.set_cellParametersID(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _sctd_Indicator_Type.read(reader, v);
      value.set_sctd_Indicator(v);
   }

   reader.readSequenceEnd(*this);
}

void PrimaryCCPCH_InfoPost::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _syncCase_Type.write(writer, value.get_syncCase());
   _cellParametersID_Type.write(writer, value.get_cellParametersID());
   _sctd_Indicator_Type.write(writer, value.get_sctd_Indicator());

   writer.writeSequenceEnd();
}


void PrimaryCCPCH_InfoPostTDD_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _tstd_Indicator_Type.read(reader, v);
      value.set_tstd_Indicator(v);
   }
   {
      asn1::generated::CellParametersID::ValueType v;
      _cellParametersID_Type.read(reader, v);
      value.set_cellParametersID(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _sctd_Indicator_Type.read(reader, v);
      value.set_sctd_Indicator(v);
   }

   reader.readSequenceEnd(*this);
}

void PrimaryCCPCH_InfoPostTDD_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tstd_Indicator_Type.write(writer, value.get_tstd_Indicator());
   _cellParametersID_Type.write(writer, value.get_cellParametersID());
   _sctd_Indicator_Type.write(writer, value.get_sctd_Indicator());

   writer.writeSequenceEnd();
}


void PrimaryCPICH_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PrimaryScramblingCode::ValueType v;
      _primaryScramblingCode_Type.read(reader, v);
      value.set_primaryScramblingCode(v);
   }

   reader.readSequenceEnd(*this);
}

void PrimaryCPICH_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _primaryScramblingCode_Type.write(writer, value.get_primaryScramblingCode());

   writer.writeSequenceEnd();
}


void PUSCH_CapacityAllocationInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_pusch-AllocationPending_INTERNAL_asn1__NullType_pusch-AllocationAssignment_INTERNAL__SequenceType_pusch-AllocationPeriodInfo_INTERNAL_asn1__generated__AllocationPeriodInfo_pusch-PowerControlInfo_INTERNAL_asn1__generated__UL_TargetSIR_configuration_INTERNAL__ChoiceType_old-Configuration_INTERNAL__SequenceType_tfcs-ID_INTERNAL_asn1__generated__TFCS_IdentityPlain_pusch-Identity_INTERNAL_asn1__generated__PUSCH_Identity_new-Configuration_INTERNAL__SequenceType_pusch-Info_INTERNAL_asn1__generated__PUSCH_Info_pusch-Identity_INTERNAL_asn1__generated__PUSCH_Identity::ValueType v;
      _pusch_Allocation_Type.read(reader, v);
      value.set_pusch_Allocation(v);
   }

   reader.readSequenceEnd(*this);
}

void PUSCH_CapacityAllocationInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pusch_Allocation_Type.write(writer, value.get_pusch_Allocation());

   writer.writeSequenceEnd();
}


void PUSCH_CapacityAllocationInfo_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_pusch-AllocationPending_INTERNAL_asn1__NullType_pusch-AllocationAssignment_INTERNAL__SequenceType_pusch-AllocationPeriodInfo_INTERNAL_asn1__generated__AllocationPeriodInfo_pusch-PowerControlInfo_INTERNAL_asn1__generated__PUSCH_PowerControlInfo_r4_configuration_INTERNAL__ChoiceType_old-Configuration_INTERNAL__SequenceType_tfcs-ID_INTERNAL_asn1__generated__TFCS_IdentityPlain_pusch-Identity_INTERNAL_asn1__generated__PUSCH_Identity_new-Configuration_INTERNAL__SequenceType_pusch-Info_INTERNAL_asn1__generated__PUSCH_Info_r4_pusch-Identity_INTERNAL_asn1__generated__PUSCH_Identity::ValueType v;
      _pusch_Allocation_Type.read(reader, v);
      value.set_pusch_Allocation(v);
   }

   reader.readSequenceEnd(*this);
}

void PUSCH_CapacityAllocationInfo_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pusch_Allocation_Type.write(writer, value.get_pusch_Allocation());

   writer.writeSequenceEnd();
}


void PUSCH_CapacityAllocationInfo_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_pusch-AllocationPending_INTERNAL_asn1__NullType_pusch-AllocationAssignment_INTERNAL__SequenceType_pusch-AllocationPeriodInfo_INTERNAL_asn1__generated__AllocationPeriodInfo_pusch-PowerControlInfo_INTERNAL_asn1__generated__PUSCH_PowerControlInfo_r7_configuration_INTERNAL__ChoiceType_old-Configuration_INTERNAL__SequenceType_tfcs-ID_INTERNAL_asn1__generated__TFCS_IdentityPlain_pusch-Identity_INTERNAL_asn1__generated__PUSCH_Identity_new-Configuration_INTERNAL__SequenceType_pusch-Info_INTERNAL_asn1__generated__PUSCH_Info_VHCR_pusch-Identity_INTERNAL_asn1__generated__PUSCH_Identity::ValueType v;
      _pusch_Allocation_Type.read(reader, v);
      value.set_pusch_Allocation(v);
   }

   reader.readSequenceEnd(*this);
}

void PUSCH_CapacityAllocationInfo_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pusch_Allocation_Type.write(writer, value.get_pusch_Allocation());

   writer.writeSequenceEnd();
}


void PUSCH_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_IdentityPlain::ValueType v;
      _tfcs_ID_Type.read(reader, v);
      value.set_tfcs_ID(v);
   }
   {
      asn1::generated::CommonTimeslotInfo::ValueType v;
      _commonTimeslotInfo_Type.read(reader, v);
      value.set_commonTimeslotInfo(v);
   }
   {
      asn1::generated::UplinkTimeslotsCodes::ValueType v;
      _pusch_TimeslotsCodes_Type.read(reader, v);
      value.set_pusch_TimeslotsCodes(v);
   }

   reader.readSequenceEnd(*this);
}

void PUSCH_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfcs_ID_Type.write(writer, value.get_tfcs_ID());
   _commonTimeslotInfo_Type.write(writer, value.get_commonTimeslotInfo());
   _pusch_TimeslotsCodes_Type.write(writer, value.get_pusch_TimeslotsCodes());

   writer.writeSequenceEnd();
}


void PUSCH_Info_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_IdentityPlain::ValueType v;
      _tfcs_ID_Type.read(reader, v);
      value.set_tfcs_ID(v);
   }
   {
      asn1::generated::CommonTimeslotInfo::ValueType v;
      _commonTimeslotInfo_Type.read(reader, v);
      value.set_commonTimeslotInfo(v);
   }
   {
      _INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_pusch-TimeslotsCodes_INTERNAL_asn1__generated__UplinkTimeslotsCodes_tdd128_INTERNAL__SequenceType_pusch-TimeslotsCodes_INTERNAL_asn1__generated__UplinkTimeslotsCodes_LCR_r4::ValueType v;
      _tddOption_Type.read(reader, v);
      value.set_tddOption(v);
   }

   reader.readSequenceEnd(*this);
}

void PUSCH_Info_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfcs_ID_Type.write(writer, value.get_tfcs_ID());
   _commonTimeslotInfo_Type.write(writer, value.get_commonTimeslotInfo());
   _tddOption_Type.write(writer, value.get_tddOption());

   writer.writeSequenceEnd();
}


void PUSCH_Info_VHCR::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_IdentityPlain::ValueType v;
      _tfcs_ID_Type.read(reader, v);
      value.set_tfcs_ID(v);
   }
   {
      asn1::generated::CommonTimeslotInfo::ValueType v;
      _commonTimeslotInfo_Type.read(reader, v);
      value.set_commonTimeslotInfo(v);
   }
   {
      asn1::generated::UplinkTimeslotsCodes_VHCR::ValueType v;
      _pusch_TimeslotsCodes_VHCR_Type.read(reader, v);
      value.set_pusch_TimeslotsCodes_VHCR(v);
   }

   reader.readSequenceEnd(*this);
}

void PUSCH_Info_VHCR::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfcs_ID_Type.write(writer, value.get_tfcs_ID());
   _commonTimeslotInfo_Type.write(writer, value.get_commonTimeslotInfo());
   _pusch_TimeslotsCodes_VHCR_Type.write(writer, value.get_pusch_TimeslotsCodes_VHCR());

   writer.writeSequenceEnd();
}


void PUSCH_Info_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_IdentityPlain::ValueType v;
      _tfcs_ID_Type.read(reader, v);
      value.set_tfcs_ID(v);
   }
   {
      asn1::generated::CommonTimeslotInfo::ValueType v;
      _commonTimeslotInfo_Type.read(reader, v);
      value.set_commonTimeslotInfo(v);
   }
   {
      asn1::generated::UplinkTimeslotsCodes_LCR_r4::ValueType v;
      _pusch_TimeslotsCodes_Type.read(reader, v);
      value.set_pusch_TimeslotsCodes(v);
   }

   reader.readSequenceEnd(*this);
}

void PUSCH_Info_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfcs_ID_Type.write(writer, value.get_tfcs_ID());
   _commonTimeslotInfo_Type.write(writer, value.get_commonTimeslotInfo());
   _pusch_TimeslotsCodes_Type.write(writer, value.get_pusch_TimeslotsCodes());

   writer.writeSequenceEnd();
}


void PUSCH_PowerControlInfo_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_TargetSIR::ValueType v;
      _ul_TargetSIR_Type.read(reader, v);
      value.set_ul_TargetSIR(v);
   }
   {
      _INTERNAL__ChoiceType_tdd384_INTERNAL_asn1__NullType_tdd128_INTERNAL__SequenceType_tpc-StepSize_INTERNAL_asn1__generated__TPC_StepSizeTDD::ValueType v;
      _tddOption_Type.read(reader, v);
      value.set_tddOption(v);
   }

   reader.readSequenceEnd(*this);
}

void PUSCH_PowerControlInfo_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_TargetSIR_Type.write(writer, value.get_ul_TargetSIR());
   _tddOption_Type.write(writer, value.get_tddOption());

   writer.writeSequenceEnd();
}


void PUSCH_PowerControlInfo_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_TargetSIR::ValueType v;
      _ul_TargetSIR_Type.read(reader, v);
      value.set_ul_TargetSIR(v);
   }
   {
      _INTERNAL__ChoiceType_tdd384_INTERNAL_asn1__NullType_tdd768_INTERNAL_asn1__NullType_tdd128_INTERNAL__SequenceType_tpc-StepSize_INTERNAL_asn1__generated__TPC_StepSizeTDD::ValueType v;
      _tddOption_Type.read(reader, v);
      value.set_tddOption(v);
   }

   reader.readSequenceEnd(*this);
}

void PUSCH_PowerControlInfo_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_TargetSIR_Type.write(writer, value.get_ul_TargetSIR());
   _tddOption_Type.write(writer, value.get_tddOption());

   writer.writeSequenceEnd();
}


void PUSCH_SysInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PUSCH_Identity::ValueType v;
      _pusch_Identity_Type.read(reader, v);
      value.set_pusch_Identity(v);
   }
   {
      asn1::generated::PUSCH_Info::ValueType v;
      _pusch_Info_Type.read(reader, v);
      value.set_pusch_Info(v);
   }
   {
      asn1::generated::TransportFormatSet::ValueType v;
      _usch_TFS_Type.read(reader, v);
      value.set_usch_TFS(v);
   }
   {
      asn1::generated::TFCS::ValueType v;
      _usch_TFCS_Type.read(reader, v);
      value.set_usch_TFCS(v);
   }

   reader.readSequenceEnd(*this);
}

void PUSCH_SysInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pusch_Identity_Type.write(writer, value.get_pusch_Identity());
   _pusch_Info_Type.write(writer, value.get_pusch_Info());
   _usch_TFS_Type.write(writer, value.get_usch_TFS());
   _usch_TFCS_Type.write(writer, value.get_usch_TFCS());

   writer.writeSequenceEnd();
}


void PUSCH_SysInfo_VHCR::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PUSCH_Identity::ValueType v;
      _pusch_Identity_Type.read(reader, v);
      value.set_pusch_Identity(v);
   }
   {
      asn1::generated::PUSCH_Info_VHCR::ValueType v;
      _pusch_Info_VHCR_Type.read(reader, v);
      value.set_pusch_Info_VHCR(v);
   }
   {
      asn1::generated::USCH_TransportChannelsInfo::ValueType v;
      _usch_TransportChannelsInfo_Type.read(reader, v);
      value.set_usch_TransportChannelsInfo(v);
   }
   {
      asn1::generated::TFCS::ValueType v;
      _usch_TFCS_Type.read(reader, v);
      value.set_usch_TFCS(v);
   }

   reader.readSequenceEnd(*this);
}

void PUSCH_SysInfo_VHCR::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pusch_Identity_Type.write(writer, value.get_pusch_Identity());
   _pusch_Info_VHCR_Type.write(writer, value.get_pusch_Info_VHCR());
   _usch_TransportChannelsInfo_Type.write(writer, value.get_usch_TransportChannelsInfo());
   _usch_TFCS_Type.write(writer, value.get_usch_TFCS());

   writer.writeSequenceEnd();
}


void PUSCH_SysInfo_HCR_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PUSCH_Identity::ValueType v;
      _pusch_Identity_Type.read(reader, v);
      value.set_pusch_Identity(v);
   }
   {
      asn1::generated::PUSCH_Info::ValueType v;
      _pusch_Info_Type.read(reader, v);
      value.set_pusch_Info(v);
   }
   {
      asn1::generated::USCH_TransportChannelsInfo::ValueType v;
      _usch_TransportChannelsInfo_Type.read(reader, v);
      value.set_usch_TransportChannelsInfo(v);
   }
   {
      asn1::generated::TFCS::ValueType v;
      _usch_TFCS_Type.read(reader, v);
      value.set_usch_TFCS(v);
   }

   reader.readSequenceEnd(*this);
}

void PUSCH_SysInfo_HCR_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pusch_Identity_Type.write(writer, value.get_pusch_Identity());
   _pusch_Info_Type.write(writer, value.get_pusch_Info());
   _usch_TransportChannelsInfo_Type.write(writer, value.get_usch_TransportChannelsInfo());
   _usch_TFCS_Type.write(writer, value.get_usch_TFCS());

   writer.writeSequenceEnd();
}


void PUSCH_SysInfo_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PUSCH_Identity::ValueType v;
      _pusch_Identity_Type.read(reader, v);
      value.set_pusch_Identity(v);
   }
   {
      asn1::generated::PUSCH_Info_LCR_r4::ValueType v;
      _pusch_Info_Type.read(reader, v);
      value.set_pusch_Info(v);
   }
   {
      asn1::generated::TransportFormatSet::ValueType v;
      _usch_TFS_Type.read(reader, v);
      value.set_usch_TFS(v);
   }
   {
      asn1::generated::TFCS::ValueType v;
      _usch_TFCS_Type.read(reader, v);
      value.set_usch_TFCS(v);
   }

   reader.readSequenceEnd(*this);
}

void PUSCH_SysInfo_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pusch_Identity_Type.write(writer, value.get_pusch_Identity());
   _pusch_Info_Type.write(writer, value.get_pusch_Info());
   _usch_TFS_Type.write(writer, value.get_usch_TFS());
   _usch_TFCS_Type.write(writer, value.get_usch_TFCS());

   writer.writeSequenceEnd();
}


void RACH_TransmissionParameters::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _mmax_Type.read(reader, v);
      value.set_mmax(v);
   }
   {
      asn1::generated::NB01::ValueType v;
      _nb01Min_Type.read(reader, v);
      value.set_nb01Min(v);
   }
   {
      asn1::generated::NB01::ValueType v;
      _nb01Max_Type.read(reader, v);
      value.set_nb01Max(v);
   }

   reader.readSequenceEnd(*this);
}

void RACH_TransmissionParameters::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mmax_Type.write(writer, value.get_mmax());
   _nb01Min_Type.write(writer, value.get_nb01Min());
   _nb01Max_Type.write(writer, value.get_nb01Max());

   writer.writeSequenceEnd();
}


void RepetitionPeriodAndLength::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_repetitionPeriod1_Type)
   {
      asn1::NullType::ValueType v;
      _repetitionPeriod1_Type.read(reader, v);
      value.set_repetitionPeriod1(v);
   }
   else if (choosenType == &_repetitionPeriod2_Type)
   {
      asn1::IntegerType::ValueType v;
      _repetitionPeriod2_Type.read(reader, v);
      value.set_repetitionPeriod2(v);
   }
   else if (choosenType == &_repetitionPeriod4_Type)
   {
      asn1::IntegerType::ValueType v;
      _repetitionPeriod4_Type.read(reader, v);
      value.set_repetitionPeriod4(v);
   }
   else if (choosenType == &_repetitionPeriod8_Type)
   {
      asn1::IntegerType::ValueType v;
      _repetitionPeriod8_Type.read(reader, v);
      value.set_repetitionPeriod8(v);
   }
   else if (choosenType == &_repetitionPeriod16_Type)
   {
      asn1::IntegerType::ValueType v;
      _repetitionPeriod16_Type.read(reader, v);
      value.set_repetitionPeriod16(v);
   }
   else if (choosenType == &_repetitionPeriod32_Type)
   {
      asn1::IntegerType::ValueType v;
      _repetitionPeriod32_Type.read(reader, v);
      value.set_repetitionPeriod32(v);
   }
   else if (choosenType == &_repetitionPeriod64_Type)
   {
      asn1::IntegerType::ValueType v;
      _repetitionPeriod64_Type.read(reader, v);
      value.set_repetitionPeriod64(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _repetitionPeriod1_Type.toString() + ", " + _repetitionPeriod2_Type.toString() + ", " + _repetitionPeriod4_Type.toString() + ", " + _repetitionPeriod8_Type.toString() + ", " + _repetitionPeriod16_Type.toString() + ", " + _repetitionPeriod32_Type.toString() + ", " + _repetitionPeriod64_Type.toString());
   }
}

void RepetitionPeriodAndLength::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_repetitionPeriod1_Choosen())
      _repetitionPeriod1_Type.write(writer, value.get_repetitionPeriod1());
   else if (value.has_repetitionPeriod2_Choosen())
      _repetitionPeriod2_Type.write(writer, value.get_repetitionPeriod2());
   else if (value.has_repetitionPeriod4_Choosen())
      _repetitionPeriod4_Type.write(writer, value.get_repetitionPeriod4());
   else if (value.has_repetitionPeriod8_Choosen())
      _repetitionPeriod8_Type.write(writer, value.get_repetitionPeriod8());
   else if (value.has_repetitionPeriod16_Choosen())
      _repetitionPeriod16_Type.write(writer, value.get_repetitionPeriod16());
   else if (value.has_repetitionPeriod32_Choosen())
      _repetitionPeriod32_Type.write(writer, value.get_repetitionPeriod32());
   else if (value.has_repetitionPeriod64_Choosen())
      _repetitionPeriod64_Type.write(writer, value.get_repetitionPeriod64());
}


void RepetitionPeriodLengthAndOffset::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_repetitionPeriod1_Type)
   {
      asn1::NullType::ValueType v;
      _repetitionPeriod1_Type.read(reader, v);
      value.set_repetitionPeriod1(v);
   }
   else if (choosenType == &_repetitionPeriod2_Type)
   {
      _INTERNAL__SequenceType_length_INTERNAL_asn1__NullType_offset_INTERNAL_asn1__IntegerType::ValueType v;
      _repetitionPeriod2_Type.read(reader, v);
      value.set_repetitionPeriod2(v);
   }
   else if (choosenType == &_repetitionPeriod4_Type)
   {
      _INTERNAL__SequenceType_length_INTERNAL_asn1__IntegerType_offset_INTERNAL_asn1__IntegerType::ValueType v;
      _repetitionPeriod4_Type.read(reader, v);
      value.set_repetitionPeriod4(v);
   }
   else if (choosenType == &_repetitionPeriod8_Type)
   {
      _INTERNAL__SequenceType_length_INTERNAL_asn1__IntegerType_offset_INTERNAL_asn1__IntegerType::ValueType v;
      _repetitionPeriod8_Type.read(reader, v);
      value.set_repetitionPeriod8(v);
   }
   else if (choosenType == &_repetitionPeriod16_Type)
   {
      _INTERNAL__SequenceType_length_INTERNAL_asn1__IntegerType_offset_INTERNAL_asn1__IntegerType::ValueType v;
      _repetitionPeriod16_Type.read(reader, v);
      value.set_repetitionPeriod16(v);
   }
   else if (choosenType == &_repetitionPeriod32_Type)
   {
      _INTERNAL__SequenceType_length_INTERNAL_asn1__IntegerType_offset_INTERNAL_asn1__IntegerType::ValueType v;
      _repetitionPeriod32_Type.read(reader, v);
      value.set_repetitionPeriod32(v);
   }
   else if (choosenType == &_repetitionPeriod64_Type)
   {
      _INTERNAL__SequenceType_length_INTERNAL_asn1__IntegerType_offset_INTERNAL_asn1__IntegerType::ValueType v;
      _repetitionPeriod64_Type.read(reader, v);
      value.set_repetitionPeriod64(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _repetitionPeriod1_Type.toString() + ", " + _repetitionPeriod2_Type.toString() + ", " + _repetitionPeriod4_Type.toString() + ", " + _repetitionPeriod8_Type.toString() + ", " + _repetitionPeriod16_Type.toString() + ", " + _repetitionPeriod32_Type.toString() + ", " + _repetitionPeriod64_Type.toString());
   }
}

void RepetitionPeriodLengthAndOffset::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_repetitionPeriod1_Choosen())
      _repetitionPeriod1_Type.write(writer, value.get_repetitionPeriod1());
   else if (value.has_repetitionPeriod2_Choosen())
      _repetitionPeriod2_Type.write(writer, value.get_repetitionPeriod2());
   else if (value.has_repetitionPeriod4_Choosen())
      _repetitionPeriod4_Type.write(writer, value.get_repetitionPeriod4());
   else if (value.has_repetitionPeriod8_Choosen())
      _repetitionPeriod8_Type.write(writer, value.get_repetitionPeriod8());
   else if (value.has_repetitionPeriod16_Choosen())
      _repetitionPeriod16_Type.write(writer, value.get_repetitionPeriod16());
   else if (value.has_repetitionPeriod32_Choosen())
      _repetitionPeriod32_Type.write(writer, value.get_repetitionPeriod32());
   else if (value.has_repetitionPeriod64_Choosen())
      _repetitionPeriod64_Type.write(writer, value.get_repetitionPeriod64());
}


void ReplacedPDSCH_CodeInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MaxTFCI_Field2Value::ValueType v;
      _tfci_Field2_Type.read(reader, v);
      value.set_tfci_Field2(v);
   }
   {
      asn1::generated::SF_PDSCH::ValueType v;
      _spreadingFactor_Type.read(reader, v);
      value.set_spreadingFactor(v);
   }
   {
      asn1::generated::CodeNumberDSCH::ValueType v;
      _codeNumber_Type.read(reader, v);
      value.set_codeNumber(v);
   }
   {
      asn1::generated::MultiCodeInfo::ValueType v;
      _multiCodeInfo_Type.read(reader, v);
      value.set_multiCodeInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void ReplacedPDSCH_CodeInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfci_Field2_Type.write(writer, value.get_tfci_Field2());
   _spreadingFactor_Type.write(writer, value.get_spreadingFactor());
   _codeNumber_Type.write(writer, value.get_codeNumber());
   _multiCodeInfo_Type.write(writer, value.get_multiCodeInfo());

   writer.writeSequenceEnd();
}


void RepPerLengthOffset-PICH::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_rpp4-2_Type)
   {
      asn1::IntegerType::ValueType v;
      _rpp4_2_Type.read(reader, v);
      value.set_rpp4_2(v);
   }
   else if (choosenType == &_rpp8-2_Type)
   {
      asn1::IntegerType::ValueType v;
      _rpp8_2_Type.read(reader, v);
      value.set_rpp8_2(v);
   }
   else if (choosenType == &_rpp8-4_Type)
   {
      asn1::IntegerType::ValueType v;
      _rpp8_4_Type.read(reader, v);
      value.set_rpp8_4(v);
   }
   else if (choosenType == &_rpp16-2_Type)
   {
      asn1::IntegerType::ValueType v;
      _rpp16_2_Type.read(reader, v);
      value.set_rpp16_2(v);
   }
   else if (choosenType == &_rpp16-4_Type)
   {
      asn1::IntegerType::ValueType v;
      _rpp16_4_Type.read(reader, v);
      value.set_rpp16_4(v);
   }
   else if (choosenType == &_rpp32-2_Type)
   {
      asn1::IntegerType::ValueType v;
      _rpp32_2_Type.read(reader, v);
      value.set_rpp32_2(v);
   }
   else if (choosenType == &_rpp32-4_Type)
   {
      asn1::IntegerType::ValueType v;
      _rpp32_4_Type.read(reader, v);
      value.set_rpp32_4(v);
   }
   else if (choosenType == &_rpp64-2_Type)
   {
      asn1::IntegerType::ValueType v;
      _rpp64_2_Type.read(reader, v);
      value.set_rpp64_2(v);
   }
   else if (choosenType == &_rpp64-4_Type)
   {
      asn1::IntegerType::ValueType v;
      _rpp64_4_Type.read(reader, v);
      value.set_rpp64_4(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _rpp4-2_Type.toString() + ", " + _rpp8-2_Type.toString() + ", " + _rpp8-4_Type.toString() + ", " + _rpp16-2_Type.toString() + ", " + _rpp16-4_Type.toString() + ", " + _rpp32-2_Type.toString() + ", " + _rpp32-4_Type.toString() + ", " + _rpp64-2_Type.toString() + ", " + _rpp64-4_Type.toString());
   }
}

void RepPerLengthOffset-PICH::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_rpp4-2_Choosen())
      _rpp4-2_Type.write(writer, value.get_rpp4-2());
   else if (value.has_rpp8-2_Choosen())
      _rpp8-2_Type.write(writer, value.get_rpp8-2());
   else if (value.has_rpp8-4_Choosen())
      _rpp8-4_Type.write(writer, value.get_rpp8-4());
   else if (value.has_rpp16-2_Choosen())
      _rpp16-2_Type.write(writer, value.get_rpp16-2());
   else if (value.has_rpp16-4_Choosen())
      _rpp16-4_Type.write(writer, value.get_rpp16-4());
   else if (value.has_rpp32-2_Choosen())
      _rpp32-2_Type.write(writer, value.get_rpp32-2());
   else if (value.has_rpp32-4_Choosen())
      _rpp32-4_Type.write(writer, value.get_rpp32-4());
   else if (value.has_rpp64-2_Choosen())
      _rpp64-2_Type.write(writer, value.get_rpp64-2());
   else if (value.has_rpp64-4_Choosen())
      _rpp64-4_Type.write(writer, value.get_rpp64-4());
}


void RepPerLengthOffset-MICH::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_rpp4-2_Type)
   {
      asn1::IntegerType::ValueType v;
      _rpp4_2_Type.read(reader, v);
      value.set_rpp4_2(v);
   }
   else if (choosenType == &_rpp8-2_Type)
   {
      asn1::IntegerType::ValueType v;
      _rpp8_2_Type.read(reader, v);
      value.set_rpp8_2(v);
   }
   else if (choosenType == &_rpp8-4_Type)
   {
      asn1::IntegerType::ValueType v;
      _rpp8_4_Type.read(reader, v);
      value.set_rpp8_4(v);
   }
   else if (choosenType == &_rpp16-2_Type)
   {
      asn1::IntegerType::ValueType v;
      _rpp16_2_Type.read(reader, v);
      value.set_rpp16_2(v);
   }
   else if (choosenType == &_rpp16-4_Type)
   {
      asn1::IntegerType::ValueType v;
      _rpp16_4_Type.read(reader, v);
      value.set_rpp16_4(v);
   }
   else if (choosenType == &_rpp32-2_Type)
   {
      asn1::IntegerType::ValueType v;
      _rpp32_2_Type.read(reader, v);
      value.set_rpp32_2(v);
   }
   else if (choosenType == &_rpp32-4_Type)
   {
      asn1::IntegerType::ValueType v;
      _rpp32_4_Type.read(reader, v);
      value.set_rpp32_4(v);
   }
   else if (choosenType == &_rpp64-2_Type)
   {
      asn1::IntegerType::ValueType v;
      _rpp64_2_Type.read(reader, v);
      value.set_rpp64_2(v);
   }
   else if (choosenType == &_rpp64-4_Type)
   {
      asn1::IntegerType::ValueType v;
      _rpp64_4_Type.read(reader, v);
      value.set_rpp64_4(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _rpp4-2_Type.toString() + ", " + _rpp8-2_Type.toString() + ", " + _rpp8-4_Type.toString() + ", " + _rpp16-2_Type.toString() + ", " + _rpp16-4_Type.toString() + ", " + _rpp32-2_Type.toString() + ", " + _rpp32-4_Type.toString() + ", " + _rpp64-2_Type.toString() + ", " + _rpp64-4_Type.toString());
   }
}

void RepPerLengthOffset-MICH::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_rpp4-2_Choosen())
      _rpp4-2_Type.write(writer, value.get_rpp4-2());
   else if (value.has_rpp8-2_Choosen())
      _rpp8-2_Type.write(writer, value.get_rpp8-2());
   else if (value.has_rpp8-4_Choosen())
      _rpp8-4_Type.write(writer, value.get_rpp8-4());
   else if (value.has_rpp16-2_Choosen())
      _rpp16-2_Type.write(writer, value.get_rpp16-2());
   else if (value.has_rpp16-4_Choosen())
      _rpp16-4_Type.write(writer, value.get_rpp16-4());
   else if (value.has_rpp32-2_Choosen())
      _rpp32-2_Type.write(writer, value.get_rpp32-2());
   else if (value.has_rpp32-4_Choosen())
      _rpp32-4_Type.write(writer, value.get_rpp32-4());
   else if (value.has_rpp64-2_Choosen())
      _rpp64-2_Type.write(writer, value.get_rpp64-2());
   else if (value.has_rpp64-4_Choosen())
      _rpp64-4_Type.write(writer, value.get_rpp64-4());
}


void RestrictedTrCH::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DL_TrCH_Type::ValueType v;
      _dl_restrictedTrCh_Type_Type.read(reader, v);
      value.set_dl_restrictedTrCh_Type(v);
   }
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _restrictedDL_TrCH_Identity_Type.read(reader, v);
      value.set_restrictedDL_TrCH_Identity(v);
   }
   {
      asn1::generated::AllowedTFI_List::ValueType v;
      _allowedTFIList_Type.read(reader, v);
      value.set_allowedTFIList(v);
   }

   reader.readSequenceEnd(*this);
}

void RestrictedTrCH::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_restrictedTrCh_Type_Type.write(writer, value.get_dl_restrictedTrCh_Type());
   _restrictedDL_TrCH_Identity_Type.write(writer, value.get_restrictedDL_TrCH_Identity());
   _allowedTFIList_Type.write(writer, value.get_allowedTFIList());

   writer.writeSequenceEnd();
}


void RL_AdditionInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PrimaryCPICH_Info::ValueType v;
      _primaryCPICH_Info_Type.read(reader, v);
      value.set_primaryCPICH_Info(v);
   }
   {
      asn1::generated::DL_DPCH_InfoPerRL::ValueType v;
      _dl_DPCH_InfoPerRL_Type.read(reader, v);
      value.set_dl_DPCH_InfoPerRL(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::SCCPCH_InfoForFACH::ValueType v;
      _dummy2_Type.read(reader, v);
      value.set_dummy2(v);
   }

   reader.readSequenceEnd(*this);
}

void RL_AdditionInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _primaryCPICH_Info_Type.write(writer, value.get_primaryCPICH_Info());
   _dl_DPCH_InfoPerRL_Type.write(writer, value.get_dl_DPCH_InfoPerRL());
   _dummy_Type.write(writer, value.get_dummy());
   _dummy2_Type.write(writer, value.get_dummy2());

   writer.writeSequenceEnd();
}


void RL_AdditionInformation_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PrimaryCPICH_Info::ValueType v;
      _primaryCPICH_Info_Type.read(reader, v);
      value.set_primaryCPICH_Info(v);
   }
   {
      asn1::generated::CellIdentity::ValueType v;
      _cell_Id_Type.read(reader, v);
      value.set_cell_Id(v);
   }
   {
      _INTERNAL__ChoiceType_dl-DPCH-InfoPerRL_INTERNAL_asn1__generated__DL_DPCH_InfoPerRL_r5_dl-FDPCH-InfoPerRL_INTERNAL_asn1__generated__DL_FDPCH_InfoPerRL_r6::ValueType v;
      _dl_dpchInfo_Type.read(reader, v);
      value.set_dl_dpchInfo(v);
   }
   {
      asn1::generated::E_HICH_Information::ValueType v;
      _e_HICH_Information_Type.read(reader, v);
      value.set_e_HICH_Information(v);
   }
   {
      asn1::generated::E_RGCH_Information::ValueType v;
      _e_RGCH_Information_Type.read(reader, v);
      value.set_e_RGCH_Information(v);
   }

   reader.readSequenceEnd(*this);
}

void RL_AdditionInformation_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _primaryCPICH_Info_Type.write(writer, value.get_primaryCPICH_Info());
   _cell_Id_Type.write(writer, value.get_cell_Id());
   _dl_dpchInfo_Type.write(writer, value.get_dl_dpchInfo());
   _e_HICH_Information_Type.write(writer, value.get_e_HICH_Information());
   _e_RGCH_Information_Type.write(writer, value.get_e_RGCH_Information());

   writer.writeSequenceEnd();
}


void SCCPCH_InfoForFACH::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SecondaryCCPCH_Info::ValueType v;
      _secondaryCCPCH_Info_Type.read(reader, v);
      value.set_secondaryCCPCH_Info(v);
   }
   {
      asn1::generated::TFCS::ValueType v;
      _tfcs_Type.read(reader, v);
      value.set_tfcs(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_fach-PCH-InformationList_INTERNAL_asn1__generated__FACH_PCH_InformationList_sib-ReferenceListFACH_INTERNAL_asn1__generated__SIB_ReferenceListFACH_tdd_INTERNAL__SequenceType_fach-PCH-InformationList_INTERNAL_asn1__generated__FACH_PCH_InformationList::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void SCCPCH_InfoForFACH::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _secondaryCCPCH_Info_Type.write(writer, value.get_secondaryCCPCH_Info());
   _tfcs_Type.write(writer, value.get_tfcs());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void SCCPCH_InfoForFACH_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SecondaryCCPCH_Info_r4::ValueType v;
      _secondaryCCPCH_Info_Type.read(reader, v);
      value.set_secondaryCCPCH_Info(v);
   }
   {
      asn1::generated::TFCS::ValueType v;
      _tfcs_Type.read(reader, v);
      value.set_tfcs(v);
   }
   {
      asn1::generated::FACH_PCH_InformationList::ValueType v;
      _fach_PCH_InformationList_Type.read(reader, v);
      value.set_fach_PCH_InformationList(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_sib-ReferenceListFACH_INTERNAL_asn1__generated__SIB_ReferenceListFACH_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void SCCPCH_InfoForFACH_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _secondaryCCPCH_Info_Type.write(writer, value.get_secondaryCCPCH_Info());
   _tfcs_Type.write(writer, value.get_tfcs());
   _fach_PCH_InformationList_Type.write(writer, value.get_fach_PCH_InformationList());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void SCCPCH_SystemInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SecondaryCCPCH_Info::ValueType v;
      _secondaryCCPCH_Info_Type.read(reader, v);
      value.set_secondaryCCPCH_Info(v);
   }
   {
      asn1::generated::TFCS::ValueType v;
      _tfcs_Type.read(reader, v);
      value.set_tfcs(v);
   }
   {
      asn1::generated::FACH_PCH_InformationList::ValueType v;
      _fach_PCH_InformationList_Type.read(reader, v);
      value.set_fach_PCH_InformationList(v);
   }
   {
      asn1::generated::PICH_Info::ValueType v;
      _pich_Info_Type.read(reader, v);
      value.set_pich_Info(v);
   }

   reader.readSequenceEnd(*this);
}

void SCCPCH_SystemInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _secondaryCCPCH_Info_Type.write(writer, value.get_secondaryCCPCH_Info());
   _tfcs_Type.write(writer, value.get_tfcs());
   _fach_PCH_InformationList_Type.write(writer, value.get_fach_PCH_InformationList());
   _pich_Info_Type.write(writer, value.get_pich_Info());

   writer.writeSequenceEnd();
}


void SCCPCH_SystemInformation_LCR_r4_ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SecondaryCCPCH_Info_LCR_r4_ext::ValueType v;
      _secondaryCCPCH_LCR_Extensions_Type.read(reader, v);
      value.set_secondaryCCPCH_LCR_Extensions(v);
   }
   {
      asn1::generated::PICH_Info_LCR_r4::ValueType v;
      _pich_Info_Type.read(reader, v);
      value.set_pich_Info(v);
   }

   reader.readSequenceEnd(*this);
}

void SCCPCH_SystemInformation_LCR_r4_ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _secondaryCCPCH_LCR_Extensions_Type.write(writer, value.get_secondaryCCPCH_LCR_Extensions());
   _pich_Info_Type.write(writer, value.get_pich_Info());

   writer.writeSequenceEnd();
}


void SCCPCH_SystemInformation_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SecondaryCCPCH_Info_r7::ValueType v;
      _secondaryCCPCH_Info_Type.read(reader, v);
      value.set_secondaryCCPCH_Info(v);
   }
   {
      asn1::generated::TFCS::ValueType v;
      _tfcs_Type.read(reader, v);
      value.set_tfcs(v);
   }
   {
      asn1::generated::FACH_PCH_InformationList::ValueType v;
      _fach_PCH_InformationList_Type.read(reader, v);
      value.set_fach_PCH_InformationList(v);
   }
   {
      asn1::generated::PICH_Info_r7::ValueType v;
      _pich_Info_Type.read(reader, v);
      value.set_pich_Info(v);
   }

   reader.readSequenceEnd(*this);
}

void SCCPCH_SystemInformation_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _secondaryCCPCH_Info_Type.write(writer, value.get_secondaryCCPCH_Info());
   _tfcs_Type.write(writer, value.get_tfcs());
   _fach_PCH_InformationList_Type.write(writer, value.get_fach_PCH_InformationList());
   _pich_Info_Type.write(writer, value.get_pich_Info());

   writer.writeSequenceEnd();
}


void SCCPCH_SystemInformation_MBMS_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SecondaryCCPCHInfo_MBMS_r6::ValueType v;
      _secondaryCCPCHInfo_MBMS_Type.read(reader, v);
      value.set_secondaryCCPCHInfo_MBMS(v);
   }
   {
      asn1::generated::TFCS::ValueType v;
      _transportFormatCombinationSet_Type.read(reader, v);
      value.set_transportFormatCombinationSet(v);
   }
   {
      _INTERNAL__SequenceType_mcch-transportFormatSet_INTERNAL_asn1__generated__TransportFormatSet_mcch-ConfigurationInfo_INTERNAL_asn1__generated__MBMS_MCCH_ConfigurationInfo_r6::ValueType v;
      _fachCarryingMCCH_Type.read(reader, v);
      value.set_fachCarryingMCCH(v);
   }
   {
      asn1::generated::MBMS_FACHCarryingMTCH_List::ValueType v;
      _fachCarryingMTCH_List_Type.read(reader, v);
      value.set_fachCarryingMTCH_List(v);
   }
   {
      _INTERNAL__SequenceType_msch-transportFormatSet_INTERNAL_asn1__generated__TransportFormatSet_msch-ConfigurationInfo_INTERNAL_asn1__generated__MBMS_MSCH_ConfigurationInfo_r6::ValueType v;
      _fachCarryingMSCH_Type.read(reader, v);
      value.set_fachCarryingMSCH(v);
   }

   reader.readSequenceEnd(*this);
}

void SCCPCH_SystemInformation_MBMS_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _secondaryCCPCHInfo_MBMS_Type.write(writer, value.get_secondaryCCPCHInfo_MBMS());
   _transportFormatCombinationSet_Type.write(writer, value.get_transportFormatCombinationSet());
   _fachCarryingMCCH_Type.write(writer, value.get_fachCarryingMCCH());
   _fachCarryingMTCH_List_Type.write(writer, value.get_fachCarryingMTCH_List());
   _fachCarryingMSCH_Type.write(writer, value.get_fachCarryingMSCH());

   writer.writeSequenceEnd();
}


void SCCPCH_SystemInformation_MBMS_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SecondaryCCPCHInfo_MBMS_r7::ValueType v;
      _secondaryCCPCHInfo_MBMS_Type.read(reader, v);
      value.set_secondaryCCPCHInfo_MBMS(v);
   }
   {
      asn1::generated::TFCS::ValueType v;
      _transportFormatCombinationSet_Type.read(reader, v);
      value.set_transportFormatCombinationSet(v);
   }
   {
      _INTERNAL__SequenceType_mcch-transportFormatSet_INTERNAL_asn1__generated__TransportFormatSet_mcch-ConfigurationInfo_INTERNAL_asn1__generated__MBMS_MCCH_ConfigurationInfo_r6::ValueType v;
      _fachCarryingMCCH_Type.read(reader, v);
      value.set_fachCarryingMCCH(v);
   }
   {
      asn1::generated::MBMS_FACHCarryingMTCH_List::ValueType v;
      _fachCarryingMTCH_List_Type.read(reader, v);
      value.set_fachCarryingMTCH_List(v);
   }
   {
      _INTERNAL__SequenceType_msch-transportFormatSet_INTERNAL_asn1__generated__TransportFormatSet_msch-ConfigurationInfo_INTERNAL_asn1__generated__MBMS_MSCH_ConfigurationInfo_r6::ValueType v;
      _fachCarryingMSCH_Type.read(reader, v);
      value.set_fachCarryingMSCH(v);
   }

   reader.readSequenceEnd(*this);
}

void SCCPCH_SystemInformation_MBMS_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _secondaryCCPCHInfo_MBMS_Type.write(writer, value.get_secondaryCCPCHInfo_MBMS());
   _transportFormatCombinationSet_Type.write(writer, value.get_transportFormatCombinationSet());
   _fachCarryingMCCH_Type.write(writer, value.get_fachCarryingMCCH());
   _fachCarryingMTCH_List_Type.write(writer, value.get_fachCarryingMTCH_List());
   _fachCarryingMSCH_Type.write(writer, value.get_fachCarryingMSCH());

   writer.writeSequenceEnd();
}


void SecondaryCCPCH_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy1_INTERNAL_asn1__generated__PCPICH_UsageForChannelEst_dummy2_INTERNAL_asn1__generated__SecondaryCPICH_Info_secondaryScramblingCode_INTERNAL_asn1__generated__SecondaryScramblingCode_sttd-Indicator_INTERNAL_asn1__BooleanType_sf-AndCodeNumber_INTERNAL_asn1__generated__SF256_AndCodeNumber_pilotSymbolExistence_INTERNAL_asn1__BooleanType_tfci-Existence_INTERNAL_asn1__BooleanType_positionFixedOrFlexible_INTERNAL_asn1__generated__PositionFixedOrFlexible_timingOffset_INTERNAL_asn1__generated__TimingOffset_tdd_INTERNAL__SequenceType_commonTimeslotInfo_INTERNAL_asn1__generated__CommonTimeslotInfoSCCPCH_individualTimeslotInfo_INTERNAL_asn1__generated__IndividualTimeslotInfo_channelisationCode_INTERNAL_asn1__generated__SCCPCH_ChannelisationCodeList::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void SecondaryCCPCH_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void SecondaryCCPCH_Info_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_secondaryScramblingCode_INTERNAL_asn1__generated__SecondaryScramblingCode_sttd-Indicator_INTERNAL_asn1__BooleanType_sf-AndCodeNumber_INTERNAL_asn1__generated__SF256_AndCodeNumber_pilotSymbolExistence_INTERNAL_asn1__BooleanType_tfci-Existence_INTERNAL_asn1__BooleanType_positionFixedOrFlexible_INTERNAL_asn1__generated__PositionFixedOrFlexible_timingOffset_INTERNAL_asn1__generated__TimingOffset_tdd_INTERNAL__SequenceType_commonTimeslotInfo_INTERNAL_asn1__generated__CommonTimeslotInfoSCCPCH_tddOption_INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_individualTimeslotInfo_INTERNAL_asn1__generated__IndividualTimeslotInfo_tdd128_INTERNAL__SequenceType_individualTimeslotInfo_INTERNAL_asn1__generated__IndividualTimeslotInfo_LCR_r4_channelisationCode_INTERNAL_asn1__generated__SCCPCH_ChannelisationCodeList::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void SecondaryCCPCH_Info_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void SecondaryCCPCH_Info_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_secondaryScramblingCode_INTERNAL_asn1__generated__SecondaryScramblingCode_sttd-Indicator_INTERNAL_asn1__BooleanType_sf-AndCodeNumber_INTERNAL_asn1__generated__SF256_AndCodeNumber_pilotSymbolExistence_INTERNAL_asn1__BooleanType_tfci-Existence_INTERNAL_asn1__BooleanType_positionFixedOrFlexible_INTERNAL_asn1__generated__PositionFixedOrFlexible_timingOffset_INTERNAL_asn1__generated__TimingOffset_tdd_INTERNAL__SequenceType_commonTimeslotInfo_INTERNAL_asn1__generated__CommonTimeslotInfoSCCPCH_tddOption_INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_individualTimeslotInfo_INTERNAL_asn1__generated__IndividualTimeslotInfo_channelisationCode_INTERNAL_asn1__generated__SCCPCH_ChannelisationCodeList_tdd768_INTERNAL__SequenceType_individualTimeslotInfo_INTERNAL_asn1__generated__IndividualTimeslotInfo_VHCR_channelisationCode_INTERNAL_asn1__generated__SCCPCH_ChannelisationCodeList_VHCR_tdd128_INTERNAL__SequenceType_individualTimeslotInfo_INTERNAL_asn1__generated__IndividualTimeslotInfo_LCR_r4_channelisationCode_INTERNAL_asn1__generated__SCCPCH_ChannelisationCodeList::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void SecondaryCCPCH_Info_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void SecondaryCCPCH_Info_LCR_r4_ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IndividualTimeslotInfo_LCR_r4_ext::ValueType v;
      _individualTimeslotLCR_Ext_Type.read(reader, v);
      value.set_individualTimeslotLCR_Ext(v);
   }

   reader.readSequenceEnd(*this);
}

void SecondaryCCPCH_Info_LCR_r4_ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _individualTimeslotLCR_Ext_Type.write(writer, value.get_individualTimeslotLCR_Ext());

   writer.writeSequenceEnd();
}


void SecondaryCCPCHInfo_MBMS_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_secondaryScramblingCode_INTERNAL_asn1__generated__SecondaryScramblingCode_sttd-Indicator_INTERNAL_asn1__BooleanType_sf-AndCodeNumber_INTERNAL_asn1__generated__SF256_AndCodeNumber_timingOffset_INTERNAL_asn1__generated__TimingOffset_tdd384_INTERNAL_asn1__generated__DownlinkTimeslotsCodes_tdd128_INTERNAL_asn1__generated__DownlinkTimeslotsCodes_LCR_r4::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void SecondaryCCPCHInfo_MBMS_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void SecondaryCCPCHInfo_MBMS_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_secondaryScramblingCode_INTERNAL_asn1__generated__SecondaryScramblingCode_sttd-Indicator_INTERNAL_asn1__BooleanType_sf-AndCodeNumber_INTERNAL_asn1__generated__SF256_AndCodeNumber_timingOffset_INTERNAL_asn1__generated__TimingOffset_tdd384_INTERNAL_asn1__generated__DownlinkTimeslotsCodes_tdd768_INTERNAL_asn1__generated__DownlinkTimeslotsCodes_VHCR_tdd128_INTERNAL_asn1__generated__DownlinkTimeslotsCodes_LCR_r4::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void SecondaryCCPCHInfo_MBMS_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void SecondaryCPICH_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SecondaryScramblingCode::ValueType v;
      _secondaryDL_ScramblingCode_Type.read(reader, v);
      value.set_secondaryDL_ScramblingCode(v);
   }
   {
      asn1::generated::ChannelisationCode256::ValueType v;
      _channelisationCode_Type.read(reader, v);
      value.set_channelisationCode(v);
   }

   reader.readSequenceEnd(*this);
}

void SecondaryCPICH_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _secondaryDL_ScramblingCode_Type.write(writer, value.get_secondaryDL_ScramblingCode());
   _channelisationCode_Type.write(writer, value.get_channelisationCode());

   writer.writeSequenceEnd();
}


void SF256-AndCodeNumber::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_sf4_Type)
   {
      asn1::IntegerType::ValueType v;
      _sf4_Type.read(reader, v);
      value.set_sf4(v);
   }
   else if (choosenType == &_sf8_Type)
   {
      asn1::IntegerType::ValueType v;
      _sf8_Type.read(reader, v);
      value.set_sf8(v);
   }
   else if (choosenType == &_sf16_Type)
   {
      asn1::IntegerType::ValueType v;
      _sf16_Type.read(reader, v);
      value.set_sf16(v);
   }
   else if (choosenType == &_sf32_Type)
   {
      asn1::IntegerType::ValueType v;
      _sf32_Type.read(reader, v);
      value.set_sf32(v);
   }
   else if (choosenType == &_sf64_Type)
   {
      asn1::IntegerType::ValueType v;
      _sf64_Type.read(reader, v);
      value.set_sf64(v);
   }
   else if (choosenType == &_sf128_Type)
   {
      asn1::IntegerType::ValueType v;
      _sf128_Type.read(reader, v);
      value.set_sf128(v);
   }
   else if (choosenType == &_sf256_Type)
   {
      asn1::IntegerType::ValueType v;
      _sf256_Type.read(reader, v);
      value.set_sf256(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _sf4_Type.toString() + ", " + _sf8_Type.toString() + ", " + _sf16_Type.toString() + ", " + _sf32_Type.toString() + ", " + _sf64_Type.toString() + ", " + _sf128_Type.toString() + ", " + _sf256_Type.toString());
   }
}

void SF256-AndCodeNumber::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_sf4_Choosen())
      _sf4_Type.write(writer, value.get_sf4());
   else if (value.has_sf8_Choosen())
      _sf8_Type.write(writer, value.get_sf8());
   else if (value.has_sf16_Choosen())
      _sf16_Type.write(writer, value.get_sf16());
   else if (value.has_sf32_Choosen())
      _sf32_Type.write(writer, value.get_sf32());
   else if (value.has_sf64_Choosen())
      _sf64_Type.write(writer, value.get_sf64());
   else if (value.has_sf128_Choosen())
      _sf128_Type.write(writer, value.get_sf128());
   else if (value.has_sf256_Choosen())
      _sf256_Type.write(writer, value.get_sf256());
}


void SF512-AndCodeNumber::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_sf4_Type)
   {
      asn1::IntegerType::ValueType v;
      _sf4_Type.read(reader, v);
      value.set_sf4(v);
   }
   else if (choosenType == &_sf8_Type)
   {
      asn1::IntegerType::ValueType v;
      _sf8_Type.read(reader, v);
      value.set_sf8(v);
   }
   else if (choosenType == &_sf16_Type)
   {
      asn1::IntegerType::ValueType v;
      _sf16_Type.read(reader, v);
      value.set_sf16(v);
   }
   else if (choosenType == &_sf32_Type)
   {
      asn1::IntegerType::ValueType v;
      _sf32_Type.read(reader, v);
      value.set_sf32(v);
   }
   else if (choosenType == &_sf64_Type)
   {
      asn1::IntegerType::ValueType v;
      _sf64_Type.read(reader, v);
      value.set_sf64(v);
   }
   else if (choosenType == &_sf128_Type)
   {
      asn1::IntegerType::ValueType v;
      _sf128_Type.read(reader, v);
      value.set_sf128(v);
   }
   else if (choosenType == &_sf256_Type)
   {
      asn1::IntegerType::ValueType v;
      _sf256_Type.read(reader, v);
      value.set_sf256(v);
   }
   else if (choosenType == &_sf512_Type)
   {
      asn1::IntegerType::ValueType v;
      _sf512_Type.read(reader, v);
      value.set_sf512(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _sf4_Type.toString() + ", " + _sf8_Type.toString() + ", " + _sf16_Type.toString() + ", " + _sf32_Type.toString() + ", " + _sf64_Type.toString() + ", " + _sf128_Type.toString() + ", " + _sf256_Type.toString() + ", " + _sf512_Type.toString());
   }
}

void SF512-AndCodeNumber::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_sf4_Choosen())
      _sf4_Type.write(writer, value.get_sf4());
   else if (value.has_sf8_Choosen())
      _sf8_Type.write(writer, value.get_sf8());
   else if (value.has_sf16_Choosen())
      _sf16_Type.write(writer, value.get_sf16());
   else if (value.has_sf32_Choosen())
      _sf32_Type.write(writer, value.get_sf32());
   else if (value.has_sf64_Choosen())
      _sf64_Type.write(writer, value.get_sf64());
   else if (value.has_sf128_Choosen())
      _sf128_Type.write(writer, value.get_sf128());
   else if (value.has_sf256_Choosen())
      _sf256_Type.write(writer, value.get_sf256());
   else if (value.has_sf512_Choosen())
      _sf512_Type.write(writer, value.get_sf512());
}


void SF512-AndPilot::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_sfd4_Type)
   {
      asn1::NullType::ValueType v;
      _sfd4_Type.read(reader, v);
      value.set_sfd4(v);
   }
   else if (choosenType == &_sfd8_Type)
   {
      asn1::NullType::ValueType v;
      _sfd8_Type.read(reader, v);
      value.set_sfd8(v);
   }
   else if (choosenType == &_sfd16_Type)
   {
      asn1::NullType::ValueType v;
      _sfd16_Type.read(reader, v);
      value.set_sfd16(v);
   }
   else if (choosenType == &_sfd32_Type)
   {
      asn1::NullType::ValueType v;
      _sfd32_Type.read(reader, v);
      value.set_sfd32(v);
   }
   else if (choosenType == &_sfd64_Type)
   {
      asn1::NullType::ValueType v;
      _sfd64_Type.read(reader, v);
      value.set_sfd64(v);
   }
   else if (choosenType == &_sfd128_Type)
   {
      asn1::generated::PilotBits128::ValueType v;
      _sfd128_Type.read(reader, v);
      value.set_sfd128(v);
   }
   else if (choosenType == &_sfd256_Type)
   {
      asn1::generated::PilotBits256::ValueType v;
      _sfd256_Type.read(reader, v);
      value.set_sfd256(v);
   }
   else if (choosenType == &_sfd512_Type)
   {
      asn1::NullType::ValueType v;
      _sfd512_Type.read(reader, v);
      value.set_sfd512(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _sfd4_Type.toString() + ", " + _sfd8_Type.toString() + ", " + _sfd16_Type.toString() + ", " + _sfd32_Type.toString() + ", " + _sfd64_Type.toString() + ", " + _sfd128_Type.toString() + ", " + _sfd256_Type.toString() + ", " + _sfd512_Type.toString());
   }
}

void SF512-AndPilot::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_sfd4_Choosen())
      _sfd4_Type.write(writer, value.get_sfd4());
   else if (value.has_sfd8_Choosen())
      _sfd8_Type.write(writer, value.get_sfd8());
   else if (value.has_sfd16_Choosen())
      _sfd16_Type.write(writer, value.get_sfd16());
   else if (value.has_sfd32_Choosen())
      _sfd32_Type.write(writer, value.get_sfd32());
   else if (value.has_sfd64_Choosen())
      _sfd64_Type.write(writer, value.get_sfd64());
   else if (value.has_sfd128_Choosen())
      _sfd128_Type.write(writer, value.get_sfd128());
   else if (value.has_sfd256_Choosen())
      _sfd256_Type.write(writer, value.get_sfd256());
   else if (value.has_sfd512_Choosen())
      _sfd512_Type.write(writer, value.get_sfd512());
}


void SFN_TimeInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _activationTimeSFN_Type.read(reader, v);
      value.set_activationTimeSFN(v);
   }
   {
      asn1::generated::DurationTimeInfo::ValueType v;
      _physChDuration_Type.read(reader, v);
      value.set_physChDuration(v);
   }

   reader.readSequenceEnd(*this);
}

void SFN_TimeInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _activationTimeSFN_Type.write(writer, value.get_activationTimeSFN());
   _physChDuration_Type.write(writer, value.get_physChDuration());

   writer.writeSequenceEnd();
}


void SSDT_Information::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::S_Field::ValueType v;
      _s_Field_Type.read(reader, v);
      value.set_s_Field(v);
   }
   {
      asn1::generated::CodeWordSet::ValueType v;
      _codeWordSet_Type.read(reader, v);
      value.set_codeWordSet(v);
   }

   reader.readSequenceEnd(*this);
}

void SSDT_Information::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _s_Field_Type.write(writer, value.get_s_Field());
   _codeWordSet_Type.write(writer, value.get_codeWordSet());

   writer.writeSequenceEnd();
}


void SSDT_Information_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::S_Field::ValueType v;
      _s_Field_Type.read(reader, v);
      value.set_s_Field(v);
   }
   {
      asn1::generated::CodeWordSet::ValueType v;
      _codeWordSet_Type.read(reader, v);
      value.set_codeWordSet(v);
   }
   {
      asn1::generated::SSDT_UL::ValueType v;
      _ssdt_UL_r4_Type.read(reader, v);
      value.set_ssdt_UL_r4(v);
   }

   reader.readSequenceEnd(*this);
}

void SSDT_Information_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _s_Field_Type.write(writer, value.get_s_Field());
   _codeWordSet_Type.write(writer, value.get_codeWordSet());
   _ssdt_UL_r4_Type.write(writer, value.get_ssdt_UL_r4());

   writer.writeSequenceEnd();
}


void SynchronisationParameters_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _sync_UL_CodesBitmap_Type.read(reader, v);
      value.set_sync_UL_CodesBitmap(v);
   }
   {
      asn1::generated::FPACH_Info_r4::ValueType v;
      _fpach_Info_Type.read(reader, v);
      value.set_fpach_Info(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _prxUpPCHdes_Type.read(reader, v);
      value.set_prxUpPCHdes(v);
   }
   {
      asn1::generated::SYNC_UL_Procedure_r4::ValueType v;
      _sync_UL_Procedure_Type.read(reader, v);
      value.set_sync_UL_Procedure(v);
   }

   reader.readSequenceEnd(*this);
}

void SynchronisationParameters_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sync_UL_CodesBitmap_Type.write(writer, value.get_sync_UL_CodesBitmap());
   _fpach_Info_Type.write(writer, value.get_fpach_Info());
   _prxUpPCHdes_Type.write(writer, value.get_prxUpPCHdes());
   _sync_UL_Procedure_Type.write(writer, value.get_sync_UL_Procedure());

   writer.writeSequenceEnd();
}


void SYNC_UL_Procedure_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__EnumeratedType::ValueType v;
      _max_SYNC_UL_Transmissions_Type.read(reader, v);
      value.set_max_SYNC_UL_Transmissions(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _powerRampStep_Type.read(reader, v);
      value.set_powerRampStep(v);
   }

   reader.readSequenceEnd(*this);
}

void SYNC_UL_Procedure_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _max_SYNC_UL_Transmissions_Type.write(writer, value.get_max_SYNC_UL_Transmissions());
   _powerRampStep_Type.write(writer, value.get_powerRampStep());

   writer.writeSequenceEnd();
}


void SYNC_UL_Info_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _sync_UL_Codes_Bitmap_Type.read(reader, v);
      value.set_sync_UL_Codes_Bitmap(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _prxUpPCHdes_Type.read(reader, v);
      value.set_prxUpPCHdes(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _powerRampStep_Type.read(reader, v);
      value.set_powerRampStep(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _max_SYNC_UL_Transmissions_Type.read(reader, v);
      value.set_max_SYNC_UL_Transmissions(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _mmax_Type.read(reader, v);
      value.set_mmax(v);
   }

   reader.readSequenceEnd(*this);
}

void SYNC_UL_Info_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sync_UL_Codes_Bitmap_Type.write(writer, value.get_sync_UL_Codes_Bitmap());
   _prxUpPCHdes_Type.write(writer, value.get_prxUpPCHdes());
   _powerRampStep_Type.write(writer, value.get_powerRampStep());
   _max_SYNC_UL_Transmissions_Type.write(writer, value.get_max_SYNC_UL_Transmissions());
   _mmax_Type.write(writer, value.get_mmax());

   writer.writeSequenceEnd();
}


void TDD-PRACH-CCodeList::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_sf8_Type)
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__TDD_PRACH_CCode8::ValueType v;
      _sf8_Type.read(reader, v);
      value.set_sf8(v);
   }
   else if (choosenType == &_sf16_Type)
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__TDD_PRACH_CCode16::ValueType v;
      _sf16_Type.read(reader, v);
      value.set_sf16(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _sf8_Type.toString() + ", " + _sf16_Type.toString());
   }
}

void TDD-PRACH-CCodeList::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_sf8_Choosen())
      _sf8_Type.write(writer, value.get_sf8());
   else if (value.has_sf16_Choosen())
      _sf16_Type.write(writer, value.get_sf16());
}


void TDD768-PRACH-CCodeList::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_sf32_Type)
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__TDD768_PRACH_CCode32::ValueType v;
      _sf32_Type.read(reader, v);
      value.set_sf32(v);
   }
   else if (choosenType == &_sf16_Type)
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__TDD768_PRACH_CCode16::ValueType v;
      _sf16_Type.read(reader, v);
      value.set_sf16(v);
   }
   else if (choosenType == &_sf8_Type)
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__TDD768_PRACH_CCode8::ValueType v;
      _sf8_Type.read(reader, v);
      value.set_sf8(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _sf32_Type.toString() + ", " + _sf16_Type.toString() + ", " + _sf8_Type.toString());
   }
}

void TDD768-PRACH-CCodeList::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_sf32_Choosen())
      _sf32_Type.write(writer, value.get_sf32());
   else if (value.has_sf16_Choosen())
      _sf16_Type.write(writer, value.get_sf16());
   else if (value.has_sf8_Choosen())
      _sf8_Type.write(writer, value.get_sf8());
}


void TGP_Sequence::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TGPSI::ValueType v;
      _tgpsi_Type.read(reader, v);
      value.set_tgpsi(v);
   }
   {
      _INTERNAL__ChoiceType_activate_INTERNAL__SequenceType_tgcfn_INTERNAL_asn1__generated__TGCFN_deactivate_INTERNAL_asn1__NullType::ValueType v;
      _tgps_Status_Type.read(reader, v);
      value.set_tgps_Status(v);
   }
   {
      asn1::generated::TGPS_ConfigurationParams::ValueType v;
      _tgps_ConfigurationParams_Type.read(reader, v);
      value.set_tgps_ConfigurationParams(v);
   }

   reader.readSequenceEnd(*this);
}

void TGP_Sequence::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tgpsi_Type.write(writer, value.get_tgpsi());
   _tgps_Status_Type.write(writer, value.get_tgps_Status());
   _tgps_ConfigurationParams_Type.write(writer, value.get_tgps_ConfigurationParams());

   writer.writeSequenceEnd();
}


void TGP_SequenceShort::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TGPSI::ValueType v;
      _tgpsi_Type.read(reader, v);
      value.set_tgpsi(v);
   }
   {
      _INTERNAL__ChoiceType_activate_INTERNAL__SequenceType_tgcfn_INTERNAL_asn1__generated__TGCFN_deactivate_INTERNAL_asn1__NullType::ValueType v;
      _tgps_Status_Type.read(reader, v);
      value.set_tgps_Status(v);
   }

   reader.readSequenceEnd(*this);
}

void TGP_SequenceShort::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tgpsi_Type.write(writer, value.get_tgpsi());
   _tgps_Status_Type.write(writer, value.get_tgps_Status());

   writer.writeSequenceEnd();
}


void TGPS_ConfigurationParams::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TGMP::ValueType v;
      _tgmp_Type.read(reader, v);
      value.set_tgmp(v);
   }
   {
      asn1::generated::TGPRC::ValueType v;
      _tgprc_Type.read(reader, v);
      value.set_tgprc(v);
   }
   {
      asn1::generated::TGSN::ValueType v;
      _tgsn_Type.read(reader, v);
      value.set_tgsn(v);
   }
   {
      asn1::generated::TGL::ValueType v;
      _tgl1_Type.read(reader, v);
      value.set_tgl1(v);
   }
   {
      asn1::generated::TGL::ValueType v;
      _tgl2_Type.read(reader, v);
      value.set_tgl2(v);
   }
   {
      asn1::generated::TGD::ValueType v;
      _tgd_Type.read(reader, v);
      value.set_tgd(v);
   }
   {
      asn1::generated::TGPL::ValueType v;
      _tgpl1_Type.read(reader, v);
      value.set_tgpl1(v);
   }
   {
      asn1::generated::TGPL::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::RPP::ValueType v;
      _rpp_Type.read(reader, v);
      value.set_rpp(v);
   }
   {
      asn1::generated::ITP::ValueType v;
      _itp_Type.read(reader, v);
      value.set_itp(v);
   }
   {
      asn1::generated::UL_DL_Mode::ValueType v;
      _ul_DL_Mode_Type.read(reader, v);
      value.set_ul_DL_Mode(v);
   }
   {
      asn1::generated::DL_FrameType::ValueType v;
      _dl_FrameType_Type.read(reader, v);
      value.set_dl_FrameType(v);
   }
   {
      asn1::generated::DeltaSIR::ValueType v;
      _deltaSIR1_Type.read(reader, v);
      value.set_deltaSIR1(v);
   }
   {
      asn1::generated::DeltaSIR::ValueType v;
      _deltaSIRAfter1_Type.read(reader, v);
      value.set_deltaSIRAfter1(v);
   }
   {
      asn1::generated::DeltaSIR::ValueType v;
      _deltaSIR2_Type.read(reader, v);
      value.set_deltaSIR2(v);
   }
   {
      asn1::generated::DeltaSIR::ValueType v;
      _deltaSIRAfter2_Type.read(reader, v);
      value.set_deltaSIRAfter2(v);
   }
   {
      asn1::generated::NidentifyAbort::ValueType v;
      _nidentifyAbort_Type.read(reader, v);
      value.set_nidentifyAbort(v);
   }
   {
      asn1::generated::TreconfirmAbort::ValueType v;
      _treconfirmAbort_Type.read(reader, v);
      value.set_treconfirmAbort(v);
   }

   reader.readSequenceEnd(*this);
}

void TGPS_ConfigurationParams::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tgmp_Type.write(writer, value.get_tgmp());
   _tgprc_Type.write(writer, value.get_tgprc());
   _tgsn_Type.write(writer, value.get_tgsn());
   _tgl1_Type.write(writer, value.get_tgl1());
   _tgl2_Type.write(writer, value.get_tgl2());
   _tgd_Type.write(writer, value.get_tgd());
   _tgpl1_Type.write(writer, value.get_tgpl1());
   _dummy_Type.write(writer, value.get_dummy());
   _rpp_Type.write(writer, value.get_rpp());
   _itp_Type.write(writer, value.get_itp());
   _ul_DL_Mode_Type.write(writer, value.get_ul_DL_Mode());
   _dl_FrameType_Type.write(writer, value.get_dl_FrameType());
   _deltaSIR1_Type.write(writer, value.get_deltaSIR1());
   _deltaSIRAfter1_Type.write(writer, value.get_deltaSIRAfter1());
   _deltaSIR2_Type.write(writer, value.get_deltaSIR2());
   _deltaSIRAfter2_Type.write(writer, value.get_deltaSIRAfter2());
   _nidentifyAbort_Type.write(writer, value.get_nidentifyAbort());
   _treconfirmAbort_Type.write(writer, value.get_treconfirmAbort());

   writer.writeSequenceEnd();
}


void TimeInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ActivationTime::ValueType v;
      _activationTime_Type.read(reader, v);
      value.set_activationTime(v);
   }
   {
      asn1::generated::DurationTimeInfo::ValueType v;
      _durationTimeInfo_Type.read(reader, v);
      value.set_durationTimeInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void TimeInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _activationTime_Type.write(writer, value.get_activationTime());
   _durationTimeInfo_Type.write(writer, value.get_durationTimeInfo());

   writer.writeSequenceEnd();
}


void TimeslotList-r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_tdd384_Type)
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__TimeslotNumber::ValueType v;
      _tdd384_Type.read(reader, v);
      value.set_tdd384(v);
   }
   else if (choosenType == &_tdd128_Type)
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__TimeslotNumber_LCR_r4::ValueType v;
      _tdd128_Type.read(reader, v);
      value.set_tdd128(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _tdd384_Type.toString() + ", " + _tdd128_Type.toString());
   }
}

void TimeslotList-r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_tdd384_Choosen())
      _tdd384_Type.write(writer, value.get_tdd384());
   else if (value.has_tdd128_Choosen())
      _tdd128_Type.write(writer, value.get_tdd128());
}


void UCSM_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MinimumSpreadingFactor::ValueType v;
      _minimumSpreadingFactor_Type.read(reader, v);
      value.set_minimumSpreadingFactor(v);
   }
   {
      asn1::generated::NF_Max::ValueType v;
      _nf_Max_Type.read(reader, v);
      value.set_nf_Max(v);
   }
   {
      asn1::generated::ChannelReqParamsForUCSM::ValueType v;
      _channelReqParamsForUCSM_Type.read(reader, v);
      value.set_channelReqParamsForUCSM(v);
   }

   reader.readSequenceEnd(*this);
}

void UCSM_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _minimumSpreadingFactor_Type.write(writer, value.get_minimumSpreadingFactor());
   _nf_Max_Type.write(writer, value.get_nf_Max());
   _channelReqParamsForUCSM_Type.write(writer, value.get_channelReqParamsForUCSM());

   writer.writeSequenceEnd();
}


void UL_CCTrCH::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_IdentityPlain::ValueType v;
      _tfcs_ID_Type.read(reader, v);
      value.set_tfcs_ID(v);
   }
   {
      asn1::generated::UL_TargetSIR::ValueType v;
      _ul_TargetSIR_Type.read(reader, v);
      value.set_ul_TargetSIR(v);
   }
   {
      asn1::generated::TimeInfo::ValueType v;
      _timeInfo_Type.read(reader, v);
      value.set_timeInfo(v);
   }
   {
      asn1::generated::CommonTimeslotInfo::ValueType v;
      _commonTimeslotInfo_Type.read(reader, v);
      value.set_commonTimeslotInfo(v);
   }
   {
      asn1::generated::UplinkTimeslotsCodes::ValueType v;
      _ul_CCTrCH_TimeslotsCodes_Type.read(reader, v);
      value.set_ul_CCTrCH_TimeslotsCodes(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_CCTrCH::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfcs_ID_Type.write(writer, value.get_tfcs_ID());
   _ul_TargetSIR_Type.write(writer, value.get_ul_TargetSIR());
   _timeInfo_Type.write(writer, value.get_timeInfo());
   _commonTimeslotInfo_Type.write(writer, value.get_commonTimeslotInfo());
   _ul_CCTrCH_TimeslotsCodes_Type.write(writer, value.get_ul_CCTrCH_TimeslotsCodes());

   writer.writeSequenceEnd();
}


void UL_CCTrCH_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_IdentityPlain::ValueType v;
      _tfcs_ID_Type.read(reader, v);
      value.set_tfcs_ID(v);
   }
   {
      asn1::generated::UL_TargetSIR::ValueType v;
      _ul_TargetSIR_Type.read(reader, v);
      value.set_ul_TargetSIR(v);
   }
   {
      asn1::generated::TimeInfo::ValueType v;
      _timeInfo_Type.read(reader, v);
      value.set_timeInfo(v);
   }
   {
      asn1::generated::CommonTimeslotInfo::ValueType v;
      _commonTimeslotInfo_Type.read(reader, v);
      value.set_commonTimeslotInfo(v);
   }
   {
      _INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_ul-CCTrCH-TimeslotsCodes_INTERNAL_asn1__generated__UplinkTimeslotsCodes_tdd128_INTERNAL__SequenceType_ul-CCTrCH-TimeslotsCodes_INTERNAL_asn1__generated__UplinkTimeslotsCodes_LCR_r4::ValueType v;
      _tddOption_Type.read(reader, v);
      value.set_tddOption(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_CCTrCH_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfcs_ID_Type.write(writer, value.get_tfcs_ID());
   _ul_TargetSIR_Type.write(writer, value.get_ul_TargetSIR());
   _timeInfo_Type.write(writer, value.get_timeInfo());
   _commonTimeslotInfo_Type.write(writer, value.get_commonTimeslotInfo());
   _tddOption_Type.write(writer, value.get_tddOption());

   writer.writeSequenceEnd();
}


void UL_CCTrCH_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_IdentityPlain::ValueType v;
      _tfcs_ID_Type.read(reader, v);
      value.set_tfcs_ID(v);
   }
   {
      asn1::generated::UL_TargetSIR::ValueType v;
      _ul_TargetSIR_Type.read(reader, v);
      value.set_ul_TargetSIR(v);
   }
   {
      asn1::generated::TimeInfo::ValueType v;
      _timeInfo_Type.read(reader, v);
      value.set_timeInfo(v);
   }
   {
      asn1::generated::CommonTimeslotInfo::ValueType v;
      _commonTimeslotInfo_Type.read(reader, v);
      value.set_commonTimeslotInfo(v);
   }
   {
      _INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_ul-CCTrCH-TimeslotsCodes_INTERNAL_asn1__generated__UplinkTimeslotsCodes_tdd768_INTERNAL__SequenceType_ul-CCTrCH-TimeslotsCodes_INTERNAL_asn1__generated__UplinkTimeslotsCodes_VHCR_tdd128_INTERNAL__SequenceType_ul-CCTrCH-TimeslotsCodes_INTERNAL_asn1__generated__UplinkTimeslotsCodes_LCR_r7::ValueType v;
      _tddOption_Type.read(reader, v);
      value.set_tddOption(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_CCTrCH_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfcs_ID_Type.write(writer, value.get_tfcs_ID());
   _ul_TargetSIR_Type.write(writer, value.get_ul_TargetSIR());
   _timeInfo_Type.write(writer, value.get_timeInfo());
   _commonTimeslotInfo_Type.write(writer, value.get_commonTimeslotInfo());
   _tddOption_Type.write(writer, value.get_tddOption());

   writer.writeSequenceEnd();
}


void UL-ChannelRequirement::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_ul-DPCH-Info_Type)
   {
      asn1::generated::UL_DPCH_Info::ValueType v;
      _ul_DPCH_Info_Type.read(reader, v);
      value.set_ul_DPCH_Info(v);
   }
   else if (choosenType == &_dummy_Type)
   {
      asn1::generated::CPCH_SetInfo::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _ul-DPCH-Info_Type.toString() + ", " + _dummy_Type.toString());
   }
}

void UL-ChannelRequirement::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_ul-DPCH-Info_Choosen())
      _ul-DPCH-Info_Type.write(writer, value.get_ul-DPCH-Info());
   else if (value.has_dummy_Choosen())
      _dummy_Type.write(writer, value.get_dummy());
}


void UL-ChannelRequirement-r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_ul-DPCH-Info_Type)
   {
      asn1::generated::UL_DPCH_Info_r4::ValueType v;
      _ul_DPCH_Info_Type.read(reader, v);
      value.set_ul_DPCH_Info(v);
   }
   else if (choosenType == &_dummy_Type)
   {
      asn1::generated::CPCH_SetInfo::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _ul-DPCH-Info_Type.toString() + ", " + _dummy_Type.toString());
   }
}

void UL-ChannelRequirement-r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_ul-DPCH-Info_Choosen())
      _ul-DPCH-Info_Type.write(writer, value.get_ul-DPCH-Info());
   else if (value.has_dummy_Choosen())
      _dummy_Type.write(writer, value.get_dummy());
}


void UL-ChannelRequirement-r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_ul-DPCH-Info_Type)
   {
      asn1::generated::UL_DPCH_Info_r5::ValueType v;
      _ul_DPCH_Info_Type.read(reader, v);
      value.set_ul_DPCH_Info(v);
   }
   else if (choosenType == &_dummy_Type)
   {
      asn1::generated::CPCH_SetInfo::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _ul-DPCH-Info_Type.toString() + ", " + _dummy_Type.toString());
   }
}

void UL-ChannelRequirement-r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_ul-DPCH-Info_Choosen())
      _ul-DPCH-Info_Type.write(writer, value.get_ul-DPCH-Info());
   else if (value.has_dummy_Choosen())
      _dummy_Type.write(writer, value.get_dummy());
}


void UL-ChannelRequirementWithCPCH-SetID::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_ul-DPCH-Info_Type)
   {
      asn1::generated::UL_DPCH_Info::ValueType v;
      _ul_DPCH_Info_Type.read(reader, v);
      value.set_ul_DPCH_Info(v);
   }
   else if (choosenType == &_dummy1_Type)
   {
      asn1::generated::CPCH_SetInfo::ValueType v;
      _dummy1_Type.read(reader, v);
      value.set_dummy1(v);
   }
   else if (choosenType == &_dummy2_Type)
   {
      asn1::generated::CPCH_SetID::ValueType v;
      _dummy2_Type.read(reader, v);
      value.set_dummy2(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _ul-DPCH-Info_Type.toString() + ", " + _dummy1_Type.toString() + ", " + _dummy2_Type.toString());
   }
}

void UL-ChannelRequirementWithCPCH-SetID::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_ul-DPCH-Info_Choosen())
      _ul-DPCH-Info_Type.write(writer, value.get_ul-DPCH-Info());
   else if (value.has_dummy1_Choosen())
      _dummy1_Type.write(writer, value.get_dummy1());
   else if (value.has_dummy2_Choosen())
      _dummy2_Type.write(writer, value.get_dummy2());
}


void UL-ChannelRequirementWithCPCH-SetID-r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_ul-DPCH-Info_Type)
   {
      asn1::generated::UL_DPCH_Info_r4::ValueType v;
      _ul_DPCH_Info_Type.read(reader, v);
      value.set_ul_DPCH_Info(v);
   }
   else if (choosenType == &_dummy1_Type)
   {
      asn1::generated::CPCH_SetInfo::ValueType v;
      _dummy1_Type.read(reader, v);
      value.set_dummy1(v);
   }
   else if (choosenType == &_dummy2_Type)
   {
      asn1::generated::CPCH_SetID::ValueType v;
      _dummy2_Type.read(reader, v);
      value.set_dummy2(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _ul-DPCH-Info_Type.toString() + ", " + _dummy1_Type.toString() + ", " + _dummy2_Type.toString());
   }
}

void UL-ChannelRequirementWithCPCH-SetID-r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_ul-DPCH-Info_Choosen())
      _ul-DPCH-Info_Type.write(writer, value.get_ul-DPCH-Info());
   else if (value.has_dummy1_Choosen())
      _dummy1_Type.write(writer, value.get_dummy1());
   else if (value.has_dummy2_Choosen())
      _dummy2_Type.write(writer, value.get_dummy2());
}


void UL-ChannelRequirementWithCPCH-SetID-r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_ul-DPCH-Info_Type)
   {
      asn1::generated::UL_DPCH_Info_r5::ValueType v;
      _ul_DPCH_Info_Type.read(reader, v);
      value.set_ul_DPCH_Info(v);
   }
   else if (choosenType == &_dummy1_Type)
   {
      asn1::generated::CPCH_SetInfo::ValueType v;
      _dummy1_Type.read(reader, v);
      value.set_dummy1(v);
   }
   else if (choosenType == &_dummy2_Type)
   {
      asn1::generated::CPCH_SetID::ValueType v;
      _dummy2_Type.read(reader, v);
      value.set_dummy2(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _ul-DPCH-Info_Type.toString() + ", " + _dummy1_Type.toString() + ", " + _dummy2_Type.toString());
   }
}

void UL-ChannelRequirementWithCPCH-SetID-r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_ul-DPCH-Info_Choosen())
      _ul-DPCH-Info_Type.write(writer, value.get_ul-DPCH-Info());
   else if (value.has_dummy1_Choosen())
      _dummy1_Type.write(writer, value.get_dummy1());
   else if (value.has_dummy2_Choosen())
      _dummy2_Type.write(writer, value.get_dummy2());
}


void UL-DL-Mode::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_ul_Type)
   {
      asn1::generated::UL_CompressedModeMethod::ValueType v;
      _ul_Type.read(reader, v);
      value.set_ul(v);
   }
   else if (choosenType == &_dl_Type)
   {
      asn1::generated::DL_CompressedModeMethod::ValueType v;
      _dl_Type.read(reader, v);
      value.set_dl(v);
   }
   else if (choosenType == &_ul-and-dl_Type)
   {
      _INTERNAL__SequenceType_ul_INTERNAL_asn1__generated__UL_CompressedModeMethod_dl_INTERNAL_asn1__generated__DL_CompressedModeMethod::ValueType v;
      _ul_and_dl_Type.read(reader, v);
      value.set_ul_and_dl(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _ul_Type.toString() + ", " + _dl_Type.toString() + ", " + _ul-and-dl_Type.toString());
   }
}

void UL-DL-Mode::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_ul_Choosen())
      _ul_Type.write(writer, value.get_ul());
   else if (value.has_dl_Choosen())
      _dl_Type.write(writer, value.get_dl());
   else if (value.has_ul-and-dl_Choosen())
      _ul-and-dl_Type.write(writer, value.get_ul-and-dl());
}


void UL_DPCH_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_DPCH_PowerControlInfo::ValueType v;
      _ul_DPCH_PowerControlInfo_Type.read(reader, v);
      value.set_ul_DPCH_PowerControlInfo(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_scramblingCodeType_INTERNAL_asn1__generated__ScramblingCodeType_scramblingCode_INTERNAL_asn1__generated__UL_ScramblingCode_numberOfDPDCH_INTERNAL_asn1__generated__NumberOfDPDCH_spreadingFactor_INTERNAL_asn1__generated__SpreadingFactor_tfci-Existence_INTERNAL_asn1__BooleanType_numberOfFBI-Bits_INTERNAL_asn1__generated__NumberOfFBI_Bits_puncturingLimit_INTERNAL_asn1__generated__PuncturingLimit_tdd_INTERNAL__SequenceType_ul-TimingAdvance_INTERNAL_asn1__generated__UL_TimingAdvanceControl_ul-CCTrCHList_INTERNAL_asn1__generated__UL_CCTrCHList_ul-CCTrCHListToRemove_INTERNAL_asn1__generated__UL_CCTrCHListToRemove::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_DPCH_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_DPCH_PowerControlInfo_Type.write(writer, value.get_ul_DPCH_PowerControlInfo());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void UL_DPCH_Info_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_DPCH_PowerControlInfo_r4::ValueType v;
      _ul_DPCH_PowerControlInfo_Type.read(reader, v);
      value.set_ul_DPCH_PowerControlInfo(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_scramblingCodeType_INTERNAL_asn1__generated__ScramblingCodeType_scramblingCode_INTERNAL_asn1__generated__UL_ScramblingCode_numberOfDPDCH_INTERNAL_asn1__generated__NumberOfDPDCH_spreadingFactor_INTERNAL_asn1__generated__SpreadingFactor_tfci-Existence_INTERNAL_asn1__BooleanType_numberOfFBI-Bits_INTERNAL_asn1__generated__NumberOfFBI_Bits_puncturingLimit_INTERNAL_asn1__generated__PuncturingLimit_tdd_INTERNAL__SequenceType_ul-TimingAdvance_INTERNAL_asn1__generated__UL_TimingAdvanceControl_r4_ul-CCTrCHList_INTERNAL_asn1__generated__UL_CCTrCHList_r4_ul-CCTrCHListToRemove_INTERNAL_asn1__generated__UL_CCTrCHListToRemove::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_DPCH_Info_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_DPCH_PowerControlInfo_Type.write(writer, value.get_ul_DPCH_PowerControlInfo());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void UL_DPCH_Info_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_DPCH_PowerControlInfo_r5::ValueType v;
      _ul_DPCH_PowerControlInfo_Type.read(reader, v);
      value.set_ul_DPCH_PowerControlInfo(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_scramblingCodeType_INTERNAL_asn1__generated__ScramblingCodeType_scramblingCode_INTERNAL_asn1__generated__UL_ScramblingCode_numberOfDPDCH_INTERNAL_asn1__generated__NumberOfDPDCH_spreadingFactor_INTERNAL_asn1__generated__SpreadingFactor_tfci-Existence_INTERNAL_asn1__BooleanType_numberOfFBI-Bits_INTERNAL_asn1__generated__NumberOfFBI_Bits_puncturingLimit_INTERNAL_asn1__generated__PuncturingLimit_tdd_INTERNAL__SequenceType_ul-TimingAdvance_INTERNAL_asn1__generated__UL_TimingAdvanceControl_r4_ul-CCTrCHList_INTERNAL_asn1__generated__UL_CCTrCHList_r4_ul-CCTrCHListToRemove_INTERNAL_asn1__generated__UL_CCTrCHListToRemove::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_DPCH_Info_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_DPCH_PowerControlInfo_Type.write(writer, value.get_ul_DPCH_PowerControlInfo());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void UL_DPCH_Info_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_DPCH_PowerControlInfo_r6::ValueType v;
      _ul_DPCH_PowerControlInfo_Type.read(reader, v);
      value.set_ul_DPCH_PowerControlInfo(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_scramblingCodeType_INTERNAL_asn1__generated__ScramblingCodeType_scramblingCode_INTERNAL_asn1__generated__UL_ScramblingCode_dpdchPresence_INTERNAL__ChoiceType_present_INTERNAL__SequenceType_numberOfDPDCH_INTERNAL_asn1__generated__NumberOfDPDCH_spreadingFactor_INTERNAL_asn1__generated__SpreadingFactor_tfci-Existence_INTERNAL_asn1__BooleanType_numberOfFBI-Bits_INTERNAL_asn1__generated__NumberOfFBI_Bits_puncturingLimit_INTERNAL_asn1__generated__PuncturingLimit_notPresent_INTERNAL__SequenceType_tfci-Existence_INTERNAL_asn1__BooleanType_numberOfFBI-Bits_INTERNAL_asn1__generated__NumberOfFBI_Bits_tdd_INTERNAL__SequenceType_ul-TimingAdvance_INTERNAL_asn1__generated__UL_TimingAdvanceControl_r4_ul-CCTrCHList_INTERNAL_asn1__generated__UL_CCTrCHList_r4_ul-CCTrCHListToRemove_INTERNAL_asn1__generated__UL_CCTrCHListToRemove::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_DPCH_Info_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_DPCH_PowerControlInfo_Type.write(writer, value.get_ul_DPCH_PowerControlInfo());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void UL_DPCH_Info_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_DPCH_PowerControlInfo_r6::ValueType v;
      _ul_DPCH_PowerControlInfo_Type.read(reader, v);
      value.set_ul_DPCH_PowerControlInfo(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_scramblingCodeType_INTERNAL_asn1__generated__ScramblingCodeType_scramblingCode_INTERNAL_asn1__generated__UL_ScramblingCode_dpdchPresence_INTERNAL__ChoiceType_present_INTERNAL__SequenceType_numberOfDPDCH_INTERNAL_asn1__generated__NumberOfDPDCH_spreadingFactor_INTERNAL_asn1__generated__SpreadingFactor_tfci-Existence_INTERNAL_asn1__BooleanType_numberOfFBI-Bits_INTERNAL_asn1__generated__NumberOfFBI_Bits_puncturingLimit_INTERNAL_asn1__generated__PuncturingLimit_notPresent_INTERNAL__SequenceType_tfci-Existence_INTERNAL_asn1__BooleanType_numberOfFBI-Bits_INTERNAL_asn1__generated__NumberOfFBI_Bits_tdd_INTERNAL__SequenceType_ul-TimingAdvance_INTERNAL_asn1__generated__UL_TimingAdvanceControl_r7_ul-CCTrCHList_INTERNAL_asn1__generated__UL_CCTrCHList_r7_ul-CCTrCHListToRemove_INTERNAL_asn1__generated__UL_CCTrCHListToRemove::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_DPCH_Info_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_DPCH_PowerControlInfo_Type.write(writer, value.get_ul_DPCH_PowerControlInfo());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void UL_DPCH_InfoPostFDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_DPCH_PowerControlInfoPostFDD::ValueType v;
      _ul_DPCH_PowerControlInfo_Type.read(reader, v);
      value.set_ul_DPCH_PowerControlInfo(v);
   }
   {
      asn1::generated::ScramblingCodeType::ValueType v;
      _scramblingCodeType_Type.read(reader, v);
      value.set_scramblingCodeType(v);
   }
   {
      asn1::generated::ReducedScramblingCodeNumber::ValueType v;
      _reducedScramblingCodeNumber_Type.read(reader, v);
      value.set_reducedScramblingCodeNumber(v);
   }
   {
      asn1::generated::SpreadingFactor::ValueType v;
      _spreadingFactor_Type.read(reader, v);
      value.set_spreadingFactor(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_DPCH_InfoPostFDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_DPCH_PowerControlInfo_Type.write(writer, value.get_ul_DPCH_PowerControlInfo());
   _scramblingCodeType_Type.write(writer, value.get_scramblingCodeType());
   _reducedScramblingCodeNumber_Type.write(writer, value.get_reducedScramblingCodeNumber());
   _spreadingFactor_Type.write(writer, value.get_spreadingFactor());

   writer.writeSequenceEnd();
}


void UL_DPCH_InfoPostTDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_DPCH_PowerControlInfoPostTDD::ValueType v;
      _ul_DPCH_PowerControlInfo_Type.read(reader, v);
      value.set_ul_DPCH_PowerControlInfo(v);
   }
   {
      asn1::generated::UL_TimingAdvanceControl::ValueType v;
      _ul_TimingAdvance_Type.read(reader, v);
      value.set_ul_TimingAdvance(v);
   }
   {
      asn1::generated::UplinkTimeslotsCodes::ValueType v;
      _ul_CCTrCH_TimeslotsCodes_Type.read(reader, v);
      value.set_ul_CCTrCH_TimeslotsCodes(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_DPCH_InfoPostTDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_DPCH_PowerControlInfo_Type.write(writer, value.get_ul_DPCH_PowerControlInfo());
   _ul_TimingAdvance_Type.write(writer, value.get_ul_TimingAdvance());
   _ul_CCTrCH_TimeslotsCodes_Type.write(writer, value.get_ul_CCTrCH_TimeslotsCodes());

   writer.writeSequenceEnd();
}


void UL_DPCH_InfoPostTDD_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_DPCH_PowerControlInfoPostTDD_LCR_r4::ValueType v;
      _ul_DPCH_PowerControlInfo_Type.read(reader, v);
      value.set_ul_DPCH_PowerControlInfo(v);
   }
   {
      asn1::generated::UL_TimingAdvanceControl_LCR_r4::ValueType v;
      _ul_TimingAdvance_Type.read(reader, v);
      value.set_ul_TimingAdvance(v);
   }
   {
      asn1::generated::UplinkTimeslotsCodes_LCR_r4::ValueType v;
      _ul_CCTrCH_TimeslotsCodes_Type.read(reader, v);
      value.set_ul_CCTrCH_TimeslotsCodes(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_DPCH_InfoPostTDD_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_DPCH_PowerControlInfo_Type.write(writer, value.get_ul_DPCH_PowerControlInfo());
   _ul_TimingAdvance_Type.write(writer, value.get_ul_TimingAdvance());
   _ul_CCTrCH_TimeslotsCodes_Type.write(writer, value.get_ul_CCTrCH_TimeslotsCodes());

   writer.writeSequenceEnd();
}


void UL_DPCH_InfoPredef::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_DPCH_PowerControlInfoPredef::ValueType v;
      _ul_DPCH_PowerControlInfo_Type.read(reader, v);
      value.set_ul_DPCH_PowerControlInfo(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_tfci-Existence_INTERNAL_asn1__BooleanType_puncturingLimit_INTERNAL_asn1__generated__PuncturingLimit_tdd_INTERNAL__SequenceType_commonTimeslotInfo_INTERNAL_asn1__generated__CommonTimeslotInfo::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_DPCH_InfoPredef::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_DPCH_PowerControlInfo_Type.write(writer, value.get_ul_DPCH_PowerControlInfo());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void UL-DPCH-PowerControlInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_fdd_Type)
   {
      _INTERNAL__SequenceType_dpcch-PowerOffset_INTERNAL_asn1__generated__DPCCH_PowerOffset_pc-Preamble_INTERNAL_asn1__generated__PC_Preamble_sRB-delay_INTERNAL_asn1__generated__SRB_delay_powerControlAlgorithm_INTERNAL_asn1__generated__PowerControlAlgorithm::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   else if (choosenType == &_tdd_Type)
   {
      _INTERNAL__SequenceType_ul-TargetSIR_INTERNAL_asn1__generated__UL_TargetSIR_ul-OL-PC-Signalling_INTERNAL__ChoiceType_broadcast-UL-OL-PC-info_INTERNAL_asn1__NullType_individuallySignalled_INTERNAL__SequenceType_individualTS-InterferenceList_INTERNAL_asn1__generated__IndividualTS_InterferenceList_dpch-ConstantValue_INTERNAL_asn1__generated__ConstantValueTdd_primaryCCPCH-TX-Power_INTERNAL_asn1__generated__PrimaryCCPCH_TX_Power::ValueType v;
      _tdd_Type.read(reader, v);
      value.set_tdd(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _fdd_Type.toString() + ", " + _tdd_Type.toString());
   }
}

void UL-DPCH-PowerControlInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_fdd_Choosen())
      _fdd_Type.write(writer, value.get_fdd());
   else if (value.has_tdd_Choosen())
      _tdd_Type.write(writer, value.get_tdd());
}


void UL-DPCH-PowerControlInfo-r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_fdd_Type)
   {
      _INTERNAL__SequenceType_dpcch-PowerOffset_INTERNAL_asn1__generated__DPCCH_PowerOffset_pc-Preamble_INTERNAL_asn1__generated__PC_Preamble_sRB-delay_INTERNAL_asn1__generated__SRB_delay_powerControlAlgorithm_INTERNAL_asn1__generated__PowerControlAlgorithm::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   else if (choosenType == &_tdd_Type)
   {
      _INTERNAL__SequenceType_ul-TargetSIR_INTERNAL_asn1__generated__UL_TargetSIR_ul-OL-PC-Signalling_INTERNAL__ChoiceType_broadcast-UL-OL-PC-info_INTERNAL_asn1__NullType_individuallySignalled_INTERNAL__SequenceType_tddOption_INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_individualTS-InterferenceList_INTERNAL_asn1__generated__IndividualTS_InterferenceList_dpch-ConstantValue_INTERNAL_asn1__generated__ConstantValue_tdd128_INTERNAL__SequenceType_tpc-StepSize_INTERNAL_asn1__generated__TPC_StepSizeTDD_primaryCCPCH-TX-Power_INTERNAL_asn1__generated__PrimaryCCPCH_TX_Power::ValueType v;
      _tdd_Type.read(reader, v);
      value.set_tdd(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _fdd_Type.toString() + ", " + _tdd_Type.toString());
   }
}

void UL-DPCH-PowerControlInfo-r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_fdd_Choosen())
      _fdd_Type.write(writer, value.get_fdd());
   else if (value.has_tdd_Choosen())
      _tdd_Type.write(writer, value.get_tdd());
}


void UL-DPCH-PowerControlInfo-r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_fdd_Type)
   {
      _INTERNAL__SequenceType_dpcch-PowerOffset_INTERNAL_asn1__generated__DPCCH_PowerOffset_pc-Preamble_INTERNAL_asn1__generated__PC_Preamble_sRB-delay_INTERNAL_asn1__generated__SRB_delay_powerControlAlgorithm_INTERNAL_asn1__generated__PowerControlAlgorithm_deltaACK_INTERNAL_asn1__generated__DeltaACK_deltaNACK_INTERNAL_asn1__generated__DeltaNACK_ack-NACK-repetition-factor_INTERNAL_asn1__generated__ACK_NACK_repetitionFactor::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   else if (choosenType == &_tdd_Type)
   {
      _INTERNAL__SequenceType_ul-TargetSIR_INTERNAL_asn1__generated__UL_TargetSIR_ul-OL-PC-Signalling_INTERNAL__ChoiceType_broadcast-UL-OL-PC-info_INTERNAL_asn1__NullType_individuallySignalled_INTERNAL__SequenceType_tddOption_INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_individualTS-InterferenceList_INTERNAL_asn1__generated__IndividualTS_InterferenceList_dpch-ConstantValue_INTERNAL_asn1__generated__ConstantValue_tdd128_INTERNAL__SequenceType_tpc-StepSize_INTERNAL_asn1__generated__TPC_StepSizeTDD_primaryCCPCH-TX-Power_INTERNAL_asn1__generated__PrimaryCCPCH_TX_Power::ValueType v;
      _tdd_Type.read(reader, v);
      value.set_tdd(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _fdd_Type.toString() + ", " + _tdd_Type.toString());
   }
}

void UL-DPCH-PowerControlInfo-r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_fdd_Choosen())
      _fdd_Type.write(writer, value.get_fdd());
   else if (value.has_tdd_Choosen())
      _tdd_Type.write(writer, value.get_tdd());
}


void UL-DPCH-PowerControlInfo-r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_fdd_Type)
   {
      _INTERNAL__SequenceType_dpcch-PowerOffset_INTERNAL_asn1__generated__DPCCH_PowerOffset_pc-Preamble_INTERNAL_asn1__generated__PC_Preamble_sRB-delay_INTERNAL_asn1__generated__SRB_delay_powerControlAlgorithm_INTERNAL_asn1__generated__PowerControlAlgorithm_deltaACK_INTERNAL_asn1__generated__DeltaACK_deltaNACK_INTERNAL_asn1__generated__DeltaNACK_ack-NACK-repetition-factor_INTERNAL_asn1__generated__ACK_NACK_repetitionFactor_harq-Preamble-Mode_INTERNAL_asn1__generated__HARQ_Preamble_Mode::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   else if (choosenType == &_tdd_Type)
   {
      _INTERNAL__SequenceType_ul-TargetSIR_INTERNAL_asn1__generated__UL_TargetSIR_ul-OL-PC-Signalling_INTERNAL__ChoiceType_broadcast-UL-OL-PC-info_INTERNAL_asn1__NullType_individuallySignalled_INTERNAL__SequenceType_tddOption_INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_individualTS-InterferenceList_INTERNAL_asn1__generated__IndividualTS_InterferenceList_dpch-ConstantValue_INTERNAL_asn1__generated__ConstantValue_tdd128_INTERNAL__SequenceType_beaconPLEst_INTERNAL_asn1__generated__BEACON_PL_Est_tpc-StepSize_INTERNAL_asn1__generated__TPC_StepSizeTDD_primaryCCPCH-TX-Power_INTERNAL_asn1__generated__PrimaryCCPCH_TX_Power::ValueType v;
      _tdd_Type.read(reader, v);
      value.set_tdd(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _fdd_Type.toString() + ", " + _tdd_Type.toString());
   }
}

void UL-DPCH-PowerControlInfo-r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_fdd_Choosen())
      _fdd_Type.write(writer, value.get_fdd());
   else if (value.has_tdd_Choosen())
      _tdd_Type.write(writer, value.get_tdd());
}


void UL-DPCH-PowerControlInfo-r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_fdd_Type)
   {
      _INTERNAL__SequenceType_dpcch-PowerOffset_INTERNAL_asn1__generated__DPCCH_PowerOffset_pc-Preamble_INTERNAL_asn1__generated__PC_Preamble_sRB-delay_INTERNAL_asn1__generated__SRB_delay_powerControlAlgorithm_INTERNAL_asn1__generated__PowerControlAlgorithm_deltaACK_INTERNAL_asn1__generated__DeltaACK_deltaNACK_INTERNAL_asn1__generated__DeltaNACK_ack-NACK-repetition-factor_INTERNAL_asn1__generated__ACK_NACK_repetitionFactor_harq-Preamble-Mode_INTERNAL_asn1__generated__HARQ_Preamble_Mode::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   else if (choosenType == &_tdd_Type)
   {
      _INTERNAL__SequenceType_ul-TargetSIR_INTERNAL_asn1__generated__UL_TargetSIR_ul-OL-PC-Signalling_INTERNAL__ChoiceType_broadcast-UL-OL-PC-info_INTERNAL_asn1__NullType_individuallySignalled_INTERNAL__SequenceType_tddOption_INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_individualTS-InterferenceList_INTERNAL_asn1__generated__IndividualTS_InterferenceList_dpch-ConstantValue_INTERNAL_asn1__generated__ConstantValue_tdd768_INTERNAL__SequenceType_individualTS-InterferenceList_INTERNAL_asn1__generated__IndividualTS_InterferenceList_dpch-ConstantValue_INTERNAL_asn1__generated__ConstantValue_tdd128_INTERNAL__SequenceType_beaconPLEst_INTERNAL_asn1__generated__BEACON_PL_Est_tpc-StepSize_INTERNAL_asn1__generated__TPC_StepSizeTDD_primaryCCPCH-TX-Power_INTERNAL_asn1__generated__PrimaryCCPCH_TX_Power::ValueType v;
      _tdd_Type.read(reader, v);
      value.set_tdd(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _fdd_Type.toString() + ", " + _tdd_Type.toString());
   }
}

void UL-DPCH-PowerControlInfo-r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_fdd_Choosen())
      _fdd_Type.write(writer, value.get_fdd());
   else if (value.has_tdd_Choosen())
      _tdd_Type.write(writer, value.get_tdd());
}


void UL_DPCH_PowerControlInfoPostFDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DPCCH_PowerOffset2::ValueType v;
      _dpcch_PowerOffset_Type.read(reader, v);
      value.set_dpcch_PowerOffset(v);
   }
   {
      asn1::generated::PC_Preamble::ValueType v;
      _pc_Preamble_Type.read(reader, v);
      value.set_pc_Preamble(v);
   }
   {
      asn1::generated::SRB_delay::ValueType v;
      _sRB_delay_Type.read(reader, v);
      value.set_sRB_delay(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_DPCH_PowerControlInfoPostFDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dpcch_PowerOffset_Type.write(writer, value.get_dpcch_PowerOffset());
   _pc_Preamble_Type.write(writer, value.get_pc_Preamble());
   _sRB_delay_Type.write(writer, value.get_sRB_delay());

   writer.writeSequenceEnd();
}


void UL_DPCH_PowerControlInfoPostTDD::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_TargetSIR::ValueType v;
      _ul_TargetSIR_Type.read(reader, v);
      value.set_ul_TargetSIR(v);
   }
   {
      asn1::generated::TDD_UL_Interference::ValueType v;
      _ul_TimeslotInterference_Type.read(reader, v);
      value.set_ul_TimeslotInterference(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_DPCH_PowerControlInfoPostTDD::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_TargetSIR_Type.write(writer, value.get_ul_TargetSIR());
   _ul_TimeslotInterference_Type.write(writer, value.get_ul_TimeslotInterference());

   writer.writeSequenceEnd();
}


void UL_DPCH_PowerControlInfoPostTDD_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_TargetSIR::ValueType v;
      _ul_TargetSIR_Type.read(reader, v);
      value.set_ul_TargetSIR(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_DPCH_PowerControlInfoPostTDD_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_TargetSIR_Type.write(writer, value.get_ul_TargetSIR());

   writer.writeSequenceEnd();
}


void UL-DPCH-PowerControlInfoPredef::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_fdd_Type)
   {
      _INTERNAL__SequenceType_powerControlAlgorithm_INTERNAL_asn1__generated__PowerControlAlgorithm::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   else if (choosenType == &_tdd_Type)
   {
      _INTERNAL__SequenceType_dpch-ConstantValue_INTERNAL_asn1__generated__ConstantValueTdd::ValueType v;
      _tdd_Type.read(reader, v);
      value.set_tdd(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _fdd_Type.toString() + ", " + _tdd_Type.toString());
   }
}

void UL-DPCH-PowerControlInfoPredef::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_fdd_Choosen())
      _fdd_Type.write(writer, value.get_fdd());
   else if (value.has_tdd_Choosen())
      _tdd_Type.write(writer, value.get_tdd());
}


void UL_EDCH_Information_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__EnumeratedType::ValueType v;
      _mac_es_e_resetIndicator_Type.read(reader, v);
      value.set_mac_es_e_resetIndicator(v);
   }
   {
      asn1::generated::E_DPCCH_Info::ValueType v;
      _e_DPCCH_Info_Type.read(reader, v);
      value.set_e_DPCCH_Info(v);
   }
   {
      asn1::generated::E_DPDCH_Info::ValueType v;
      _e_DPDCH_Info_Type.read(reader, v);
      value.set_e_DPDCH_Info(v);
   }
   {
      asn1::generated::E_DPDCH_SchedulingTransmConfiguration::ValueType v;
      _schedulingTransmConfiguration_Type.read(reader, v);
      value.set_schedulingTransmConfiguration(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_EDCH_Information_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mac_es_e_resetIndicator_Type.write(writer, value.get_mac_es_e_resetIndicator());
   _e_DPCCH_Info_Type.write(writer, value.get_e_DPCCH_Info());
   _e_DPDCH_Info_Type.write(writer, value.get_e_DPDCH_Info());
   _schedulingTransmConfiguration_Type.write(writer, value.get_schedulingTransmConfiguration());

   writer.writeSequenceEnd();
}


void UL_SynchronisationParameters_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _stepSize_Type.read(reader, v);
      value.set_stepSize(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _frequency_Type.read(reader, v);
      value.set_frequency(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_SynchronisationParameters_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _stepSize_Type.write(writer, value.get_stepSize());
   _frequency_Type.write(writer, value.get_frequency());

   writer.writeSequenceEnd();
}


void UL-TimingAdvanceControl::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_disabled_Type)
   {
      asn1::NullType::ValueType v;
      _disabled_Type.read(reader, v);
      value.set_disabled(v);
   }
   else if (choosenType == &_enabled_Type)
   {
      _INTERNAL__SequenceType_ul-TimingAdvance_INTERNAL_asn1__generated__UL_TimingAdvance_activationTime_INTERNAL_asn1__generated__ActivationTime::ValueType v;
      _enabled_Type.read(reader, v);
      value.set_enabled(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _disabled_Type.toString() + ", " + _enabled_Type.toString());
   }
}

void UL-TimingAdvanceControl::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_disabled_Choosen())
      _disabled_Type.write(writer, value.get_disabled());
   else if (value.has_enabled_Choosen())
      _enabled_Type.write(writer, value.get_enabled());
}


void UL-TimingAdvanceControl-r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_disabled_Type)
   {
      asn1::NullType::ValueType v;
      _disabled_Type.read(reader, v);
      value.set_disabled(v);
   }
   else if (choosenType == &_enabled_Type)
   {
      _INTERNAL__SequenceType_tddOption_INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_ul-TimingAdvance_INTERNAL_asn1__generated__UL_TimingAdvance_activationTime_INTERNAL_asn1__generated__ActivationTime_tdd128_INTERNAL__SequenceType_ul-SynchronisationParameters_INTERNAL_asn1__generated__UL_SynchronisationParameters_r4_synchronisationParameters_INTERNAL_asn1__generated__SynchronisationParameters_r4::ValueType v;
      _enabled_Type.read(reader, v);
      value.set_enabled(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _disabled_Type.toString() + ", " + _enabled_Type.toString());
   }
}

void UL-TimingAdvanceControl-r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_disabled_Choosen())
      _disabled_Type.write(writer, value.get_disabled());
   else if (value.has_enabled_Choosen())
      _enabled_Type.write(writer, value.get_enabled());
}


void UL-TimingAdvanceControl-r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_disabled_Type)
   {
      asn1::NullType::ValueType v;
      _disabled_Type.read(reader, v);
      value.set_disabled(v);
   }
   else if (choosenType == &_enabled_Type)
   {
      _INTERNAL__SequenceType_tddOption_INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_ul-TimingAdvance_INTERNAL_asn1__generated__UL_TimingAdvance_ext-ul-TimingAdvance_INTERNAL_asn1__generated__EXT_UL_TimingAdvance_activationTime_INTERNAL_asn1__generated__ActivationTime_tdd768_INTERNAL__SequenceType_ext-ul-TimingAdvance_INTERNAL_asn1__generated__EXT_UL_TimingAdvance_activationTime_INTERNAL_asn1__generated__ActivationTime_tdd128_INTERNAL__SequenceType_ul-SynchronisationParameters_INTERNAL_asn1__generated__UL_SynchronisationParameters_r4_synchronisationParameters_INTERNAL_asn1__generated__SynchronisationParameters_r4::ValueType v;
      _enabled_Type.read(reader, v);
      value.set_enabled(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _disabled_Type.toString() + ", " + _enabled_Type.toString());
   }
}

void UL-TimingAdvanceControl-r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_disabled_Choosen())
      _disabled_Type.write(writer, value.get_disabled());
   else if (value.has_enabled_Choosen())
      _enabled_Type.write(writer, value.get_enabled());
}


void UL-TimingAdvanceControl-LCR-r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_disabled_Type)
   {
      asn1::NullType::ValueType v;
      _disabled_Type.read(reader, v);
      value.set_disabled(v);
   }
   else if (choosenType == &_enabled_Type)
   {
      _INTERNAL__SequenceType_ul-SynchronisationParameters_INTERNAL_asn1__generated__UL_SynchronisationParameters_r4_synchronisationParameters_INTERNAL_asn1__generated__SynchronisationParameters_r4::ValueType v;
      _enabled_Type.read(reader, v);
      value.set_enabled(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _disabled_Type.toString() + ", " + _enabled_Type.toString());
   }
}

void UL-TimingAdvanceControl-LCR-r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_disabled_Choosen())
      _disabled_Type.write(writer, value.get_disabled());
   else if (value.has_enabled_Choosen())
      _enabled_Type.write(writer, value.get_enabled());
}


void UplinkAdditionalTimeslots::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_sameAsLast_INTERNAL__SequenceType_timeslotNumber_INTERNAL_asn1__generated__TimeslotNumber_newParameters_INTERNAL__SequenceType_individualTimeslotInfo_INTERNAL_asn1__generated__IndividualTimeslotInfo_ul-TS-ChannelisationCodeList_INTERNAL_asn1__generated__UL_TS_ChannelisationCodeList::ValueType v;
      _parameters_Type.read(reader, v);
      value.set_parameters(v);
   }

   reader.readSequenceEnd(*this);
}

void UplinkAdditionalTimeslots::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _parameters_Type.write(writer, value.get_parameters());

   writer.writeSequenceEnd();
}


void UplinkAdditionalTimeslots_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_sameAsLast_INTERNAL__SequenceType_timeslotNumber_INTERNAL_asn1__generated__TimeslotNumber_newParameters_INTERNAL__SequenceType_individualTimeslotInfo_INTERNAL_asn1__generated__IndividualTimeslotInfo_LCR_r4_ul-TS-ChannelisationCodeList_INTERNAL_asn1__generated__UL_TS_ChannelisationCodeList::ValueType v;
      _parameters_Type.read(reader, v);
      value.set_parameters(v);
   }

   reader.readSequenceEnd(*this);
}

void UplinkAdditionalTimeslots_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _parameters_Type.write(writer, value.get_parameters());

   writer.writeSequenceEnd();
}


void UplinkAdditionalTimeslots_LCR_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_sameAsLast_INTERNAL__SequenceType_timeslotNumber_INTERNAL_asn1__generated__TimeslotNumber_newParameters_INTERNAL__SequenceType_individualTimeslotInfo_INTERNAL_asn1__generated__IndividualTimeslotInfo_LCR_r4_ul-TS-ChannelisationCodeList_INTERNAL_asn1__generated__UL_TS_ChannelisationCodeList_r7::ValueType v;
      _parameters_Type.read(reader, v);
      value.set_parameters(v);
   }

   reader.readSequenceEnd(*this);
}

void UplinkAdditionalTimeslots_LCR_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _parameters_Type.write(writer, value.get_parameters());

   writer.writeSequenceEnd();
}


void UplinkTimeslotsCodes::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _dynamicSFusage_Type.read(reader, v);
      value.set_dynamicSFusage(v);
   }
   {
      asn1::generated::IndividualTimeslotInfo::ValueType v;
      _firstIndividualTimeslotInfo_Type.read(reader, v);
      value.set_firstIndividualTimeslotInfo(v);
   }
   {
      asn1::generated::UL_TS_ChannelisationCodeList::ValueType v;
      _ul_TS_ChannelisationCodeList_Type.read(reader, v);
      value.set_ul_TS_ChannelisationCodeList(v);
   }
   {
      _INTERNAL__ChoiceType_noMore_INTERNAL_asn1__NullType_additionalTimeslots_INTERNAL__ChoiceType_consecutive_INTERNAL__SequenceType_numAdditionalTimeslots_INTERNAL_asn1__IntegerType_timeslotList_INTERNAL__SequenceOfType_INTERNAL_asn1__generated__UplinkAdditionalTimeslots::ValueType v;
      _moreTimeslots_Type.read(reader, v);
      value.set_moreTimeslots(v);
   }

   reader.readSequenceEnd(*this);
}

void UplinkTimeslotsCodes::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dynamicSFusage_Type.write(writer, value.get_dynamicSFusage());
   _firstIndividualTimeslotInfo_Type.write(writer, value.get_firstIndividualTimeslotInfo());
   _ul_TS_ChannelisationCodeList_Type.write(writer, value.get_ul_TS_ChannelisationCodeList());
   _moreTimeslots_Type.write(writer, value.get_moreTimeslots());

   writer.writeSequenceEnd();
}


void UplinkTimeslotsCodes_VHCR::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _dynamicSFusage_Type.read(reader, v);
      value.set_dynamicSFusage(v);
   }
   {
      asn1::generated::IndividualTimeslotInfo_VHCR::ValueType v;
      _firstIndividualTimeslotInfo_Type.read(reader, v);
      value.set_firstIndividualTimeslotInfo(v);
   }
   {
      asn1::generated::UL_TS_ChannelisationCodeList_VHCR::ValueType v;
      _ul_TS_ChannelisationCodeList_Type.read(reader, v);
      value.set_ul_TS_ChannelisationCodeList(v);
   }
   {
      _INTERNAL__ChoiceType_noMore_INTERNAL_asn1__NullType_additionalTimeslots_INTERNAL__ChoiceType_consecutive_INTERNAL__SequenceType_numAdditionalTimeslots_INTERNAL_asn1__IntegerType_timeslotList_INTERNAL__SequenceOfType_INTERNAL_asn1__generated__UplinkAdditionalTimeslots::ValueType v;
      _moreTimeslots_Type.read(reader, v);
      value.set_moreTimeslots(v);
   }

   reader.readSequenceEnd(*this);
}

void UplinkTimeslotsCodes_VHCR::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dynamicSFusage_Type.write(writer, value.get_dynamicSFusage());
   _firstIndividualTimeslotInfo_Type.write(writer, value.get_firstIndividualTimeslotInfo());
   _ul_TS_ChannelisationCodeList_Type.write(writer, value.get_ul_TS_ChannelisationCodeList());
   _moreTimeslots_Type.write(writer, value.get_moreTimeslots());

   writer.writeSequenceEnd();
}


void UplinkTimeslotsCodes_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _dynamicSFusage_Type.read(reader, v);
      value.set_dynamicSFusage(v);
   }
   {
      asn1::generated::IndividualTimeslotInfo_LCR_r4::ValueType v;
      _firstIndividualTimeslotInfo_Type.read(reader, v);
      value.set_firstIndividualTimeslotInfo(v);
   }
   {
      asn1::generated::UL_TS_ChannelisationCodeList::ValueType v;
      _ul_TS_ChannelisationCodeList_Type.read(reader, v);
      value.set_ul_TS_ChannelisationCodeList(v);
   }
   {
      _INTERNAL__ChoiceType_noMore_INTERNAL_asn1__NullType_additionalTimeslots_INTERNAL__ChoiceType_consecutive_INTERNAL__SequenceType_numAdditionalTimeslots_INTERNAL_asn1__IntegerType_timeslotList_INTERNAL__SequenceOfType_INTERNAL_asn1__generated__UplinkAdditionalTimeslots_LCR_r4::ValueType v;
      _moreTimeslots_Type.read(reader, v);
      value.set_moreTimeslots(v);
   }

   reader.readSequenceEnd(*this);
}

void UplinkTimeslotsCodes_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dynamicSFusage_Type.write(writer, value.get_dynamicSFusage());
   _firstIndividualTimeslotInfo_Type.write(writer, value.get_firstIndividualTimeslotInfo());
   _ul_TS_ChannelisationCodeList_Type.write(writer, value.get_ul_TS_ChannelisationCodeList());
   _moreTimeslots_Type.write(writer, value.get_moreTimeslots());

   writer.writeSequenceEnd();
}


void UplinkTimeslotsCodes_LCR_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _dynamicSFusage_Type.read(reader, v);
      value.set_dynamicSFusage(v);
   }
   {
      asn1::generated::IndividualTimeslotInfo_LCR_r4::ValueType v;
      _firstIndividualTimeslotInfo_Type.read(reader, v);
      value.set_firstIndividualTimeslotInfo(v);
   }
   {
      asn1::generated::UL_TS_ChannelisationCodeList_r7::ValueType v;
      _ul_TS_ChannelisationCodeList_Type.read(reader, v);
      value.set_ul_TS_ChannelisationCodeList(v);
   }
   {
      _INTERNAL__ChoiceType_noMore_INTERNAL_asn1__NullType_additionalTimeslots_INTERNAL__ChoiceType_consecutive_INTERNAL__SequenceType_numAdditionalTimeslots_INTERNAL_asn1__IntegerType_timeslotList_INTERNAL__SequenceOfType_INTERNAL_asn1__generated__UplinkAdditionalTimeslots_LCR_r7::ValueType v;
      _moreTimeslots_Type.read(reader, v);
      value.set_moreTimeslots(v);
   }

   reader.readSequenceEnd(*this);
}

void UplinkTimeslotsCodes_LCR_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dynamicSFusage_Type.write(writer, value.get_dynamicSFusage());
   _firstIndividualTimeslotInfo_Type.write(writer, value.get_firstIndividualTimeslotInfo());
   _ul_TS_ChannelisationCodeList_Type.write(writer, value.get_ul_TS_ChannelisationCodeList());
   _moreTimeslots_Type.write(writer, value.get_moreTimeslots());

   writer.writeSequenceEnd();
}


void AcquisitionSatInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SatID::ValueType v;
      _satID_Type.read(reader, v);
      value.set_satID(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _doppler0thOrder_Type.read(reader, v);
      value.set_doppler0thOrder(v);
   }
   {
      asn1::generated::ExtraDopplerInfo::ValueType v;
      _extraDopplerInfo_Type.read(reader, v);
      value.set_extraDopplerInfo(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _codePhase_Type.read(reader, v);
      value.set_codePhase(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _integerCodePhase_Type.read(reader, v);
      value.set_integerCodePhase(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _gps_BitNumber_Type.read(reader, v);
      value.set_gps_BitNumber(v);
   }
   {
      asn1::generated::CodePhaseSearchWindow::ValueType v;
      _codePhaseSearchWindow_Type.read(reader, v);
      value.set_codePhaseSearchWindow(v);
   }
   {
      asn1::generated::AzimuthAndElevation::ValueType v;
      _azimuthAndElevation_Type.read(reader, v);
      value.set_azimuthAndElevation(v);
   }

   reader.readSequenceEnd(*this);
}

void AcquisitionSatInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _satID_Type.write(writer, value.get_satID());
   _doppler0thOrder_Type.write(writer, value.get_doppler0thOrder());
   _extraDopplerInfo_Type.write(writer, value.get_extraDopplerInfo());
   _codePhase_Type.write(writer, value.get_codePhase());
   _integerCodePhase_Type.write(writer, value.get_integerCodePhase());
   _gps_BitNumber_Type.write(writer, value.get_gps_BitNumber());
   _codePhaseSearchWindow_Type.write(writer, value.get_codePhaseSearchWindow());
   _azimuthAndElevation_Type.write(writer, value.get_azimuthAndElevation());

   writer.writeSequenceEnd();
}


void AlmanacSatInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _dataID_Type.read(reader, v);
      value.set_dataID(v);
   }
   {
      asn1::generated::SatID::ValueType v;
      _satID_Type.read(reader, v);
      value.set_satID(v);
   }
   {
      _INTERNAL_::ValueType v;
      _e_Type.read(reader, v);
      value.set_e(v);
   }
   {
      _INTERNAL_::ValueType v;
      _t_oa_Type.read(reader, v);
      value.set_t_oa(v);
   }
   {
      _INTERNAL_::ValueType v;
      _deltaI_Type.read(reader, v);
      value.set_deltaI(v);
   }
   {
      _INTERNAL_::ValueType v;
      _omegaDot_Type.read(reader, v);
      value.set_omegaDot(v);
   }
   {
      _INTERNAL_::ValueType v;
      _satHealth_Type.read(reader, v);
      value.set_satHealth(v);
   }
   {
      _INTERNAL_::ValueType v;
      _a_Sqrt_Type.read(reader, v);
      value.set_a_Sqrt(v);
   }
   {
      _INTERNAL_::ValueType v;
      _omega0_Type.read(reader, v);
      value.set_omega0(v);
   }
   {
      _INTERNAL_::ValueType v;
      _m0_Type.read(reader, v);
      value.set_m0(v);
   }
   {
      _INTERNAL_::ValueType v;
      _omega_Type.read(reader, v);
      value.set_omega(v);
   }
   {
      _INTERNAL_::ValueType v;
      _af0_Type.read(reader, v);
      value.set_af0(v);
   }
   {
      _INTERNAL_::ValueType v;
      _af1_Type.read(reader, v);
      value.set_af1(v);
   }

   reader.readSequenceEnd(*this);
}

void AlmanacSatInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dataID_Type.write(writer, value.get_dataID());
   _satID_Type.write(writer, value.get_satID());
   _e_Type.write(writer, value.get_e());
   _t_oa_Type.write(writer, value.get_t_oa());
   _deltaI_Type.write(writer, value.get_deltaI());
   _omegaDot_Type.write(writer, value.get_omegaDot());
   _satHealth_Type.write(writer, value.get_satHealth());
   _a_Sqrt_Type.write(writer, value.get_a_Sqrt());
   _omega0_Type.write(writer, value.get_omega0());
   _m0_Type.write(writer, value.get_m0());
   _omega_Type.write(writer, value.get_omega());
   _af0_Type.write(writer, value.get_af0());
   _af1_Type.write(writer, value.get_af1());

   writer.writeSequenceEnd();
}


void AzimuthAndElevation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _azimuth_Type.read(reader, v);
      value.set_azimuth(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _elevation_Type.read(reader, v);
      value.set_elevation(v);
   }

   reader.readSequenceEnd(*this);
}

void AzimuthAndElevation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _azimuth_Type.write(writer, value.get_azimuth());
   _elevation_Type.write(writer, value.get_elevation());

   writer.writeSequenceEnd();
}


void BLER_MeasurementResults::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _transportChannelIdentity_Type.read(reader, v);
      value.set_transportChannelIdentity(v);
   }
   {
      asn1::generated::DL_TransportChannelBLER::ValueType v;
      _dl_TransportChannelBLER_Type.read(reader, v);
      value.set_dl_TransportChannelBLER(v);
   }

   reader.readSequenceEnd(*this);
}

void BLER_MeasurementResults::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _transportChannelIdentity_Type.write(writer, value.get_transportChannelIdentity());
   _dl_TransportChannelBLER_Type.write(writer, value.get_dl_TransportChannelBLER());

   writer.writeSequenceEnd();
}


void BSICReported::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_verifiedBSIC_Type)
   {
      asn1::IntegerType::ValueType v;
      _verifiedBSIC_Type.read(reader, v);
      value.set_verifiedBSIC(v);
   }
   else if (choosenType == &_nonVerifiedBSIC_Type)
   {
      asn1::generated::BCCH_ARFCN::ValueType v;
      _nonVerifiedBSIC_Type.read(reader, v);
      value.set_nonVerifiedBSIC(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _verifiedBSIC_Type.toString() + ", " + _nonVerifiedBSIC_Type.toString());
   }
}

void BSICReported::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_verifiedBSIC_Choosen())
      _verifiedBSIC_Type.write(writer, value.get_verifiedBSIC());
   else if (value.has_nonVerifiedBSIC_Choosen())
      _nonVerifiedBSIC_Type.write(writer, value.get_nonVerifiedBSIC());
}


void BurstModeParameters::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _burstStart_Type.read(reader, v);
      value.set_burstStart(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _burstLength_Type.read(reader, v);
      value.set_burstLength(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _burstFreq_Type.read(reader, v);
      value.set_burstFreq(v);
   }

   reader.readSequenceEnd(*this);
}

void BurstModeParameters::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _burstStart_Type.write(writer, value.get_burstStart());
   _burstLength_Type.write(writer, value.get_burstLength());
   _burstFreq_Type.write(writer, value.get_burstFreq());

   writer.writeSequenceEnd();
}


void CellDCH-ReportCriteria::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_intraFreqReportingCriteria_Type)
   {
      asn1::generated::IntraFreqReportingCriteria::ValueType v;
      _intraFreqReportingCriteria_Type.read(reader, v);
      value.set_intraFreqReportingCriteria(v);
   }
   else if (choosenType == &_periodicalReportingCriteria_Type)
   {
      asn1::generated::PeriodicalReportingCriteria::ValueType v;
      _periodicalReportingCriteria_Type.read(reader, v);
      value.set_periodicalReportingCriteria(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _intraFreqReportingCriteria_Type.toString() + ", " + _periodicalReportingCriteria_Type.toString());
   }
}

void CellDCH-ReportCriteria::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_intraFreqReportingCriteria_Choosen())
      _intraFreqReportingCriteria_Type.write(writer, value.get_intraFreqReportingCriteria());
   else if (value.has_periodicalReportingCriteria_Choosen())
      _periodicalReportingCriteria_Type.write(writer, value.get_periodicalReportingCriteria());
}


void CellDCH-ReportCriteria-LCR-r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_intraFreqReportingCriteria_Type)
   {
      asn1::generated::IntraFreqReportingCriteria_LCR_r4::ValueType v;
      _intraFreqReportingCriteria_Type.read(reader, v);
      value.set_intraFreqReportingCriteria(v);
   }
   else if (choosenType == &_periodicalReportingCriteria_Type)
   {
      asn1::generated::PeriodicalReportingCriteria::ValueType v;
      _periodicalReportingCriteria_Type.read(reader, v);
      value.set_periodicalReportingCriteria(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _intraFreqReportingCriteria_Type.toString() + ", " + _periodicalReportingCriteria_Type.toString());
   }
}

void CellDCH-ReportCriteria-LCR-r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_intraFreqReportingCriteria_Choosen())
      _intraFreqReportingCriteria_Type.write(writer, value.get_intraFreqReportingCriteria());
   else if (value.has_periodicalReportingCriteria_Choosen())
      _periodicalReportingCriteria_Type.write(writer, value.get_periodicalReportingCriteria());
}


void CellInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CellIndividualOffset::ValueType v;
      _cellIndividualOffset_Type.read(reader, v);
      value.set_cellIndividualOffset(v);
   }
   {
      asn1::generated::ReferenceTimeDifferenceToCell::ValueType v;
      _referenceTimeDifferenceToCell_Type.read(reader, v);
      value.set_referenceTimeDifferenceToCell(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-Info_INTERNAL_asn1__generated__PrimaryCPICH_Info_primaryCPICH-TX-Power_INTERNAL_asn1__generated__PrimaryCPICH_TX_Power_readSFN-Indicator_INTERNAL_asn1__BooleanType_tx-DiversityIndicator_INTERNAL_asn1__BooleanType_tdd_INTERNAL__SequenceType_primaryCCPCH-Info_INTERNAL_asn1__generated__PrimaryCCPCH_Info_primaryCCPCH-TX-Power_INTERNAL_asn1__generated__PrimaryCCPCH_TX_Power_timeslotInfoList_INTERNAL_asn1__generated__TimeslotInfoList_readSFN-Indicator_INTERNAL_asn1__BooleanType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CellInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cellIndividualOffset_Type.write(writer, value.get_cellIndividualOffset());
   _referenceTimeDifferenceToCell_Type.write(writer, value.get_referenceTimeDifferenceToCell());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void CellInfo_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CellIndividualOffset::ValueType v;
      _cellIndividualOffset_Type.read(reader, v);
      value.set_cellIndividualOffset(v);
   }
   {
      asn1::generated::ReferenceTimeDifferenceToCell::ValueType v;
      _referenceTimeDifferenceToCell_Type.read(reader, v);
      value.set_referenceTimeDifferenceToCell(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-Info_INTERNAL_asn1__generated__PrimaryCPICH_Info_primaryCPICH-TX-Power_INTERNAL_asn1__generated__PrimaryCPICH_TX_Power_readSFN-Indicator_INTERNAL_asn1__BooleanType_tx-DiversityIndicator_INTERNAL_asn1__BooleanType_tdd_INTERNAL__SequenceType_primaryCCPCH-Info_INTERNAL_asn1__generated__PrimaryCCPCH_Info_r4_primaryCCPCH-TX-Power_INTERNAL_asn1__generated__PrimaryCCPCH_TX_Power_timeslotInfoList_INTERNAL_asn1__generated__TimeslotInfoList_r4_readSFN-Indicator_INTERNAL_asn1__BooleanType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CellInfo_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cellIndividualOffset_Type.write(writer, value.get_cellIndividualOffset());
   _referenceTimeDifferenceToCell_Type.write(writer, value.get_referenceTimeDifferenceToCell());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void CellInfoSI_RSCP::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CellIndividualOffset::ValueType v;
      _cellIndividualOffset_Type.read(reader, v);
      value.set_cellIndividualOffset(v);
   }
   {
      asn1::generated::ReferenceTimeDifferenceToCell::ValueType v;
      _referenceTimeDifferenceToCell_Type.read(reader, v);
      value.set_referenceTimeDifferenceToCell(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-Info_INTERNAL_asn1__generated__PrimaryCPICH_Info_primaryCPICH-TX-Power_INTERNAL_asn1__generated__PrimaryCPICH_TX_Power_readSFN-Indicator_INTERNAL_asn1__BooleanType_tx-DiversityIndicator_INTERNAL_asn1__BooleanType_tdd_INTERNAL__SequenceType_primaryCCPCH-Info_INTERNAL_asn1__generated__PrimaryCCPCH_Info_primaryCCPCH-TX-Power_INTERNAL_asn1__generated__PrimaryCCPCH_TX_Power_timeslotInfoList_INTERNAL_asn1__generated__TimeslotInfoList_readSFN-Indicator_INTERNAL_asn1__BooleanType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::CellSelectReselectInfoSIB_11_12_RSCP::ValueType v;
      _cellSelectionReselectionInfo_Type.read(reader, v);
      value.set_cellSelectionReselectionInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CellInfoSI_RSCP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cellIndividualOffset_Type.write(writer, value.get_cellIndividualOffset());
   _referenceTimeDifferenceToCell_Type.write(writer, value.get_referenceTimeDifferenceToCell());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _cellSelectionReselectionInfo_Type.write(writer, value.get_cellSelectionReselectionInfo());

   writer.writeSequenceEnd();
}


void CellInfoSI_RSCP_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CellIndividualOffset::ValueType v;
      _cellIndividualOffset_Type.read(reader, v);
      value.set_cellIndividualOffset(v);
   }
   {
      asn1::generated::ReferenceTimeDifferenceToCell::ValueType v;
      _referenceTimeDifferenceToCell_Type.read(reader, v);
      value.set_referenceTimeDifferenceToCell(v);
   }
   {
      asn1::generated::PrimaryCCPCH_Info_LCR_r4::ValueType v;
      _primaryCCPCH_Info_Type.read(reader, v);
      value.set_primaryCCPCH_Info(v);
   }
   {
      asn1::generated::PrimaryCCPCH_TX_Power::ValueType v;
      _primaryCCPCH_TX_Power_Type.read(reader, v);
      value.set_primaryCCPCH_TX_Power(v);
   }
   {
      asn1::generated::TimeslotInfoList_LCR_r4::ValueType v;
      _timeslotInfoList_Type.read(reader, v);
      value.set_timeslotInfoList(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _readSFN_Indicator_Type.read(reader, v);
      value.set_readSFN_Indicator(v);
   }
   {
      asn1::generated::CellSelectReselectInfoSIB_11_12_RSCP::ValueType v;
      _cellSelectionReselectionInfo_Type.read(reader, v);
      value.set_cellSelectionReselectionInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CellInfoSI_RSCP_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cellIndividualOffset_Type.write(writer, value.get_cellIndividualOffset());
   _referenceTimeDifferenceToCell_Type.write(writer, value.get_referenceTimeDifferenceToCell());
   _primaryCCPCH_Info_Type.write(writer, value.get_primaryCCPCH_Info());
   _primaryCCPCH_TX_Power_Type.write(writer, value.get_primaryCCPCH_TX_Power());
   _timeslotInfoList_Type.write(writer, value.get_timeslotInfoList());
   _readSFN_Indicator_Type.write(writer, value.get_readSFN_Indicator());
   _cellSelectionReselectionInfo_Type.write(writer, value.get_cellSelectionReselectionInfo());

   writer.writeSequenceEnd();
}


void CellInfoSI_ECN0::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CellIndividualOffset::ValueType v;
      _cellIndividualOffset_Type.read(reader, v);
      value.set_cellIndividualOffset(v);
   }
   {
      asn1::generated::ReferenceTimeDifferenceToCell::ValueType v;
      _referenceTimeDifferenceToCell_Type.read(reader, v);
      value.set_referenceTimeDifferenceToCell(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-Info_INTERNAL_asn1__generated__PrimaryCPICH_Info_primaryCPICH-TX-Power_INTERNAL_asn1__generated__PrimaryCPICH_TX_Power_readSFN-Indicator_INTERNAL_asn1__BooleanType_tx-DiversityIndicator_INTERNAL_asn1__BooleanType_tdd_INTERNAL__SequenceType_primaryCCPCH-Info_INTERNAL_asn1__generated__PrimaryCCPCH_Info_primaryCCPCH-TX-Power_INTERNAL_asn1__generated__PrimaryCCPCH_TX_Power_timeslotInfoList_INTERNAL_asn1__generated__TimeslotInfoList_readSFN-Indicator_INTERNAL_asn1__BooleanType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::CellSelectReselectInfoSIB_11_12_ECN0::ValueType v;
      _cellSelectionReselectionInfo_Type.read(reader, v);
      value.set_cellSelectionReselectionInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CellInfoSI_ECN0::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cellIndividualOffset_Type.write(writer, value.get_cellIndividualOffset());
   _referenceTimeDifferenceToCell_Type.write(writer, value.get_referenceTimeDifferenceToCell());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _cellSelectionReselectionInfo_Type.write(writer, value.get_cellSelectionReselectionInfo());

   writer.writeSequenceEnd();
}


void CellInfoSI_ECN0_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CellIndividualOffset::ValueType v;
      _cellIndividualOffset_Type.read(reader, v);
      value.set_cellIndividualOffset(v);
   }
   {
      asn1::generated::ReferenceTimeDifferenceToCell::ValueType v;
      _referenceTimeDifferenceToCell_Type.read(reader, v);
      value.set_referenceTimeDifferenceToCell(v);
   }
   {
      asn1::generated::PrimaryCCPCH_Info_LCR_r4::ValueType v;
      _primaryCCPCH_Info_Type.read(reader, v);
      value.set_primaryCCPCH_Info(v);
   }
   {
      asn1::generated::PrimaryCCPCH_TX_Power::ValueType v;
      _primaryCCPCH_TX_Power_Type.read(reader, v);
      value.set_primaryCCPCH_TX_Power(v);
   }
   {
      asn1::generated::TimeslotInfoList_LCR_r4::ValueType v;
      _timeslotInfoList_Type.read(reader, v);
      value.set_timeslotInfoList(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _readSFN_Indicator_Type.read(reader, v);
      value.set_readSFN_Indicator(v);
   }
   {
      asn1::generated::CellSelectReselectInfoSIB_11_12_ECN0::ValueType v;
      _cellSelectionReselectionInfo_Type.read(reader, v);
      value.set_cellSelectionReselectionInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CellInfoSI_ECN0_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cellIndividualOffset_Type.write(writer, value.get_cellIndividualOffset());
   _referenceTimeDifferenceToCell_Type.write(writer, value.get_referenceTimeDifferenceToCell());
   _primaryCCPCH_Info_Type.write(writer, value.get_primaryCCPCH_Info());
   _primaryCCPCH_TX_Power_Type.write(writer, value.get_primaryCCPCH_TX_Power());
   _timeslotInfoList_Type.write(writer, value.get_timeslotInfoList());
   _readSFN_Indicator_Type.write(writer, value.get_readSFN_Indicator());
   _cellSelectionReselectionInfo_Type.write(writer, value.get_cellSelectionReselectionInfo());

   writer.writeSequenceEnd();
}


void CellInfoSI_HCS_RSCP::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CellIndividualOffset::ValueType v;
      _cellIndividualOffset_Type.read(reader, v);
      value.set_cellIndividualOffset(v);
   }
   {
      asn1::generated::ReferenceTimeDifferenceToCell::ValueType v;
      _referenceTimeDifferenceToCell_Type.read(reader, v);
      value.set_referenceTimeDifferenceToCell(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-Info_INTERNAL_asn1__generated__PrimaryCPICH_Info_primaryCPICH-TX-Power_INTERNAL_asn1__generated__PrimaryCPICH_TX_Power_readSFN-Indicator_INTERNAL_asn1__BooleanType_tx-DiversityIndicator_INTERNAL_asn1__BooleanType_tdd_INTERNAL__SequenceType_primaryCCPCH-Info_INTERNAL_asn1__generated__PrimaryCCPCH_Info_primaryCCPCH-TX-Power_INTERNAL_asn1__generated__PrimaryCCPCH_TX_Power_timeslotInfoList_INTERNAL_asn1__generated__TimeslotInfoList_readSFN-Indicator_INTERNAL_asn1__BooleanType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::CellSelectReselectInfoSIB_11_12_HCS_RSCP::ValueType v;
      _cellSelectionReselectionInfo_Type.read(reader, v);
      value.set_cellSelectionReselectionInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CellInfoSI_HCS_RSCP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cellIndividualOffset_Type.write(writer, value.get_cellIndividualOffset());
   _referenceTimeDifferenceToCell_Type.write(writer, value.get_referenceTimeDifferenceToCell());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _cellSelectionReselectionInfo_Type.write(writer, value.get_cellSelectionReselectionInfo());

   writer.writeSequenceEnd();
}


void CellInfoSI_HCS_RSCP_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CellIndividualOffset::ValueType v;
      _cellIndividualOffset_Type.read(reader, v);
      value.set_cellIndividualOffset(v);
   }
   {
      asn1::generated::ReferenceTimeDifferenceToCell::ValueType v;
      _referenceTimeDifferenceToCell_Type.read(reader, v);
      value.set_referenceTimeDifferenceToCell(v);
   }
   {
      asn1::generated::PrimaryCCPCH_Info_LCR_r4::ValueType v;
      _primaryCCPCH_Info_Type.read(reader, v);
      value.set_primaryCCPCH_Info(v);
   }
   {
      asn1::generated::PrimaryCCPCH_TX_Power::ValueType v;
      _primaryCCPCH_TX_Power_Type.read(reader, v);
      value.set_primaryCCPCH_TX_Power(v);
   }
   {
      asn1::generated::TimeslotInfoList_LCR_r4::ValueType v;
      _timeslotInfoList_Type.read(reader, v);
      value.set_timeslotInfoList(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _readSFN_Indicator_Type.read(reader, v);
      value.set_readSFN_Indicator(v);
   }
   {
      asn1::generated::CellSelectReselectInfoSIB_11_12_HCS_RSCP::ValueType v;
      _cellSelectionReselectionInfo_Type.read(reader, v);
      value.set_cellSelectionReselectionInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CellInfoSI_HCS_RSCP_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cellIndividualOffset_Type.write(writer, value.get_cellIndividualOffset());
   _referenceTimeDifferenceToCell_Type.write(writer, value.get_referenceTimeDifferenceToCell());
   _primaryCCPCH_Info_Type.write(writer, value.get_primaryCCPCH_Info());
   _primaryCCPCH_TX_Power_Type.write(writer, value.get_primaryCCPCH_TX_Power());
   _timeslotInfoList_Type.write(writer, value.get_timeslotInfoList());
   _readSFN_Indicator_Type.write(writer, value.get_readSFN_Indicator());
   _cellSelectionReselectionInfo_Type.write(writer, value.get_cellSelectionReselectionInfo());

   writer.writeSequenceEnd();
}


void CellInfoSI_HCS_ECN0::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CellIndividualOffset::ValueType v;
      _cellIndividualOffset_Type.read(reader, v);
      value.set_cellIndividualOffset(v);
   }
   {
      asn1::generated::ReferenceTimeDifferenceToCell::ValueType v;
      _referenceTimeDifferenceToCell_Type.read(reader, v);
      value.set_referenceTimeDifferenceToCell(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-Info_INTERNAL_asn1__generated__PrimaryCPICH_Info_primaryCPICH-TX-Power_INTERNAL_asn1__generated__PrimaryCPICH_TX_Power_readSFN-Indicator_INTERNAL_asn1__BooleanType_tx-DiversityIndicator_INTERNAL_asn1__BooleanType_tdd_INTERNAL__SequenceType_primaryCCPCH-Info_INTERNAL_asn1__generated__PrimaryCCPCH_Info_primaryCCPCH-TX-Power_INTERNAL_asn1__generated__PrimaryCCPCH_TX_Power_timeslotInfoList_INTERNAL_asn1__generated__TimeslotInfoList_readSFN-Indicator_INTERNAL_asn1__BooleanType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::CellSelectReselectInfoSIB_11_12_HCS_ECN0::ValueType v;
      _cellSelectionReselectionInfo_Type.read(reader, v);
      value.set_cellSelectionReselectionInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CellInfoSI_HCS_ECN0::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cellIndividualOffset_Type.write(writer, value.get_cellIndividualOffset());
   _referenceTimeDifferenceToCell_Type.write(writer, value.get_referenceTimeDifferenceToCell());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _cellSelectionReselectionInfo_Type.write(writer, value.get_cellSelectionReselectionInfo());

   writer.writeSequenceEnd();
}


void CellInfoSI_HCS_ECN0_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CellIndividualOffset::ValueType v;
      _cellIndividualOffset_Type.read(reader, v);
      value.set_cellIndividualOffset(v);
   }
   {
      asn1::generated::ReferenceTimeDifferenceToCell::ValueType v;
      _referenceTimeDifferenceToCell_Type.read(reader, v);
      value.set_referenceTimeDifferenceToCell(v);
   }
   {
      asn1::generated::PrimaryCCPCH_Info_LCR_r4::ValueType v;
      _primaryCCPCH_Info_Type.read(reader, v);
      value.set_primaryCCPCH_Info(v);
   }
   {
      asn1::generated::PrimaryCCPCH_TX_Power::ValueType v;
      _primaryCCPCH_TX_Power_Type.read(reader, v);
      value.set_primaryCCPCH_TX_Power(v);
   }
   {
      asn1::generated::TimeslotInfoList_LCR_r4::ValueType v;
      _timeslotInfoList_Type.read(reader, v);
      value.set_timeslotInfoList(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _readSFN_Indicator_Type.read(reader, v);
      value.set_readSFN_Indicator(v);
   }
   {
      asn1::generated::CellSelectReselectInfoSIB_11_12_HCS_ECN0::ValueType v;
      _cellSelectionReselectionInfo_Type.read(reader, v);
      value.set_cellSelectionReselectionInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CellInfoSI_HCS_ECN0_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cellIndividualOffset_Type.write(writer, value.get_cellIndividualOffset());
   _referenceTimeDifferenceToCell_Type.write(writer, value.get_referenceTimeDifferenceToCell());
   _primaryCCPCH_Info_Type.write(writer, value.get_primaryCCPCH_Info());
   _primaryCCPCH_TX_Power_Type.write(writer, value.get_primaryCCPCH_TX_Power());
   _timeslotInfoList_Type.write(writer, value.get_timeslotInfoList());
   _readSFN_Indicator_Type.write(writer, value.get_readSFN_Indicator());
   _cellSelectionReselectionInfo_Type.write(writer, value.get_cellSelectionReselectionInfo());

   writer.writeSequenceEnd();
}


void CellMeasuredResults::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CellIdentity::ValueType v;
      _cellIdentity_Type.read(reader, v);
      value.set_cellIdentity(v);
   }
   {
      asn1::generated::SFN_SFN_ObsTimeDifference::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::CellSynchronisationInfo::ValueType v;
      _cellSynchronisationInfo_Type.read(reader, v);
      value.set_cellSynchronisationInfo(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-Info_INTERNAL_asn1__generated__PrimaryCPICH_Info_cpich-Ec-N0_INTERNAL_asn1__generated__CPICH_Ec_N0_cpich-RSCP_INTERNAL_asn1__generated__CPICH_RSCP_pathloss_INTERNAL_asn1__generated__Pathloss_tdd_INTERNAL__SequenceType_cellParametersID_INTERNAL_asn1__generated__CellParametersID_proposedTGSN_INTERNAL_asn1__generated__TGSN_primaryCCPCH-RSCP_INTERNAL_asn1__generated__PrimaryCCPCH_RSCP_pathloss_INTERNAL_asn1__generated__Pathloss_timeslotISCP-List_INTERNAL_asn1__generated__TimeslotISCP_List::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CellMeasuredResults::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cellIdentity_Type.write(writer, value.get_cellIdentity());
   _dummy_Type.write(writer, value.get_dummy());
   _cellSynchronisationInfo_Type.write(writer, value.get_cellSynchronisationInfo());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void CellMeasurementEventResults::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_fdd_Type)
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__PrimaryCPICH_Info::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   else if (choosenType == &_tdd_Type)
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__PrimaryCCPCH_Info::ValueType v;
      _tdd_Type.read(reader, v);
      value.set_tdd(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _fdd_Type.toString() + ", " + _tdd_Type.toString());
   }
}

void CellMeasurementEventResults::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_fdd_Choosen())
      _fdd_Type.write(writer, value.get_fdd());
   else if (value.has_tdd_Choosen())
      _tdd_Type.write(writer, value.get_tdd());
}


void CellReportingQuantities::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SFN_SFN_OTD_Type::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _cellIdentity_reportingIndicator_Type.read(reader, v);
      value.set_cellIdentity_reportingIndicator(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _cellSynchronisationInfoReportingIndicator_Type.read(reader, v);
      value.set_cellSynchronisationInfoReportingIndicator(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_cpich-Ec-N0-reportingIndicator_INTERNAL_asn1__BooleanType_cpich-RSCP-reportingIndicator_INTERNAL_asn1__BooleanType_pathloss-reportingIndicator_INTERNAL_asn1__BooleanType_tdd_INTERNAL__SequenceType_timeslotISCP-reportingIndicator_INTERNAL_asn1__BooleanType_proposedTGSN-ReportingRequired_INTERNAL_asn1__BooleanType_primaryCCPCH-RSCP-reportingIndicator_INTERNAL_asn1__BooleanType_pathloss-reportingIndicator_INTERNAL_asn1__BooleanType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CellReportingQuantities::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dummy_Type.write(writer, value.get_dummy());
   _cellIdentity_reportingIndicator_Type.write(writer, value.get_cellIdentity_reportingIndicator());
   _cellSynchronisationInfoReportingIndicator_Type.write(writer, value.get_cellSynchronisationInfoReportingIndicator());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void CellSelectReselectInfoSIB_11_12::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Q_OffsetS_N::ValueType v;
      _q_Offset1S_N_Type.read(reader, v);
      value.set_q_Offset1S_N(v);
   }
   {
      asn1::generated::Q_OffsetS_N::ValueType v;
      _q_Offset2S_N_Type.read(reader, v);
      value.set_q_Offset2S_N(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::HCS_NeighbouringCellInformation_RSCP::ValueType v;
      _hcs_NeighbouringCellInformation_RSCP_Type.read(reader, v);
      value.set_hcs_NeighbouringCellInformation_RSCP(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_q-QualMin_INTERNAL_asn1__generated__Q_QualMin_q-RxlevMin_INTERNAL_asn1__generated__Q_RxlevMin_tdd_INTERNAL__SequenceType_q-RxlevMin_INTERNAL_asn1__generated__Q_RxlevMin_gsm_INTERNAL__SequenceType_q-RxlevMin_INTERNAL_asn1__generated__Q_RxlevMin::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CellSelectReselectInfoSIB_11_12::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _q_Offset1S_N_Type.write(writer, value.get_q_Offset1S_N());
   _q_Offset2S_N_Type.write(writer, value.get_q_Offset2S_N());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _hcs_NeighbouringCellInformation_RSCP_Type.write(writer, value.get_hcs_NeighbouringCellInformation_RSCP());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void CellSelectReselectInfoSIB_11_12_RSCP::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Q_OffsetS_N::ValueType v;
      _q_OffsetS_N_Type.read(reader, v);
      value.set_q_OffsetS_N(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_q-QualMin_INTERNAL_asn1__generated__Q_QualMin_q-RxlevMin_INTERNAL_asn1__generated__Q_RxlevMin_tdd_INTERNAL__SequenceType_q-RxlevMin_INTERNAL_asn1__generated__Q_RxlevMin_gsm_INTERNAL__SequenceType_q-RxlevMin_INTERNAL_asn1__generated__Q_RxlevMin::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CellSelectReselectInfoSIB_11_12_RSCP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _q_OffsetS_N_Type.write(writer, value.get_q_OffsetS_N());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void CellSelectReselectInfoSIB_11_12_ECN0::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Q_OffsetS_N::ValueType v;
      _q_Offset1S_N_Type.read(reader, v);
      value.set_q_Offset1S_N(v);
   }
   {
      asn1::generated::Q_OffsetS_N::ValueType v;
      _q_Offset2S_N_Type.read(reader, v);
      value.set_q_Offset2S_N(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_q-QualMin_INTERNAL_asn1__generated__Q_QualMin_q-RxlevMin_INTERNAL_asn1__generated__Q_RxlevMin_tdd_INTERNAL__SequenceType_q-RxlevMin_INTERNAL_asn1__generated__Q_RxlevMin_gsm_INTERNAL__SequenceType_q-RxlevMin_INTERNAL_asn1__generated__Q_RxlevMin::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CellSelectReselectInfoSIB_11_12_ECN0::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _q_Offset1S_N_Type.write(writer, value.get_q_Offset1S_N());
   _q_Offset2S_N_Type.write(writer, value.get_q_Offset2S_N());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void CellSelectReselectInfoSIB_11_12_HCS_RSCP::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Q_OffsetS_N::ValueType v;
      _q_OffsetS_N_Type.read(reader, v);
      value.set_q_OffsetS_N(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::HCS_NeighbouringCellInformation_RSCP::ValueType v;
      _hcs_NeighbouringCellInformation_RSCP_Type.read(reader, v);
      value.set_hcs_NeighbouringCellInformation_RSCP(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_q-QualMin_INTERNAL_asn1__generated__Q_QualMin_q-RxlevMin_INTERNAL_asn1__generated__Q_RxlevMin_tdd_INTERNAL__SequenceType_q-RxlevMin_INTERNAL_asn1__generated__Q_RxlevMin_gsm_INTERNAL__SequenceType_q-RxlevMin_INTERNAL_asn1__generated__Q_RxlevMin::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CellSelectReselectInfoSIB_11_12_HCS_RSCP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _q_OffsetS_N_Type.write(writer, value.get_q_OffsetS_N());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _hcs_NeighbouringCellInformation_RSCP_Type.write(writer, value.get_hcs_NeighbouringCellInformation_RSCP());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void CellSelectReselectInfoSIB_11_12_HCS_ECN0::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Q_OffsetS_N::ValueType v;
      _q_Offset1S_N_Type.read(reader, v);
      value.set_q_Offset1S_N(v);
   }
   {
      asn1::generated::Q_OffsetS_N::ValueType v;
      _q_Offset2S_N_Type.read(reader, v);
      value.set_q_Offset2S_N(v);
   }
   {
      asn1::generated::MaxAllowedUL_TX_Power::ValueType v;
      _maxAllowedUL_TX_Power_Type.read(reader, v);
      value.set_maxAllowedUL_TX_Power(v);
   }
   {
      asn1::generated::HCS_NeighbouringCellInformation_ECN0::ValueType v;
      _hcs_NeighbouringCellInformation_ECN0_Type.read(reader, v);
      value.set_hcs_NeighbouringCellInformation_ECN0(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_q-QualMin_INTERNAL_asn1__generated__Q_QualMin_q-RxlevMin_INTERNAL_asn1__generated__Q_RxlevMin_tdd_INTERNAL__SequenceType_q-RxlevMin_INTERNAL_asn1__generated__Q_RxlevMin_gsm_INTERNAL__SequenceType_q-RxlevMin_INTERNAL_asn1__generated__Q_RxlevMin::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CellSelectReselectInfoSIB_11_12_HCS_ECN0::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _q_Offset1S_N_Type.write(writer, value.get_q_Offset1S_N());
   _q_Offset2S_N_Type.write(writer, value.get_q_Offset2S_N());
   _maxAllowedUL_TX_Power_Type.write(writer, value.get_maxAllowedUL_TX_Power());
   _hcs_NeighbouringCellInformation_ECN0_Type.write(writer, value.get_hcs_NeighbouringCellInformation_ECN0());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void CellSelectReselectInfo_v590ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DeltaQrxlevmin::ValueType v;
      _deltaQrxlevmin_Type.read(reader, v);
      value.set_deltaQrxlevmin(v);
   }
   {
      asn1::generated::DeltaRSCP::ValueType v;
      _deltaQhcs_Type.read(reader, v);
      value.set_deltaQhcs(v);
   }

   reader.readSequenceEnd(*this);
}

void CellSelectReselectInfo_v590ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _deltaQrxlevmin_Type.write(writer, value.get_deltaQrxlevmin());
   _deltaQhcs_Type.write(writer, value.get_deltaQhcs());

   writer.writeSequenceEnd();
}


void CellSelectReselectInfoPCHFACH_v5b0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Q_Hyst_S_Fine::ValueType v;
      _q_Hyst_l_S_PCH_Type.read(reader, v);
      value.set_q_Hyst_l_S_PCH(v);
   }
   {
      asn1::generated::Q_Hyst_S_Fine::ValueType v;
      _q_Hyst_l_S_FACH_Type.read(reader, v);
      value.set_q_Hyst_l_S_FACH(v);
   }
   {
      asn1::generated::Q_Hyst_S_Fine::ValueType v;
      _q_Hyst_2_S_PCH_Type.read(reader, v);
      value.set_q_Hyst_2_S_PCH(v);
   }
   {
      asn1::generated::Q_Hyst_S_Fine::ValueType v;
      _q_Hyst_2_S_FACH_Type.read(reader, v);
      value.set_q_Hyst_2_S_FACH(v);
   }
   {
      asn1::generated::T_Reselection_S::ValueType v;
      _t_Reselection_S_PCH_Type.read(reader, v);
      value.set_t_Reselection_S_PCH(v);
   }
   {
      asn1::generated::T_Reselection_S_Fine::ValueType v;
      _t_Reselection_S_FACH_Type.read(reader, v);
      value.set_t_Reselection_S_FACH(v);
   }

   reader.readSequenceEnd(*this);
}

void CellSelectReselectInfoPCHFACH_v5b0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _q_Hyst_l_S_PCH_Type.write(writer, value.get_q_Hyst_l_S_PCH());
   _q_Hyst_l_S_FACH_Type.write(writer, value.get_q_Hyst_l_S_FACH());
   _q_Hyst_2_S_PCH_Type.write(writer, value.get_q_Hyst_2_S_PCH());
   _q_Hyst_2_S_FACH_Type.write(writer, value.get_q_Hyst_2_S_FACH());
   _t_Reselection_S_PCH_Type.write(writer, value.get_t_Reselection_S_PCH());
   _t_Reselection_S_FACH_Type.write(writer, value.get_t_Reselection_S_FACH());

   writer.writeSequenceEnd();
}


void CellSelectReselectInfoTreselectionScaling_v5c0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::T_CRMax::ValueType v;
      _non_HCS_t_CR_Max_Type.read(reader, v);
      value.set_non_HCS_t_CR_Max(v);
   }
   {
      asn1::generated::SpeedDependentScalingFactor::ValueType v;
      _speedDependentScalingFactor_Type.read(reader, v);
      value.set_speedDependentScalingFactor(v);
   }
   {
      asn1::generated::TreselectionScalingFactor::ValueType v;
      _interFrequencyTreselectionScalingFactor_Type.read(reader, v);
      value.set_interFrequencyTreselectionScalingFactor(v);
   }
   {
      asn1::generated::TreselectionScalingFactor::ValueType v;
      _interRATTreselectionScalingFactor_Type.read(reader, v);
      value.set_interRATTreselectionScalingFactor(v);
   }

   reader.readSequenceEnd(*this);
}

void CellSelectReselectInfoTreselectionScaling_v5c0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _non_HCS_t_CR_Max_Type.write(writer, value.get_non_HCS_t_CR_Max());
   _speedDependentScalingFactor_Type.write(writer, value.get_speedDependentScalingFactor());
   _interFrequencyTreselectionScalingFactor_Type.write(writer, value.get_interFrequencyTreselectionScalingFactor());
   _interRATTreselectionScalingFactor_Type.write(writer, value.get_interRATTreselectionScalingFactor());

   writer.writeSequenceEnd();
}


void CellSynchronisationInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_countC-SFN-Frame-difference_INTERNAL_asn1__generated__CountC_SFN_Frame_difference_tm_INTERNAL_asn1__IntegerType_tdd_INTERNAL__SequenceType_countC-SFN-Frame-difference_INTERNAL_asn1__generated__CountC_SFN_Frame_difference::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void CellSynchronisationInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void CellToReport::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::BSICReported::ValueType v;
      _bsicReported_Type.read(reader, v);
      value.set_bsicReported(v);
   }

   reader.readSequenceEnd(*this);
}

void CellToReport::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _bsicReported_Type.write(writer, value.get_bsicReported());

   writer.writeSequenceEnd();
}


void CountC_SFN_Frame_difference::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _countC_SFN_High_Type.read(reader, v);
      value.set_countC_SFN_High(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _off_Type.read(reader, v);
      value.set_off(v);
   }

   reader.readSequenceEnd(*this);
}

void CountC_SFN_Frame_difference::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _countC_SFN_High_Type.write(writer, value.get_countC_SFN_High());
   _off_Type.write(writer, value.get_off());

   writer.writeSequenceEnd();
}


void DeltaRSCPPerCell::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DeltaRSCP::ValueType v;
      _deltaRSCP_Type.read(reader, v);
      value.set_deltaRSCP(v);
   }

   reader.readSequenceEnd(*this);
}

void DeltaRSCPPerCell::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _deltaRSCP_Type.write(writer, value.get_deltaRSCP());

   writer.writeSequenceEnd();
}


void DGPS_CorrectionSatInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SatID::ValueType v;
      _satID_Type.read(reader, v);
      value.set_satID(v);
   }
   {
      asn1::generated::IODE::ValueType v;
      _iode_Type.read(reader, v);
      value.set_iode(v);
   }
   {
      asn1::generated::UDRE::ValueType v;
      _udre_Type.read(reader, v);
      value.set_udre(v);
   }
   {
      asn1::generated::PRC::ValueType v;
      _prc_Type.read(reader, v);
      value.set_prc(v);
   }
   {
      asn1::generated::RRC::ValueType v;
      _rrc_Type.read(reader, v);
      value.set_rrc(v);
   }
   {
      asn1::generated::DeltaPRC::ValueType v;
      _dummy1_Type.read(reader, v);
      value.set_dummy1(v);
   }
   {
      asn1::generated::DeltaRRC::ValueType v;
      _dummy2_Type.read(reader, v);
      value.set_dummy2(v);
   }
   {
      asn1::generated::DeltaPRC::ValueType v;
      _dummy3_Type.read(reader, v);
      value.set_dummy3(v);
   }
   {
      asn1::generated::DeltaRRC::ValueType v;
      _dummy4_Type.read(reader, v);
      value.set_dummy4(v);
   }

   reader.readSequenceEnd(*this);
}

void DGPS_CorrectionSatInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _satID_Type.write(writer, value.get_satID());
   _iode_Type.write(writer, value.get_iode());
   _udre_Type.write(writer, value.get_udre());
   _prc_Type.write(writer, value.get_prc());
   _rrc_Type.write(writer, value.get_rrc());
   _dummy1_Type.write(writer, value.get_dummy1());
   _dummy2_Type.write(writer, value.get_dummy2());
   _dummy3_Type.write(writer, value.get_dummy3());
   _dummy4_Type.write(writer, value.get_dummy4());

   writer.writeSequenceEnd();
}


void EllipsoidPoint::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__EnumeratedType::ValueType v;
      _latitudeSign_Type.read(reader, v);
      value.set_latitudeSign(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _latitude_Type.read(reader, v);
      value.set_latitude(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _longitude_Type.read(reader, v);
      value.set_longitude(v);
   }

   reader.readSequenceEnd(*this);
}

void EllipsoidPoint::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _latitudeSign_Type.write(writer, value.get_latitudeSign());
   _latitude_Type.write(writer, value.get_latitude());
   _longitude_Type.write(writer, value.get_longitude());

   writer.writeSequenceEnd();
}


void EllipsoidPointAltitude::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__EnumeratedType::ValueType v;
      _latitudeSign_Type.read(reader, v);
      value.set_latitudeSign(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _latitude_Type.read(reader, v);
      value.set_latitude(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _longitude_Type.read(reader, v);
      value.set_longitude(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _altitudeDirection_Type.read(reader, v);
      value.set_altitudeDirection(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _altitude_Type.read(reader, v);
      value.set_altitude(v);
   }

   reader.readSequenceEnd(*this);
}

void EllipsoidPointAltitude::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _latitudeSign_Type.write(writer, value.get_latitudeSign());
   _latitude_Type.write(writer, value.get_latitude());
   _longitude_Type.write(writer, value.get_longitude());
   _altitudeDirection_Type.write(writer, value.get_altitudeDirection());
   _altitude_Type.write(writer, value.get_altitude());

   writer.writeSequenceEnd();
}


void EllipsoidPointAltitudeEllipsoide::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__EnumeratedType::ValueType v;
      _latitudeSign_Type.read(reader, v);
      value.set_latitudeSign(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _latitude_Type.read(reader, v);
      value.set_latitude(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _longitude_Type.read(reader, v);
      value.set_longitude(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _altitudeDirection_Type.read(reader, v);
      value.set_altitudeDirection(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _altitude_Type.read(reader, v);
      value.set_altitude(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _uncertaintySemiMajor_Type.read(reader, v);
      value.set_uncertaintySemiMajor(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _uncertaintySemiMinor_Type.read(reader, v);
      value.set_uncertaintySemiMinor(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _orientationMajorAxis_Type.read(reader, v);
      value.set_orientationMajorAxis(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _uncertaintyAltitude_Type.read(reader, v);
      value.set_uncertaintyAltitude(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _confidence_Type.read(reader, v);
      value.set_confidence(v);
   }

   reader.readSequenceEnd(*this);
}

void EllipsoidPointAltitudeEllipsoide::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _latitudeSign_Type.write(writer, value.get_latitudeSign());
   _latitude_Type.write(writer, value.get_latitude());
   _longitude_Type.write(writer, value.get_longitude());
   _altitudeDirection_Type.write(writer, value.get_altitudeDirection());
   _altitude_Type.write(writer, value.get_altitude());
   _uncertaintySemiMajor_Type.write(writer, value.get_uncertaintySemiMajor());
   _uncertaintySemiMinor_Type.write(writer, value.get_uncertaintySemiMinor());
   _orientationMajorAxis_Type.write(writer, value.get_orientationMajorAxis());
   _uncertaintyAltitude_Type.write(writer, value.get_uncertaintyAltitude());
   _confidence_Type.write(writer, value.get_confidence());

   writer.writeSequenceEnd();
}


void EllipsoidPointUncertCircle::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__EnumeratedType::ValueType v;
      _latitudeSign_Type.read(reader, v);
      value.set_latitudeSign(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _latitude_Type.read(reader, v);
      value.set_latitude(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _longitude_Type.read(reader, v);
      value.set_longitude(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _uncertaintyCode_Type.read(reader, v);
      value.set_uncertaintyCode(v);
   }

   reader.readSequenceEnd(*this);
}

void EllipsoidPointUncertCircle::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _latitudeSign_Type.write(writer, value.get_latitudeSign());
   _latitude_Type.write(writer, value.get_latitude());
   _longitude_Type.write(writer, value.get_longitude());
   _uncertaintyCode_Type.write(writer, value.get_uncertaintyCode());

   writer.writeSequenceEnd();
}


void EllipsoidPointUncertEllipse::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__EnumeratedType::ValueType v;
      _latitudeSign_Type.read(reader, v);
      value.set_latitudeSign(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _latitude_Type.read(reader, v);
      value.set_latitude(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _longitude_Type.read(reader, v);
      value.set_longitude(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _uncertaintySemiMajor_Type.read(reader, v);
      value.set_uncertaintySemiMajor(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _uncertaintySemiMinor_Type.read(reader, v);
      value.set_uncertaintySemiMinor(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _orientationMajorAxis_Type.read(reader, v);
      value.set_orientationMajorAxis(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _confidence_Type.read(reader, v);
      value.set_confidence(v);
   }

   reader.readSequenceEnd(*this);
}

void EllipsoidPointUncertEllipse::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _latitudeSign_Type.write(writer, value.get_latitudeSign());
   _latitude_Type.write(writer, value.get_latitude());
   _longitude_Type.write(writer, value.get_longitude());
   _uncertaintySemiMajor_Type.write(writer, value.get_uncertaintySemiMajor());
   _uncertaintySemiMinor_Type.write(writer, value.get_uncertaintySemiMinor());
   _orientationMajorAxis_Type.write(writer, value.get_orientationMajorAxis());
   _confidence_Type.write(writer, value.get_confidence());

   writer.writeSequenceEnd();
}


void Event1a::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TriggeringCondition2::ValueType v;
      _triggeringCondition_Type.read(reader, v);
      value.set_triggeringCondition(v);
   }
   {
      asn1::generated::ReportingRange::ValueType v;
      _reportingRange_Type.read(reader, v);
      value.set_reportingRange(v);
   }
   {
      asn1::generated::ForbiddenAffectCellList::ValueType v;
      _forbiddenAffectCellList_Type.read(reader, v);
      value.set_forbiddenAffectCellList(v);
   }
   {
      asn1::generated::W::ValueType v;
      _w_Type.read(reader, v);
      value.set_w(v);
   }
   {
      asn1::generated::ReportDeactivationThreshold::ValueType v;
      _reportDeactivationThreshold_Type.read(reader, v);
      value.set_reportDeactivationThreshold(v);
   }
   {
      asn1::generated::ReportingAmount::ValueType v;
      _reportingAmount_Type.read(reader, v);
      value.set_reportingAmount(v);
   }
   {
      asn1::generated::ReportingInterval::ValueType v;
      _reportingInterval_Type.read(reader, v);
      value.set_reportingInterval(v);
   }

   reader.readSequenceEnd(*this);
}

void Event1a::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _triggeringCondition_Type.write(writer, value.get_triggeringCondition());
   _reportingRange_Type.write(writer, value.get_reportingRange());
   _forbiddenAffectCellList_Type.write(writer, value.get_forbiddenAffectCellList());
   _w_Type.write(writer, value.get_w());
   _reportDeactivationThreshold_Type.write(writer, value.get_reportDeactivationThreshold());
   _reportingAmount_Type.write(writer, value.get_reportingAmount());
   _reportingInterval_Type.write(writer, value.get_reportingInterval());

   writer.writeSequenceEnd();
}


void Event1a_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TriggeringCondition2::ValueType v;
      _triggeringCondition_Type.read(reader, v);
      value.set_triggeringCondition(v);
   }
   {
      asn1::generated::ReportingRange::ValueType v;
      _reportingRange_Type.read(reader, v);
      value.set_reportingRange(v);
   }
   {
      asn1::generated::ForbiddenAffectCellList_r4::ValueType v;
      _forbiddenAffectCellList_Type.read(reader, v);
      value.set_forbiddenAffectCellList(v);
   }
   {
      asn1::generated::W::ValueType v;
      _w_Type.read(reader, v);
      value.set_w(v);
   }
   {
      asn1::generated::ReportDeactivationThreshold::ValueType v;
      _reportDeactivationThreshold_Type.read(reader, v);
      value.set_reportDeactivationThreshold(v);
   }
   {
      asn1::generated::ReportingAmount::ValueType v;
      _reportingAmount_Type.read(reader, v);
      value.set_reportingAmount(v);
   }
   {
      asn1::generated::ReportingInterval::ValueType v;
      _reportingInterval_Type.read(reader, v);
      value.set_reportingInterval(v);
   }

   reader.readSequenceEnd(*this);
}

void Event1a_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _triggeringCondition_Type.write(writer, value.get_triggeringCondition());
   _reportingRange_Type.write(writer, value.get_reportingRange());
   _forbiddenAffectCellList_Type.write(writer, value.get_forbiddenAffectCellList());
   _w_Type.write(writer, value.get_w());
   _reportDeactivationThreshold_Type.write(writer, value.get_reportDeactivationThreshold());
   _reportingAmount_Type.write(writer, value.get_reportingAmount());
   _reportingInterval_Type.write(writer, value.get_reportingInterval());

   writer.writeSequenceEnd();
}


void Event1a_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TriggeringCondition2::ValueType v;
      _triggeringCondition_Type.read(reader, v);
      value.set_triggeringCondition(v);
   }
   {
      asn1::generated::ReportingRange::ValueType v;
      _reportingRange_Type.read(reader, v);
      value.set_reportingRange(v);
   }
   {
      asn1::generated::ForbiddenAffectCellList_LCR_r4::ValueType v;
      _forbiddenAffectCellList_Type.read(reader, v);
      value.set_forbiddenAffectCellList(v);
   }
   {
      asn1::generated::W::ValueType v;
      _w_Type.read(reader, v);
      value.set_w(v);
   }
   {
      asn1::generated::ReportDeactivationThreshold::ValueType v;
      _reportDeactivationThreshold_Type.read(reader, v);
      value.set_reportDeactivationThreshold(v);
   }
   {
      asn1::generated::ReportingAmount::ValueType v;
      _reportingAmount_Type.read(reader, v);
      value.set_reportingAmount(v);
   }
   {
      asn1::generated::ReportingInterval::ValueType v;
      _reportingInterval_Type.read(reader, v);
      value.set_reportingInterval(v);
   }

   reader.readSequenceEnd(*this);
}

void Event1a_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _triggeringCondition_Type.write(writer, value.get_triggeringCondition());
   _reportingRange_Type.write(writer, value.get_reportingRange());
   _forbiddenAffectCellList_Type.write(writer, value.get_forbiddenAffectCellList());
   _w_Type.write(writer, value.get_w());
   _reportDeactivationThreshold_Type.write(writer, value.get_reportDeactivationThreshold());
   _reportingAmount_Type.write(writer, value.get_reportingAmount());
   _reportingInterval_Type.write(writer, value.get_reportingInterval());

   writer.writeSequenceEnd();
}


void Event1b::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TriggeringCondition1::ValueType v;
      _triggeringCondition_Type.read(reader, v);
      value.set_triggeringCondition(v);
   }
   {
      asn1::generated::ReportingRange::ValueType v;
      _reportingRange_Type.read(reader, v);
      value.set_reportingRange(v);
   }
   {
      asn1::generated::ForbiddenAffectCellList::ValueType v;
      _forbiddenAffectCellList_Type.read(reader, v);
      value.set_forbiddenAffectCellList(v);
   }
   {
      asn1::generated::W::ValueType v;
      _w_Type.read(reader, v);
      value.set_w(v);
   }

   reader.readSequenceEnd(*this);
}

void Event1b::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _triggeringCondition_Type.write(writer, value.get_triggeringCondition());
   _reportingRange_Type.write(writer, value.get_reportingRange());
   _forbiddenAffectCellList_Type.write(writer, value.get_forbiddenAffectCellList());
   _w_Type.write(writer, value.get_w());

   writer.writeSequenceEnd();
}


void Event1b_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TriggeringCondition1::ValueType v;
      _triggeringCondition_Type.read(reader, v);
      value.set_triggeringCondition(v);
   }
   {
      asn1::generated::ReportingRange::ValueType v;
      _reportingRange_Type.read(reader, v);
      value.set_reportingRange(v);
   }
   {
      asn1::generated::ForbiddenAffectCellList_r4::ValueType v;
      _forbiddenAffectCellList_Type.read(reader, v);
      value.set_forbiddenAffectCellList(v);
   }
   {
      asn1::generated::W::ValueType v;
      _w_Type.read(reader, v);
      value.set_w(v);
   }

   reader.readSequenceEnd(*this);
}

void Event1b_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _triggeringCondition_Type.write(writer, value.get_triggeringCondition());
   _reportingRange_Type.write(writer, value.get_reportingRange());
   _forbiddenAffectCellList_Type.write(writer, value.get_forbiddenAffectCellList());
   _w_Type.write(writer, value.get_w());

   writer.writeSequenceEnd();
}


void Event1b_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TriggeringCondition1::ValueType v;
      _triggeringCondition_Type.read(reader, v);
      value.set_triggeringCondition(v);
   }
   {
      asn1::generated::ReportingRange::ValueType v;
      _reportingRange_Type.read(reader, v);
      value.set_reportingRange(v);
   }
   {
      asn1::generated::ForbiddenAffectCellList_LCR_r4::ValueType v;
      _forbiddenAffectCellList_Type.read(reader, v);
      value.set_forbiddenAffectCellList(v);
   }
   {
      asn1::generated::W::ValueType v;
      _w_Type.read(reader, v);
      value.set_w(v);
   }

   reader.readSequenceEnd(*this);
}

void Event1b_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _triggeringCondition_Type.write(writer, value.get_triggeringCondition());
   _reportingRange_Type.write(writer, value.get_reportingRange());
   _forbiddenAffectCellList_Type.write(writer, value.get_forbiddenAffectCellList());
   _w_Type.write(writer, value.get_w());

   writer.writeSequenceEnd();
}


void Event1c::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ReplacementActivationThreshold::ValueType v;
      _replacementActivationThreshold_Type.read(reader, v);
      value.set_replacementActivationThreshold(v);
   }
   {
      asn1::generated::ReportingAmount::ValueType v;
      _reportingAmount_Type.read(reader, v);
      value.set_reportingAmount(v);
   }
   {
      asn1::generated::ReportingInterval::ValueType v;
      _reportingInterval_Type.read(reader, v);
      value.set_reportingInterval(v);
   }

   reader.readSequenceEnd(*this);
}

void Event1c::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _replacementActivationThreshold_Type.write(writer, value.get_replacementActivationThreshold());
   _reportingAmount_Type.write(writer, value.get_reportingAmount());
   _reportingInterval_Type.write(writer, value.get_reportingInterval());

   writer.writeSequenceEnd();
}


void Event1d::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TriggeringCondition2::ValueType v;
      _triggeringCondition_Type.read(reader, v);
      value.set_triggeringCondition(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _useCIO_Type.read(reader, v);
      value.set_useCIO(v);
   }

   reader.readSequenceEnd(*this);
}

void Event1d::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _triggeringCondition_Type.write(writer, value.get_triggeringCondition());
   _useCIO_Type.write(writer, value.get_useCIO());

   writer.writeSequenceEnd();
}


void Event1e::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TriggeringCondition2::ValueType v;
      _triggeringCondition_Type.read(reader, v);
      value.set_triggeringCondition(v);
   }
   {
      asn1::generated::ThresholdUsedFrequency::ValueType v;
      _thresholdUsedFrequency_Type.read(reader, v);
      value.set_thresholdUsedFrequency(v);
   }

   reader.readSequenceEnd(*this);
}

void Event1e::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _triggeringCondition_Type.write(writer, value.get_triggeringCondition());
   _thresholdUsedFrequency_Type.write(writer, value.get_thresholdUsedFrequency());

   writer.writeSequenceEnd();
}


void Event1e_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TriggeringCondition2::ValueType v;
      _triggeringCondition_Type.read(reader, v);
      value.set_triggeringCondition(v);
   }
   {
      asn1::generated::ThresholdUsedFrequency_r6::ValueType v;
      _thresholdUsedFrequency_Type.read(reader, v);
      value.set_thresholdUsedFrequency(v);
   }

   reader.readSequenceEnd(*this);
}

void Event1e_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _triggeringCondition_Type.write(writer, value.get_triggeringCondition());
   _thresholdUsedFrequency_Type.write(writer, value.get_thresholdUsedFrequency());

   writer.writeSequenceEnd();
}


void Event1f::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TriggeringCondition1::ValueType v;
      _triggeringCondition_Type.read(reader, v);
      value.set_triggeringCondition(v);
   }
   {
      asn1::generated::ThresholdUsedFrequency::ValueType v;
      _thresholdUsedFrequency_Type.read(reader, v);
      value.set_thresholdUsedFrequency(v);
   }

   reader.readSequenceEnd(*this);
}

void Event1f::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _triggeringCondition_Type.write(writer, value.get_triggeringCondition());
   _thresholdUsedFrequency_Type.write(writer, value.get_thresholdUsedFrequency());

   writer.writeSequenceEnd();
}


void Event1f_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TriggeringCondition1::ValueType v;
      _triggeringCondition_Type.read(reader, v);
      value.set_triggeringCondition(v);
   }
   {
      asn1::generated::ThresholdUsedFrequency_r6::ValueType v;
      _thresholdUsedFrequency_Type.read(reader, v);
      value.set_thresholdUsedFrequency(v);
   }

   reader.readSequenceEnd(*this);
}

void Event1f_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _triggeringCondition_Type.write(writer, value.get_triggeringCondition());
   _thresholdUsedFrequency_Type.write(writer, value.get_thresholdUsedFrequency());

   writer.writeSequenceEnd();
}


void Event1j_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ReplacementActivationThreshold::ValueType v;
      _replacementActivationThreshold_Type.read(reader, v);
      value.set_replacementActivationThreshold(v);
   }
   {
      asn1::generated::ReportingAmount::ValueType v;
      _reportingAmount_Type.read(reader, v);
      value.set_reportingAmount(v);
   }
   {
      asn1::generated::ReportingInterval::ValueType v;
      _reportingInterval_Type.read(reader, v);
      value.set_reportingInterval(v);
   }

   reader.readSequenceEnd(*this);
}

void Event1j_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _replacementActivationThreshold_Type.write(writer, value.get_replacementActivationThreshold());
   _reportingAmount_Type.write(writer, value.get_reportingAmount());
   _reportingInterval_Type.write(writer, value.get_reportingInterval());

   writer.writeSequenceEnd();
}


void Event2a::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Threshold::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::W::ValueType v;
      _usedFreqW_Type.read(reader, v);
      value.set_usedFreqW(v);
   }
   {
      asn1::generated::HysteresisInterFreq::ValueType v;
      _hysteresis_Type.read(reader, v);
      value.set_hysteresis(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }
   {
      asn1::generated::NonUsedFreqParameterList::ValueType v;
      _nonUsedFreqParameterList_Type.read(reader, v);
      value.set_nonUsedFreqParameterList(v);
   }

   reader.readSequenceEnd(*this);
}

void Event2a::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dummy_Type.write(writer, value.get_dummy());
   _usedFreqW_Type.write(writer, value.get_usedFreqW());
   _hysteresis_Type.write(writer, value.get_hysteresis());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());
   _nonUsedFreqParameterList_Type.write(writer, value.get_nonUsedFreqParameterList());

   writer.writeSequenceEnd();
}


void Event2a_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::W::ValueType v;
      _usedFreqW_Type.read(reader, v);
      value.set_usedFreqW(v);
   }
   {
      asn1::generated::HysteresisInterFreq::ValueType v;
      _hysteresis_Type.read(reader, v);
      value.set_hysteresis(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }
   {
      asn1::generated::NonUsedFreqWList_r6::ValueType v;
      _nonUsedFreqParameterList_Type.read(reader, v);
      value.set_nonUsedFreqParameterList(v);
   }

   reader.readSequenceEnd(*this);
}

void Event2a_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _usedFreqW_Type.write(writer, value.get_usedFreqW());
   _hysteresis_Type.write(writer, value.get_hysteresis());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());
   _nonUsedFreqParameterList_Type.write(writer, value.get_nonUsedFreqParameterList());

   writer.writeSequenceEnd();
}


void Event2b::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Threshold::ValueType v;
      _usedFreqThreshold_Type.read(reader, v);
      value.set_usedFreqThreshold(v);
   }
   {
      asn1::generated::W::ValueType v;
      _usedFreqW_Type.read(reader, v);
      value.set_usedFreqW(v);
   }
   {
      asn1::generated::HysteresisInterFreq::ValueType v;
      _hysteresis_Type.read(reader, v);
      value.set_hysteresis(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }
   {
      asn1::generated::NonUsedFreqParameterList::ValueType v;
      _nonUsedFreqParameterList_Type.read(reader, v);
      value.set_nonUsedFreqParameterList(v);
   }

   reader.readSequenceEnd(*this);
}

void Event2b::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _usedFreqThreshold_Type.write(writer, value.get_usedFreqThreshold());
   _usedFreqW_Type.write(writer, value.get_usedFreqW());
   _hysteresis_Type.write(writer, value.get_hysteresis());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());
   _nonUsedFreqParameterList_Type.write(writer, value.get_nonUsedFreqParameterList());

   writer.writeSequenceEnd();
}


void Event2b_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Threshold_r6::ValueType v;
      _usedFreqThreshold_Type.read(reader, v);
      value.set_usedFreqThreshold(v);
   }
   {
      asn1::generated::W::ValueType v;
      _usedFreqW_Type.read(reader, v);
      value.set_usedFreqW(v);
   }
   {
      asn1::generated::HysteresisInterFreq::ValueType v;
      _hysteresis_Type.read(reader, v);
      value.set_hysteresis(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }
   {
      asn1::generated::NonUsedFreqParameterList_r6::ValueType v;
      _nonUsedFreqParameterList_Type.read(reader, v);
      value.set_nonUsedFreqParameterList(v);
   }

   reader.readSequenceEnd(*this);
}

void Event2b_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _usedFreqThreshold_Type.write(writer, value.get_usedFreqThreshold());
   _usedFreqW_Type.write(writer, value.get_usedFreqW());
   _hysteresis_Type.write(writer, value.get_hysteresis());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());
   _nonUsedFreqParameterList_Type.write(writer, value.get_nonUsedFreqParameterList());

   writer.writeSequenceEnd();
}


void Event2c::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::HysteresisInterFreq::ValueType v;
      _hysteresis_Type.read(reader, v);
      value.set_hysteresis(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }
   {
      asn1::generated::NonUsedFreqParameterList::ValueType v;
      _nonUsedFreqParameterList_Type.read(reader, v);
      value.set_nonUsedFreqParameterList(v);
   }

   reader.readSequenceEnd(*this);
}

void Event2c::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _hysteresis_Type.write(writer, value.get_hysteresis());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());
   _nonUsedFreqParameterList_Type.write(writer, value.get_nonUsedFreqParameterList());

   writer.writeSequenceEnd();
}


void Event2c_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::HysteresisInterFreq::ValueType v;
      _hysteresis_Type.read(reader, v);
      value.set_hysteresis(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }
   {
      asn1::generated::NonUsedFreqParameterList_r6::ValueType v;
      _nonUsedFreqParameterList_Type.read(reader, v);
      value.set_nonUsedFreqParameterList(v);
   }

   reader.readSequenceEnd(*this);
}

void Event2c_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _hysteresis_Type.write(writer, value.get_hysteresis());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());
   _nonUsedFreqParameterList_Type.write(writer, value.get_nonUsedFreqParameterList());

   writer.writeSequenceEnd();
}


void Event2d::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Threshold::ValueType v;
      _usedFreqThreshold_Type.read(reader, v);
      value.set_usedFreqThreshold(v);
   }
   {
      asn1::generated::W::ValueType v;
      _usedFreqW_Type.read(reader, v);
      value.set_usedFreqW(v);
   }
   {
      asn1::generated::HysteresisInterFreq::ValueType v;
      _hysteresis_Type.read(reader, v);
      value.set_hysteresis(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }

   reader.readSequenceEnd(*this);
}

void Event2d::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _usedFreqThreshold_Type.write(writer, value.get_usedFreqThreshold());
   _usedFreqW_Type.write(writer, value.get_usedFreqW());
   _hysteresis_Type.write(writer, value.get_hysteresis());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());

   writer.writeSequenceEnd();
}


void Event2d_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Threshold_r6::ValueType v;
      _usedFreqThreshold_Type.read(reader, v);
      value.set_usedFreqThreshold(v);
   }
   {
      asn1::generated::W::ValueType v;
      _usedFreqW_Type.read(reader, v);
      value.set_usedFreqW(v);
   }
   {
      asn1::generated::HysteresisInterFreq::ValueType v;
      _hysteresis_Type.read(reader, v);
      value.set_hysteresis(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }

   reader.readSequenceEnd(*this);
}

void Event2d_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _usedFreqThreshold_Type.write(writer, value.get_usedFreqThreshold());
   _usedFreqW_Type.write(writer, value.get_usedFreqW());
   _hysteresis_Type.write(writer, value.get_hysteresis());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());

   writer.writeSequenceEnd();
}


void Event2e::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::HysteresisInterFreq::ValueType v;
      _hysteresis_Type.read(reader, v);
      value.set_hysteresis(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }
   {
      asn1::generated::NonUsedFreqParameterList::ValueType v;
      _nonUsedFreqParameterList_Type.read(reader, v);
      value.set_nonUsedFreqParameterList(v);
   }

   reader.readSequenceEnd(*this);
}

void Event2e::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _hysteresis_Type.write(writer, value.get_hysteresis());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());
   _nonUsedFreqParameterList_Type.write(writer, value.get_nonUsedFreqParameterList());

   writer.writeSequenceEnd();
}


void Event2e_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::HysteresisInterFreq::ValueType v;
      _hysteresis_Type.read(reader, v);
      value.set_hysteresis(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }
   {
      asn1::generated::NonUsedFreqParameterList_r6::ValueType v;
      _nonUsedFreqParameterList_Type.read(reader, v);
      value.set_nonUsedFreqParameterList(v);
   }

   reader.readSequenceEnd(*this);
}

void Event2e_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _hysteresis_Type.write(writer, value.get_hysteresis());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());
   _nonUsedFreqParameterList_Type.write(writer, value.get_nonUsedFreqParameterList());

   writer.writeSequenceEnd();
}


void Event2f::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Threshold::ValueType v;
      _usedFreqThreshold_Type.read(reader, v);
      value.set_usedFreqThreshold(v);
   }
   {
      asn1::generated::W::ValueType v;
      _usedFreqW_Type.read(reader, v);
      value.set_usedFreqW(v);
   }
   {
      asn1::generated::HysteresisInterFreq::ValueType v;
      _hysteresis_Type.read(reader, v);
      value.set_hysteresis(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }

   reader.readSequenceEnd(*this);
}

void Event2f::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _usedFreqThreshold_Type.write(writer, value.get_usedFreqThreshold());
   _usedFreqW_Type.write(writer, value.get_usedFreqW());
   _hysteresis_Type.write(writer, value.get_hysteresis());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());

   writer.writeSequenceEnd();
}


void Event2f_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Threshold_r6::ValueType v;
      _usedFreqThreshold_Type.read(reader, v);
      value.set_usedFreqThreshold(v);
   }
   {
      asn1::generated::W::ValueType v;
      _usedFreqW_Type.read(reader, v);
      value.set_usedFreqW(v);
   }
   {
      asn1::generated::HysteresisInterFreq::ValueType v;
      _hysteresis_Type.read(reader, v);
      value.set_hysteresis(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }

   reader.readSequenceEnd(*this);
}

void Event2f_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _usedFreqThreshold_Type.write(writer, value.get_usedFreqThreshold());
   _usedFreqW_Type.write(writer, value.get_usedFreqW());
   _hysteresis_Type.write(writer, value.get_hysteresis());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());

   writer.writeSequenceEnd();
}


void Event3a::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Threshold::ValueType v;
      _thresholdOwnSystem_Type.read(reader, v);
      value.set_thresholdOwnSystem(v);
   }
   {
      asn1::generated::W::ValueType v;
      _w_Type.read(reader, v);
      value.set_w(v);
   }
   {
      asn1::generated::Threshold::ValueType v;
      _thresholdOtherSystem_Type.read(reader, v);
      value.set_thresholdOtherSystem(v);
   }
   {
      asn1::generated::Hysteresis::ValueType v;
      _hysteresis_Type.read(reader, v);
      value.set_hysteresis(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }

   reader.readSequenceEnd(*this);
}

void Event3a::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _thresholdOwnSystem_Type.write(writer, value.get_thresholdOwnSystem());
   _w_Type.write(writer, value.get_w());
   _thresholdOtherSystem_Type.write(writer, value.get_thresholdOtherSystem());
   _hysteresis_Type.write(writer, value.get_hysteresis());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());

   writer.writeSequenceEnd();
}


void Event3b::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Threshold::ValueType v;
      _thresholdOtherSystem_Type.read(reader, v);
      value.set_thresholdOtherSystem(v);
   }
   {
      asn1::generated::Hysteresis::ValueType v;
      _hysteresis_Type.read(reader, v);
      value.set_hysteresis(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }

   reader.readSequenceEnd(*this);
}

void Event3b::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _thresholdOtherSystem_Type.write(writer, value.get_thresholdOtherSystem());
   _hysteresis_Type.write(writer, value.get_hysteresis());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());

   writer.writeSequenceEnd();
}


void Event3c::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Threshold::ValueType v;
      _thresholdOtherSystem_Type.read(reader, v);
      value.set_thresholdOtherSystem(v);
   }
   {
      asn1::generated::Hysteresis::ValueType v;
      _hysteresis_Type.read(reader, v);
      value.set_hysteresis(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }

   reader.readSequenceEnd(*this);
}

void Event3c::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _thresholdOtherSystem_Type.write(writer, value.get_thresholdOtherSystem());
   _hysteresis_Type.write(writer, value.get_hysteresis());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());

   writer.writeSequenceEnd();
}


void Event3d::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Hysteresis::ValueType v;
      _hysteresis_Type.read(reader, v);
      value.set_hysteresis(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }

   reader.readSequenceEnd(*this);
}

void Event3d::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _hysteresis_Type.write(writer, value.get_hysteresis());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());

   writer.writeSequenceEnd();
}


void EventResults::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_intraFreqEventResults_Type)
   {
      asn1::generated::IntraFreqEventResults::ValueType v;
      _intraFreqEventResults_Type.read(reader, v);
      value.set_intraFreqEventResults(v);
   }
   else if (choosenType == &_interFreqEventResults_Type)
   {
      asn1::generated::InterFreqEventResults::ValueType v;
      _interFreqEventResults_Type.read(reader, v);
      value.set_interFreqEventResults(v);
   }
   else if (choosenType == &_interRATEventResults_Type)
   {
      asn1::generated::InterRATEventResults::ValueType v;
      _interRATEventResults_Type.read(reader, v);
      value.set_interRATEventResults(v);
   }
   else if (choosenType == &_trafficVolumeEventResults_Type)
   {
      asn1::generated::TrafficVolumeEventResults::ValueType v;
      _trafficVolumeEventResults_Type.read(reader, v);
      value.set_trafficVolumeEventResults(v);
   }
   else if (choosenType == &_qualityEventResults_Type)
   {
      asn1::generated::QualityEventResults::ValueType v;
      _qualityEventResults_Type.read(reader, v);
      value.set_qualityEventResults(v);
   }
   else if (choosenType == &_ue-InternalEventResults_Type)
   {
      asn1::generated::UE_InternalEventResults::ValueType v;
      _ue_InternalEventResults_Type.read(reader, v);
      value.set_ue_InternalEventResults(v);
   }
   else if (choosenType == &_ue-positioning-MeasurementEventResults_Type)
   {
      asn1::generated::UE_Positioning_MeasurementEventResults::ValueType v;
      _ue_positioning_MeasurementEventResults_Type.read(reader, v);
      value.set_ue_positioning_MeasurementEventResults(v);
   }
   else if (choosenType == &_spare_Type)
   {
      asn1::NullType::ValueType v;
      _spare_Type.read(reader, v);
      value.set_spare(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _intraFreqEventResults_Type.toString() + ", " + _interFreqEventResults_Type.toString() + ", " + _interRATEventResults_Type.toString() + ", " + _trafficVolumeEventResults_Type.toString() + ", " + _qualityEventResults_Type.toString() + ", " + _ue-InternalEventResults_Type.toString() + ", " + _ue-positioning-MeasurementEventResults_Type.toString() + ", " + _spare_Type.toString());
   }
}

void EventResults::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_intraFreqEventResults_Choosen())
      _intraFreqEventResults_Type.write(writer, value.get_intraFreqEventResults());
   else if (value.has_interFreqEventResults_Choosen())
      _interFreqEventResults_Type.write(writer, value.get_interFreqEventResults());
   else if (value.has_interRATEventResults_Choosen())
      _interRATEventResults_Type.write(writer, value.get_interRATEventResults());
   else if (value.has_trafficVolumeEventResults_Choosen())
      _trafficVolumeEventResults_Type.write(writer, value.get_trafficVolumeEventResults());
   else if (value.has_qualityEventResults_Choosen())
      _qualityEventResults_Type.write(writer, value.get_qualityEventResults());
   else if (value.has_ue-InternalEventResults_Choosen())
      _ue-InternalEventResults_Type.write(writer, value.get_ue-InternalEventResults());
   else if (value.has_ue-positioning-MeasurementEventResults_Choosen())
      _ue-positioning-MeasurementEventResults_Type.write(writer, value.get_ue-positioning-MeasurementEventResults());
   else if (value.has_spare_Choosen())
      _spare_Type.write(writer, value.get_spare());
}


void ExtraDopplerInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _doppler1stOrder_Type.read(reader, v);
      value.set_doppler1stOrder(v);
   }
   {
      asn1::generated::DopplerUncertainty::ValueType v;
      _dopplerUncertainty_Type.read(reader, v);
      value.set_dopplerUncertainty(v);
   }

   reader.readSequenceEnd(*this);
}

void ExtraDopplerInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _doppler1stOrder_Type.write(writer, value.get_doppler1stOrder());
   _dopplerUncertainty_Type.write(writer, value.get_dopplerUncertainty());

   writer.writeSequenceEnd();
}


void FACH_MeasurementOccasionInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _fACH_meas_occasion_coeff_Type.read(reader, v);
      value.set_fACH_meas_occasion_coeff(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _inter_freq_FDD_meas_ind_Type.read(reader, v);
      value.set_inter_freq_FDD_meas_ind(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _inter_freq_TDD_meas_ind_Type.read(reader, v);
      value.set_inter_freq_TDD_meas_ind(v);
   }
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__RAT_Type::ValueType v;
      _inter_RAT_meas_ind_Type.read(reader, v);
      value.set_inter_RAT_meas_ind(v);
   }

   reader.readSequenceEnd(*this);
}

void FACH_MeasurementOccasionInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _fACH_meas_occasion_coeff_Type.write(writer, value.get_fACH_meas_occasion_coeff());
   _inter_freq_FDD_meas_ind_Type.write(writer, value.get_inter_freq_FDD_meas_ind());
   _inter_freq_TDD_meas_ind_Type.write(writer, value.get_inter_freq_TDD_meas_ind());
   _inter_RAT_meas_ind_Type.write(writer, value.get_inter_RAT_meas_ind());

   writer.writeSequenceEnd();
}


void FACH_MeasurementOccasionInfo_LCR_r4_ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _inter_freq_TDD128_meas_ind_Type.read(reader, v);
      value.set_inter_freq_TDD128_meas_ind(v);
   }

   reader.readSequenceEnd(*this);
}

void FACH_MeasurementOccasionInfo_LCR_r4_ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _inter_freq_TDD128_meas_ind_Type.write(writer, value.get_inter_freq_TDD128_meas_ind());

   writer.writeSequenceEnd();
}


void ForbiddenAffectCell::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_fdd_Type)
   {
      asn1::generated::PrimaryCPICH_Info::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   else if (choosenType == &_tdd_Type)
   {
      asn1::generated::PrimaryCCPCH_Info::ValueType v;
      _tdd_Type.read(reader, v);
      value.set_tdd(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _fdd_Type.toString() + ", " + _tdd_Type.toString());
   }
}

void ForbiddenAffectCell::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_fdd_Choosen())
      _fdd_Type.write(writer, value.get_fdd());
   else if (value.has_tdd_Choosen())
      _tdd_Type.write(writer, value.get_tdd());
}


void ForbiddenAffectCell-r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_fdd_Type)
   {
      asn1::generated::PrimaryCPICH_Info::ValueType v;
      _fdd_Type.read(reader, v);
      value.set_fdd(v);
   }
   else if (choosenType == &_tdd_Type)
   {
      asn1::generated::PrimaryCCPCH_Info_r4::ValueType v;
      _tdd_Type.read(reader, v);
      value.set_tdd(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _fdd_Type.toString() + ", " + _tdd_Type.toString());
   }
}

void ForbiddenAffectCell-r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_fdd_Choosen())
      _fdd_Type.write(writer, value.get_fdd());
   else if (value.has_tdd_Choosen())
      _tdd_Type.write(writer, value.get_tdd());
}


void ForbiddenAffectCell_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PrimaryCCPCH_Info_LCR_r4::ValueType v;
      _tdd_Type.read(reader, v);
      value.set_tdd(v);
   }

   reader.readSequenceEnd(*this);
}

void ForbiddenAffectCell_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tdd_Type.write(writer, value.get_tdd());

   writer.writeSequenceEnd();
}


void GPS_MeasurementParam::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _satelliteID_Type.read(reader, v);
      value.set_satelliteID(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _c_N0_Type.read(reader, v);
      value.set_c_N0(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _doppler_Type.read(reader, v);
      value.set_doppler(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _wholeGPS_Chips_Type.read(reader, v);
      value.set_wholeGPS_Chips(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _fractionalGPS_Chips_Type.read(reader, v);
      value.set_fractionalGPS_Chips(v);
   }
   {
      asn1::generated::MultipathIndicator::ValueType v;
      _multipathIndicator_Type.read(reader, v);
      value.set_multipathIndicator(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _pseudorangeRMS_Error_Type.read(reader, v);
      value.set_pseudorangeRMS_Error(v);
   }

   reader.readSequenceEnd(*this);
}

void GPS_MeasurementParam::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _satelliteID_Type.write(writer, value.get_satelliteID());
   _c_N0_Type.write(writer, value.get_c_N0());
   _doppler_Type.write(writer, value.get_doppler());
   _wholeGPS_Chips_Type.write(writer, value.get_wholeGPS_Chips());
   _fractionalGPS_Chips_Type.write(writer, value.get_fractionalGPS_Chips());
   _multipathIndicator_Type.write(writer, value.get_multipathIndicator());
   _pseudorangeRMS_Error_Type.write(writer, value.get_pseudorangeRMS_Error());

   writer.writeSequenceEnd();
}


void GSM_MeasuredResults::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::GSM_CarrierRSSI::ValueType v;
      _gsm_CarrierRSSI_Type.read(reader, v);
      value.set_gsm_CarrierRSSI(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::BSICReported::ValueType v;
      _bsicReported_Type.read(reader, v);
      value.set_bsicReported(v);
   }
   {
      asn1::generated::ObservedTimeDifferenceToGSM::ValueType v;
      _dummy2_Type.read(reader, v);
      value.set_dummy2(v);
   }

   reader.readSequenceEnd(*this);
}

void GSM_MeasuredResults::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _gsm_CarrierRSSI_Type.write(writer, value.get_gsm_CarrierRSSI());
   _dummy_Type.write(writer, value.get_dummy());
   _bsicReported_Type.write(writer, value.get_bsicReported());
   _dummy2_Type.write(writer, value.get_dummy2());

   writer.writeSequenceEnd();
}


void GPS_TOW_Assist::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SatID::ValueType v;
      _satID_Type.read(reader, v);
      value.set_satID(v);
   }
   {
      _INTERNAL_::ValueType v;
      _tlm_Message_Type.read(reader, v);
      value.set_tlm_Message(v);
   }
   {
      _INTERNAL_::ValueType v;
      _tlm_Reserved_Type.read(reader, v);
      value.set_tlm_Reserved(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _alert_Type.read(reader, v);
      value.set_alert(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _antiSpoof_Type.read(reader, v);
      value.set_antiSpoof(v);
   }

   reader.readSequenceEnd(*this);
}

void GPS_TOW_Assist::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _satID_Type.write(writer, value.get_satID());
   _tlm_Message_Type.write(writer, value.get_tlm_Message());
   _tlm_Reserved_Type.write(writer, value.get_tlm_Reserved());
   _alert_Type.write(writer, value.get_alert());
   _antiSpoof_Type.write(writer, value.get_antiSpoof());

   writer.writeSequenceEnd();
}


void HCS_CellReselectInformation_RSCP::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PenaltyTime_RSCP::ValueType v;
      _penaltyTime_Type.read(reader, v);
      value.set_penaltyTime(v);
   }

   reader.readSequenceEnd(*this);
}

void HCS_CellReselectInformation_RSCP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _penaltyTime_Type.write(writer, value.get_penaltyTime());

   writer.writeSequenceEnd();
}


void HCS_CellReselectInformation_ECN0::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PenaltyTime_ECN0::ValueType v;
      _penaltyTime_Type.read(reader, v);
      value.set_penaltyTime(v);
   }

   reader.readSequenceEnd(*this);
}

void HCS_CellReselectInformation_ECN0::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _penaltyTime_Type.write(writer, value.get_penaltyTime());

   writer.writeSequenceEnd();
}


void HCS_NeighbouringCellInformation_RSCP::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::HCS_PRIO::ValueType v;
      _hcs_PRIO_Type.read(reader, v);
      value.set_hcs_PRIO(v);
   }
   {
      asn1::generated::Q_HCS::ValueType v;
      _q_HCS_Type.read(reader, v);
      value.set_q_HCS(v);
   }
   {
      asn1::generated::HCS_CellReselectInformation_RSCP::ValueType v;
      _hcs_CellReselectInformation_Type.read(reader, v);
      value.set_hcs_CellReselectInformation(v);
   }

   reader.readSequenceEnd(*this);
}

void HCS_NeighbouringCellInformation_RSCP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _hcs_PRIO_Type.write(writer, value.get_hcs_PRIO());
   _q_HCS_Type.write(writer, value.get_q_HCS());
   _hcs_CellReselectInformation_Type.write(writer, value.get_hcs_CellReselectInformation());

   writer.writeSequenceEnd();
}


void HCS_NeighbouringCellInformation_ECN0::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::HCS_PRIO::ValueType v;
      _hcs_PRIO_Type.read(reader, v);
      value.set_hcs_PRIO(v);
   }
   {
      asn1::generated::Q_HCS::ValueType v;
      _q_HCS_Type.read(reader, v);
      value.set_q_HCS(v);
   }
   {
      asn1::generated::HCS_CellReselectInformation_ECN0::ValueType v;
      _hcs_CellReselectInformation_Type.read(reader, v);
      value.set_hcs_CellReselectInformation(v);
   }

   reader.readSequenceEnd(*this);
}

void HCS_NeighbouringCellInformation_ECN0::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _hcs_PRIO_Type.write(writer, value.get_hcs_PRIO());
   _q_HCS_Type.write(writer, value.get_q_HCS());
   _hcs_CellReselectInformation_Type.write(writer, value.get_hcs_CellReselectInformation());

   writer.writeSequenceEnd();
}


void HCS_ServingCellInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::HCS_PRIO::ValueType v;
      _hcs_PRIO_Type.read(reader, v);
      value.set_hcs_PRIO(v);
   }
   {
      asn1::generated::Q_HCS::ValueType v;
      _q_HCS_Type.read(reader, v);
      value.set_q_HCS(v);
   }
   {
      asn1::generated::T_CRMax::ValueType v;
      _t_CR_Max_Type.read(reader, v);
      value.set_t_CR_Max(v);
   }

   reader.readSequenceEnd(*this);
}

void HCS_ServingCellInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _hcs_PRIO_Type.write(writer, value.get_hcs_PRIO());
   _q_HCS_Type.write(writer, value.get_q_HCS());
   _t_CR_Max_Type.write(writer, value.get_t_CR_Max());

   writer.writeSequenceEnd();
}


void HorizontalVelocity::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _bearing_Type.read(reader, v);
      value.set_bearing(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _horizontalSpeed_Type.read(reader, v);
      value.set_horizontalSpeed(v);
   }

   reader.readSequenceEnd(*this);
}

void HorizontalVelocity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _bearing_Type.write(writer, value.get_bearing());
   _horizontalSpeed_Type.write(writer, value.get_horizontalSpeed());

   writer.writeSequenceEnd();
}


void HorizontalWithVerticalVelocity::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__EnumeratedType::ValueType v;
      _verticalSpeedDirection_Type.read(reader, v);
      value.set_verticalSpeedDirection(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _bearing_Type.read(reader, v);
      value.set_bearing(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _horizontalSpeed_Type.read(reader, v);
      value.set_horizontalSpeed(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _verticalSpeed_Type.read(reader, v);
      value.set_verticalSpeed(v);
   }

   reader.readSequenceEnd(*this);
}

void HorizontalWithVerticalVelocity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _verticalSpeedDirection_Type.write(writer, value.get_verticalSpeedDirection());
   _bearing_Type.write(writer, value.get_bearing());
   _horizontalSpeed_Type.write(writer, value.get_horizontalSpeed());
   _verticalSpeed_Type.write(writer, value.get_verticalSpeed());

   writer.writeSequenceEnd();
}


void HorizontalVelocityWithUncertainty::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _bearing_Type.read(reader, v);
      value.set_bearing(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _horizontalSpeed_Type.read(reader, v);
      value.set_horizontalSpeed(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _horizontalSpeedUncertainty_Type.read(reader, v);
      value.set_horizontalSpeedUncertainty(v);
   }

   reader.readSequenceEnd(*this);
}

void HorizontalVelocityWithUncertainty::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _bearing_Type.write(writer, value.get_bearing());
   _horizontalSpeed_Type.write(writer, value.get_horizontalSpeed());
   _horizontalSpeedUncertainty_Type.write(writer, value.get_horizontalSpeedUncertainty());

   writer.writeSequenceEnd();
}


void HorizontalWithVerticalVelocityAndUncertainty::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__EnumeratedType::ValueType v;
      _verticalSpeedDirection_Type.read(reader, v);
      value.set_verticalSpeedDirection(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _bearing_Type.read(reader, v);
      value.set_bearing(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _horizontalSpeed_Type.read(reader, v);
      value.set_horizontalSpeed(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _verticalSpeed_Type.read(reader, v);
      value.set_verticalSpeed(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _horizontalSpeedUncertainty_Type.read(reader, v);
      value.set_horizontalSpeedUncertainty(v);
   }

   reader.readSequenceEnd(*this);
}

void HorizontalWithVerticalVelocityAndUncertainty::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _verticalSpeedDirection_Type.write(writer, value.get_verticalSpeedDirection());
   _bearing_Type.write(writer, value.get_bearing());
   _horizontalSpeed_Type.write(writer, value.get_horizontalSpeed());
   _verticalSpeed_Type.write(writer, value.get_verticalSpeed());
   _horizontalSpeedUncertainty_Type.write(writer, value.get_horizontalSpeedUncertainty());

   writer.writeSequenceEnd();
}


void InterFreqCell::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::CellMeasurementEventResults::ValueType v;
      _nonFreqRelatedEventResults_Type.read(reader, v);
      value.set_nonFreqRelatedEventResults(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqCell::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _nonFreqRelatedEventResults_Type.write(writer, value.get_nonFreqRelatedEventResults());

   writer.writeSequenceEnd();
}


void InterFreqCell_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::CellMeasurementEventResults_LCR_r4::ValueType v;
      _nonFreqRelatedEventResults_Type.read(reader, v);
      value.set_nonFreqRelatedEventResults(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqCell_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _nonFreqRelatedEventResults_Type.write(writer, value.get_nonFreqRelatedEventResults());

   writer.writeSequenceEnd();
}


void InterFreqCellInfoList::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedInterFreqCellList::ValueType v;
      _removedInterFreqCellList_Type.read(reader, v);
      value.set_removedInterFreqCellList(v);
   }
   {
      asn1::generated::NewInterFreqCellList::ValueType v;
      _newInterFreqCellList_Type.read(reader, v);
      value.set_newInterFreqCellList(v);
   }
   {
      asn1::generated::CellsForInterFreqMeasList::ValueType v;
      _cellsForInterFreqMeasList_Type.read(reader, v);
      value.set_cellsForInterFreqMeasList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqCellInfoList::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedInterFreqCellList_Type.write(writer, value.get_removedInterFreqCellList());
   _newInterFreqCellList_Type.write(writer, value.get_newInterFreqCellList());
   _cellsForInterFreqMeasList_Type.write(writer, value.get_cellsForInterFreqMeasList());

   writer.writeSequenceEnd();
}


void InterFreqCellInfoList_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedInterFreqCellList::ValueType v;
      _removedInterFreqCellList_Type.read(reader, v);
      value.set_removedInterFreqCellList(v);
   }
   {
      asn1::generated::NewInterFreqCellList_r4::ValueType v;
      _newInterFreqCellList_Type.read(reader, v);
      value.set_newInterFreqCellList(v);
   }
   {
      asn1::generated::CellsForInterFreqMeasList::ValueType v;
      _cellsForInterFreqMeasList_Type.read(reader, v);
      value.set_cellsForInterFreqMeasList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqCellInfoList_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedInterFreqCellList_Type.write(writer, value.get_removedInterFreqCellList());
   _newInterFreqCellList_Type.write(writer, value.get_newInterFreqCellList());
   _cellsForInterFreqMeasList_Type.write(writer, value.get_cellsForInterFreqMeasList());

   writer.writeSequenceEnd();
}


void InterFreqCellInfoSI_List_RSCP::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedInterFreqCellList::ValueType v;
      _removedInterFreqCellList_Type.read(reader, v);
      value.set_removedInterFreqCellList(v);
   }
   {
      asn1::generated::NewInterFreqCellSI_List_RSCP::ValueType v;
      _newInterFreqCellList_Type.read(reader, v);
      value.set_newInterFreqCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqCellInfoSI_List_RSCP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedInterFreqCellList_Type.write(writer, value.get_removedInterFreqCellList());
   _newInterFreqCellList_Type.write(writer, value.get_newInterFreqCellList());

   writer.writeSequenceEnd();
}


void InterFreqCellInfoSI_List_ECN0::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedInterFreqCellList::ValueType v;
      _removedInterFreqCellList_Type.read(reader, v);
      value.set_removedInterFreqCellList(v);
   }
   {
      asn1::generated::NewInterFreqCellSI_List_ECN0::ValueType v;
      _newInterFreqCellList_Type.read(reader, v);
      value.set_newInterFreqCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqCellInfoSI_List_ECN0::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedInterFreqCellList_Type.write(writer, value.get_removedInterFreqCellList());
   _newInterFreqCellList_Type.write(writer, value.get_newInterFreqCellList());

   writer.writeSequenceEnd();
}


void InterFreqCellInfoSI_List_HCS_RSCP::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedInterFreqCellList::ValueType v;
      _removedInterFreqCellList_Type.read(reader, v);
      value.set_removedInterFreqCellList(v);
   }
   {
      asn1::generated::NewInterFreqCellSI_List_HCS_RSCP::ValueType v;
      _newInterFreqCellList_Type.read(reader, v);
      value.set_newInterFreqCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqCellInfoSI_List_HCS_RSCP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedInterFreqCellList_Type.write(writer, value.get_removedInterFreqCellList());
   _newInterFreqCellList_Type.write(writer, value.get_newInterFreqCellList());

   writer.writeSequenceEnd();
}


void InterFreqCellInfoSI_List_HCS_ECN0::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedInterFreqCellList::ValueType v;
      _removedInterFreqCellList_Type.read(reader, v);
      value.set_removedInterFreqCellList(v);
   }
   {
      asn1::generated::NewInterFreqCellSI_List_HCS_ECN0::ValueType v;
      _newInterFreqCellList_Type.read(reader, v);
      value.set_newInterFreqCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqCellInfoSI_List_HCS_ECN0::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedInterFreqCellList_Type.write(writer, value.get_removedInterFreqCellList());
   _newInterFreqCellList_Type.write(writer, value.get_newInterFreqCellList());

   writer.writeSequenceEnd();
}


void InterFreqCellInfoSI_List_RSCP_LCR::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedInterFreqCellList::ValueType v;
      _removedInterFreqCellList_Type.read(reader, v);
      value.set_removedInterFreqCellList(v);
   }
   {
      asn1::generated::NewInterFreqCellSI_List_RSCP_LCR_r4::ValueType v;
      _newInterFreqCellList_Type.read(reader, v);
      value.set_newInterFreqCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqCellInfoSI_List_RSCP_LCR::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedInterFreqCellList_Type.write(writer, value.get_removedInterFreqCellList());
   _newInterFreqCellList_Type.write(writer, value.get_newInterFreqCellList());

   writer.writeSequenceEnd();
}


void InterFreqCellInfoSI_List_ECN0_LCR::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedInterFreqCellList::ValueType v;
      _removedInterFreqCellList_Type.read(reader, v);
      value.set_removedInterFreqCellList(v);
   }
   {
      asn1::generated::NewInterFreqCellSI_List_ECN0_LCR_r4::ValueType v;
      _newInterFreqCellList_Type.read(reader, v);
      value.set_newInterFreqCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqCellInfoSI_List_ECN0_LCR::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedInterFreqCellList_Type.write(writer, value.get_removedInterFreqCellList());
   _newInterFreqCellList_Type.write(writer, value.get_newInterFreqCellList());

   writer.writeSequenceEnd();
}


void InterFreqCellInfoSI_List_HCS_RSCP_LCR::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedInterFreqCellList::ValueType v;
      _removedInterFreqCellList_Type.read(reader, v);
      value.set_removedInterFreqCellList(v);
   }
   {
      asn1::generated::NewInterFreqCellSI_List_HCS_RSCP_LCR_r4::ValueType v;
      _newInterFreqCellList_Type.read(reader, v);
      value.set_newInterFreqCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqCellInfoSI_List_HCS_RSCP_LCR::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedInterFreqCellList_Type.write(writer, value.get_removedInterFreqCellList());
   _newInterFreqCellList_Type.write(writer, value.get_newInterFreqCellList());

   writer.writeSequenceEnd();
}


void InterFreqCellInfoSI_List_HCS_ECN0_LCR::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedInterFreqCellList::ValueType v;
      _removedInterFreqCellList_Type.read(reader, v);
      value.set_removedInterFreqCellList(v);
   }
   {
      asn1::generated::NewInterFreqCellSI_List_HCS_ECN0_LCR_r4::ValueType v;
      _newInterFreqCellList_Type.read(reader, v);
      value.set_newInterFreqCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqCellInfoSI_List_HCS_ECN0_LCR::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedInterFreqCellList_Type.write(writer, value.get_removedInterFreqCellList());
   _newInterFreqCellList_Type.write(writer, value.get_newInterFreqCellList());

   writer.writeSequenceEnd();
}


void InterFreqEvent::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_event2a_Type)
   {
      asn1::generated::Event2a::ValueType v;
      _event2a_Type.read(reader, v);
      value.set_event2a(v);
   }
   else if (choosenType == &_event2b_Type)
   {
      asn1::generated::Event2b::ValueType v;
      _event2b_Type.read(reader, v);
      value.set_event2b(v);
   }
   else if (choosenType == &_event2c_Type)
   {
      asn1::generated::Event2c::ValueType v;
      _event2c_Type.read(reader, v);
      value.set_event2c(v);
   }
   else if (choosenType == &_event2d_Type)
   {
      asn1::generated::Event2d::ValueType v;
      _event2d_Type.read(reader, v);
      value.set_event2d(v);
   }
   else if (choosenType == &_event2e_Type)
   {
      asn1::generated::Event2e::ValueType v;
      _event2e_Type.read(reader, v);
      value.set_event2e(v);
   }
   else if (choosenType == &_event2f_Type)
   {
      asn1::generated::Event2f::ValueType v;
      _event2f_Type.read(reader, v);
      value.set_event2f(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _event2a_Type.toString() + ", " + _event2b_Type.toString() + ", " + _event2c_Type.toString() + ", " + _event2d_Type.toString() + ", " + _event2e_Type.toString() + ", " + _event2f_Type.toString());
   }
}

void InterFreqEvent::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_event2a_Choosen())
      _event2a_Type.write(writer, value.get_event2a());
   else if (value.has_event2b_Choosen())
      _event2b_Type.write(writer, value.get_event2b());
   else if (value.has_event2c_Choosen())
      _event2c_Type.write(writer, value.get_event2c());
   else if (value.has_event2d_Choosen())
      _event2d_Type.write(writer, value.get_event2d());
   else if (value.has_event2e_Choosen())
      _event2e_Type.write(writer, value.get_event2e());
   else if (value.has_event2f_Choosen())
      _event2f_Type.write(writer, value.get_event2f());
}


void InterFreqEvent-r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_event2a_Type)
   {
      asn1::generated::Event2a_r6::ValueType v;
      _event2a_Type.read(reader, v);
      value.set_event2a(v);
   }
   else if (choosenType == &_event2b_Type)
   {
      asn1::generated::Event2b_r6::ValueType v;
      _event2b_Type.read(reader, v);
      value.set_event2b(v);
   }
   else if (choosenType == &_event2c_Type)
   {
      asn1::generated::Event2c_r6::ValueType v;
      _event2c_Type.read(reader, v);
      value.set_event2c(v);
   }
   else if (choosenType == &_event2d_Type)
   {
      asn1::generated::Event2d_r6::ValueType v;
      _event2d_Type.read(reader, v);
      value.set_event2d(v);
   }
   else if (choosenType == &_event2e_Type)
   {
      asn1::generated::Event2e_r6::ValueType v;
      _event2e_Type.read(reader, v);
      value.set_event2e(v);
   }
   else if (choosenType == &_event2f_Type)
   {
      asn1::generated::Event2f_r6::ValueType v;
      _event2f_Type.read(reader, v);
      value.set_event2f(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _event2a_Type.toString() + ", " + _event2b_Type.toString() + ", " + _event2c_Type.toString() + ", " + _event2d_Type.toString() + ", " + _event2e_Type.toString() + ", " + _event2f_Type.toString());
   }
}

void InterFreqEvent-r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_event2a_Choosen())
      _event2a_Type.write(writer, value.get_event2a());
   else if (value.has_event2b_Choosen())
      _event2b_Type.write(writer, value.get_event2b());
   else if (value.has_event2c_Choosen())
      _event2c_Type.write(writer, value.get_event2c());
   else if (value.has_event2d_Choosen())
      _event2d_Type.write(writer, value.get_event2d());
   else if (value.has_event2e_Choosen())
      _event2e_Type.write(writer, value.get_event2e());
   else if (value.has_event2f_Choosen())
      _event2f_Type.write(writer, value.get_event2f());
}


void Inter_FreqEventCriteria_v590ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DeltaRSCP::ValueType v;
      _threholdUsedFrequency_delta_Type.read(reader, v);
      value.set_threholdUsedFrequency_delta(v);
   }
   {
      asn1::generated::ThreholdNonUsedFrequency_deltaList::ValueType v;
      _threholdNonUsedFrequency_deltaList_Type.read(reader, v);
      value.set_threholdNonUsedFrequency_deltaList(v);
   }

   reader.readSequenceEnd(*this);
}

void Inter_FreqEventCriteria_v590ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _threholdUsedFrequency_delta_Type.write(writer, value.get_threholdUsedFrequency_delta());
   _threholdNonUsedFrequency_deltaList_Type.write(writer, value.get_threholdNonUsedFrequency_deltaList());

   writer.writeSequenceEnd();
}


void IntraFreqReportingCriteria_1b_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PeriodicReportingInfo_1b::ValueType v;
      _periodicReportingInfo_1b_Type.read(reader, v);
      value.set_periodicReportingInfo_1b(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqReportingCriteria_1b_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _periodicReportingInfo_1b_Type.write(writer, value.get_periodicReportingInfo_1b());

   writer.writeSequenceEnd();
}


void PeriodicReportingInfo_1b::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ReportingAmount::ValueType v;
      _reportingAmount_Type.read(reader, v);
      value.set_reportingAmount(v);
   }
   {
      asn1::generated::ReportingInterval::ValueType v;
      _reportingInterval_Type.read(reader, v);
      value.set_reportingInterval(v);
   }

   reader.readSequenceEnd(*this);
}

void PeriodicReportingInfo_1b::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _reportingAmount_Type.write(writer, value.get_reportingAmount());
   _reportingInterval_Type.write(writer, value.get_reportingInterval());

   writer.writeSequenceEnd();
}


void InterFreqEventResults::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::EventIDInterFreq::ValueType v;
      _eventID_Type.read(reader, v);
      value.set_eventID(v);
   }
   {
      asn1::generated::InterFreqCellList::ValueType v;
      _interFreqCellList_Type.read(reader, v);
      value.set_interFreqCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqEventResults::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _eventID_Type.write(writer, value.get_eventID());
   _interFreqCellList_Type.write(writer, value.get_interFreqCellList());

   writer.writeSequenceEnd();
}


void InterFreqEventResults_LCR_r4_ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::EventIDInterFreq::ValueType v;
      _eventID_Type.read(reader, v);
      value.set_eventID(v);
   }
   {
      asn1::generated::InterFreqCellList_LCR_r4_ext::ValueType v;
      _interFreqCellList_Type.read(reader, v);
      value.set_interFreqCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqEventResults_LCR_r4_ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _eventID_Type.write(writer, value.get_eventID());
   _interFreqCellList_Type.write(writer, value.get_interFreqCellList());

   writer.writeSequenceEnd();
}


void InterFreqMeasQuantity::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_intraFreqReportingCriteria_INTERNAL__SequenceType_intraFreqMeasQuantity_INTERNAL_asn1__generated__IntraFreqMeasQuantity_interFreqReportingCriteria_INTERNAL__SequenceType_filterCoefficient_INTERNAL_asn1__generated__FilterCoefficient_modeSpecificInfo_INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_freqQualityEstimateQuantity-FDD_INTERNAL_asn1__generated__FreqQualityEstimateQuantity_FDD_tdd_INTERNAL__SequenceType_freqQualityEstimateQuantity-TDD_INTERNAL_asn1__generated__FreqQualityEstimateQuantity_TDD::ValueType v;
      _reportingCriteria_Type.read(reader, v);
      value.set_reportingCriteria(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqMeasQuantity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _reportingCriteria_Type.write(writer, value.get_reportingCriteria());

   writer.writeSequenceEnd();
}


void InterFreqMeasuredResults::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::UTRA_CarrierRSSI::ValueType v;
      _utra_CarrierRSSI_Type.read(reader, v);
      value.set_utra_CarrierRSSI(v);
   }
   {
      asn1::generated::InterFreqCellMeasuredResultsList::ValueType v;
      _interFreqCellMeasuredResultsList_Type.read(reader, v);
      value.set_interFreqCellMeasuredResultsList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqMeasuredResults::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _utra_CarrierRSSI_Type.write(writer, value.get_utra_CarrierRSSI());
   _interFreqCellMeasuredResultsList_Type.write(writer, value.get_interFreqCellMeasuredResultsList());

   writer.writeSequenceEnd();
}


void InterFreqMeasurementSysInfo_RSCP::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqCellInfoSI_List_RSCP::ValueType v;
      _interFreqCellInfoSI_List_Type.read(reader, v);
      value.set_interFreqCellInfoSI_List(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqMeasurementSysInfo_RSCP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellInfoSI_List_Type.write(writer, value.get_interFreqCellInfoSI_List());

   writer.writeSequenceEnd();
}


void InterFreqMeasurementSysInfo_ECN0::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqCellInfoSI_List_ECN0::ValueType v;
      _interFreqCellInfoSI_List_Type.read(reader, v);
      value.set_interFreqCellInfoSI_List(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqMeasurementSysInfo_ECN0::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellInfoSI_List_Type.write(writer, value.get_interFreqCellInfoSI_List());

   writer.writeSequenceEnd();
}


void InterFreqMeasurementSysInfo_HCS_RSCP::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqCellInfoSI_List_HCS_RSCP::ValueType v;
      _interFreqCellInfoSI_List_Type.read(reader, v);
      value.set_interFreqCellInfoSI_List(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqMeasurementSysInfo_HCS_RSCP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellInfoSI_List_Type.write(writer, value.get_interFreqCellInfoSI_List());

   writer.writeSequenceEnd();
}


void InterFreqMeasurementSysInfo_HCS_ECN0::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqCellInfoSI_List_HCS_ECN0::ValueType v;
      _interFreqCellInfoSI_List_Type.read(reader, v);
      value.set_interFreqCellInfoSI_List(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqMeasurementSysInfo_HCS_ECN0::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellInfoSI_List_Type.write(writer, value.get_interFreqCellInfoSI_List());

   writer.writeSequenceEnd();
}


void InterFreqMeasurementSysInfo_RSCP_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqCellInfoSI_List_RSCP_LCR::ValueType v;
      _interFreqCellInfoSI_List_Type.read(reader, v);
      value.set_interFreqCellInfoSI_List(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqMeasurementSysInfo_RSCP_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellInfoSI_List_Type.write(writer, value.get_interFreqCellInfoSI_List());

   writer.writeSequenceEnd();
}


void InterFreqMeasurementSysInfo_ECN0_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqCellInfoSI_List_ECN0_LCR::ValueType v;
      _interFreqCellInfoSI_List_Type.read(reader, v);
      value.set_interFreqCellInfoSI_List(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqMeasurementSysInfo_ECN0_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellInfoSI_List_Type.write(writer, value.get_interFreqCellInfoSI_List());

   writer.writeSequenceEnd();
}


void InterFreqMeasurementSysInfo_HCS_RSCP_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqCellInfoSI_List_HCS_RSCP_LCR::ValueType v;
      _interFreqCellInfoSI_List_Type.read(reader, v);
      value.set_interFreqCellInfoSI_List(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqMeasurementSysInfo_HCS_RSCP_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellInfoSI_List_Type.write(writer, value.get_interFreqCellInfoSI_List());

   writer.writeSequenceEnd();
}


void InterFreqMeasurementSysInfo_HCS_ECN0_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqCellInfoSI_List_HCS_ECN0_LCR::ValueType v;
      _interFreqCellInfoSI_List_Type.read(reader, v);
      value.set_interFreqCellInfoSI_List(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqMeasurementSysInfo_HCS_ECN0_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellInfoSI_List_Type.write(writer, value.get_interFreqCellInfoSI_List());

   writer.writeSequenceEnd();
}


void InterFreqRACHReportingInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_interFreqRepQuantityRACH-FDD_INTERNAL_asn1__generated__InterFreqRepQuantityRACH_FDD_tdd_INTERNAL__SequenceType_interFreqRepQuantityRACH-TDDList_INTERNAL_asn1__generated__InterFreqRepQuantityRACH_TDDList_interFreqRACHReportingThreshold_INTERNAL_asn1__generated__Threshold_maxReportedCellsOnRACHinterFreq_INTERNAL_asn1__generated__MaxReportedCellsOnRACHinterFreq::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqRACHReportingInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void InterFreqReportCriteria::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_intraFreqReportingCriteria_Type)
   {
      asn1::generated::IntraFreqReportingCriteria::ValueType v;
      _intraFreqReportingCriteria_Type.read(reader, v);
      value.set_intraFreqReportingCriteria(v);
   }
   else if (choosenType == &_interFreqReportingCriteria_Type)
   {
      asn1::generated::InterFreqReportingCriteria::ValueType v;
      _interFreqReportingCriteria_Type.read(reader, v);
      value.set_interFreqReportingCriteria(v);
   }
   else if (choosenType == &_periodicalReportingCriteria_Type)
   {
      asn1::generated::PeriodicalWithReportingCellStatus::ValueType v;
      _periodicalReportingCriteria_Type.read(reader, v);
      value.set_periodicalReportingCriteria(v);
   }
   else if (choosenType == &_noReporting_Type)
   {
      asn1::generated::ReportingCellStatusOpt::ValueType v;
      _noReporting_Type.read(reader, v);
      value.set_noReporting(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _intraFreqReportingCriteria_Type.toString() + ", " + _interFreqReportingCriteria_Type.toString() + ", " + _periodicalReportingCriteria_Type.toString() + ", " + _noReporting_Type.toString());
   }
}

void InterFreqReportCriteria::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_intraFreqReportingCriteria_Choosen())
      _intraFreqReportingCriteria_Type.write(writer, value.get_intraFreqReportingCriteria());
   else if (value.has_interFreqReportingCriteria_Choosen())
      _interFreqReportingCriteria_Type.write(writer, value.get_interFreqReportingCriteria());
   else if (value.has_periodicalReportingCriteria_Choosen())
      _periodicalReportingCriteria_Type.write(writer, value.get_periodicalReportingCriteria());
   else if (value.has_noReporting_Choosen())
      _noReporting_Type.write(writer, value.get_noReporting());
}


void InterFreqReportCriteria-r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_intraFreqReportingCriteria_Type)
   {
      asn1::generated::IntraFreqReportingCriteria_r4::ValueType v;
      _intraFreqReportingCriteria_Type.read(reader, v);
      value.set_intraFreqReportingCriteria(v);
   }
   else if (choosenType == &_interFreqReportingCriteria_Type)
   {
      asn1::generated::InterFreqReportingCriteria::ValueType v;
      _interFreqReportingCriteria_Type.read(reader, v);
      value.set_interFreqReportingCriteria(v);
   }
   else if (choosenType == &_periodicalReportingCriteria_Type)
   {
      asn1::generated::PeriodicalWithReportingCellStatus::ValueType v;
      _periodicalReportingCriteria_Type.read(reader, v);
      value.set_periodicalReportingCriteria(v);
   }
   else if (choosenType == &_noReporting_Type)
   {
      asn1::generated::ReportingCellStatusOpt::ValueType v;
      _noReporting_Type.read(reader, v);
      value.set_noReporting(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _intraFreqReportingCriteria_Type.toString() + ", " + _interFreqReportingCriteria_Type.toString() + ", " + _periodicalReportingCriteria_Type.toString() + ", " + _noReporting_Type.toString());
   }
}

void InterFreqReportCriteria-r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_intraFreqReportingCriteria_Choosen())
      _intraFreqReportingCriteria_Type.write(writer, value.get_intraFreqReportingCriteria());
   else if (value.has_interFreqReportingCriteria_Choosen())
      _interFreqReportingCriteria_Type.write(writer, value.get_interFreqReportingCriteria());
   else if (value.has_periodicalReportingCriteria_Choosen())
      _periodicalReportingCriteria_Type.write(writer, value.get_periodicalReportingCriteria());
   else if (value.has_noReporting_Choosen())
      _noReporting_Type.write(writer, value.get_noReporting());
}


void InterFreqReportCriteria-r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_intraFreqReportingCriteria_Type)
   {
      asn1::generated::IntraFreqReportingCriteria_r6::ValueType v;
      _intraFreqReportingCriteria_Type.read(reader, v);
      value.set_intraFreqReportingCriteria(v);
   }
   else if (choosenType == &_interFreqReportingCriteria_Type)
   {
      asn1::generated::InterFreqReportingCriteria_r6::ValueType v;
      _interFreqReportingCriteria_Type.read(reader, v);
      value.set_interFreqReportingCriteria(v);
   }
   else if (choosenType == &_periodicalReportingCriteria_Type)
   {
      asn1::generated::PeriodicalWithReportingCellStatus::ValueType v;
      _periodicalReportingCriteria_Type.read(reader, v);
      value.set_periodicalReportingCriteria(v);
   }
   else if (choosenType == &_noReporting_Type)
   {
      asn1::generated::ReportingCellStatusOpt::ValueType v;
      _noReporting_Type.read(reader, v);
      value.set_noReporting(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _intraFreqReportingCriteria_Type.toString() + ", " + _interFreqReportingCriteria_Type.toString() + ", " + _periodicalReportingCriteria_Type.toString() + ", " + _noReporting_Type.toString());
   }
}

void InterFreqReportCriteria-r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_intraFreqReportingCriteria_Choosen())
      _intraFreqReportingCriteria_Type.write(writer, value.get_intraFreqReportingCriteria());
   else if (value.has_interFreqReportingCriteria_Choosen())
      _interFreqReportingCriteria_Type.write(writer, value.get_interFreqReportingCriteria());
   else if (value.has_periodicalReportingCriteria_Choosen())
      _periodicalReportingCriteria_Type.write(writer, value.get_periodicalReportingCriteria());
   else if (value.has_noReporting_Choosen())
      _noReporting_Type.write(writer, value.get_noReporting());
}


void InterFreqReportingCriteria::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqEventList::ValueType v;
      _interFreqEventList_Type.read(reader, v);
      value.set_interFreqEventList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqReportingCriteria::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqEventList_Type.write(writer, value.get_interFreqEventList());

   writer.writeSequenceEnd();
}


void InterFreqReportingCriteria_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqEventList_r6::ValueType v;
      _interFreqEventList_Type.read(reader, v);
      value.set_interFreqEventList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqReportingCriteria_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqEventList_Type.write(writer, value.get_interFreqEventList());

   writer.writeSequenceEnd();
}


void InterFreqReportingQuantity::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _utra_Carrier_RSSI_Type.read(reader, v);
      value.set_utra_Carrier_RSSI(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _frequencyQualityEstimate_Type.read(reader, v);
      value.set_frequencyQualityEstimate(v);
   }
   {
      asn1::generated::CellReportingQuantities::ValueType v;
      _nonFreqRelatedQuantities_Type.read(reader, v);
      value.set_nonFreqRelatedQuantities(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFreqReportingQuantity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _utra_Carrier_RSSI_Type.write(writer, value.get_utra_Carrier_RSSI());
   _frequencyQualityEstimate_Type.write(writer, value.get_frequencyQualityEstimate());
   _nonFreqRelatedQuantities_Type.write(writer, value.get_nonFreqRelatedQuantities());

   writer.writeSequenceEnd();
}


void InterFrequencyMeasurement::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqCellInfoList::ValueType v;
      _interFreqCellInfoList_Type.read(reader, v);
      value.set_interFreqCellInfoList(v);
   }
   {
      asn1::generated::InterFreqMeasQuantity::ValueType v;
      _interFreqMeasQuantity_Type.read(reader, v);
      value.set_interFreqMeasQuantity(v);
   }
   {
      asn1::generated::InterFreqReportingQuantity::ValueType v;
      _interFreqReportingQuantity_Type.read(reader, v);
      value.set_interFreqReportingQuantity(v);
   }
   {
      asn1::generated::MeasurementValidity::ValueType v;
      _measurementValidity_Type.read(reader, v);
      value.set_measurementValidity(v);
   }
   {
      asn1::generated::UE_AutonomousUpdateMode::ValueType v;
      _interFreqSetUpdate_Type.read(reader, v);
      value.set_interFreqSetUpdate(v);
   }
   {
      asn1::generated::InterFreqReportCriteria::ValueType v;
      _reportCriteria_Type.read(reader, v);
      value.set_reportCriteria(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFrequencyMeasurement::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellInfoList_Type.write(writer, value.get_interFreqCellInfoList());
   _interFreqMeasQuantity_Type.write(writer, value.get_interFreqMeasQuantity());
   _interFreqReportingQuantity_Type.write(writer, value.get_interFreqReportingQuantity());
   _measurementValidity_Type.write(writer, value.get_measurementValidity());
   _interFreqSetUpdate_Type.write(writer, value.get_interFreqSetUpdate());
   _reportCriteria_Type.write(writer, value.get_reportCriteria());

   writer.writeSequenceEnd();
}


void InterFrequencyMeasurement_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqCellInfoList_r4::ValueType v;
      _interFreqCellInfoList_Type.read(reader, v);
      value.set_interFreqCellInfoList(v);
   }
   {
      asn1::generated::InterFreqMeasQuantity::ValueType v;
      _interFreqMeasQuantity_Type.read(reader, v);
      value.set_interFreqMeasQuantity(v);
   }
   {
      asn1::generated::InterFreqReportingQuantity::ValueType v;
      _interFreqReportingQuantity_Type.read(reader, v);
      value.set_interFreqReportingQuantity(v);
   }
   {
      asn1::generated::MeasurementValidity::ValueType v;
      _measurementValidity_Type.read(reader, v);
      value.set_measurementValidity(v);
   }
   {
      asn1::generated::UE_AutonomousUpdateMode::ValueType v;
      _interFreqSetUpdate_Type.read(reader, v);
      value.set_interFreqSetUpdate(v);
   }
   {
      asn1::generated::InterFreqReportCriteria_r4::ValueType v;
      _reportCriteria_Type.read(reader, v);
      value.set_reportCriteria(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFrequencyMeasurement_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellInfoList_Type.write(writer, value.get_interFreqCellInfoList());
   _interFreqMeasQuantity_Type.write(writer, value.get_interFreqMeasQuantity());
   _interFreqReportingQuantity_Type.write(writer, value.get_interFreqReportingQuantity());
   _measurementValidity_Type.write(writer, value.get_measurementValidity());
   _interFreqSetUpdate_Type.write(writer, value.get_interFreqSetUpdate());
   _reportCriteria_Type.write(writer, value.get_reportCriteria());

   writer.writeSequenceEnd();
}


void InterFrequencyMeasurement_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqCellInfoList_r4::ValueType v;
      _interFreqCellInfoList_Type.read(reader, v);
      value.set_interFreqCellInfoList(v);
   }
   {
      asn1::generated::InterFreqMeasQuantity::ValueType v;
      _interFreqMeasQuantity_Type.read(reader, v);
      value.set_interFreqMeasQuantity(v);
   }
   {
      asn1::generated::InterFreqReportingQuantity::ValueType v;
      _interFreqReportingQuantity_Type.read(reader, v);
      value.set_interFreqReportingQuantity(v);
   }
   {
      asn1::generated::MeasurementValidity::ValueType v;
      _measurementValidity_Type.read(reader, v);
      value.set_measurementValidity(v);
   }
   {
      asn1::generated::UE_AutonomousUpdateMode::ValueType v;
      _interFreqSetUpdate_Type.read(reader, v);
      value.set_interFreqSetUpdate(v);
   }
   {
      asn1::generated::InterFreqReportCriteria_r6::ValueType v;
      _reportCriteria_Type.read(reader, v);
      value.set_reportCriteria(v);
   }

   reader.readSequenceEnd(*this);
}

void InterFrequencyMeasurement_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellInfoList_Type.write(writer, value.get_interFreqCellInfoList());
   _interFreqMeasQuantity_Type.write(writer, value.get_interFreqMeasQuantity());
   _interFreqReportingQuantity_Type.write(writer, value.get_interFreqReportingQuantity());
   _measurementValidity_Type.write(writer, value.get_measurementValidity());
   _interFreqSetUpdate_Type.write(writer, value.get_interFreqSetUpdate());
   _reportCriteria_Type.write(writer, value.get_reportCriteria());

   writer.writeSequenceEnd();
}


void InterRAT_TargetCellDescription::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_gsm_INTERNAL__SequenceType_bsic_INTERNAL_asn1__generated__BSIC_frequency-band_INTERNAL_asn1__generated__Frequency_Band_bcch-ARFCN_INTERNAL_asn1__generated__BCCH_ARFCN_ncMode_INTERNAL_asn1__generated__NC_Mode_is-2000_INTERNAL_asn1__NullType_spare2_INTERNAL_asn1__NullType_spare1_INTERNAL_asn1__NullType::ValueType v;
      _technologySpecificInfo_Type.read(reader, v);
      value.set_technologySpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRAT_TargetCellDescription::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _technologySpecificInfo_Type.write(writer, value.get_technologySpecificInfo());

   writer.writeSequenceEnd();
}


void InterRATCellInfoList::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedInterRATCellList::ValueType v;
      _removedInterRATCellList_Type.read(reader, v);
      value.set_removedInterRATCellList(v);
   }
   {
      asn1::generated::NewInterRATCellList::ValueType v;
      _newInterRATCellList_Type.read(reader, v);
      value.set_newInterRATCellList(v);
   }
   {
      asn1::generated::CellsForInterRATMeasList::ValueType v;
      _cellsForInterRATMeasList_Type.read(reader, v);
      value.set_cellsForInterRATMeasList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATCellInfoList::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedInterRATCellList_Type.write(writer, value.get_removedInterRATCellList());
   _newInterRATCellList_Type.write(writer, value.get_newInterRATCellList());
   _cellsForInterRATMeasList_Type.write(writer, value.get_cellsForInterRATMeasList());

   writer.writeSequenceEnd();
}


void InterRATCellInfoList_B::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedInterRATCellList::ValueType v;
      _removedInterRATCellList_Type.read(reader, v);
      value.set_removedInterRATCellList(v);
   }
   {
      asn1::generated::NewInterRATCellList_B::ValueType v;
      _newInterRATCellList_Type.read(reader, v);
      value.set_newInterRATCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATCellInfoList_B::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedInterRATCellList_Type.write(writer, value.get_removedInterRATCellList());
   _newInterRATCellList_Type.write(writer, value.get_newInterRATCellList());

   writer.writeSequenceEnd();
}


void InterRATCellInfoList_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedInterRATCellList::ValueType v;
      _removedInterRATCellList_Type.read(reader, v);
      value.set_removedInterRATCellList(v);
   }
   {
      asn1::generated::NewInterRATCellList::ValueType v;
      _newInterRATCellList_Type.read(reader, v);
      value.set_newInterRATCellList(v);
   }
   {
      asn1::generated::CellsForInterRATMeasList::ValueType v;
      _cellsForInterRATMeasList_Type.read(reader, v);
      value.set_cellsForInterRATMeasList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATCellInfoList_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedInterRATCellList_Type.write(writer, value.get_removedInterRATCellList());
   _newInterRATCellList_Type.write(writer, value.get_newInterRATCellList());
   _cellsForInterRATMeasList_Type.write(writer, value.get_cellsForInterRATMeasList());

   writer.writeSequenceEnd();
}


void InterRATCellInfoList_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedInterRATCellList::ValueType v;
      _removedInterRATCellList_Type.read(reader, v);
      value.set_removedInterRATCellList(v);
   }
   {
      asn1::generated::NewInterRATCellList::ValueType v;
      _newInterRATCellList_Type.read(reader, v);
      value.set_newInterRATCellList(v);
   }
   {
      asn1::generated::CellsForInterRATMeasList::ValueType v;
      _cellsForInterRATMeasList_Type.read(reader, v);
      value.set_cellsForInterRATMeasList(v);
   }
   {
      asn1::generated::InterRATCellInfoIndication::ValueType v;
      _interRATCellInfoIndication_r6_Type.read(reader, v);
      value.set_interRATCellInfoIndication_r6(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATCellInfoList_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedInterRATCellList_Type.write(writer, value.get_removedInterRATCellList());
   _newInterRATCellList_Type.write(writer, value.get_newInterRATCellList());
   _cellsForInterRATMeasList_Type.write(writer, value.get_cellsForInterRATMeasList());
   _interRATCellInfoIndication_r6_Type.write(writer, value.get_interRATCellInfoIndication_r6());

   writer.writeSequenceEnd();
}


void InterRATEvent::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_event3a_Type)
   {
      asn1::generated::Event3a::ValueType v;
      _event3a_Type.read(reader, v);
      value.set_event3a(v);
   }
   else if (choosenType == &_event3b_Type)
   {
      asn1::generated::Event3b::ValueType v;
      _event3b_Type.read(reader, v);
      value.set_event3b(v);
   }
   else if (choosenType == &_event3c_Type)
   {
      asn1::generated::Event3c::ValueType v;
      _event3c_Type.read(reader, v);
      value.set_event3c(v);
   }
   else if (choosenType == &_event3d_Type)
   {
      asn1::generated::Event3d::ValueType v;
      _event3d_Type.read(reader, v);
      value.set_event3d(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _event3a_Type.toString() + ", " + _event3b_Type.toString() + ", " + _event3c_Type.toString() + ", " + _event3d_Type.toString());
   }
}

void InterRATEvent::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_event3a_Choosen())
      _event3a_Type.write(writer, value.get_event3a());
   else if (value.has_event3b_Choosen())
      _event3b_Type.write(writer, value.get_event3b());
   else if (value.has_event3c_Choosen())
      _event3c_Type.write(writer, value.get_event3c());
   else if (value.has_event3d_Choosen())
      _event3d_Type.write(writer, value.get_event3d());
}


void InterRATEventResults::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::EventIDInterRAT::ValueType v;
      _eventID_Type.read(reader, v);
      value.set_eventID(v);
   }
   {
      asn1::generated::CellToReportList::ValueType v;
      _cellToReportList_Type.read(reader, v);
      value.set_cellToReportList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATEventResults::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _eventID_Type.write(writer, value.get_eventID());
   _cellToReportList_Type.write(writer, value.get_cellToReportList());

   writer.writeSequenceEnd();
}


void InterRATInfo_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterRATInfo::ValueType v;
      _rat_Type.read(reader, v);
      value.set_rat(v);
   }
   {
      asn1::generated::GSM_TargetCellInfoList::ValueType v;
      _gsm_TargetCellInfoList_Type.read(reader, v);
      value.set_gsm_TargetCellInfoList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATInfo_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rat_Type.write(writer, value.get_rat());
   _gsm_TargetCellInfoList_Type.write(writer, value.get_gsm_TargetCellInfoList());

   writer.writeSequenceEnd();
}


void InterRATMeasQuantity::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqMeasQuantity::ValueType v;
      _measQuantityUTRAN_QualityEstimate_Type.read(reader, v);
      value.set_measQuantityUTRAN_QualityEstimate(v);
   }
   {
      _INTERNAL__ChoiceType_gsm_INTERNAL__SequenceType_measurementQuantity_INTERNAL_asn1__generated__MeasurementQuantityGSM_filterCoefficient_INTERNAL_asn1__generated__FilterCoefficient_bsic-VerificationRequired_INTERNAL_asn1__generated__BSIC_VerificationRequired_is-2000_INTERNAL__SequenceType_tadd-EcIo_INTERNAL_asn1__IntegerType_tcomp-EcIo_INTERNAL_asn1__IntegerType_softSlope_INTERNAL_asn1__IntegerType_addIntercept_INTERNAL_asn1__IntegerType::ValueType v;
      _ratSpecificInfo_Type.read(reader, v);
      value.set_ratSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATMeasQuantity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _measQuantityUTRAN_QualityEstimate_Type.write(writer, value.get_measQuantityUTRAN_QualityEstimate());
   _ratSpecificInfo_Type.write(writer, value.get_ratSpecificInfo());

   writer.writeSequenceEnd();
}


void InterRATMeasuredResults::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_gsm_Type)
   {
      asn1::generated::GSM_MeasuredResultsList::ValueType v;
      _gsm_Type.read(reader, v);
      value.set_gsm(v);
   }
   else if (choosenType == &_spare_Type)
   {
      asn1::NullType::ValueType v;
      _spare_Type.read(reader, v);
      value.set_spare(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _gsm_Type.toString() + ", " + _spare_Type.toString());
   }
}

void InterRATMeasuredResults::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_gsm_Choosen())
      _gsm_Type.write(writer, value.get_gsm());
   else if (value.has_spare_Choosen())
      _spare_Type.write(writer, value.get_spare());
}


void InterRATMeasurement::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterRATCellInfoList::ValueType v;
      _interRATCellInfoList_Type.read(reader, v);
      value.set_interRATCellInfoList(v);
   }
   {
      asn1::generated::InterRATMeasQuantity::ValueType v;
      _interRATMeasQuantity_Type.read(reader, v);
      value.set_interRATMeasQuantity(v);
   }
   {
      asn1::generated::InterRATReportingQuantity::ValueType v;
      _interRATReportingQuantity_Type.read(reader, v);
      value.set_interRATReportingQuantity(v);
   }
   {
      asn1::generated::InterRATReportCriteria::ValueType v;
      _reportCriteria_Type.read(reader, v);
      value.set_reportCriteria(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATMeasurement::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interRATCellInfoList_Type.write(writer, value.get_interRATCellInfoList());
   _interRATMeasQuantity_Type.write(writer, value.get_interRATMeasQuantity());
   _interRATReportingQuantity_Type.write(writer, value.get_interRATReportingQuantity());
   _reportCriteria_Type.write(writer, value.get_reportCriteria());

   writer.writeSequenceEnd();
}


void InterRATMeasurement_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterRATCellInfoList_r4::ValueType v;
      _interRATCellInfoList_Type.read(reader, v);
      value.set_interRATCellInfoList(v);
   }
   {
      asn1::generated::InterRATMeasQuantity::ValueType v;
      _interRATMeasQuantity_Type.read(reader, v);
      value.set_interRATMeasQuantity(v);
   }
   {
      asn1::generated::InterRATReportingQuantity::ValueType v;
      _interRATReportingQuantity_Type.read(reader, v);
      value.set_interRATReportingQuantity(v);
   }
   {
      asn1::generated::InterRATReportCriteria::ValueType v;
      _reportCriteria_Type.read(reader, v);
      value.set_reportCriteria(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATMeasurement_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interRATCellInfoList_Type.write(writer, value.get_interRATCellInfoList());
   _interRATMeasQuantity_Type.write(writer, value.get_interRATMeasQuantity());
   _interRATReportingQuantity_Type.write(writer, value.get_interRATReportingQuantity());
   _reportCriteria_Type.write(writer, value.get_reportCriteria());

   writer.writeSequenceEnd();
}


void InterRATMeasurement_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterRATCellInfoList_r6::ValueType v;
      _interRATCellInfoList_Type.read(reader, v);
      value.set_interRATCellInfoList(v);
   }
   {
      asn1::generated::InterRATMeasQuantity::ValueType v;
      _interRATMeasQuantity_Type.read(reader, v);
      value.set_interRATMeasQuantity(v);
   }
   {
      asn1::generated::InterRATReportingQuantity::ValueType v;
      _interRATReportingQuantity_Type.read(reader, v);
      value.set_interRATReportingQuantity(v);
   }
   {
      asn1::generated::InterRATReportCriteria::ValueType v;
      _reportCriteria_Type.read(reader, v);
      value.set_reportCriteria(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATMeasurement_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interRATCellInfoList_Type.write(writer, value.get_interRATCellInfoList());
   _interRATMeasQuantity_Type.write(writer, value.get_interRATMeasQuantity());
   _interRATReportingQuantity_Type.write(writer, value.get_interRATReportingQuantity());
   _reportCriteria_Type.write(writer, value.get_reportCriteria());

   writer.writeSequenceEnd();
}


void InterRATMeasurementSysInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterRATCellInfoList::ValueType v;
      _interRATCellInfoList_Type.read(reader, v);
      value.set_interRATCellInfoList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATMeasurementSysInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interRATCellInfoList_Type.write(writer, value.get_interRATCellInfoList());

   writer.writeSequenceEnd();
}


void InterRATMeasurementSysInfo_B::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterRATCellInfoList_B::ValueType v;
      _interRATCellInfoList_Type.read(reader, v);
      value.set_interRATCellInfoList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATMeasurementSysInfo_B::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interRATCellInfoList_Type.write(writer, value.get_interRATCellInfoList());

   writer.writeSequenceEnd();
}


void InterRATReportCriteria::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_interRATReportingCriteria_Type)
   {
      asn1::generated::InterRATReportingCriteria::ValueType v;
      _interRATReportingCriteria_Type.read(reader, v);
      value.set_interRATReportingCriteria(v);
   }
   else if (choosenType == &_periodicalReportingCriteria_Type)
   {
      asn1::generated::PeriodicalWithReportingCellStatus::ValueType v;
      _periodicalReportingCriteria_Type.read(reader, v);
      value.set_periodicalReportingCriteria(v);
   }
   else if (choosenType == &_noReporting_Type)
   {
      asn1::generated::ReportingCellStatusOpt::ValueType v;
      _noReporting_Type.read(reader, v);
      value.set_noReporting(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _interRATReportingCriteria_Type.toString() + ", " + _periodicalReportingCriteria_Type.toString() + ", " + _noReporting_Type.toString());
   }
}

void InterRATReportCriteria::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_interRATReportingCriteria_Choosen())
      _interRATReportingCriteria_Type.write(writer, value.get_interRATReportingCriteria());
   else if (value.has_periodicalReportingCriteria_Choosen())
      _periodicalReportingCriteria_Type.write(writer, value.get_periodicalReportingCriteria());
   else if (value.has_noReporting_Choosen())
      _noReporting_Type.write(writer, value.get_noReporting());
}


void InterRATReportingCriteria::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterRATEventList::ValueType v;
      _interRATEventList_Type.read(reader, v);
      value.set_interRATEventList(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATReportingCriteria::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interRATEventList_Type.write(writer, value.get_interRATEventList());

   writer.writeSequenceEnd();
}


void InterRATReportingQuantity::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _utran_EstimatedQuality_Type.read(reader, v);
      value.set_utran_EstimatedQuality(v);
   }
   {
      _INTERNAL__ChoiceType_gsm_INTERNAL__SequenceType_dummy_INTERNAL_asn1__BooleanType_dummy2_INTERNAL_asn1__BooleanType_gsm-Carrier-RSSI_INTERNAL_asn1__BooleanType::ValueType v;
      _ratSpecificInfo_Type.read(reader, v);
      value.set_ratSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATReportingQuantity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _utran_EstimatedQuality_Type.write(writer, value.get_utran_EstimatedQuality());
   _ratSpecificInfo_Type.write(writer, value.get_ratSpecificInfo());

   writer.writeSequenceEnd();
}


void IntraFreqCellInfoList::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedIntraFreqCellList::ValueType v;
      _removedIntraFreqCellList_Type.read(reader, v);
      value.set_removedIntraFreqCellList(v);
   }
   {
      asn1::generated::NewIntraFreqCellList::ValueType v;
      _newIntraFreqCellList_Type.read(reader, v);
      value.set_newIntraFreqCellList(v);
   }
   {
      asn1::generated::CellsForIntraFreqMeasList::ValueType v;
      _cellsForIntraFreqMeasList_Type.read(reader, v);
      value.set_cellsForIntraFreqMeasList(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqCellInfoList::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedIntraFreqCellList_Type.write(writer, value.get_removedIntraFreqCellList());
   _newIntraFreqCellList_Type.write(writer, value.get_newIntraFreqCellList());
   _cellsForIntraFreqMeasList_Type.write(writer, value.get_cellsForIntraFreqMeasList());

   writer.writeSequenceEnd();
}


void IntraFreqCellInfoList_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedIntraFreqCellList::ValueType v;
      _removedIntraFreqCellList_Type.read(reader, v);
      value.set_removedIntraFreqCellList(v);
   }
   {
      asn1::generated::NewIntraFreqCellList_r4::ValueType v;
      _newIntraFreqCellList_Type.read(reader, v);
      value.set_newIntraFreqCellList(v);
   }
   {
      asn1::generated::CellsForIntraFreqMeasList::ValueType v;
      _cellsForIntraFreqMeasList_Type.read(reader, v);
      value.set_cellsForIntraFreqMeasList(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqCellInfoList_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedIntraFreqCellList_Type.write(writer, value.get_removedIntraFreqCellList());
   _newIntraFreqCellList_Type.write(writer, value.get_newIntraFreqCellList());
   _cellsForIntraFreqMeasList_Type.write(writer, value.get_cellsForIntraFreqMeasList());

   writer.writeSequenceEnd();
}


void IntraFreqCellInfoSI_List_RSCP::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedIntraFreqCellList::ValueType v;
      _removedIntraFreqCellList_Type.read(reader, v);
      value.set_removedIntraFreqCellList(v);
   }
   {
      asn1::generated::NewIntraFreqCellSI_List_RSCP::ValueType v;
      _newIntraFreqCellList_Type.read(reader, v);
      value.set_newIntraFreqCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqCellInfoSI_List_RSCP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedIntraFreqCellList_Type.write(writer, value.get_removedIntraFreqCellList());
   _newIntraFreqCellList_Type.write(writer, value.get_newIntraFreqCellList());

   writer.writeSequenceEnd();
}


void IntraFreqCellInfoSI_List_ECN0::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedIntraFreqCellList::ValueType v;
      _removedIntraFreqCellList_Type.read(reader, v);
      value.set_removedIntraFreqCellList(v);
   }
   {
      asn1::generated::NewIntraFreqCellSI_List_ECN0::ValueType v;
      _newIntraFreqCellList_Type.read(reader, v);
      value.set_newIntraFreqCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqCellInfoSI_List_ECN0::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedIntraFreqCellList_Type.write(writer, value.get_removedIntraFreqCellList());
   _newIntraFreqCellList_Type.write(writer, value.get_newIntraFreqCellList());

   writer.writeSequenceEnd();
}


void IntraFreqCellInfoSI_List_HCS_RSCP::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedIntraFreqCellList::ValueType v;
      _removedIntraFreqCellList_Type.read(reader, v);
      value.set_removedIntraFreqCellList(v);
   }
   {
      asn1::generated::NewIntraFreqCellSI_List_HCS_RSCP::ValueType v;
      _newIntraFreqCellList_Type.read(reader, v);
      value.set_newIntraFreqCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqCellInfoSI_List_HCS_RSCP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedIntraFreqCellList_Type.write(writer, value.get_removedIntraFreqCellList());
   _newIntraFreqCellList_Type.write(writer, value.get_newIntraFreqCellList());

   writer.writeSequenceEnd();
}


void IntraFreqCellInfoSI_List_HCS_ECN0::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedIntraFreqCellList::ValueType v;
      _removedIntraFreqCellList_Type.read(reader, v);
      value.set_removedIntraFreqCellList(v);
   }
   {
      asn1::generated::NewIntraFreqCellSI_List_HCS_ECN0::ValueType v;
      _newIntraFreqCellList_Type.read(reader, v);
      value.set_newIntraFreqCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqCellInfoSI_List_HCS_ECN0::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedIntraFreqCellList_Type.write(writer, value.get_removedIntraFreqCellList());
   _newIntraFreqCellList_Type.write(writer, value.get_newIntraFreqCellList());

   writer.writeSequenceEnd();
}


void IntraFreqCellInfoSI_List_RSCP_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedIntraFreqCellList::ValueType v;
      _removedIntraFreqCellList_Type.read(reader, v);
      value.set_removedIntraFreqCellList(v);
   }
   {
      asn1::generated::NewIntraFreqCellSI_List_RSCP_LCR_r4::ValueType v;
      _newIntraFreqCellList_Type.read(reader, v);
      value.set_newIntraFreqCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqCellInfoSI_List_RSCP_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedIntraFreqCellList_Type.write(writer, value.get_removedIntraFreqCellList());
   _newIntraFreqCellList_Type.write(writer, value.get_newIntraFreqCellList());

   writer.writeSequenceEnd();
}


void IntraFreqCellInfoSI_List_ECN0_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedIntraFreqCellList::ValueType v;
      _removedIntraFreqCellList_Type.read(reader, v);
      value.set_removedIntraFreqCellList(v);
   }
   {
      asn1::generated::NewIntraFreqCellSI_List_ECN0_LCR_r4::ValueType v;
      _newIntraFreqCellList_Type.read(reader, v);
      value.set_newIntraFreqCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqCellInfoSI_List_ECN0_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedIntraFreqCellList_Type.write(writer, value.get_removedIntraFreqCellList());
   _newIntraFreqCellList_Type.write(writer, value.get_newIntraFreqCellList());

   writer.writeSequenceEnd();
}


void IntraFreqCellInfoSI_List_HCS_RSCP_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedIntraFreqCellList::ValueType v;
      _removedIntraFreqCellList_Type.read(reader, v);
      value.set_removedIntraFreqCellList(v);
   }
   {
      asn1::generated::NewIntraFreqCellSI_List_HCS_RSCP_LCR_r4::ValueType v;
      _newIntraFreqCellList_Type.read(reader, v);
      value.set_newIntraFreqCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqCellInfoSI_List_HCS_RSCP_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedIntraFreqCellList_Type.write(writer, value.get_removedIntraFreqCellList());
   _newIntraFreqCellList_Type.write(writer, value.get_newIntraFreqCellList());

   writer.writeSequenceEnd();
}


void IntraFreqCellInfoSI_List_HCS_ECN0_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RemovedIntraFreqCellList::ValueType v;
      _removedIntraFreqCellList_Type.read(reader, v);
      value.set_removedIntraFreqCellList(v);
   }
   {
      asn1::generated::NewIntraFreqCellSI_List_HCS_ECN0_LCR_r4::ValueType v;
      _newIntraFreqCellList_Type.read(reader, v);
      value.set_newIntraFreqCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqCellInfoSI_List_HCS_ECN0_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _removedIntraFreqCellList_Type.write(writer, value.get_removedIntraFreqCellList());
   _newIntraFreqCellList_Type.write(writer, value.get_newIntraFreqCellList());

   writer.writeSequenceEnd();
}


void IntraFreqEvent::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_e1a_Type)
   {
      asn1::generated::Event1a::ValueType v;
      _e1a_Type.read(reader, v);
      value.set_e1a(v);
   }
   else if (choosenType == &_e1b_Type)
   {
      asn1::generated::Event1b::ValueType v;
      _e1b_Type.read(reader, v);
      value.set_e1b(v);
   }
   else if (choosenType == &_e1c_Type)
   {
      asn1::generated::Event1c::ValueType v;
      _e1c_Type.read(reader, v);
      value.set_e1c(v);
   }
   else if (choosenType == &_e1d_Type)
   {
      asn1::NullType::ValueType v;
      _e1d_Type.read(reader, v);
      value.set_e1d(v);
   }
   else if (choosenType == &_e1e_Type)
   {
      asn1::generated::Event1e::ValueType v;
      _e1e_Type.read(reader, v);
      value.set_e1e(v);
   }
   else if (choosenType == &_e1f_Type)
   {
      asn1::generated::Event1f::ValueType v;
      _e1f_Type.read(reader, v);
      value.set_e1f(v);
   }
   else if (choosenType == &_e1g_Type)
   {
      asn1::NullType::ValueType v;
      _e1g_Type.read(reader, v);
      value.set_e1g(v);
   }
   else if (choosenType == &_e1h_Type)
   {
      asn1::generated::ThresholdUsedFrequency::ValueType v;
      _e1h_Type.read(reader, v);
      value.set_e1h(v);
   }
   else if (choosenType == &_e1i_Type)
   {
      asn1::generated::ThresholdUsedFrequency::ValueType v;
      _e1i_Type.read(reader, v);
      value.set_e1i(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _e1a_Type.toString() + ", " + _e1b_Type.toString() + ", " + _e1c_Type.toString() + ", " + _e1d_Type.toString() + ", " + _e1e_Type.toString() + ", " + _e1f_Type.toString() + ", " + _e1g_Type.toString() + ", " + _e1h_Type.toString() + ", " + _e1i_Type.toString());
   }
}

void IntraFreqEvent::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_e1a_Choosen())
      _e1a_Type.write(writer, value.get_e1a());
   else if (value.has_e1b_Choosen())
      _e1b_Type.write(writer, value.get_e1b());
   else if (value.has_e1c_Choosen())
      _e1c_Type.write(writer, value.get_e1c());
   else if (value.has_e1d_Choosen())
      _e1d_Type.write(writer, value.get_e1d());
   else if (value.has_e1e_Choosen())
      _e1e_Type.write(writer, value.get_e1e());
   else if (value.has_e1f_Choosen())
      _e1f_Type.write(writer, value.get_e1f());
   else if (value.has_e1g_Choosen())
      _e1g_Type.write(writer, value.get_e1g());
   else if (value.has_e1h_Choosen())
      _e1h_Type.write(writer, value.get_e1h());
   else if (value.has_e1i_Choosen())
      _e1i_Type.write(writer, value.get_e1i());
}


void IntraFreqEvent-r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_e1a_Type)
   {
      asn1::generated::Event1a_r4::ValueType v;
      _e1a_Type.read(reader, v);
      value.set_e1a(v);
   }
   else if (choosenType == &_e1b_Type)
   {
      asn1::generated::Event1b_r4::ValueType v;
      _e1b_Type.read(reader, v);
      value.set_e1b(v);
   }
   else if (choosenType == &_e1c_Type)
   {
      asn1::generated::Event1c::ValueType v;
      _e1c_Type.read(reader, v);
      value.set_e1c(v);
   }
   else if (choosenType == &_e1d_Type)
   {
      asn1::NullType::ValueType v;
      _e1d_Type.read(reader, v);
      value.set_e1d(v);
   }
   else if (choosenType == &_e1e_Type)
   {
      asn1::generated::Event1e::ValueType v;
      _e1e_Type.read(reader, v);
      value.set_e1e(v);
   }
   else if (choosenType == &_e1f_Type)
   {
      asn1::generated::Event1f::ValueType v;
      _e1f_Type.read(reader, v);
      value.set_e1f(v);
   }
   else if (choosenType == &_e1g_Type)
   {
      asn1::NullType::ValueType v;
      _e1g_Type.read(reader, v);
      value.set_e1g(v);
   }
   else if (choosenType == &_e1h_Type)
   {
      asn1::generated::ThresholdUsedFrequency::ValueType v;
      _e1h_Type.read(reader, v);
      value.set_e1h(v);
   }
   else if (choosenType == &_e1i_Type)
   {
      asn1::generated::ThresholdUsedFrequency::ValueType v;
      _e1i_Type.read(reader, v);
      value.set_e1i(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _e1a_Type.toString() + ", " + _e1b_Type.toString() + ", " + _e1c_Type.toString() + ", " + _e1d_Type.toString() + ", " + _e1e_Type.toString() + ", " + _e1f_Type.toString() + ", " + _e1g_Type.toString() + ", " + _e1h_Type.toString() + ", " + _e1i_Type.toString());
   }
}

void IntraFreqEvent-r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_e1a_Choosen())
      _e1a_Type.write(writer, value.get_e1a());
   else if (value.has_e1b_Choosen())
      _e1b_Type.write(writer, value.get_e1b());
   else if (value.has_e1c_Choosen())
      _e1c_Type.write(writer, value.get_e1c());
   else if (value.has_e1d_Choosen())
      _e1d_Type.write(writer, value.get_e1d());
   else if (value.has_e1e_Choosen())
      _e1e_Type.write(writer, value.get_e1e());
   else if (value.has_e1f_Choosen())
      _e1f_Type.write(writer, value.get_e1f());
   else if (value.has_e1g_Choosen())
      _e1g_Type.write(writer, value.get_e1g());
   else if (value.has_e1h_Choosen())
      _e1h_Type.write(writer, value.get_e1h());
   else if (value.has_e1i_Choosen())
      _e1i_Type.write(writer, value.get_e1i());
}


void IntraFreqEvent-LCR-r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_e1a_Type)
   {
      asn1::generated::Event1a_LCR_r4::ValueType v;
      _e1a_Type.read(reader, v);
      value.set_e1a(v);
   }
   else if (choosenType == &_e1b_Type)
   {
      asn1::generated::Event1b_LCR_r4::ValueType v;
      _e1b_Type.read(reader, v);
      value.set_e1b(v);
   }
   else if (choosenType == &_e1c_Type)
   {
      asn1::generated::Event1c::ValueType v;
      _e1c_Type.read(reader, v);
      value.set_e1c(v);
   }
   else if (choosenType == &_e1d_Type)
   {
      asn1::NullType::ValueType v;
      _e1d_Type.read(reader, v);
      value.set_e1d(v);
   }
   else if (choosenType == &_e1e_Type)
   {
      asn1::generated::Event1e::ValueType v;
      _e1e_Type.read(reader, v);
      value.set_e1e(v);
   }
   else if (choosenType == &_e1f_Type)
   {
      asn1::generated::Event1f::ValueType v;
      _e1f_Type.read(reader, v);
      value.set_e1f(v);
   }
   else if (choosenType == &_e1g_Type)
   {
      asn1::NullType::ValueType v;
      _e1g_Type.read(reader, v);
      value.set_e1g(v);
   }
   else if (choosenType == &_e1h_Type)
   {
      asn1::generated::ThresholdUsedFrequency::ValueType v;
      _e1h_Type.read(reader, v);
      value.set_e1h(v);
   }
   else if (choosenType == &_e1i_Type)
   {
      asn1::generated::ThresholdUsedFrequency::ValueType v;
      _e1i_Type.read(reader, v);
      value.set_e1i(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _e1a_Type.toString() + ", " + _e1b_Type.toString() + ", " + _e1c_Type.toString() + ", " + _e1d_Type.toString() + ", " + _e1e_Type.toString() + ", " + _e1f_Type.toString() + ", " + _e1g_Type.toString() + ", " + _e1h_Type.toString() + ", " + _e1i_Type.toString());
   }
}

void IntraFreqEvent-LCR-r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_e1a_Choosen())
      _e1a_Type.write(writer, value.get_e1a());
   else if (value.has_e1b_Choosen())
      _e1b_Type.write(writer, value.get_e1b());
   else if (value.has_e1c_Choosen())
      _e1c_Type.write(writer, value.get_e1c());
   else if (value.has_e1d_Choosen())
      _e1d_Type.write(writer, value.get_e1d());
   else if (value.has_e1e_Choosen())
      _e1e_Type.write(writer, value.get_e1e());
   else if (value.has_e1f_Choosen())
      _e1f_Type.write(writer, value.get_e1f());
   else if (value.has_e1g_Choosen())
      _e1g_Type.write(writer, value.get_e1g());
   else if (value.has_e1h_Choosen())
      _e1h_Type.write(writer, value.get_e1h());
   else if (value.has_e1i_Choosen())
      _e1i_Type.write(writer, value.get_e1i());
}


void IntraFreqEvent-r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_e1a_Type)
   {
      asn1::generated::Event1a_r4::ValueType v;
      _e1a_Type.read(reader, v);
      value.set_e1a(v);
   }
   else if (choosenType == &_e1b_Type)
   {
      asn1::generated::Event1b_r4::ValueType v;
      _e1b_Type.read(reader, v);
      value.set_e1b(v);
   }
   else if (choosenType == &_e1c_Type)
   {
      asn1::generated::Event1c::ValueType v;
      _e1c_Type.read(reader, v);
      value.set_e1c(v);
   }
   else if (choosenType == &_e1d_Type)
   {
      asn1::generated::Event1d::ValueType v;
      _e1d_Type.read(reader, v);
      value.set_e1d(v);
   }
   else if (choosenType == &_e1e_Type)
   {
      asn1::generated::Event1e_r6::ValueType v;
      _e1e_Type.read(reader, v);
      value.set_e1e(v);
   }
   else if (choosenType == &_e1f_Type)
   {
      asn1::generated::Event1f_r6::ValueType v;
      _e1f_Type.read(reader, v);
      value.set_e1f(v);
   }
   else if (choosenType == &_e1g_Type)
   {
      asn1::NullType::ValueType v;
      _e1g_Type.read(reader, v);
      value.set_e1g(v);
   }
   else if (choosenType == &_e1h_Type)
   {
      asn1::generated::ThresholdUsedFrequency_r6::ValueType v;
      _e1h_Type.read(reader, v);
      value.set_e1h(v);
   }
   else if (choosenType == &_e1i_Type)
   {
      asn1::generated::ThresholdUsedFrequency_r6::ValueType v;
      _e1i_Type.read(reader, v);
      value.set_e1i(v);
   }
   else if (choosenType == &_e1j_Type)
   {
      asn1::generated::Event1j_r6::ValueType v;
      _e1j_Type.read(reader, v);
      value.set_e1j(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _e1a_Type.toString() + ", " + _e1b_Type.toString() + ", " + _e1c_Type.toString() + ", " + _e1d_Type.toString() + ", " + _e1e_Type.toString() + ", " + _e1f_Type.toString() + ", " + _e1g_Type.toString() + ", " + _e1h_Type.toString() + ", " + _e1i_Type.toString() + ", " + _e1j_Type.toString());
   }
}

void IntraFreqEvent-r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_e1a_Choosen())
      _e1a_Type.write(writer, value.get_e1a());
   else if (value.has_e1b_Choosen())
      _e1b_Type.write(writer, value.get_e1b());
   else if (value.has_e1c_Choosen())
      _e1c_Type.write(writer, value.get_e1c());
   else if (value.has_e1d_Choosen())
      _e1d_Type.write(writer, value.get_e1d());
   else if (value.has_e1e_Choosen())
      _e1e_Type.write(writer, value.get_e1e());
   else if (value.has_e1f_Choosen())
      _e1f_Type.write(writer, value.get_e1f());
   else if (value.has_e1g_Choosen())
      _e1g_Type.write(writer, value.get_e1g());
   else if (value.has_e1h_Choosen())
      _e1h_Type.write(writer, value.get_e1h());
   else if (value.has_e1i_Choosen())
      _e1i_Type.write(writer, value.get_e1i());
   else if (value.has_e1j_Choosen())
      _e1j_Type.write(writer, value.get_e1j());
}


void IntraFreqEvent_1d_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TriggeringCondition2::ValueType v;
      _triggeringCondition_Type.read(reader, v);
      value.set_triggeringCondition(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _useCIO_Type.read(reader, v);
      value.set_useCIO(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqEvent_1d_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _triggeringCondition_Type.write(writer, value.get_triggeringCondition());
   _useCIO_Type.write(writer, value.get_useCIO());

   writer.writeSequenceEnd();
}


void IntraFreqEventCriteria::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqEvent::ValueType v;
      _event_Type.read(reader, v);
      value.set_event(v);
   }
   {
      asn1::generated::Hysteresis::ValueType v;
      _hysteresis_Type.read(reader, v);
      value.set_hysteresis(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqEventCriteria::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _event_Type.write(writer, value.get_event());
   _hysteresis_Type.write(writer, value.get_hysteresis());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());

   writer.writeSequenceEnd();
}


void IntraFreqEventCriteria_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqEvent_r4::ValueType v;
      _event_Type.read(reader, v);
      value.set_event(v);
   }
   {
      asn1::generated::Hysteresis::ValueType v;
      _hysteresis_Type.read(reader, v);
      value.set_hysteresis(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqEventCriteria_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _event_Type.write(writer, value.get_event());
   _hysteresis_Type.write(writer, value.get_hysteresis());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());

   writer.writeSequenceEnd();
}


void IntraFreqEventCriteria_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqEvent_LCR_r4::ValueType v;
      _event_Type.read(reader, v);
      value.set_event(v);
   }
   {
      asn1::generated::Hysteresis::ValueType v;
      _hysteresis_Type.read(reader, v);
      value.set_hysteresis(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqEventCriteria_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _event_Type.write(writer, value.get_event());
   _hysteresis_Type.write(writer, value.get_hysteresis());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());

   writer.writeSequenceEnd();
}


void IntraFreqEventCriteria_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqEvent_r6::ValueType v;
      _event_Type.read(reader, v);
      value.set_event(v);
   }
   {
      asn1::generated::Hysteresis::ValueType v;
      _hysteresis_Type.read(reader, v);
      value.set_hysteresis(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqEventCriteria_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _event_Type.write(writer, value.get_event());
   _hysteresis_Type.write(writer, value.get_hysteresis());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());

   writer.writeSequenceEnd();
}


void IntraFreqEventResults::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::EventIDIntraFreq::ValueType v;
      _eventID_Type.read(reader, v);
      value.set_eventID(v);
   }
   {
      asn1::generated::CellMeasurementEventResults::ValueType v;
      _cellMeasurementEventResults_Type.read(reader, v);
      value.set_cellMeasurementEventResults(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqEventResults::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _eventID_Type.write(writer, value.get_eventID());
   _cellMeasurementEventResults_Type.write(writer, value.get_cellMeasurementEventResults());

   writer.writeSequenceEnd();
}


void IntraFreqMeasQuantity::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::FilterCoefficient::ValueType v;
      _filterCoefficient_Type.read(reader, v);
      value.set_filterCoefficient(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_intraFreqMeasQuantity-FDD_INTERNAL_asn1__generated__IntraFreqMeasQuantity_FDD_tdd_INTERNAL__SequenceType_intraFreqMeasQuantity-TDDList_INTERNAL_asn1__generated__IntraFreqMeasQuantity_TDDList::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqMeasQuantity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _filterCoefficient_Type.write(writer, value.get_filterCoefficient());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void IntraFreqMeasurementSysInfo_RSCP::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MeasurementIdentity::ValueType v;
      _intraFreqMeasurementID_Type.read(reader, v);
      value.set_intraFreqMeasurementID(v);
   }
   {
      asn1::generated::IntraFreqCellInfoSI_List_RSCP::ValueType v;
      _intraFreqCellInfoSI_List_Type.read(reader, v);
      value.set_intraFreqCellInfoSI_List(v);
   }
   {
      asn1::generated::IntraFreqMeasQuantity::ValueType v;
      _intraFreqMeasQuantity_Type.read(reader, v);
      value.set_intraFreqMeasQuantity(v);
   }
   {
      asn1::generated::IntraFreqReportingQuantityForRACH::ValueType v;
      _intraFreqReportingQuantityForRACH_Type.read(reader, v);
      value.set_intraFreqReportingQuantityForRACH(v);
   }
   {
      asn1::generated::MaxReportedCellsOnRACH::ValueType v;
      _maxReportedCellsOnRACH_Type.read(reader, v);
      value.set_maxReportedCellsOnRACH(v);
   }
   {
      asn1::generated::ReportingInfoForCellDCH::ValueType v;
      _reportingInfoForCellDCH_Type.read(reader, v);
      value.set_reportingInfoForCellDCH(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqMeasurementSysInfo_RSCP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqMeasurementID_Type.write(writer, value.get_intraFreqMeasurementID());
   _intraFreqCellInfoSI_List_Type.write(writer, value.get_intraFreqCellInfoSI_List());
   _intraFreqMeasQuantity_Type.write(writer, value.get_intraFreqMeasQuantity());
   _intraFreqReportingQuantityForRACH_Type.write(writer, value.get_intraFreqReportingQuantityForRACH());
   _maxReportedCellsOnRACH_Type.write(writer, value.get_maxReportedCellsOnRACH());
   _reportingInfoForCellDCH_Type.write(writer, value.get_reportingInfoForCellDCH());

   writer.writeSequenceEnd();
}


void IntraFreqMeasurementSysInfo_ECN0::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MeasurementIdentity::ValueType v;
      _intraFreqMeasurementID_Type.read(reader, v);
      value.set_intraFreqMeasurementID(v);
   }
   {
      asn1::generated::IntraFreqCellInfoSI_List_ECN0::ValueType v;
      _intraFreqCellInfoSI_List_Type.read(reader, v);
      value.set_intraFreqCellInfoSI_List(v);
   }
   {
      asn1::generated::IntraFreqMeasQuantity::ValueType v;
      _intraFreqMeasQuantity_Type.read(reader, v);
      value.set_intraFreqMeasQuantity(v);
   }
   {
      asn1::generated::IntraFreqReportingQuantityForRACH::ValueType v;
      _intraFreqReportingQuantityForRACH_Type.read(reader, v);
      value.set_intraFreqReportingQuantityForRACH(v);
   }
   {
      asn1::generated::MaxReportedCellsOnRACH::ValueType v;
      _maxReportedCellsOnRACH_Type.read(reader, v);
      value.set_maxReportedCellsOnRACH(v);
   }
   {
      asn1::generated::ReportingInfoForCellDCH::ValueType v;
      _reportingInfoForCellDCH_Type.read(reader, v);
      value.set_reportingInfoForCellDCH(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqMeasurementSysInfo_ECN0::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqMeasurementID_Type.write(writer, value.get_intraFreqMeasurementID());
   _intraFreqCellInfoSI_List_Type.write(writer, value.get_intraFreqCellInfoSI_List());
   _intraFreqMeasQuantity_Type.write(writer, value.get_intraFreqMeasQuantity());
   _intraFreqReportingQuantityForRACH_Type.write(writer, value.get_intraFreqReportingQuantityForRACH());
   _maxReportedCellsOnRACH_Type.write(writer, value.get_maxReportedCellsOnRACH());
   _reportingInfoForCellDCH_Type.write(writer, value.get_reportingInfoForCellDCH());

   writer.writeSequenceEnd();
}


void IntraFreqMeasurementSysInfo_HCS_RSCP::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MeasurementIdentity::ValueType v;
      _intraFreqMeasurementID_Type.read(reader, v);
      value.set_intraFreqMeasurementID(v);
   }
   {
      asn1::generated::IntraFreqCellInfoSI_List_HCS_RSCP::ValueType v;
      _intraFreqCellInfoSI_List_Type.read(reader, v);
      value.set_intraFreqCellInfoSI_List(v);
   }
   {
      asn1::generated::IntraFreqMeasQuantity::ValueType v;
      _intraFreqMeasQuantity_Type.read(reader, v);
      value.set_intraFreqMeasQuantity(v);
   }
   {
      asn1::generated::IntraFreqReportingQuantityForRACH::ValueType v;
      _intraFreqReportingQuantityForRACH_Type.read(reader, v);
      value.set_intraFreqReportingQuantityForRACH(v);
   }
   {
      asn1::generated::MaxReportedCellsOnRACH::ValueType v;
      _maxReportedCellsOnRACH_Type.read(reader, v);
      value.set_maxReportedCellsOnRACH(v);
   }
   {
      asn1::generated::ReportingInfoForCellDCH::ValueType v;
      _reportingInfoForCellDCH_Type.read(reader, v);
      value.set_reportingInfoForCellDCH(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqMeasurementSysInfo_HCS_RSCP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqMeasurementID_Type.write(writer, value.get_intraFreqMeasurementID());
   _intraFreqCellInfoSI_List_Type.write(writer, value.get_intraFreqCellInfoSI_List());
   _intraFreqMeasQuantity_Type.write(writer, value.get_intraFreqMeasQuantity());
   _intraFreqReportingQuantityForRACH_Type.write(writer, value.get_intraFreqReportingQuantityForRACH());
   _maxReportedCellsOnRACH_Type.write(writer, value.get_maxReportedCellsOnRACH());
   _reportingInfoForCellDCH_Type.write(writer, value.get_reportingInfoForCellDCH());

   writer.writeSequenceEnd();
}


void IntraFreqMeasurementSysInfo_HCS_ECN0::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MeasurementIdentity::ValueType v;
      _intraFreqMeasurementID_Type.read(reader, v);
      value.set_intraFreqMeasurementID(v);
   }
   {
      asn1::generated::IntraFreqCellInfoSI_List_HCS_ECN0::ValueType v;
      _intraFreqCellInfoSI_List_Type.read(reader, v);
      value.set_intraFreqCellInfoSI_List(v);
   }
   {
      asn1::generated::IntraFreqMeasQuantity::ValueType v;
      _intraFreqMeasQuantity_Type.read(reader, v);
      value.set_intraFreqMeasQuantity(v);
   }
   {
      asn1::generated::IntraFreqReportingQuantityForRACH::ValueType v;
      _intraFreqReportingQuantityForRACH_Type.read(reader, v);
      value.set_intraFreqReportingQuantityForRACH(v);
   }
   {
      asn1::generated::MaxReportedCellsOnRACH::ValueType v;
      _maxReportedCellsOnRACH_Type.read(reader, v);
      value.set_maxReportedCellsOnRACH(v);
   }
   {
      asn1::generated::ReportingInfoForCellDCH::ValueType v;
      _reportingInfoForCellDCH_Type.read(reader, v);
      value.set_reportingInfoForCellDCH(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqMeasurementSysInfo_HCS_ECN0::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqMeasurementID_Type.write(writer, value.get_intraFreqMeasurementID());
   _intraFreqCellInfoSI_List_Type.write(writer, value.get_intraFreqCellInfoSI_List());
   _intraFreqMeasQuantity_Type.write(writer, value.get_intraFreqMeasQuantity());
   _intraFreqReportingQuantityForRACH_Type.write(writer, value.get_intraFreqReportingQuantityForRACH());
   _maxReportedCellsOnRACH_Type.write(writer, value.get_maxReportedCellsOnRACH());
   _reportingInfoForCellDCH_Type.write(writer, value.get_reportingInfoForCellDCH());

   writer.writeSequenceEnd();
}


void IntraFreqMeasurementSysInfo_RSCP_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MeasurementIdentity::ValueType v;
      _intraFreqMeasurementID_Type.read(reader, v);
      value.set_intraFreqMeasurementID(v);
   }
   {
      asn1::generated::IntraFreqCellInfoSI_List_RSCP_LCR_r4::ValueType v;
      _intraFreqCellInfoSI_List_Type.read(reader, v);
      value.set_intraFreqCellInfoSI_List(v);
   }
   {
      asn1::generated::IntraFreqMeasQuantity::ValueType v;
      _intraFreqMeasQuantity_Type.read(reader, v);
      value.set_intraFreqMeasQuantity(v);
   }
   {
      asn1::generated::IntraFreqReportingQuantityForRACH::ValueType v;
      _intraFreqReportingQuantityForRACH_Type.read(reader, v);
      value.set_intraFreqReportingQuantityForRACH(v);
   }
   {
      asn1::generated::MaxReportedCellsOnRACH::ValueType v;
      _maxReportedCellsOnRACH_Type.read(reader, v);
      value.set_maxReportedCellsOnRACH(v);
   }
   {
      asn1::generated::ReportingInfoForCellDCH_LCR_r4::ValueType v;
      _reportingInfoForCellDCH_Type.read(reader, v);
      value.set_reportingInfoForCellDCH(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqMeasurementSysInfo_RSCP_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqMeasurementID_Type.write(writer, value.get_intraFreqMeasurementID());
   _intraFreqCellInfoSI_List_Type.write(writer, value.get_intraFreqCellInfoSI_List());
   _intraFreqMeasQuantity_Type.write(writer, value.get_intraFreqMeasQuantity());
   _intraFreqReportingQuantityForRACH_Type.write(writer, value.get_intraFreqReportingQuantityForRACH());
   _maxReportedCellsOnRACH_Type.write(writer, value.get_maxReportedCellsOnRACH());
   _reportingInfoForCellDCH_Type.write(writer, value.get_reportingInfoForCellDCH());

   writer.writeSequenceEnd();
}


void IntraFreqMeasurementSysInfo_ECN0_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MeasurementIdentity::ValueType v;
      _intraFreqMeasurementID_Type.read(reader, v);
      value.set_intraFreqMeasurementID(v);
   }
   {
      asn1::generated::IntraFreqCellInfoSI_List_ECN0_LCR_r4::ValueType v;
      _intraFreqCellInfoSI_List_Type.read(reader, v);
      value.set_intraFreqCellInfoSI_List(v);
   }
   {
      asn1::generated::IntraFreqMeasQuantity::ValueType v;
      _intraFreqMeasQuantity_Type.read(reader, v);
      value.set_intraFreqMeasQuantity(v);
   }
   {
      asn1::generated::IntraFreqReportingQuantityForRACH::ValueType v;
      _intraFreqReportingQuantityForRACH_Type.read(reader, v);
      value.set_intraFreqReportingQuantityForRACH(v);
   }
   {
      asn1::generated::MaxReportedCellsOnRACH::ValueType v;
      _maxReportedCellsOnRACH_Type.read(reader, v);
      value.set_maxReportedCellsOnRACH(v);
   }
   {
      asn1::generated::ReportingInfoForCellDCH_LCR_r4::ValueType v;
      _reportingInfoForCellDCH_Type.read(reader, v);
      value.set_reportingInfoForCellDCH(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqMeasurementSysInfo_ECN0_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqMeasurementID_Type.write(writer, value.get_intraFreqMeasurementID());
   _intraFreqCellInfoSI_List_Type.write(writer, value.get_intraFreqCellInfoSI_List());
   _intraFreqMeasQuantity_Type.write(writer, value.get_intraFreqMeasQuantity());
   _intraFreqReportingQuantityForRACH_Type.write(writer, value.get_intraFreqReportingQuantityForRACH());
   _maxReportedCellsOnRACH_Type.write(writer, value.get_maxReportedCellsOnRACH());
   _reportingInfoForCellDCH_Type.write(writer, value.get_reportingInfoForCellDCH());

   writer.writeSequenceEnd();
}


void IntraFreqMeasurementSysInfo_HCS_RSCP_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MeasurementIdentity::ValueType v;
      _intraFreqMeasurementID_Type.read(reader, v);
      value.set_intraFreqMeasurementID(v);
   }
   {
      asn1::generated::IntraFreqCellInfoSI_List_HCS_RSCP_LCR_r4::ValueType v;
      _intraFreqCellInfoSI_List_Type.read(reader, v);
      value.set_intraFreqCellInfoSI_List(v);
   }
   {
      asn1::generated::IntraFreqMeasQuantity::ValueType v;
      _intraFreqMeasQuantity_Type.read(reader, v);
      value.set_intraFreqMeasQuantity(v);
   }
   {
      asn1::generated::IntraFreqReportingQuantityForRACH::ValueType v;
      _intraFreqReportingQuantityForRACH_Type.read(reader, v);
      value.set_intraFreqReportingQuantityForRACH(v);
   }
   {
      asn1::generated::MaxReportedCellsOnRACH::ValueType v;
      _maxReportedCellsOnRACH_Type.read(reader, v);
      value.set_maxReportedCellsOnRACH(v);
   }
   {
      asn1::generated::ReportingInfoForCellDCH_LCR_r4::ValueType v;
      _reportingInfoForCellDCH_Type.read(reader, v);
      value.set_reportingInfoForCellDCH(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqMeasurementSysInfo_HCS_RSCP_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqMeasurementID_Type.write(writer, value.get_intraFreqMeasurementID());
   _intraFreqCellInfoSI_List_Type.write(writer, value.get_intraFreqCellInfoSI_List());
   _intraFreqMeasQuantity_Type.write(writer, value.get_intraFreqMeasQuantity());
   _intraFreqReportingQuantityForRACH_Type.write(writer, value.get_intraFreqReportingQuantityForRACH());
   _maxReportedCellsOnRACH_Type.write(writer, value.get_maxReportedCellsOnRACH());
   _reportingInfoForCellDCH_Type.write(writer, value.get_reportingInfoForCellDCH());

   writer.writeSequenceEnd();
}


void IntraFreqMeasurementSysInfo_HCS_ECN0_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MeasurementIdentity::ValueType v;
      _intraFreqMeasurementID_Type.read(reader, v);
      value.set_intraFreqMeasurementID(v);
   }
   {
      asn1::generated::IntraFreqCellInfoSI_List_HCS_ECN0_LCR_r4::ValueType v;
      _intraFreqCellInfoSI_List_Type.read(reader, v);
      value.set_intraFreqCellInfoSI_List(v);
   }
   {
      asn1::generated::IntraFreqMeasQuantity::ValueType v;
      _intraFreqMeasQuantity_Type.read(reader, v);
      value.set_intraFreqMeasQuantity(v);
   }
   {
      asn1::generated::IntraFreqReportingQuantityForRACH::ValueType v;
      _intraFreqReportingQuantityForRACH_Type.read(reader, v);
      value.set_intraFreqReportingQuantityForRACH(v);
   }
   {
      asn1::generated::MaxReportedCellsOnRACH::ValueType v;
      _maxReportedCellsOnRACH_Type.read(reader, v);
      value.set_maxReportedCellsOnRACH(v);
   }
   {
      asn1::generated::ReportingInfoForCellDCH_LCR_r4::ValueType v;
      _reportingInfoForCellDCH_Type.read(reader, v);
      value.set_reportingInfoForCellDCH(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqMeasurementSysInfo_HCS_ECN0_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqMeasurementID_Type.write(writer, value.get_intraFreqMeasurementID());
   _intraFreqCellInfoSI_List_Type.write(writer, value.get_intraFreqCellInfoSI_List());
   _intraFreqMeasQuantity_Type.write(writer, value.get_intraFreqMeasQuantity());
   _intraFreqReportingQuantityForRACH_Type.write(writer, value.get_intraFreqReportingQuantityForRACH());
   _maxReportedCellsOnRACH_Type.write(writer, value.get_maxReportedCellsOnRACH());
   _reportingInfoForCellDCH_Type.write(writer, value.get_reportingInfoForCellDCH());

   writer.writeSequenceEnd();
}


void IntraFreqReportCriteria::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_intraFreqReportingCriteria_Type)
   {
      asn1::generated::IntraFreqReportingCriteria::ValueType v;
      _intraFreqReportingCriteria_Type.read(reader, v);
      value.set_intraFreqReportingCriteria(v);
   }
   else if (choosenType == &_periodicalReportingCriteria_Type)
   {
      asn1::generated::PeriodicalWithReportingCellStatus::ValueType v;
      _periodicalReportingCriteria_Type.read(reader, v);
      value.set_periodicalReportingCriteria(v);
   }
   else if (choosenType == &_noReporting_Type)
   {
      asn1::generated::ReportingCellStatusOpt::ValueType v;
      _noReporting_Type.read(reader, v);
      value.set_noReporting(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _intraFreqReportingCriteria_Type.toString() + ", " + _periodicalReportingCriteria_Type.toString() + ", " + _noReporting_Type.toString());
   }
}

void IntraFreqReportCriteria::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_intraFreqReportingCriteria_Choosen())
      _intraFreqReportingCriteria_Type.write(writer, value.get_intraFreqReportingCriteria());
   else if (value.has_periodicalReportingCriteria_Choosen())
      _periodicalReportingCriteria_Type.write(writer, value.get_periodicalReportingCriteria());
   else if (value.has_noReporting_Choosen())
      _noReporting_Type.write(writer, value.get_noReporting());
}


void IntraFreqReportCriteria-r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_intraFreqReportingCriteria_Type)
   {
      asn1::generated::IntraFreqReportingCriteria_r4::ValueType v;
      _intraFreqReportingCriteria_Type.read(reader, v);
      value.set_intraFreqReportingCriteria(v);
   }
   else if (choosenType == &_periodicalReportingCriteria_Type)
   {
      asn1::generated::PeriodicalWithReportingCellStatus::ValueType v;
      _periodicalReportingCriteria_Type.read(reader, v);
      value.set_periodicalReportingCriteria(v);
   }
   else if (choosenType == &_noReporting_Type)
   {
      asn1::generated::ReportingCellStatusOpt::ValueType v;
      _noReporting_Type.read(reader, v);
      value.set_noReporting(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _intraFreqReportingCriteria_Type.toString() + ", " + _periodicalReportingCriteria_Type.toString() + ", " + _noReporting_Type.toString());
   }
}

void IntraFreqReportCriteria-r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_intraFreqReportingCriteria_Choosen())
      _intraFreqReportingCriteria_Type.write(writer, value.get_intraFreqReportingCriteria());
   else if (value.has_periodicalReportingCriteria_Choosen())
      _periodicalReportingCriteria_Type.write(writer, value.get_periodicalReportingCriteria());
   else if (value.has_noReporting_Choosen())
      _noReporting_Type.write(writer, value.get_noReporting());
}


void IntraFreqReportCriteria-r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_intraFreqReportingCriteria_Type)
   {
      asn1::generated::IntraFreqReportingCriteria_r6::ValueType v;
      _intraFreqReportingCriteria_Type.read(reader, v);
      value.set_intraFreqReportingCriteria(v);
   }
   else if (choosenType == &_periodicalReportingCriteria_Type)
   {
      asn1::generated::PeriodicalWithReportingCellStatus::ValueType v;
      _periodicalReportingCriteria_Type.read(reader, v);
      value.set_periodicalReportingCriteria(v);
   }
   else if (choosenType == &_noReporting_Type)
   {
      asn1::generated::ReportingCellStatusOpt::ValueType v;
      _noReporting_Type.read(reader, v);
      value.set_noReporting(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _intraFreqReportingCriteria_Type.toString() + ", " + _periodicalReportingCriteria_Type.toString() + ", " + _noReporting_Type.toString());
   }
}

void IntraFreqReportCriteria-r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_intraFreqReportingCriteria_Choosen())
      _intraFreqReportingCriteria_Type.write(writer, value.get_intraFreqReportingCriteria());
   else if (value.has_periodicalReportingCriteria_Choosen())
      _periodicalReportingCriteria_Type.write(writer, value.get_periodicalReportingCriteria());
   else if (value.has_noReporting_Choosen())
      _noReporting_Type.write(writer, value.get_noReporting());
}


void IntraFreqReportingCriteria::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqEventCriteriaList::ValueType v;
      _eventCriteriaList_Type.read(reader, v);
      value.set_eventCriteriaList(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqReportingCriteria::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _eventCriteriaList_Type.write(writer, value.get_eventCriteriaList());

   writer.writeSequenceEnd();
}


void IntraFreqReportingCriteria_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqEventCriteriaList_r4::ValueType v;
      _eventCriteriaList_Type.read(reader, v);
      value.set_eventCriteriaList(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqReportingCriteria_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _eventCriteriaList_Type.write(writer, value.get_eventCriteriaList());

   writer.writeSequenceEnd();
}


void IntraFreqReportingCriteria_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqEventCriteriaList_LCR_r4::ValueType v;
      _eventCriteriaList_Type.read(reader, v);
      value.set_eventCriteriaList(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqReportingCriteria_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _eventCriteriaList_Type.write(writer, value.get_eventCriteriaList());

   writer.writeSequenceEnd();
}


void IntraFreqReportingCriteria_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqEventCriteriaList_r6::ValueType v;
      _eventCriteriaList_Type.read(reader, v);
      value.set_eventCriteriaList(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqReportingCriteria_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _eventCriteriaList_Type.write(writer, value.get_eventCriteriaList());

   writer.writeSequenceEnd();
}


void IntraFreqReportingQuantity::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CellReportingQuantities::ValueType v;
      _activeSetReportingQuantities_Type.read(reader, v);
      value.set_activeSetReportingQuantities(v);
   }
   {
      asn1::generated::CellReportingQuantities::ValueType v;
      _monitoredSetReportingQuantities_Type.read(reader, v);
      value.set_monitoredSetReportingQuantities(v);
   }
   {
      asn1::generated::CellReportingQuantities::ValueType v;
      _detectedSetReportingQuantities_Type.read(reader, v);
      value.set_detectedSetReportingQuantities(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqReportingQuantity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _activeSetReportingQuantities_Type.write(writer, value.get_activeSetReportingQuantities());
   _monitoredSetReportingQuantities_Type.write(writer, value.get_monitoredSetReportingQuantities());
   _detectedSetReportingQuantities_Type.write(writer, value.get_detectedSetReportingQuantities());

   writer.writeSequenceEnd();
}


void IntraFreqReportingQuantityForRACH::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SFN_SFN_OTD_Type::ValueType v;
      _sfn_SFN_OTD_Type_Type.read(reader, v);
      value.set_sfn_SFN_OTD_Type(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_intraFreqRepQuantityRACH-FDD_INTERNAL_asn1__generated__IntraFreqRepQuantityRACH_FDD_tdd_INTERNAL__SequenceType_intraFreqRepQuantityRACH-TDDList_INTERNAL_asn1__generated__IntraFreqRepQuantityRACH_TDDList::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqReportingQuantityForRACH::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sfn_SFN_OTD_Type_Type.write(writer, value.get_sfn_SFN_OTD_Type());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void IntraFrequencyMeasurement::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqCellInfoList::ValueType v;
      _intraFreqCellInfoList_Type.read(reader, v);
      value.set_intraFreqCellInfoList(v);
   }
   {
      asn1::generated::IntraFreqMeasQuantity::ValueType v;
      _intraFreqMeasQuantity_Type.read(reader, v);
      value.set_intraFreqMeasQuantity(v);
   }
   {
      asn1::generated::IntraFreqReportingQuantity::ValueType v;
      _intraFreqReportingQuantity_Type.read(reader, v);
      value.set_intraFreqReportingQuantity(v);
   }
   {
      asn1::generated::MeasurementValidity::ValueType v;
      _measurementValidity_Type.read(reader, v);
      value.set_measurementValidity(v);
   }
   {
      asn1::generated::IntraFreqReportCriteria::ValueType v;
      _reportCriteria_Type.read(reader, v);
      value.set_reportCriteria(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFrequencyMeasurement::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqCellInfoList_Type.write(writer, value.get_intraFreqCellInfoList());
   _intraFreqMeasQuantity_Type.write(writer, value.get_intraFreqMeasQuantity());
   _intraFreqReportingQuantity_Type.write(writer, value.get_intraFreqReportingQuantity());
   _measurementValidity_Type.write(writer, value.get_measurementValidity());
   _reportCriteria_Type.write(writer, value.get_reportCriteria());

   writer.writeSequenceEnd();
}


void IntraFrequencyMeasurement_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqCellInfoList_r4::ValueType v;
      _intraFreqCellInfoList_Type.read(reader, v);
      value.set_intraFreqCellInfoList(v);
   }
   {
      asn1::generated::IntraFreqMeasQuantity::ValueType v;
      _intraFreqMeasQuantity_Type.read(reader, v);
      value.set_intraFreqMeasQuantity(v);
   }
   {
      asn1::generated::IntraFreqReportingQuantity::ValueType v;
      _intraFreqReportingQuantity_Type.read(reader, v);
      value.set_intraFreqReportingQuantity(v);
   }
   {
      asn1::generated::MeasurementValidity::ValueType v;
      _measurementValidity_Type.read(reader, v);
      value.set_measurementValidity(v);
   }
   {
      asn1::generated::IntraFreqReportCriteria_r4::ValueType v;
      _reportCriteria_Type.read(reader, v);
      value.set_reportCriteria(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFrequencyMeasurement_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqCellInfoList_Type.write(writer, value.get_intraFreqCellInfoList());
   _intraFreqMeasQuantity_Type.write(writer, value.get_intraFreqMeasQuantity());
   _intraFreqReportingQuantity_Type.write(writer, value.get_intraFreqReportingQuantity());
   _measurementValidity_Type.write(writer, value.get_measurementValidity());
   _reportCriteria_Type.write(writer, value.get_reportCriteria());

   writer.writeSequenceEnd();
}


void IntraFrequencyMeasurement_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqCellInfoList_r4::ValueType v;
      _intraFreqCellInfoList_Type.read(reader, v);
      value.set_intraFreqCellInfoList(v);
   }
   {
      asn1::generated::IntraFreqMeasQuantity::ValueType v;
      _intraFreqMeasQuantity_Type.read(reader, v);
      value.set_intraFreqMeasQuantity(v);
   }
   {
      asn1::generated::IntraFreqReportingQuantity::ValueType v;
      _intraFreqReportingQuantity_Type.read(reader, v);
      value.set_intraFreqReportingQuantity(v);
   }
   {
      asn1::generated::MeasurementValidity::ValueType v;
      _measurementValidity_Type.read(reader, v);
      value.set_measurementValidity(v);
   }
   {
      asn1::generated::IntraFreqReportCriteria_r6::ValueType v;
      _reportCriteria_Type.read(reader, v);
      value.set_reportCriteria(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFrequencyMeasurement_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqCellInfoList_Type.write(writer, value.get_intraFreqCellInfoList());
   _intraFreqMeasQuantity_Type.write(writer, value.get_intraFreqMeasQuantity());
   _intraFreqReportingQuantity_Type.write(writer, value.get_intraFreqReportingQuantity());
   _measurementValidity_Type.write(writer, value.get_measurementValidity());
   _reportCriteria_Type.write(writer, value.get_reportCriteria());

   writer.writeSequenceEnd();
}


void MeasuredResults::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_intraFreqMeasuredResultsList_Type)
   {
      asn1::generated::IntraFreqMeasuredResultsList::ValueType v;
      _intraFreqMeasuredResultsList_Type.read(reader, v);
      value.set_intraFreqMeasuredResultsList(v);
   }
   else if (choosenType == &_interFreqMeasuredResultsList_Type)
   {
      asn1::generated::InterFreqMeasuredResultsList::ValueType v;
      _interFreqMeasuredResultsList_Type.read(reader, v);
      value.set_interFreqMeasuredResultsList(v);
   }
   else if (choosenType == &_interRATMeasuredResultsList_Type)
   {
      asn1::generated::InterRATMeasuredResultsList::ValueType v;
      _interRATMeasuredResultsList_Type.read(reader, v);
      value.set_interRATMeasuredResultsList(v);
   }
   else if (choosenType == &_trafficVolumeMeasuredResultsList_Type)
   {
      asn1::generated::TrafficVolumeMeasuredResultsList::ValueType v;
      _trafficVolumeMeasuredResultsList_Type.read(reader, v);
      value.set_trafficVolumeMeasuredResultsList(v);
   }
   else if (choosenType == &_qualityMeasuredResults_Type)
   {
      asn1::generated::QualityMeasuredResults::ValueType v;
      _qualityMeasuredResults_Type.read(reader, v);
      value.set_qualityMeasuredResults(v);
   }
   else if (choosenType == &_ue-InternalMeasuredResults_Type)
   {
      asn1::generated::UE_InternalMeasuredResults::ValueType v;
      _ue_InternalMeasuredResults_Type.read(reader, v);
      value.set_ue_InternalMeasuredResults(v);
   }
   else if (choosenType == &_ue-positioning-MeasuredResults_Type)
   {
      asn1::generated::UE_Positioning_MeasuredResults::ValueType v;
      _ue_positioning_MeasuredResults_Type.read(reader, v);
      value.set_ue_positioning_MeasuredResults(v);
   }
   else if (choosenType == &_spare_Type)
   {
      asn1::NullType::ValueType v;
      _spare_Type.read(reader, v);
      value.set_spare(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _intraFreqMeasuredResultsList_Type.toString() + ", " + _interFreqMeasuredResultsList_Type.toString() + ", " + _interRATMeasuredResultsList_Type.toString() + ", " + _trafficVolumeMeasuredResultsList_Type.toString() + ", " + _qualityMeasuredResults_Type.toString() + ", " + _ue-InternalMeasuredResults_Type.toString() + ", " + _ue-positioning-MeasuredResults_Type.toString() + ", " + _spare_Type.toString());
   }
}

void MeasuredResults::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_intraFreqMeasuredResultsList_Choosen())
      _intraFreqMeasuredResultsList_Type.write(writer, value.get_intraFreqMeasuredResultsList());
   else if (value.has_interFreqMeasuredResultsList_Choosen())
      _interFreqMeasuredResultsList_Type.write(writer, value.get_interFreqMeasuredResultsList());
   else if (value.has_interRATMeasuredResultsList_Choosen())
      _interRATMeasuredResultsList_Type.write(writer, value.get_interRATMeasuredResultsList());
   else if (value.has_trafficVolumeMeasuredResultsList_Choosen())
      _trafficVolumeMeasuredResultsList_Type.write(writer, value.get_trafficVolumeMeasuredResultsList());
   else if (value.has_qualityMeasuredResults_Choosen())
      _qualityMeasuredResults_Type.write(writer, value.get_qualityMeasuredResults());
   else if (value.has_ue-InternalMeasuredResults_Choosen())
      _ue-InternalMeasuredResults_Type.write(writer, value.get_ue-InternalMeasuredResults());
   else if (value.has_ue-positioning-MeasuredResults_Choosen())
      _ue-positioning-MeasuredResults_Type.write(writer, value.get_ue-positioning-MeasuredResults());
   else if (value.has_spare_Choosen())
      _spare_Type.write(writer, value.get_spare());
}


void MeasuredResults_v390ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_MeasuredResults_v390ext::ValueType v;
      _ue_positioning_MeasuredResults_v390ext_Type.read(reader, v);
      value.set_ue_positioning_MeasuredResults_v390ext(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasuredResults_v390ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_positioning_MeasuredResults_v390ext_Type.write(writer, value.get_ue_positioning_MeasuredResults_v390ext());

   writer.writeSequenceEnd();
}


void MeasuredResults-v590ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_intraFrequencyMeasuredResultsList_Type)
   {
      asn1::generated::IntraFrequencyMeasuredResultsList_v590ext::ValueType v;
      _intraFrequencyMeasuredResultsList_Type.read(reader, v);
      value.set_intraFrequencyMeasuredResultsList(v);
   }
   else if (choosenType == &_interFrequencyMeasuredResultsList_Type)
   {
      asn1::generated::InterFrequencyMeasuredResultsList_v590ext::ValueType v;
      _interFrequencyMeasuredResultsList_Type.read(reader, v);
      value.set_interFrequencyMeasuredResultsList(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _intraFrequencyMeasuredResultsList_Type.toString() + ", " + _interFrequencyMeasuredResultsList_Type.toString());
   }
}

void MeasuredResults-v590ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_intraFrequencyMeasuredResultsList_Choosen())
      _intraFrequencyMeasuredResultsList_Type.write(writer, value.get_intraFrequencyMeasuredResultsList());
   else if (value.has_interFrequencyMeasuredResultsList_Choosen())
      _interFrequencyMeasuredResultsList_Type.write(writer, value.get_interFrequencyMeasuredResultsList());
}


void MeasuredResults-v7xyext::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_ueInternalMeasuredResults_Type)
   {
      asn1::generated::UE_InternalMeasuredResults_r7::ValueType v;
      _ueInternalMeasuredResults_Type.read(reader, v);
      value.set_ueInternalMeasuredResults(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _ueInternalMeasuredResults_Type.toString());
   }
}

void MeasuredResults-v7xyext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_ueInternalMeasuredResults_Choosen())
      _ueInternalMeasuredResults_Type.write(writer, value.get_ueInternalMeasuredResults());
}


void MeasuredResults-LCR-r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_intraFreqMeasuredResultsList_Type)
   {
      asn1::generated::IntraFreqMeasuredResultsList::ValueType v;
      _intraFreqMeasuredResultsList_Type.read(reader, v);
      value.set_intraFreqMeasuredResultsList(v);
   }
   else if (choosenType == &_interFreqMeasuredResultsList_Type)
   {
      asn1::generated::InterFreqMeasuredResultsList::ValueType v;
      _interFreqMeasuredResultsList_Type.read(reader, v);
      value.set_interFreqMeasuredResultsList(v);
   }
   else if (choosenType == &_interRATMeasuredResultsList_Type)
   {
      asn1::generated::InterRATMeasuredResultsList::ValueType v;
      _interRATMeasuredResultsList_Type.read(reader, v);
      value.set_interRATMeasuredResultsList(v);
   }
   else if (choosenType == &_trafficVolumeMeasuredResultsList_Type)
   {
      asn1::generated::TrafficVolumeMeasuredResultsList::ValueType v;
      _trafficVolumeMeasuredResultsList_Type.read(reader, v);
      value.set_trafficVolumeMeasuredResultsList(v);
   }
   else if (choosenType == &_qualityMeasuredResults_Type)
   {
      asn1::generated::QualityMeasuredResults::ValueType v;
      _qualityMeasuredResults_Type.read(reader, v);
      value.set_qualityMeasuredResults(v);
   }
   else if (choosenType == &_ue-InternalMeasuredResults_Type)
   {
      asn1::generated::UE_InternalMeasuredResults_LCR_r4::ValueType v;
      _ue_InternalMeasuredResults_Type.read(reader, v);
      value.set_ue_InternalMeasuredResults(v);
   }
   else if (choosenType == &_ue-positioniing-MeasuredResults_Type)
   {
      asn1::generated::UE_Positioning_MeasuredResults::ValueType v;
      _ue_positioniing_MeasuredResults_Type.read(reader, v);
      value.set_ue_positioniing_MeasuredResults(v);
   }
   else if (choosenType == &_spare_Type)
   {
      asn1::NullType::ValueType v;
      _spare_Type.read(reader, v);
      value.set_spare(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _intraFreqMeasuredResultsList_Type.toString() + ", " + _interFreqMeasuredResultsList_Type.toString() + ", " + _interRATMeasuredResultsList_Type.toString() + ", " + _trafficVolumeMeasuredResultsList_Type.toString() + ", " + _qualityMeasuredResults_Type.toString() + ", " + _ue-InternalMeasuredResults_Type.toString() + ", " + _ue-positioniing-MeasuredResults_Type.toString() + ", " + _spare_Type.toString());
   }
}

void MeasuredResults-LCR-r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_intraFreqMeasuredResultsList_Choosen())
      _intraFreqMeasuredResultsList_Type.write(writer, value.get_intraFreqMeasuredResultsList());
   else if (value.has_interFreqMeasuredResultsList_Choosen())
      _interFreqMeasuredResultsList_Type.write(writer, value.get_interFreqMeasuredResultsList());
   else if (value.has_interRATMeasuredResultsList_Choosen())
      _interRATMeasuredResultsList_Type.write(writer, value.get_interRATMeasuredResultsList());
   else if (value.has_trafficVolumeMeasuredResultsList_Choosen())
      _trafficVolumeMeasuredResultsList_Type.write(writer, value.get_trafficVolumeMeasuredResultsList());
   else if (value.has_qualityMeasuredResults_Choosen())
      _qualityMeasuredResults_Type.write(writer, value.get_qualityMeasuredResults());
   else if (value.has_ue-InternalMeasuredResults_Choosen())
      _ue-InternalMeasuredResults_Type.write(writer, value.get_ue-InternalMeasuredResults());
   else if (value.has_ue-positioniing-MeasuredResults_Choosen())
      _ue-positioniing-MeasuredResults_Type.write(writer, value.get_ue-positioniing-MeasuredResults());
   else if (value.has_spare_Choosen())
      _spare_Type.write(writer, value.get_spare());
}


void MeasuredResultsOnRACH::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__SequenceType_modeSpecificInfo_INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_measurementQuantity_INTERNAL__ChoiceType_cpich-Ec-N0_INTERNAL_asn1__generated__CPICH_Ec_N0_cpich-RSCP_INTERNAL_asn1__generated__CPICH_RSCP_pathloss_INTERNAL_asn1__generated__Pathloss_spare_INTERNAL_asn1__NullType_tdd_INTERNAL__SequenceType_timeslotISCP_INTERNAL_asn1__generated__TimeslotISCP_List_primaryCCPCH-RSCP_INTERNAL_asn1__generated__PrimaryCCPCH_RSCP::ValueType v;
      _currentCell_Type.read(reader, v);
      value.set_currentCell(v);
   }
   {
      asn1::generated::MonitoredCellRACH_List::ValueType v;
      _monitoredCells_Type.read(reader, v);
      value.set_monitoredCells(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasuredResultsOnRACH::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _currentCell_Type.write(writer, value.get_currentCell());
   _monitoredCells_Type.write(writer, value.get_monitoredCells());

   writer.writeSequenceEnd();
}


void MeasuredResultsOnRACHinterFreq::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _interFreqCellIndication_SIB11_Type.read(reader, v);
      value.set_interFreqCellIndication_SIB11(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _interFreqCellIndication_SIB12_Type.read(reader, v);
      value.set_interFreqCellIndication_SIB12(v);
   }
   {
      asn1::generated::InterFreqRACHRepCellsList::ValueType v;
      _interFreqRACHRepCellsList_Type.read(reader, v);
      value.set_interFreqRACHRepCellsList(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasuredResultsOnRACHinterFreq::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellIndication_SIB11_Type.write(writer, value.get_interFreqCellIndication_SIB11());
   _interFreqCellIndication_SIB12_Type.write(writer, value.get_interFreqCellIndication_SIB12());
   _interFreqRACHRepCellsList_Type.write(writer, value.get_interFreqRACHRepCellsList());

   writer.writeSequenceEnd();
}


void MeasurementCommand::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_setup_Type)
   {
      asn1::generated::MeasurementType::ValueType v;
      _setup_Type.read(reader, v);
      value.set_setup(v);
   }
   else if (choosenType == &_modify_Type)
   {
      _INTERNAL__SequenceType_measurementType_INTERNAL_asn1__generated__MeasurementType::ValueType v;
      _modify_Type.read(reader, v);
      value.set_modify(v);
   }
   else if (choosenType == &_release_Type)
   {
      asn1::NullType::ValueType v;
      _release_Type.read(reader, v);
      value.set_release(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _setup_Type.toString() + ", " + _modify_Type.toString() + ", " + _release_Type.toString());
   }
}

void MeasurementCommand::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_setup_Choosen())
      _setup_Type.write(writer, value.get_setup());
   else if (value.has_modify_Choosen())
      _modify_Type.write(writer, value.get_modify());
   else if (value.has_release_Choosen())
      _release_Type.write(writer, value.get_release());
}


void MeasurementCommand-r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_setup_Type)
   {
      asn1::generated::MeasurementType_r4::ValueType v;
      _setup_Type.read(reader, v);
      value.set_setup(v);
   }
   else if (choosenType == &_modify_Type)
   {
      _INTERNAL__SequenceType_measurementType_INTERNAL_asn1__generated__MeasurementType_r4::ValueType v;
      _modify_Type.read(reader, v);
      value.set_modify(v);
   }
   else if (choosenType == &_release_Type)
   {
      asn1::NullType::ValueType v;
      _release_Type.read(reader, v);
      value.set_release(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _setup_Type.toString() + ", " + _modify_Type.toString() + ", " + _release_Type.toString());
   }
}

void MeasurementCommand-r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_setup_Choosen())
      _setup_Type.write(writer, value.get_setup());
   else if (value.has_modify_Choosen())
      _modify_Type.write(writer, value.get_modify());
   else if (value.has_release_Choosen())
      _release_Type.write(writer, value.get_release());
}


void MeasurementCommand-r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_setup_Type)
   {
      asn1::generated::MeasurementType_r6::ValueType v;
      _setup_Type.read(reader, v);
      value.set_setup(v);
   }
   else if (choosenType == &_modify_Type)
   {
      _INTERNAL__SequenceType_measurementType_INTERNAL_asn1__generated__MeasurementType_r6::ValueType v;
      _modify_Type.read(reader, v);
      value.set_modify(v);
   }
   else if (choosenType == &_release_Type)
   {
      asn1::NullType::ValueType v;
      _release_Type.read(reader, v);
      value.set_release(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _setup_Type.toString() + ", " + _modify_Type.toString() + ", " + _release_Type.toString());
   }
}

void MeasurementCommand-r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_setup_Choosen())
      _setup_Type.write(writer, value.get_setup());
   else if (value.has_modify_Choosen())
      _modify_Type.write(writer, value.get_modify());
   else if (value.has_release_Choosen())
      _release_Type.write(writer, value.get_release());
}


void MeasurementControlSysInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_hcs-not-used_INTERNAL__SequenceType_cellSelectQualityMeasure_INTERNAL__ChoiceType_cpich-RSCP_INTERNAL__SequenceType_intraFreqMeasurementSysInfo_INTERNAL_asn1__generated__IntraFreqMeasurementSysInfo_RSCP_interFreqMeasurementSysInfo_INTERNAL_asn1__generated__InterFreqMeasurementSysInfo_RSCP_cpich-Ec-N0_INTERNAL__SequenceType_intraFreqMeasurementSysInfo_INTERNAL_asn1__generated__IntraFreqMeasurementSysInfo_ECN0_interFreqMeasurementSysInfo_INTERNAL_asn1__generated__InterFreqMeasurementSysInfo_ECN0_interRATMeasurementSysInfo_INTERNAL_asn1__generated__InterRATMeasurementSysInfo_B_hcs-used_INTERNAL__SequenceType_cellSelectQualityMeasure_INTERNAL__ChoiceType_cpich-RSCP_INTERNAL__SequenceType_intraFreqMeasurementSysInfo_INTERNAL_asn1__generated__IntraFreqMeasurementSysInfo_HCS_RSCP_interFreqMeasurementSysInfo_INTERNAL_asn1__generated__InterFreqMeasurementSysInfo_HCS_RSCP_cpich-Ec-N0_INTERNAL__SequenceType_intraFreqMeasurementSysInfo_INTERNAL_asn1__generated__IntraFreqMeasurementSysInfo_HCS_ECN0_interFreqMeasurementSysInfo_INTERNAL_asn1__generated__InterFreqMeasurementSysInfo_HCS_ECN0_interRATMeasurementSysInfo_INTERNAL_asn1__generated__InterRATMeasurementSysInfo::ValueType v;
      _use_of_HCS_Type.read(reader, v);
      value.set_use_of_HCS(v);
   }
   {
      asn1::generated::TrafficVolumeMeasSysInfo::ValueType v;
      _trafficVolumeMeasSysInfo_Type.read(reader, v);
      value.set_trafficVolumeMeasSysInfo(v);
   }
   {
      asn1::generated::UE_InternalMeasurementSysInfo::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementControlSysInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _use_of_HCS_Type.write(writer, value.get_use_of_HCS());
   _trafficVolumeMeasSysInfo_Type.write(writer, value.get_trafficVolumeMeasSysInfo());
   _dummy_Type.write(writer, value.get_dummy());

   writer.writeSequenceEnd();
}


void MeasurementControlSysInfo_LCR_r4_ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_hcs-not-used_INTERNAL__SequenceType_cellSelectQualityMeasure_INTERNAL__ChoiceType_cpich-RSCP_INTERNAL__SequenceType_intraFreqMeasurementSysInfo_INTERNAL_asn1__generated__IntraFreqMeasurementSysInfo_RSCP_LCR_r4_interFreqMeasurementSysInfo_INTERNAL_asn1__generated__InterFreqMeasurementSysInfo_RSCP_LCR_r4_cpich-Ec-N0_INTERNAL__SequenceType_intraFreqMeasurementSysInfo_INTERNAL_asn1__generated__IntraFreqMeasurementSysInfo_ECN0_LCR_r4_interFreqMeasurementSysInfo_INTERNAL_asn1__generated__InterFreqMeasurementSysInfo_ECN0_LCR_r4_hcs-used_INTERNAL__SequenceType_cellSelectQualityMeasure_INTERNAL__ChoiceType_cpich-RSCP_INTERNAL__SequenceType_intraFreqMeasurementSysInfo_INTERNAL_asn1__generated__IntraFreqMeasurementSysInfo_HCS_RSCP_LCR_r4_interFreqMeasurementSysInfo_INTERNAL_asn1__generated__InterFreqMeasurementSysInfo_HCS_RSCP_LCR_r4_cpich-Ec-N0_INTERNAL__SequenceType_intraFreqMeasurementSysInfo_INTERNAL_asn1__generated__IntraFreqMeasurementSysInfo_HCS_ECN0_LCR_r4_interFreqMeasurementSysInfo_INTERNAL_asn1__generated__InterFreqMeasurementSysInfo_HCS_ECN0_LCR_r4::ValueType v;
      _use_of_HCS_Type.read(reader, v);
      value.set_use_of_HCS(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementControlSysInfo_LCR_r4_ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _use_of_HCS_Type.write(writer, value.get_use_of_HCS());

   writer.writeSequenceEnd();
}


void MeasurementReportingMode::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TransferMode::ValueType v;
      _measurementReportTransferMode_Type.read(reader, v);
      value.set_measurementReportTransferMode(v);
   }
   {
      asn1::generated::PeriodicalOrEventTrigger::ValueType v;
      _periodicalOrEventTrigger_Type.read(reader, v);
      value.set_periodicalOrEventTrigger(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementReportingMode::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _measurementReportTransferMode_Type.write(writer, value.get_measurementReportTransferMode());
   _periodicalOrEventTrigger_Type.write(writer, value.get_periodicalOrEventTrigger());

   writer.writeSequenceEnd();
}


void MeasurementType::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_intraFrequencyMeasurement_Type)
   {
      asn1::generated::IntraFrequencyMeasurement::ValueType v;
      _intraFrequencyMeasurement_Type.read(reader, v);
      value.set_intraFrequencyMeasurement(v);
   }
   else if (choosenType == &_interFrequencyMeasurement_Type)
   {
      asn1::generated::InterFrequencyMeasurement::ValueType v;
      _interFrequencyMeasurement_Type.read(reader, v);
      value.set_interFrequencyMeasurement(v);
   }
   else if (choosenType == &_interRATMeasurement_Type)
   {
      asn1::generated::InterRATMeasurement::ValueType v;
      _interRATMeasurement_Type.read(reader, v);
      value.set_interRATMeasurement(v);
   }
   else if (choosenType == &_ue-positioning-Measurement_Type)
   {
      asn1::generated::UE_Positioning_Measurement::ValueType v;
      _ue_positioning_Measurement_Type.read(reader, v);
      value.set_ue_positioning_Measurement(v);
   }
   else if (choosenType == &_trafficVolumeMeasurement_Type)
   {
      asn1::generated::TrafficVolumeMeasurement::ValueType v;
      _trafficVolumeMeasurement_Type.read(reader, v);
      value.set_trafficVolumeMeasurement(v);
   }
   else if (choosenType == &_qualityMeasurement_Type)
   {
      asn1::generated::QualityMeasurement::ValueType v;
      _qualityMeasurement_Type.read(reader, v);
      value.set_qualityMeasurement(v);
   }
   else if (choosenType == &_ue-InternalMeasurement_Type)
   {
      asn1::generated::UE_InternalMeasurement::ValueType v;
      _ue_InternalMeasurement_Type.read(reader, v);
      value.set_ue_InternalMeasurement(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _intraFrequencyMeasurement_Type.toString() + ", " + _interFrequencyMeasurement_Type.toString() + ", " + _interRATMeasurement_Type.toString() + ", " + _ue-positioning-Measurement_Type.toString() + ", " + _trafficVolumeMeasurement_Type.toString() + ", " + _qualityMeasurement_Type.toString() + ", " + _ue-InternalMeasurement_Type.toString());
   }
}

void MeasurementType::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_intraFrequencyMeasurement_Choosen())
      _intraFrequencyMeasurement_Type.write(writer, value.get_intraFrequencyMeasurement());
   else if (value.has_interFrequencyMeasurement_Choosen())
      _interFrequencyMeasurement_Type.write(writer, value.get_interFrequencyMeasurement());
   else if (value.has_interRATMeasurement_Choosen())
      _interRATMeasurement_Type.write(writer, value.get_interRATMeasurement());
   else if (value.has_ue-positioning-Measurement_Choosen())
      _ue-positioning-Measurement_Type.write(writer, value.get_ue-positioning-Measurement());
   else if (value.has_trafficVolumeMeasurement_Choosen())
      _trafficVolumeMeasurement_Type.write(writer, value.get_trafficVolumeMeasurement());
   else if (value.has_qualityMeasurement_Choosen())
      _qualityMeasurement_Type.write(writer, value.get_qualityMeasurement());
   else if (value.has_ue-InternalMeasurement_Choosen())
      _ue-InternalMeasurement_Type.write(writer, value.get_ue-InternalMeasurement());
}


void MeasurementType-r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_intraFrequencyMeasurement_Type)
   {
      asn1::generated::IntraFrequencyMeasurement_r4::ValueType v;
      _intraFrequencyMeasurement_Type.read(reader, v);
      value.set_intraFrequencyMeasurement(v);
   }
   else if (choosenType == &_interFrequencyMeasurement_Type)
   {
      asn1::generated::InterFrequencyMeasurement_r4::ValueType v;
      _interFrequencyMeasurement_Type.read(reader, v);
      value.set_interFrequencyMeasurement(v);
   }
   else if (choosenType == &_interRATMeasurement_Type)
   {
      asn1::generated::InterRATMeasurement_r4::ValueType v;
      _interRATMeasurement_Type.read(reader, v);
      value.set_interRATMeasurement(v);
   }
   else if (choosenType == &_up-Measurement_Type)
   {
      asn1::generated::UE_Positioning_Measurement_r4::ValueType v;
      _up_Measurement_Type.read(reader, v);
      value.set_up_Measurement(v);
   }
   else if (choosenType == &_trafficVolumeMeasurement_Type)
   {
      asn1::generated::TrafficVolumeMeasurement::ValueType v;
      _trafficVolumeMeasurement_Type.read(reader, v);
      value.set_trafficVolumeMeasurement(v);
   }
   else if (choosenType == &_qualityMeasurement_Type)
   {
      asn1::generated::QualityMeasurement::ValueType v;
      _qualityMeasurement_Type.read(reader, v);
      value.set_qualityMeasurement(v);
   }
   else if (choosenType == &_ue-InternalMeasurement_Type)
   {
      asn1::generated::UE_InternalMeasurement_r4::ValueType v;
      _ue_InternalMeasurement_Type.read(reader, v);
      value.set_ue_InternalMeasurement(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _intraFrequencyMeasurement_Type.toString() + ", " + _interFrequencyMeasurement_Type.toString() + ", " + _interRATMeasurement_Type.toString() + ", " + _up-Measurement_Type.toString() + ", " + _trafficVolumeMeasurement_Type.toString() + ", " + _qualityMeasurement_Type.toString() + ", " + _ue-InternalMeasurement_Type.toString());
   }
}

void MeasurementType-r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_intraFrequencyMeasurement_Choosen())
      _intraFrequencyMeasurement_Type.write(writer, value.get_intraFrequencyMeasurement());
   else if (value.has_interFrequencyMeasurement_Choosen())
      _interFrequencyMeasurement_Type.write(writer, value.get_interFrequencyMeasurement());
   else if (value.has_interRATMeasurement_Choosen())
      _interRATMeasurement_Type.write(writer, value.get_interRATMeasurement());
   else if (value.has_up-Measurement_Choosen())
      _up-Measurement_Type.write(writer, value.get_up-Measurement());
   else if (value.has_trafficVolumeMeasurement_Choosen())
      _trafficVolumeMeasurement_Type.write(writer, value.get_trafficVolumeMeasurement());
   else if (value.has_qualityMeasurement_Choosen())
      _qualityMeasurement_Type.write(writer, value.get_qualityMeasurement());
   else if (value.has_ue-InternalMeasurement_Choosen())
      _ue-InternalMeasurement_Type.write(writer, value.get_ue-InternalMeasurement());
}


void MeasurementType-r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_intraFrequencyMeasurement_Type)
   {
      asn1::generated::IntraFrequencyMeasurement_r6::ValueType v;
      _intraFrequencyMeasurement_Type.read(reader, v);
      value.set_intraFrequencyMeasurement(v);
   }
   else if (choosenType == &_interFrequencyMeasurement_Type)
   {
      asn1::generated::InterFrequencyMeasurement_r6::ValueType v;
      _interFrequencyMeasurement_Type.read(reader, v);
      value.set_interFrequencyMeasurement(v);
   }
   else if (choosenType == &_interRATMeasurement_Type)
   {
      asn1::generated::InterRATMeasurement_r6::ValueType v;
      _interRATMeasurement_Type.read(reader, v);
      value.set_interRATMeasurement(v);
   }
   else if (choosenType == &_up-Measurement_Type)
   {
      asn1::generated::UE_Positioning_Measurement_r4::ValueType v;
      _up_Measurement_Type.read(reader, v);
      value.set_up_Measurement(v);
   }
   else if (choosenType == &_trafficVolumeMeasurement_Type)
   {
      asn1::generated::TrafficVolumeMeasurement::ValueType v;
      _trafficVolumeMeasurement_Type.read(reader, v);
      value.set_trafficVolumeMeasurement(v);
   }
   else if (choosenType == &_qualityMeasurement_Type)
   {
      asn1::generated::QualityMeasurement::ValueType v;
      _qualityMeasurement_Type.read(reader, v);
      value.set_qualityMeasurement(v);
   }
   else if (choosenType == &_ue-InternalMeasurement_Type)
   {
      asn1::generated::UE_InternalMeasurement_r4::ValueType v;
      _ue_InternalMeasurement_Type.read(reader, v);
      value.set_ue_InternalMeasurement(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _intraFrequencyMeasurement_Type.toString() + ", " + _interFrequencyMeasurement_Type.toString() + ", " + _interRATMeasurement_Type.toString() + ", " + _up-Measurement_Type.toString() + ", " + _trafficVolumeMeasurement_Type.toString() + ", " + _qualityMeasurement_Type.toString() + ", " + _ue-InternalMeasurement_Type.toString());
   }
}

void MeasurementType-r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_intraFrequencyMeasurement_Choosen())
      _intraFrequencyMeasurement_Type.write(writer, value.get_intraFrequencyMeasurement());
   else if (value.has_interFrequencyMeasurement_Choosen())
      _interFrequencyMeasurement_Type.write(writer, value.get_interFrequencyMeasurement());
   else if (value.has_interRATMeasurement_Choosen())
      _interRATMeasurement_Type.write(writer, value.get_interRATMeasurement());
   else if (value.has_up-Measurement_Choosen())
      _up-Measurement_Type.write(writer, value.get_up-Measurement());
   else if (value.has_trafficVolumeMeasurement_Choosen())
      _trafficVolumeMeasurement_Type.write(writer, value.get_trafficVolumeMeasurement());
   else if (value.has_qualityMeasurement_Choosen())
      _qualityMeasurement_Type.write(writer, value.get_qualityMeasurement());
   else if (value.has_ue-InternalMeasurement_Choosen())
      _ue-InternalMeasurement_Type.write(writer, value.get_ue-InternalMeasurement());
}


void MeasurementValidity::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__EnumeratedType::ValueType v;
      _ue_State_Type.read(reader, v);
      value.set_ue_State(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementValidity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_State_Type.write(writer, value.get_ue_State());

   writer.writeSequenceEnd();
}


void MonitoredCellRACH_Result::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SFN_SFN_ObsTimeDifference::ValueType v;
      _sfn_SFN_ObsTimeDifference_Type.read(reader, v);
      value.set_sfn_SFN_ObsTimeDifference(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-Info_INTERNAL_asn1__generated__PrimaryCPICH_Info_measurementQuantity_INTERNAL__ChoiceType_cpich-Ec-N0_INTERNAL_asn1__generated__CPICH_Ec_N0_cpich-RSCP_INTERNAL_asn1__generated__CPICH_RSCP_pathloss_INTERNAL_asn1__generated__Pathloss_spare_INTERNAL_asn1__NullType_tdd_INTERNAL__SequenceType_cellParametersID_INTERNAL_asn1__generated__CellParametersID_primaryCCPCH-RSCP_INTERNAL_asn1__generated__PrimaryCCPCH_RSCP::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void MonitoredCellRACH_Result::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sfn_SFN_ObsTimeDifference_Type.write(writer, value.get_sfn_SFN_ObsTimeDifference());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void N_CR_T_CRMaxHyst::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _n_CR_Type.read(reader, v);
      value.set_n_CR(v);
   }
   {
      asn1::generated::T_CRMaxHyst::ValueType v;
      _t_CRMaxHyst_Type.read(reader, v);
      value.set_t_CRMaxHyst(v);
   }

   reader.readSequenceEnd(*this);
}

void N_CR_T_CRMaxHyst::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _n_CR_Type.write(writer, value.get_n_CR());
   _t_CRMaxHyst_Type.write(writer, value.get_t_CRMaxHyst());

   writer.writeSequenceEnd();
}


void NavigationModelSatInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SatID::ValueType v;
      _satID_Type.read(reader, v);
      value.set_satID(v);
   }
   {
      asn1::generated::SatelliteStatus::ValueType v;
      _satelliteStatus_Type.read(reader, v);
      value.set_satelliteStatus(v);
   }
   {
      asn1::generated::EphemerisParameter::ValueType v;
      _ephemerisParameter_Type.read(reader, v);
      value.set_ephemerisParameter(v);
   }

   reader.readSequenceEnd(*this);
}

void NavigationModelSatInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _satID_Type.write(writer, value.get_satID());
   _satelliteStatus_Type.write(writer, value.get_satelliteStatus());
   _ephemerisParameter_Type.write(writer, value.get_ephemerisParameter());

   writer.writeSequenceEnd();
}


void EphemerisParameter::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _codeOnL2_Type.read(reader, v);
      value.set_codeOnL2(v);
   }
   {
      _INTERNAL_::ValueType v;
      _uraIndex_Type.read(reader, v);
      value.set_uraIndex(v);
   }
   {
      _INTERNAL_::ValueType v;
      _satHealth_Type.read(reader, v);
      value.set_satHealth(v);
   }
   {
      _INTERNAL_::ValueType v;
      _iodc_Type.read(reader, v);
      value.set_iodc(v);
   }
   {
      _INTERNAL_::ValueType v;
      _l2Pflag_Type.read(reader, v);
      value.set_l2Pflag(v);
   }
   {
      asn1::generated::SubFrame1Reserved::ValueType v;
      _sf1Revd_Type.read(reader, v);
      value.set_sf1Revd(v);
   }
   {
      _INTERNAL_::ValueType v;
      _t_GD_Type.read(reader, v);
      value.set_t_GD(v);
   }
   {
      _INTERNAL_::ValueType v;
      _t_oc_Type.read(reader, v);
      value.set_t_oc(v);
   }
   {
      _INTERNAL_::ValueType v;
      _af2_Type.read(reader, v);
      value.set_af2(v);
   }
   {
      _INTERNAL_::ValueType v;
      _af1_Type.read(reader, v);
      value.set_af1(v);
   }
   {
      _INTERNAL_::ValueType v;
      _af0_Type.read(reader, v);
      value.set_af0(v);
   }
   {
      _INTERNAL_::ValueType v;
      _c_rs_Type.read(reader, v);
      value.set_c_rs(v);
   }
   {
      _INTERNAL_::ValueType v;
      _delta_n_Type.read(reader, v);
      value.set_delta_n(v);
   }
   {
      _INTERNAL_::ValueType v;
      _m0_Type.read(reader, v);
      value.set_m0(v);
   }
   {
      _INTERNAL_::ValueType v;
      _c_uc_Type.read(reader, v);
      value.set_c_uc(v);
   }
   {
      _INTERNAL_::ValueType v;
      _e_Type.read(reader, v);
      value.set_e(v);
   }
   {
      _INTERNAL_::ValueType v;
      _c_us_Type.read(reader, v);
      value.set_c_us(v);
   }
   {
      _INTERNAL_::ValueType v;
      _a_Sqrt_Type.read(reader, v);
      value.set_a_Sqrt(v);
   }
   {
      _INTERNAL_::ValueType v;
      _t_oe_Type.read(reader, v);
      value.set_t_oe(v);
   }
   {
      _INTERNAL_::ValueType v;
      _fitInterval_Type.read(reader, v);
      value.set_fitInterval(v);
   }
   {
      _INTERNAL_::ValueType v;
      _aodo_Type.read(reader, v);
      value.set_aodo(v);
   }
   {
      _INTERNAL_::ValueType v;
      _c_ic_Type.read(reader, v);
      value.set_c_ic(v);
   }
   {
      _INTERNAL_::ValueType v;
      _omega0_Type.read(reader, v);
      value.set_omega0(v);
   }
   {
      _INTERNAL_::ValueType v;
      _c_is_Type.read(reader, v);
      value.set_c_is(v);
   }
   {
      _INTERNAL_::ValueType v;
      _i0_Type.read(reader, v);
      value.set_i0(v);
   }
   {
      _INTERNAL_::ValueType v;
      _c_rc_Type.read(reader, v);
      value.set_c_rc(v);
   }
   {
      _INTERNAL_::ValueType v;
      _omega_Type.read(reader, v);
      value.set_omega(v);
   }
   {
      _INTERNAL_::ValueType v;
      _omegaDot_Type.read(reader, v);
      value.set_omegaDot(v);
   }
   {
      _INTERNAL_::ValueType v;
      _iDot_Type.read(reader, v);
      value.set_iDot(v);
   }

   reader.readSequenceEnd(*this);
}

void EphemerisParameter::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _codeOnL2_Type.write(writer, value.get_codeOnL2());
   _uraIndex_Type.write(writer, value.get_uraIndex());
   _satHealth_Type.write(writer, value.get_satHealth());
   _iodc_Type.write(writer, value.get_iodc());
   _l2Pflag_Type.write(writer, value.get_l2Pflag());
   _sf1Revd_Type.write(writer, value.get_sf1Revd());
   _t_GD_Type.write(writer, value.get_t_GD());
   _t_oc_Type.write(writer, value.get_t_oc());
   _af2_Type.write(writer, value.get_af2());
   _af1_Type.write(writer, value.get_af1());
   _af0_Type.write(writer, value.get_af0());
   _c_rs_Type.write(writer, value.get_c_rs());
   _delta_n_Type.write(writer, value.get_delta_n());
   _m0_Type.write(writer, value.get_m0());
   _c_uc_Type.write(writer, value.get_c_uc());
   _e_Type.write(writer, value.get_e());
   _c_us_Type.write(writer, value.get_c_us());
   _a_Sqrt_Type.write(writer, value.get_a_Sqrt());
   _t_oe_Type.write(writer, value.get_t_oe());
   _fitInterval_Type.write(writer, value.get_fitInterval());
   _aodo_Type.write(writer, value.get_aodo());
   _c_ic_Type.write(writer, value.get_c_ic());
   _omega0_Type.write(writer, value.get_omega0());
   _c_is_Type.write(writer, value.get_c_is());
   _i0_Type.write(writer, value.get_i0());
   _c_rc_Type.write(writer, value.get_c_rc());
   _omega_Type.write(writer, value.get_omega());
   _omegaDot_Type.write(writer, value.get_omegaDot());
   _iDot_Type.write(writer, value.get_iDot());

   writer.writeSequenceEnd();
}


void Neighbour::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_neighbourIdentity_INTERNAL_asn1__generated__PrimaryCPICH_Info_uE-RX-TX-TimeDifferenceType2Info_INTERNAL_asn1__generated__UE_RX_TX_TimeDifferenceType2Info_tdd_INTERNAL__SequenceType_neighbourAndChannelIdentity_INTERNAL_asn1__generated__CellAndChannelIdentity::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::NeighbourQuality::ValueType v;
      _neighbourQuality_Type.read(reader, v);
      value.set_neighbourQuality(v);
   }
   {
      asn1::generated::SFN_SFN_ObsTimeDifference2::ValueType v;
      _sfn_SFN_ObsTimeDifference2_Type.read(reader, v);
      value.set_sfn_SFN_ObsTimeDifference2(v);
   }

   reader.readSequenceEnd(*this);
}

void Neighbour::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _neighbourQuality_Type.write(writer, value.get_neighbourQuality());
   _sfn_SFN_ObsTimeDifference2_Type.write(writer, value.get_sfn_SFN_ObsTimeDifference2());

   writer.writeSequenceEnd();
}


void Neighbour_v390ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_frequencyInfo_INTERNAL_asn1__generated__FrequencyInfo_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void Neighbour_v390ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void NeighbourQuality::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_OTDOA_Quality::ValueType v;
      _ue_Positioning_OTDOA_Quality_Type.read(reader, v);
      value.set_ue_Positioning_OTDOA_Quality(v);
   }

   reader.readSequenceEnd(*this);
}

void NeighbourQuality::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_Positioning_OTDOA_Quality_Type.write(writer, value.get_ue_Positioning_OTDOA_Quality());

   writer.writeSequenceEnd();
}


void NewInterFreqCell::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqCellID::ValueType v;
      _interFreqCellID_Type.read(reader, v);
      value.set_interFreqCellID(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::CellInfo::ValueType v;
      _cellInfo_Type.read(reader, v);
      value.set_cellInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewInterFreqCell::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellID_Type.write(writer, value.get_interFreqCellID());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _cellInfo_Type.write(writer, value.get_cellInfo());

   writer.writeSequenceEnd();
}


void NewInterFreqCell_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqCellID::ValueType v;
      _interFreqCellID_Type.read(reader, v);
      value.set_interFreqCellID(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::CellInfo_r4::ValueType v;
      _cellInfo_Type.read(reader, v);
      value.set_cellInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewInterFreqCell_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellID_Type.write(writer, value.get_interFreqCellID());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _cellInfo_Type.write(writer, value.get_cellInfo());

   writer.writeSequenceEnd();
}


void NewInterFreqCellSI_RSCP::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqCellID::ValueType v;
      _interFreqCellID_Type.read(reader, v);
      value.set_interFreqCellID(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::CellInfoSI_RSCP::ValueType v;
      _cellInfo_Type.read(reader, v);
      value.set_cellInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewInterFreqCellSI_RSCP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellID_Type.write(writer, value.get_interFreqCellID());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _cellInfo_Type.write(writer, value.get_cellInfo());

   writer.writeSequenceEnd();
}


void NewInterFreqCellSI_ECN0::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqCellID::ValueType v;
      _interFreqCellID_Type.read(reader, v);
      value.set_interFreqCellID(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::CellInfoSI_ECN0::ValueType v;
      _cellInfo_Type.read(reader, v);
      value.set_cellInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewInterFreqCellSI_ECN0::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellID_Type.write(writer, value.get_interFreqCellID());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _cellInfo_Type.write(writer, value.get_cellInfo());

   writer.writeSequenceEnd();
}


void NewInterFreqCellSI_HCS_RSCP::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqCellID::ValueType v;
      _interFreqCellID_Type.read(reader, v);
      value.set_interFreqCellID(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::CellInfoSI_HCS_RSCP::ValueType v;
      _cellInfo_Type.read(reader, v);
      value.set_cellInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewInterFreqCellSI_HCS_RSCP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellID_Type.write(writer, value.get_interFreqCellID());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _cellInfo_Type.write(writer, value.get_cellInfo());

   writer.writeSequenceEnd();
}


void NewInterFreqCellSI_HCS_ECN0::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqCellID::ValueType v;
      _interFreqCellID_Type.read(reader, v);
      value.set_interFreqCellID(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::CellInfoSI_HCS_ECN0::ValueType v;
      _cellInfo_Type.read(reader, v);
      value.set_cellInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewInterFreqCellSI_HCS_ECN0::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellID_Type.write(writer, value.get_interFreqCellID());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _cellInfo_Type.write(writer, value.get_cellInfo());

   writer.writeSequenceEnd();
}


void NewInterFreqCellSI_RSCP_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqCellID::ValueType v;
      _interFreqCellID_Type.read(reader, v);
      value.set_interFreqCellID(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::CellInfoSI_RSCP_LCR_r4::ValueType v;
      _cellInfo_Type.read(reader, v);
      value.set_cellInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewInterFreqCellSI_RSCP_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellID_Type.write(writer, value.get_interFreqCellID());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _cellInfo_Type.write(writer, value.get_cellInfo());

   writer.writeSequenceEnd();
}


void NewInterFreqCellSI_ECN0_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqCellID::ValueType v;
      _interFreqCellID_Type.read(reader, v);
      value.set_interFreqCellID(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::CellInfoSI_ECN0_LCR_r4::ValueType v;
      _cellInfo_Type.read(reader, v);
      value.set_cellInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewInterFreqCellSI_ECN0_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellID_Type.write(writer, value.get_interFreqCellID());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _cellInfo_Type.write(writer, value.get_cellInfo());

   writer.writeSequenceEnd();
}


void NewInterFreqCellSI_HCS_RSCP_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqCellID::ValueType v;
      _interFreqCellID_Type.read(reader, v);
      value.set_interFreqCellID(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::CellInfoSI_HCS_RSCP_LCR_r4::ValueType v;
      _cellInfo_Type.read(reader, v);
      value.set_cellInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewInterFreqCellSI_HCS_RSCP_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellID_Type.write(writer, value.get_interFreqCellID());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _cellInfo_Type.write(writer, value.get_cellInfo());

   writer.writeSequenceEnd();
}


void NewInterFreqCellSI_HCS_ECN0_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqCellID::ValueType v;
      _interFreqCellID_Type.read(reader, v);
      value.set_interFreqCellID(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::CellInfoSI_HCS_ECN0_LCR_r4::ValueType v;
      _cellInfo_Type.read(reader, v);
      value.set_cellInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewInterFreqCellSI_HCS_ECN0_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqCellID_Type.write(writer, value.get_interFreqCellID());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _cellInfo_Type.write(writer, value.get_cellInfo());

   writer.writeSequenceEnd();
}


void NewInterRATCell::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterRATCellID::ValueType v;
      _interRATCellID_Type.read(reader, v);
      value.set_interRATCellID(v);
   }
   {
      _INTERNAL__ChoiceType_gsm_INTERNAL__SequenceType_cellSelectionReselectionInfo_INTERNAL_asn1__generated__CellSelectReselectInfoSIB_11_12_interRATCellIndividualOffset_INTERNAL_asn1__generated__InterRATCellIndividualOffset_bsic_INTERNAL_asn1__generated__BSIC_frequency-band_INTERNAL_asn1__generated__Frequency_Band_bcch-ARFCN_INTERNAL_asn1__generated__BCCH_ARFCN_dummy_INTERNAL_asn1__NullType_is-2000_INTERNAL__SequenceType_is-2000SpecificMeasInfo_INTERNAL_asn1__generated__IS_2000SpecificMeasInfo_absent_INTERNAL_asn1__NullType_spare1_INTERNAL_asn1__NullType::ValueType v;
      _technologySpecificInfo_Type.read(reader, v);
      value.set_technologySpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewInterRATCell::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interRATCellID_Type.write(writer, value.get_interRATCellID());
   _technologySpecificInfo_Type.write(writer, value.get_technologySpecificInfo());

   writer.writeSequenceEnd();
}


void NewInterRATCell_B::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterRATCellID::ValueType v;
      _interRATCellID_Type.read(reader, v);
      value.set_interRATCellID(v);
   }
   {
      _INTERNAL__ChoiceType_gsm_INTERNAL__SequenceType_cellSelectionReselectionInfo_INTERNAL_asn1__generated__CellSelectReselectInfoSIB_11_12_interRATCellIndividualOffset_INTERNAL_asn1__generated__InterRATCellIndividualOffset_bsic_INTERNAL_asn1__generated__BSIC_frequency-band_INTERNAL_asn1__generated__Frequency_Band_bcch-ARFCN_INTERNAL_asn1__generated__BCCH_ARFCN_dummy_INTERNAL_asn1__NullType_is-2000_INTERNAL__SequenceType_is-2000SpecificMeasInfo_INTERNAL_asn1__generated__IS_2000SpecificMeasInfo_absent_INTERNAL_asn1__NullType_spare1_INTERNAL_asn1__NullType::ValueType v;
      _technologySpecificInfo_Type.read(reader, v);
      value.set_technologySpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewInterRATCell_B::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interRATCellID_Type.write(writer, value.get_interRATCellID());
   _technologySpecificInfo_Type.write(writer, value.get_technologySpecificInfo());

   writer.writeSequenceEnd();
}


void NewIntraFreqCell::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqCellID::ValueType v;
      _intraFreqCellID_Type.read(reader, v);
      value.set_intraFreqCellID(v);
   }
   {
      asn1::generated::CellInfo::ValueType v;
      _cellInfo_Type.read(reader, v);
      value.set_cellInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewIntraFreqCell::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqCellID_Type.write(writer, value.get_intraFreqCellID());
   _cellInfo_Type.write(writer, value.get_cellInfo());

   writer.writeSequenceEnd();
}


void NewIntraFreqCell_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqCellID::ValueType v;
      _intraFreqCellID_Type.read(reader, v);
      value.set_intraFreqCellID(v);
   }
   {
      asn1::generated::CellInfo_r4::ValueType v;
      _cellInfo_Type.read(reader, v);
      value.set_cellInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewIntraFreqCell_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqCellID_Type.write(writer, value.get_intraFreqCellID());
   _cellInfo_Type.write(writer, value.get_cellInfo());

   writer.writeSequenceEnd();
}


void NewIntraFreqCellSI_RSCP::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqCellID::ValueType v;
      _intraFreqCellID_Type.read(reader, v);
      value.set_intraFreqCellID(v);
   }
   {
      asn1::generated::CellInfoSI_RSCP::ValueType v;
      _cellInfo_Type.read(reader, v);
      value.set_cellInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewIntraFreqCellSI_RSCP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqCellID_Type.write(writer, value.get_intraFreqCellID());
   _cellInfo_Type.write(writer, value.get_cellInfo());

   writer.writeSequenceEnd();
}


void NewIntraFreqCellSI_ECN0::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqCellID::ValueType v;
      _intraFreqCellID_Type.read(reader, v);
      value.set_intraFreqCellID(v);
   }
   {
      asn1::generated::CellInfoSI_ECN0::ValueType v;
      _cellInfo_Type.read(reader, v);
      value.set_cellInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewIntraFreqCellSI_ECN0::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqCellID_Type.write(writer, value.get_intraFreqCellID());
   _cellInfo_Type.write(writer, value.get_cellInfo());

   writer.writeSequenceEnd();
}


void NewIntraFreqCellSI_HCS_RSCP::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqCellID::ValueType v;
      _intraFreqCellID_Type.read(reader, v);
      value.set_intraFreqCellID(v);
   }
   {
      asn1::generated::CellInfoSI_HCS_RSCP::ValueType v;
      _cellInfo_Type.read(reader, v);
      value.set_cellInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewIntraFreqCellSI_HCS_RSCP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqCellID_Type.write(writer, value.get_intraFreqCellID());
   _cellInfo_Type.write(writer, value.get_cellInfo());

   writer.writeSequenceEnd();
}


void NewIntraFreqCellSI_HCS_ECN0::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqCellID::ValueType v;
      _intraFreqCellID_Type.read(reader, v);
      value.set_intraFreqCellID(v);
   }
   {
      asn1::generated::CellInfoSI_HCS_ECN0::ValueType v;
      _cellInfo_Type.read(reader, v);
      value.set_cellInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewIntraFreqCellSI_HCS_ECN0::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqCellID_Type.write(writer, value.get_intraFreqCellID());
   _cellInfo_Type.write(writer, value.get_cellInfo());

   writer.writeSequenceEnd();
}


void NewIntraFreqCellSI_RSCP_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqCellID::ValueType v;
      _intraFreqCellID_Type.read(reader, v);
      value.set_intraFreqCellID(v);
   }
   {
      asn1::generated::CellInfoSI_RSCP_LCR_r4::ValueType v;
      _cellInfo_Type.read(reader, v);
      value.set_cellInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewIntraFreqCellSI_RSCP_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqCellID_Type.write(writer, value.get_intraFreqCellID());
   _cellInfo_Type.write(writer, value.get_cellInfo());

   writer.writeSequenceEnd();
}


void NewIntraFreqCellSI_ECN0_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqCellID::ValueType v;
      _intraFreqCellID_Type.read(reader, v);
      value.set_intraFreqCellID(v);
   }
   {
      asn1::generated::CellInfoSI_ECN0_LCR_r4::ValueType v;
      _cellInfo_Type.read(reader, v);
      value.set_cellInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewIntraFreqCellSI_ECN0_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqCellID_Type.write(writer, value.get_intraFreqCellID());
   _cellInfo_Type.write(writer, value.get_cellInfo());

   writer.writeSequenceEnd();
}


void NewIntraFreqCellSI_HCS_RSCP_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqCellID::ValueType v;
      _intraFreqCellID_Type.read(reader, v);
      value.set_intraFreqCellID(v);
   }
   {
      asn1::generated::CellInfoSI_HCS_RSCP_LCR_r4::ValueType v;
      _cellInfo_Type.read(reader, v);
      value.set_cellInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewIntraFreqCellSI_HCS_RSCP_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqCellID_Type.write(writer, value.get_intraFreqCellID());
   _cellInfo_Type.write(writer, value.get_cellInfo());

   writer.writeSequenceEnd();
}


void NewIntraFreqCellSI_HCS_ECN0_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqCellID::ValueType v;
      _intraFreqCellID_Type.read(reader, v);
      value.set_intraFreqCellID(v);
   }
   {
      asn1::generated::CellInfoSI_HCS_ECN0_LCR_r4::ValueType v;
      _cellInfo_Type.read(reader, v);
      value.set_cellInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void NewIntraFreqCellSI_HCS_ECN0_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqCellID_Type.write(writer, value.get_intraFreqCellID());
   _cellInfo_Type.write(writer, value.get_cellInfo());

   writer.writeSequenceEnd();
}


void NonUsedFreqParameter::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Threshold::ValueType v;
      _nonUsedFreqThreshold_Type.read(reader, v);
      value.set_nonUsedFreqThreshold(v);
   }
   {
      asn1::generated::W::ValueType v;
      _nonUsedFreqW_Type.read(reader, v);
      value.set_nonUsedFreqW(v);
   }

   reader.readSequenceEnd(*this);
}

void NonUsedFreqParameter::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _nonUsedFreqThreshold_Type.write(writer, value.get_nonUsedFreqThreshold());
   _nonUsedFreqW_Type.write(writer, value.get_nonUsedFreqW());

   writer.writeSequenceEnd();
}


void NonUsedFreqParameter_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Threshold_r6::ValueType v;
      _nonUsedFreqThreshold_Type.read(reader, v);
      value.set_nonUsedFreqThreshold(v);
   }
   {
      asn1::generated::W::ValueType v;
      _nonUsedFreqW_Type.read(reader, v);
      value.set_nonUsedFreqW(v);
   }

   reader.readSequenceEnd(*this);
}

void NonUsedFreqParameter_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _nonUsedFreqThreshold_Type.write(writer, value.get_nonUsedFreqThreshold());
   _nonUsedFreqW_Type.write(writer, value.get_nonUsedFreqW());

   writer.writeSequenceEnd();
}


void PenaltyTime-RSCP::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_notUsed_Type)
   {
      asn1::NullType::ValueType v;
      _notUsed_Type.read(reader, v);
      value.set_notUsed(v);
   }
   else if (choosenType == &_pt10_Type)
   {
      asn1::generated::TemporaryOffset1::ValueType v;
      _pt10_Type.read(reader, v);
      value.set_pt10(v);
   }
   else if (choosenType == &_pt20_Type)
   {
      asn1::generated::TemporaryOffset1::ValueType v;
      _pt20_Type.read(reader, v);
      value.set_pt20(v);
   }
   else if (choosenType == &_pt30_Type)
   {
      asn1::generated::TemporaryOffset1::ValueType v;
      _pt30_Type.read(reader, v);
      value.set_pt30(v);
   }
   else if (choosenType == &_pt40_Type)
   {
      asn1::generated::TemporaryOffset1::ValueType v;
      _pt40_Type.read(reader, v);
      value.set_pt40(v);
   }
   else if (choosenType == &_pt50_Type)
   {
      asn1::generated::TemporaryOffset1::ValueType v;
      _pt50_Type.read(reader, v);
      value.set_pt50(v);
   }
   else if (choosenType == &_pt60_Type)
   {
      asn1::generated::TemporaryOffset1::ValueType v;
      _pt60_Type.read(reader, v);
      value.set_pt60(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _notUsed_Type.toString() + ", " + _pt10_Type.toString() + ", " + _pt20_Type.toString() + ", " + _pt30_Type.toString() + ", " + _pt40_Type.toString() + ", " + _pt50_Type.toString() + ", " + _pt60_Type.toString());
   }
}

void PenaltyTime-RSCP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_notUsed_Choosen())
      _notUsed_Type.write(writer, value.get_notUsed());
   else if (value.has_pt10_Choosen())
      _pt10_Type.write(writer, value.get_pt10());
   else if (value.has_pt20_Choosen())
      _pt20_Type.write(writer, value.get_pt20());
   else if (value.has_pt30_Choosen())
      _pt30_Type.write(writer, value.get_pt30());
   else if (value.has_pt40_Choosen())
      _pt40_Type.write(writer, value.get_pt40());
   else if (value.has_pt50_Choosen())
      _pt50_Type.write(writer, value.get_pt50());
   else if (value.has_pt60_Choosen())
      _pt60_Type.write(writer, value.get_pt60());
}


void PenaltyTime-ECN0::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_notUsed_Type)
   {
      asn1::NullType::ValueType v;
      _notUsed_Type.read(reader, v);
      value.set_notUsed(v);
   }
   else if (choosenType == &_pt10_Type)
   {
      asn1::generated::TemporaryOffsetList::ValueType v;
      _pt10_Type.read(reader, v);
      value.set_pt10(v);
   }
   else if (choosenType == &_pt20_Type)
   {
      asn1::generated::TemporaryOffsetList::ValueType v;
      _pt20_Type.read(reader, v);
      value.set_pt20(v);
   }
   else if (choosenType == &_pt30_Type)
   {
      asn1::generated::TemporaryOffsetList::ValueType v;
      _pt30_Type.read(reader, v);
      value.set_pt30(v);
   }
   else if (choosenType == &_pt40_Type)
   {
      asn1::generated::TemporaryOffsetList::ValueType v;
      _pt40_Type.read(reader, v);
      value.set_pt40(v);
   }
   else if (choosenType == &_pt50_Type)
   {
      asn1::generated::TemporaryOffsetList::ValueType v;
      _pt50_Type.read(reader, v);
      value.set_pt50(v);
   }
   else if (choosenType == &_pt60_Type)
   {
      asn1::generated::TemporaryOffsetList::ValueType v;
      _pt60_Type.read(reader, v);
      value.set_pt60(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _notUsed_Type.toString() + ", " + _pt10_Type.toString() + ", " + _pt20_Type.toString() + ", " + _pt30_Type.toString() + ", " + _pt40_Type.toString() + ", " + _pt50_Type.toString() + ", " + _pt60_Type.toString());
   }
}

void PenaltyTime-ECN0::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_notUsed_Choosen())
      _notUsed_Type.write(writer, value.get_notUsed());
   else if (value.has_pt10_Choosen())
      _pt10_Type.write(writer, value.get_pt10());
   else if (value.has_pt20_Choosen())
      _pt20_Type.write(writer, value.get_pt20());
   else if (value.has_pt30_Choosen())
      _pt30_Type.write(writer, value.get_pt30());
   else if (value.has_pt40_Choosen())
      _pt40_Type.write(writer, value.get_pt40());
   else if (value.has_pt50_Choosen())
      _pt50_Type.write(writer, value.get_pt50());
   else if (value.has_pt60_Choosen())
      _pt60_Type.write(writer, value.get_pt60());
}


void PeriodicalReportingCriteria::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ReportingAmount::ValueType v;
      _reportingAmount_Type.read(reader, v);
      value.set_reportingAmount(v);
   }
   {
      asn1::generated::ReportingIntervalLong::ValueType v;
      _reportingInterval_Type.read(reader, v);
      value.set_reportingInterval(v);
   }

   reader.readSequenceEnd(*this);
}

void PeriodicalReportingCriteria::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _reportingAmount_Type.write(writer, value.get_reportingAmount());
   _reportingInterval_Type.write(writer, value.get_reportingInterval());

   writer.writeSequenceEnd();
}


void PeriodicalWithReportingCellStatus::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PeriodicalReportingCriteria::ValueType v;
      _periodicalReportingCriteria_Type.read(reader, v);
      value.set_periodicalReportingCriteria(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }

   reader.readSequenceEnd(*this);
}

void PeriodicalWithReportingCellStatus::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _periodicalReportingCriteria_Type.write(writer, value.get_periodicalReportingCriteria());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());

   writer.writeSequenceEnd();
}


void PLMNIdentitiesOfNeighbourCells::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PLMNsOfIntraFreqCellsList::ValueType v;
      _plmnsOfIntraFreqCellsList_Type.read(reader, v);
      value.set_plmnsOfIntraFreqCellsList(v);
   }
   {
      asn1::generated::PLMNsOfInterFreqCellsList::ValueType v;
      _plmnsOfInterFreqCellsList_Type.read(reader, v);
      value.set_plmnsOfInterFreqCellsList(v);
   }
   {
      asn1::generated::PLMNsOfInterRATCellsList::ValueType v;
      _plmnsOfInterRATCellsList_Type.read(reader, v);
      value.set_plmnsOfInterRATCellsList(v);
   }

   reader.readSequenceEnd(*this);
}

void PLMNIdentitiesOfNeighbourCells::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _plmnsOfIntraFreqCellsList_Type.write(writer, value.get_plmnsOfIntraFreqCellsList());
   _plmnsOfInterFreqCellsList_Type.write(writer, value.get_plmnsOfInterFreqCellsList());
   _plmnsOfInterRATCellsList_Type.write(writer, value.get_plmnsOfInterRATCellsList());

   writer.writeSequenceEnd();
}


void PositionEstimate::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_ellipsoidPoint_Type)
   {
      asn1::generated::EllipsoidPoint::ValueType v;
      _ellipsoidPoint_Type.read(reader, v);
      value.set_ellipsoidPoint(v);
   }
   else if (choosenType == &_ellipsoidPointUncertCircle_Type)
   {
      asn1::generated::EllipsoidPointUncertCircle::ValueType v;
      _ellipsoidPointUncertCircle_Type.read(reader, v);
      value.set_ellipsoidPointUncertCircle(v);
   }
   else if (choosenType == &_ellipsoidPointUncertEllipse_Type)
   {
      asn1::generated::EllipsoidPointUncertEllipse::ValueType v;
      _ellipsoidPointUncertEllipse_Type.read(reader, v);
      value.set_ellipsoidPointUncertEllipse(v);
   }
   else if (choosenType == &_ellipsoidPointAltitude_Type)
   {
      asn1::generated::EllipsoidPointAltitude::ValueType v;
      _ellipsoidPointAltitude_Type.read(reader, v);
      value.set_ellipsoidPointAltitude(v);
   }
   else if (choosenType == &_ellipsoidPointAltitudeEllipse_Type)
   {
      asn1::generated::EllipsoidPointAltitudeEllipsoide::ValueType v;
      _ellipsoidPointAltitudeEllipse_Type.read(reader, v);
      value.set_ellipsoidPointAltitudeEllipse(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _ellipsoidPoint_Type.toString() + ", " + _ellipsoidPointUncertCircle_Type.toString() + ", " + _ellipsoidPointUncertEllipse_Type.toString() + ", " + _ellipsoidPointAltitude_Type.toString() + ", " + _ellipsoidPointAltitudeEllipse_Type.toString());
   }
}

void PositionEstimate::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_ellipsoidPoint_Choosen())
      _ellipsoidPoint_Type.write(writer, value.get_ellipsoidPoint());
   else if (value.has_ellipsoidPointUncertCircle_Choosen())
      _ellipsoidPointUncertCircle_Type.write(writer, value.get_ellipsoidPointUncertCircle());
   else if (value.has_ellipsoidPointUncertEllipse_Choosen())
      _ellipsoidPointUncertEllipse_Type.write(writer, value.get_ellipsoidPointUncertEllipse());
   else if (value.has_ellipsoidPointAltitude_Choosen())
      _ellipsoidPointAltitude_Type.write(writer, value.get_ellipsoidPointAltitude());
   else if (value.has_ellipsoidPointAltitudeEllipse_Choosen())
      _ellipsoidPointAltitudeEllipse_Type.write(writer, value.get_ellipsoidPointAltitudeEllipse());
}


void QualityMeasuredResults::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::BLER_MeasurementResultsList::ValueType v;
      _blerMeasurementResultsList_Type.read(reader, v);
      value.set_blerMeasurementResultsList(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL_asn1__NullType_tdd_INTERNAL__SequenceType_sir-MeasurementResults_INTERNAL_asn1__generated__SIR_MeasurementList::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void QualityMeasuredResults::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _blerMeasurementResultsList_Type.write(writer, value.get_blerMeasurementResultsList());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void QualityMeasurement::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::QualityReportingQuantity::ValueType v;
      _qualityReportingQuantity_Type.read(reader, v);
      value.set_qualityReportingQuantity(v);
   }
   {
      asn1::generated::QualityReportCriteria::ValueType v;
      _reportCriteria_Type.read(reader, v);
      value.set_reportCriteria(v);
   }

   reader.readSequenceEnd(*this);
}

void QualityMeasurement::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _qualityReportingQuantity_Type.write(writer, value.get_qualityReportingQuantity());
   _reportCriteria_Type.write(writer, value.get_reportCriteria());

   writer.writeSequenceEnd();
}


void QualityReportCriteria::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_qualityReportingCriteria_Type)
   {
      asn1::generated::QualityReportingCriteria::ValueType v;
      _qualityReportingCriteria_Type.read(reader, v);
      value.set_qualityReportingCriteria(v);
   }
   else if (choosenType == &_periodicalReportingCriteria_Type)
   {
      asn1::generated::PeriodicalReportingCriteria::ValueType v;
      _periodicalReportingCriteria_Type.read(reader, v);
      value.set_periodicalReportingCriteria(v);
   }
   else if (choosenType == &_noReporting_Type)
   {
      asn1::NullType::ValueType v;
      _noReporting_Type.read(reader, v);
      value.set_noReporting(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _qualityReportingCriteria_Type.toString() + ", " + _periodicalReportingCriteria_Type.toString() + ", " + _noReporting_Type.toString());
   }
}

void QualityReportCriteria::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_qualityReportingCriteria_Choosen())
      _qualityReportingCriteria_Type.write(writer, value.get_qualityReportingCriteria());
   else if (value.has_periodicalReportingCriteria_Choosen())
      _periodicalReportingCriteria_Type.write(writer, value.get_periodicalReportingCriteria());
   else if (value.has_noReporting_Choosen())
      _noReporting_Type.write(writer, value.get_noReporting());
}


void QualityReportingCriteriaSingle::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _transportChannelIdentity_Type.read(reader, v);
      value.set_transportChannelIdentity(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _totalCRC_Type.read(reader, v);
      value.set_totalCRC(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _badCRC_Type.read(reader, v);
      value.set_badCRC(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _pendingAfterTrigger_Type.read(reader, v);
      value.set_pendingAfterTrigger(v);
   }

   reader.readSequenceEnd(*this);
}

void QualityReportingCriteriaSingle::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _transportChannelIdentity_Type.write(writer, value.get_transportChannelIdentity());
   _totalCRC_Type.write(writer, value.get_totalCRC());
   _badCRC_Type.write(writer, value.get_badCRC());
   _pendingAfterTrigger_Type.write(writer, value.get_pendingAfterTrigger());

   writer.writeSequenceEnd();
}


void QualityReportingQuantity::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _dl_TransChBLER_Type.read(reader, v);
      value.set_dl_TransChBLER(v);
   }
   {
      asn1::generated::BLER_TransChIdList::ValueType v;
      _bler_dl_TransChIdList_Type.read(reader, v);
      value.set_bler_dl_TransChIdList(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL_asn1__NullType_tdd_INTERNAL__SequenceType_sir-TFCS-List_INTERNAL_asn1__generated__SIR_TFCS_List::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void QualityReportingQuantity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_TransChBLER_Type.write(writer, value.get_dl_TransChBLER());
   _bler_dl_TransChIdList_Type.write(writer, value.get_bler_dl_TransChIdList());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void ReferenceCellPosition::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_ellipsoidPoint_Type)
   {
      asn1::generated::EllipsoidPoint::ValueType v;
      _ellipsoidPoint_Type.read(reader, v);
      value.set_ellipsoidPoint(v);
   }
   else if (choosenType == &_ellipsoidPointWithAltitude_Type)
   {
      asn1::generated::EllipsoidPointAltitude::ValueType v;
      _ellipsoidPointWithAltitude_Type.read(reader, v);
      value.set_ellipsoidPointWithAltitude(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _ellipsoidPoint_Type.toString() + ", " + _ellipsoidPointWithAltitude_Type.toString());
   }
}

void ReferenceCellPosition::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_ellipsoidPoint_Choosen())
      _ellipsoidPoint_Type.write(writer, value.get_ellipsoidPoint());
   else if (value.has_ellipsoidPointWithAltitude_Choosen())
      _ellipsoidPointWithAltitude_Type.write(writer, value.get_ellipsoidPointWithAltitude());
}


void ReferenceLocation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::EllipsoidPointAltitudeEllipsoide::ValueType v;
      _ellipsoidPointAltitudeEllipsoide_Type.read(reader, v);
      value.set_ellipsoidPointAltitudeEllipsoide(v);
   }

   reader.readSequenceEnd(*this);
}

void ReferenceLocation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ellipsoidPointAltitudeEllipsoide_Type.write(writer, value.get_ellipsoidPointAltitudeEllipsoide());

   writer.writeSequenceEnd();
}


void ReferenceTimeDifferenceToCell::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_accuracy40_Type)
   {
      asn1::IntegerType::ValueType v;
      _accuracy40_Type.read(reader, v);
      value.set_accuracy40(v);
   }
   else if (choosenType == &_accuracy256_Type)
   {
      asn1::IntegerType::ValueType v;
      _accuracy256_Type.read(reader, v);
      value.set_accuracy256(v);
   }
   else if (choosenType == &_accuracy2560_Type)
   {
      asn1::IntegerType::ValueType v;
      _accuracy2560_Type.read(reader, v);
      value.set_accuracy2560(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _accuracy40_Type.toString() + ", " + _accuracy256_Type.toString() + ", " + _accuracy2560_Type.toString());
   }
}

void ReferenceTimeDifferenceToCell::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_accuracy40_Choosen())
      _accuracy40_Type.write(writer, value.get_accuracy40());
   else if (value.has_accuracy256_Choosen())
      _accuracy256_Type.write(writer, value.get_accuracy256());
   else if (value.has_accuracy2560_Choosen())
      _accuracy2560_Type.write(writer, value.get_accuracy2560());
}


void RemovedInterFreqCellList::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_removeAllInterFreqCells_Type)
   {
      asn1::NullType::ValueType v;
      _removeAllInterFreqCells_Type.read(reader, v);
      value.set_removeAllInterFreqCells(v);
   }
   else if (choosenType == &_removeSomeInterFreqCells_Type)
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__InterFreqCellID::ValueType v;
      _removeSomeInterFreqCells_Type.read(reader, v);
      value.set_removeSomeInterFreqCells(v);
   }
   else if (choosenType == &_removeNoInterFreqCells_Type)
   {
      asn1::NullType::ValueType v;
      _removeNoInterFreqCells_Type.read(reader, v);
      value.set_removeNoInterFreqCells(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _removeAllInterFreqCells_Type.toString() + ", " + _removeSomeInterFreqCells_Type.toString() + ", " + _removeNoInterFreqCells_Type.toString());
   }
}

void RemovedInterFreqCellList::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_removeAllInterFreqCells_Choosen())
      _removeAllInterFreqCells_Type.write(writer, value.get_removeAllInterFreqCells());
   else if (value.has_removeSomeInterFreqCells_Choosen())
      _removeSomeInterFreqCells_Type.write(writer, value.get_removeSomeInterFreqCells());
   else if (value.has_removeNoInterFreqCells_Choosen())
      _removeNoInterFreqCells_Type.write(writer, value.get_removeNoInterFreqCells());
}


void RemovedInterRATCellList::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_removeAllInterRATCells_Type)
   {
      asn1::NullType::ValueType v;
      _removeAllInterRATCells_Type.read(reader, v);
      value.set_removeAllInterRATCells(v);
   }
   else if (choosenType == &_removeSomeInterRATCells_Type)
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__InterRATCellID::ValueType v;
      _removeSomeInterRATCells_Type.read(reader, v);
      value.set_removeSomeInterRATCells(v);
   }
   else if (choosenType == &_removeNoInterRATCells_Type)
   {
      asn1::NullType::ValueType v;
      _removeNoInterRATCells_Type.read(reader, v);
      value.set_removeNoInterRATCells(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _removeAllInterRATCells_Type.toString() + ", " + _removeSomeInterRATCells_Type.toString() + ", " + _removeNoInterRATCells_Type.toString());
   }
}

void RemovedInterRATCellList::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_removeAllInterRATCells_Choosen())
      _removeAllInterRATCells_Type.write(writer, value.get_removeAllInterRATCells());
   else if (value.has_removeSomeInterRATCells_Choosen())
      _removeSomeInterRATCells_Type.write(writer, value.get_removeSomeInterRATCells());
   else if (value.has_removeNoInterRATCells_Choosen())
      _removeNoInterRATCells_Type.write(writer, value.get_removeNoInterRATCells());
}


void RemovedIntraFreqCellList::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_removeAllIntraFreqCells_Type)
   {
      asn1::NullType::ValueType v;
      _removeAllIntraFreqCells_Type.read(reader, v);
      value.set_removeAllIntraFreqCells(v);
   }
   else if (choosenType == &_removeSomeIntraFreqCells_Type)
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__IntraFreqCellID::ValueType v;
      _removeSomeIntraFreqCells_Type.read(reader, v);
      value.set_removeSomeIntraFreqCells(v);
   }
   else if (choosenType == &_removeNoIntraFreqCells_Type)
   {
      asn1::NullType::ValueType v;
      _removeNoIntraFreqCells_Type.read(reader, v);
      value.set_removeNoIntraFreqCells(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _removeAllIntraFreqCells_Type.toString() + ", " + _removeSomeIntraFreqCells_Type.toString() + ", " + _removeNoIntraFreqCells_Type.toString());
   }
}

void RemovedIntraFreqCellList::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_removeAllIntraFreqCells_Choosen())
      _removeAllIntraFreqCells_Type.write(writer, value.get_removeAllIntraFreqCells());
   else if (value.has_removeSomeIntraFreqCells_Choosen())
      _removeSomeIntraFreqCells_Type.write(writer, value.get_removeSomeIntraFreqCells());
   else if (value.has_removeNoIntraFreqCells_Choosen())
      _removeNoIntraFreqCells_Type.write(writer, value.get_removeNoIntraFreqCells());
}


void ReportingCellStatus::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_withinActiveSet_Type)
   {
      asn1::generated::MaxNumberOfReportingCellsType1::ValueType v;
      _withinActiveSet_Type.read(reader, v);
      value.set_withinActiveSet(v);
   }
   else if (choosenType == &_withinMonitoredSetUsedFreq_Type)
   {
      asn1::generated::MaxNumberOfReportingCellsType1::ValueType v;
      _withinMonitoredSetUsedFreq_Type.read(reader, v);
      value.set_withinMonitoredSetUsedFreq(v);
   }
   else if (choosenType == &_withinActiveAndOrMonitoredUsedFreq_Type)
   {
      asn1::generated::MaxNumberOfReportingCellsType1::ValueType v;
      _withinActiveAndOrMonitoredUsedFreq_Type.read(reader, v);
      value.set_withinActiveAndOrMonitoredUsedFreq(v);
   }
   else if (choosenType == &_withinDetectedSetUsedFreq_Type)
   {
      asn1::generated::MaxNumberOfReportingCellsType1::ValueType v;
      _withinDetectedSetUsedFreq_Type.read(reader, v);
      value.set_withinDetectedSetUsedFreq(v);
   }
   else if (choosenType == &_withinMonitoredAndOrDetectedUsedFreq_Type)
   {
      asn1::generated::MaxNumberOfReportingCellsType1::ValueType v;
      _withinMonitoredAndOrDetectedUsedFreq_Type.read(reader, v);
      value.set_withinMonitoredAndOrDetectedUsedFreq(v);
   }
   else if (choosenType == &_allActiveplusMonitoredSet_Type)
   {
      asn1::generated::MaxNumberOfReportingCellsType3::ValueType v;
      _allActiveplusMonitoredSet_Type.read(reader, v);
      value.set_allActiveplusMonitoredSet(v);
   }
   else if (choosenType == &_allActivePlusDetectedSet_Type)
   {
      asn1::generated::MaxNumberOfReportingCellsType3::ValueType v;
      _allActivePlusDetectedSet_Type.read(reader, v);
      value.set_allActivePlusDetectedSet(v);
   }
   else if (choosenType == &_allActivePlusMonitoredAndOrDetectedSet_Type)
   {
      asn1::generated::MaxNumberOfReportingCellsType3::ValueType v;
      _allActivePlusMonitoredAndOrDetectedSet_Type.read(reader, v);
      value.set_allActivePlusMonitoredAndOrDetectedSet(v);
   }
   else if (choosenType == &_withinVirtualActSet_Type)
   {
      asn1::generated::MaxNumberOfReportingCellsType1::ValueType v;
      _withinVirtualActSet_Type.read(reader, v);
      value.set_withinVirtualActSet(v);
   }
   else if (choosenType == &_withinMonitoredSetNonUsedFreq_Type)
   {
      asn1::generated::MaxNumberOfReportingCellsType1::ValueType v;
      _withinMonitoredSetNonUsedFreq_Type.read(reader, v);
      value.set_withinMonitoredSetNonUsedFreq(v);
   }
   else if (choosenType == &_withinMonitoredAndOrVirtualActiveSetNonUsedFreq_Type)
   {
      asn1::generated::MaxNumberOfReportingCellsType1::ValueType v;
      _withinMonitoredAndOrVirtualActiveSetNonUsedFreq_Type.read(reader, v);
      value.set_withinMonitoredAndOrVirtualActiveSetNonUsedFreq(v);
   }
   else if (choosenType == &_allVirtualActSetplusMonitoredSetNonUsedFreq_Type)
   {
      asn1::generated::MaxNumberOfReportingCellsType3::ValueType v;
      _allVirtualActSetplusMonitoredSetNonUsedFreq_Type.read(reader, v);
      value.set_allVirtualActSetplusMonitoredSetNonUsedFreq(v);
   }
   else if (choosenType == &_withinActSetOrVirtualActSet-InterRATcells_Type)
   {
      asn1::generated::MaxNumberOfReportingCellsType2::ValueType v;
      _withinActSetOrVirtualActSet_InterRATcells_Type.read(reader, v);
      value.set_withinActSetOrVirtualActSet_InterRATcells(v);
   }
   else if (choosenType == &_withinActSetAndOrMonitoredUsedFreqOrVirtualActSetAndOrMonitoredNonUsedFreq_Type)
   {
      asn1::generated::MaxNumberOfReportingCellsType2::ValueType v;
      _withinActSetAndOrMonitoredUsedFreqOrVirtualActSetAndOrMonitoredNonUsedFreq_Type.read(reader, v);
      value.set_withinActSetAndOrMonitoredUsedFreqOrVirtualActSetAndOrMonitoredNonUsedFreq(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _withinActiveSet_Type.toString() + ", " + _withinMonitoredSetUsedFreq_Type.toString() + ", " + _withinActiveAndOrMonitoredUsedFreq_Type.toString() + ", " + _withinDetectedSetUsedFreq_Type.toString() + ", " + _withinMonitoredAndOrDetectedUsedFreq_Type.toString() + ", " + _allActiveplusMonitoredSet_Type.toString() + ", " + _allActivePlusDetectedSet_Type.toString() + ", " + _allActivePlusMonitoredAndOrDetectedSet_Type.toString() + ", " + _withinVirtualActSet_Type.toString() + ", " + _withinMonitoredSetNonUsedFreq_Type.toString() + ", " + _withinMonitoredAndOrVirtualActiveSetNonUsedFreq_Type.toString() + ", " + _allVirtualActSetplusMonitoredSetNonUsedFreq_Type.toString() + ", " + _withinActSetOrVirtualActSet-InterRATcells_Type.toString() + ", " + _withinActSetAndOrMonitoredUsedFreqOrVirtualActSetAndOrMonitoredNonUsedFreq_Type.toString());
   }
}

void ReportingCellStatus::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_withinActiveSet_Choosen())
      _withinActiveSet_Type.write(writer, value.get_withinActiveSet());
   else if (value.has_withinMonitoredSetUsedFreq_Choosen())
      _withinMonitoredSetUsedFreq_Type.write(writer, value.get_withinMonitoredSetUsedFreq());
   else if (value.has_withinActiveAndOrMonitoredUsedFreq_Choosen())
      _withinActiveAndOrMonitoredUsedFreq_Type.write(writer, value.get_withinActiveAndOrMonitoredUsedFreq());
   else if (value.has_withinDetectedSetUsedFreq_Choosen())
      _withinDetectedSetUsedFreq_Type.write(writer, value.get_withinDetectedSetUsedFreq());
   else if (value.has_withinMonitoredAndOrDetectedUsedFreq_Choosen())
      _withinMonitoredAndOrDetectedUsedFreq_Type.write(writer, value.get_withinMonitoredAndOrDetectedUsedFreq());
   else if (value.has_allActiveplusMonitoredSet_Choosen())
      _allActiveplusMonitoredSet_Type.write(writer, value.get_allActiveplusMonitoredSet());
   else if (value.has_allActivePlusDetectedSet_Choosen())
      _allActivePlusDetectedSet_Type.write(writer, value.get_allActivePlusDetectedSet());
   else if (value.has_allActivePlusMonitoredAndOrDetectedSet_Choosen())
      _allActivePlusMonitoredAndOrDetectedSet_Type.write(writer, value.get_allActivePlusMonitoredAndOrDetectedSet());
   else if (value.has_withinVirtualActSet_Choosen())
      _withinVirtualActSet_Type.write(writer, value.get_withinVirtualActSet());
   else if (value.has_withinMonitoredSetNonUsedFreq_Choosen())
      _withinMonitoredSetNonUsedFreq_Type.write(writer, value.get_withinMonitoredSetNonUsedFreq());
   else if (value.has_withinMonitoredAndOrVirtualActiveSetNonUsedFreq_Choosen())
      _withinMonitoredAndOrVirtualActiveSetNonUsedFreq_Type.write(writer, value.get_withinMonitoredAndOrVirtualActiveSetNonUsedFreq());
   else if (value.has_allVirtualActSetplusMonitoredSetNonUsedFreq_Choosen())
      _allVirtualActSetplusMonitoredSetNonUsedFreq_Type.write(writer, value.get_allVirtualActSetplusMonitoredSetNonUsedFreq());
   else if (value.has_withinActSetOrVirtualActSet-InterRATcells_Choosen())
      _withinActSetOrVirtualActSet-InterRATcells_Type.write(writer, value.get_withinActSetOrVirtualActSet-InterRATcells());
   else if (value.has_withinActSetAndOrMonitoredUsedFreqOrVirtualActSetAndOrMonitoredNonUsedFreq_Choosen())
      _withinActSetAndOrMonitoredUsedFreqOrVirtualActSetAndOrMonitoredNonUsedFreq_Type.write(writer, value.get_withinActSetAndOrMonitoredUsedFreqOrVirtualActSetAndOrMonitoredNonUsedFreq());
}


void ReportingCellStatusOpt::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }

   reader.readSequenceEnd(*this);
}

void ReportingCellStatusOpt::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());

   writer.writeSequenceEnd();
}


void ReportingInfoForCellDCH::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqReportingQuantity::ValueType v;
      _intraFreqReportingQuantity_Type.read(reader, v);
      value.set_intraFreqReportingQuantity(v);
   }
   {
      asn1::generated::MeasurementReportingMode::ValueType v;
      _measurementReportingMode_Type.read(reader, v);
      value.set_measurementReportingMode(v);
   }
   {
      asn1::generated::CellDCH_ReportCriteria::ValueType v;
      _reportCriteria_Type.read(reader, v);
      value.set_reportCriteria(v);
   }

   reader.readSequenceEnd(*this);
}

void ReportingInfoForCellDCH::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqReportingQuantity_Type.write(writer, value.get_intraFreqReportingQuantity());
   _measurementReportingMode_Type.write(writer, value.get_measurementReportingMode());
   _reportCriteria_Type.write(writer, value.get_reportCriteria());

   writer.writeSequenceEnd();
}


void ReportingInfoForCellDCH_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IntraFreqReportingQuantity::ValueType v;
      _intraFreqReportingQuantity_Type.read(reader, v);
      value.set_intraFreqReportingQuantity(v);
   }
   {
      asn1::generated::MeasurementReportingMode::ValueType v;
      _measurementReportingMode_Type.read(reader, v);
      value.set_measurementReportingMode(v);
   }
   {
      asn1::generated::CellDCH_ReportCriteria_LCR_r4::ValueType v;
      _reportCriteria_Type.read(reader, v);
      value.set_reportCriteria(v);
   }

   reader.readSequenceEnd(*this);
}

void ReportingInfoForCellDCH_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _intraFreqReportingQuantity_Type.write(writer, value.get_intraFreqReportingQuantity());
   _measurementReportingMode_Type.write(writer, value.get_measurementReportingMode());
   _reportCriteria_Type.write(writer, value.get_reportCriteria());

   writer.writeSequenceEnd();
}


void RL_InformationLists::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RL_AdditionInfoList::ValueType v;
      _rl_AdditionInfoList_Type.read(reader, v);
      value.set_rl_AdditionInfoList(v);
   }
   {
      asn1::generated::RL_RemovalInformationList::ValueType v;
      _rL_RemovalInformationList_Type.read(reader, v);
      value.set_rL_RemovalInformationList(v);
   }

   reader.readSequenceEnd(*this);
}

void RL_InformationLists::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rl_AdditionInfoList_Type.write(writer, value.get_rl_AdditionInfoList());
   _rL_RemovalInformationList_Type.write(writer, value.get_rL_RemovalInformationList());

   writer.writeSequenceEnd();
}


void SatData::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SatID::ValueType v;
      _satID_Type.read(reader, v);
      value.set_satID(v);
   }
   {
      asn1::generated::IODE::ValueType v;
      _iode_Type.read(reader, v);
      value.set_iode(v);
   }

   reader.readSequenceEnd(*this);
}

void SatData::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _satID_Type.write(writer, value.get_satID());
   _iode_Type.write(writer, value.get_iode());

   writer.writeSequenceEnd();
}


void SFN-SFN-ObsTimeDifference::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_type1_Type)
   {
      asn1::generated::SFN_SFN_ObsTimeDifference1::ValueType v;
      _type1_Type.read(reader, v);
      value.set_type1(v);
   }
   else if (choosenType == &_type2_Type)
   {
      asn1::generated::SFN_SFN_ObsTimeDifference2::ValueType v;
      _type2_Type.read(reader, v);
      value.set_type2(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _type1_Type.toString() + ", " + _type2_Type.toString());
   }
}

void SFN-SFN-ObsTimeDifference::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_type1_Choosen())
      _type1_Type.write(writer, value.get_type1());
   else if (value.has_type2_Choosen())
      _type2_Type.write(writer, value.get_type2());
}


void SFN_SFN_RelTimeDifference1::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _sfn_Offset_Type.read(reader, v);
      value.set_sfn_Offset(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _sfn_sfn_Reltimedifference_Type.read(reader, v);
      value.set_sfn_sfn_Reltimedifference(v);
   }

   reader.readSequenceEnd(*this);
}

void SFN_SFN_RelTimeDifference1::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sfn_Offset_Type.write(writer, value.get_sfn_Offset());
   _sfn_sfn_Reltimedifference_Type.write(writer, value.get_sfn_sfn_Reltimedifference());

   writer.writeSequenceEnd();
}


void SIR_MeasurementResults::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TFCS_IdentityPlain::ValueType v;
      _tfcs_ID_Type.read(reader, v);
      value.set_tfcs_ID(v);
   }
   {
      asn1::generated::SIR_TimeslotList::ValueType v;
      _sir_TimeslotList_Type.read(reader, v);
      value.set_sir_TimeslotList(v);
   }

   reader.readSequenceEnd(*this);
}

void SIR_MeasurementResults::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tfcs_ID_Type.write(writer, value.get_tfcs_ID());
   _sir_TimeslotList_Type.write(writer, value.get_sir_TimeslotList());

   writer.writeSequenceEnd();
}


void SubFrame1Reserved::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _reserved1_Type.read(reader, v);
      value.set_reserved1(v);
   }
   {
      _INTERNAL_::ValueType v;
      _reserved2_Type.read(reader, v);
      value.set_reserved2(v);
   }
   {
      _INTERNAL_::ValueType v;
      _reserved3_Type.read(reader, v);
      value.set_reserved3(v);
   }
   {
      _INTERNAL_::ValueType v;
      _reserved4_Type.read(reader, v);
      value.set_reserved4(v);
   }

   reader.readSequenceEnd(*this);
}

void SubFrame1Reserved::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _reserved1_Type.write(writer, value.get_reserved1());
   _reserved2_Type.write(writer, value.get_reserved2());
   _reserved3_Type.write(writer, value.get_reserved3());
   _reserved4_Type.write(writer, value.get_reserved4());

   writer.writeSequenceEnd();
}


void T_ADVinfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _t_ADV_Type.read(reader, v);
      value.set_t_ADV(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _sfn_Type.read(reader, v);
      value.set_sfn(v);
   }

   reader.readSequenceEnd(*this);
}

void T_ADVinfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _t_ADV_Type.write(writer, value.get_t_ADV());
   _sfn_Type.write(writer, value.get_sfn());

   writer.writeSequenceEnd();
}


void T-CRMax::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_notUsed_Type)
   {
      asn1::NullType::ValueType v;
      _notUsed_Type.read(reader, v);
      value.set_notUsed(v);
   }
   else if (choosenType == &_t30_Type)
   {
      asn1::generated::N_CR_T_CRMaxHyst::ValueType v;
      _t30_Type.read(reader, v);
      value.set_t30(v);
   }
   else if (choosenType == &_t60_Type)
   {
      asn1::generated::N_CR_T_CRMaxHyst::ValueType v;
      _t60_Type.read(reader, v);
      value.set_t60(v);
   }
   else if (choosenType == &_t120_Type)
   {
      asn1::generated::N_CR_T_CRMaxHyst::ValueType v;
      _t120_Type.read(reader, v);
      value.set_t120(v);
   }
   else if (choosenType == &_t180_Type)
   {
      asn1::generated::N_CR_T_CRMaxHyst::ValueType v;
      _t180_Type.read(reader, v);
      value.set_t180(v);
   }
   else if (choosenType == &_t240_Type)
   {
      asn1::generated::N_CR_T_CRMaxHyst::ValueType v;
      _t240_Type.read(reader, v);
      value.set_t240(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _notUsed_Type.toString() + ", " + _t30_Type.toString() + ", " + _t60_Type.toString() + ", " + _t120_Type.toString() + ", " + _t180_Type.toString() + ", " + _t240_Type.toString());
   }
}

void T-CRMax::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_notUsed_Choosen())
      _notUsed_Type.write(writer, value.get_notUsed());
   else if (value.has_t30_Choosen())
      _t30_Type.write(writer, value.get_t30());
   else if (value.has_t60_Choosen())
      _t60_Type.write(writer, value.get_t60());
   else if (value.has_t120_Choosen())
      _t120_Type.write(writer, value.get_t120());
   else if (value.has_t180_Choosen())
      _t180_Type.write(writer, value.get_t180());
   else if (value.has_t240_Choosen())
      _t240_Type.write(writer, value.get_t240());
}


void TemporaryOffsetList::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TemporaryOffset1::ValueType v;
      _temporaryOffset1_Type.read(reader, v);
      value.set_temporaryOffset1(v);
   }
   {
      asn1::generated::TemporaryOffset2::ValueType v;
      _temporaryOffset2_Type.read(reader, v);
      value.set_temporaryOffset2(v);
   }

   reader.readSequenceEnd(*this);
}

void TemporaryOffsetList::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _temporaryOffset1_Type.write(writer, value.get_temporaryOffset1());
   _temporaryOffset2_Type.write(writer, value.get_temporaryOffset2());

   writer.writeSequenceEnd();
}


void TimeslotInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimeslotNumber::ValueType v;
      _timeslotNumber_Type.read(reader, v);
      value.set_timeslotNumber(v);
   }
   {
      asn1::generated::BurstType::ValueType v;
      _burstType_Type.read(reader, v);
      value.set_burstType(v);
   }

   reader.readSequenceEnd(*this);
}

void TimeslotInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timeslotNumber_Type.write(writer, value.get_timeslotNumber());
   _burstType_Type.write(writer, value.get_burstType());

   writer.writeSequenceEnd();
}


void TimeslotInfo_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimeslotNumber_LCR_r4::ValueType v;
      _timeslotNumber_Type.read(reader, v);
      value.set_timeslotNumber(v);
   }

   reader.readSequenceEnd(*this);
}

void TimeslotInfo_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timeslotNumber_Type.write(writer, value.get_timeslotNumber());

   writer.writeSequenceEnd();
}


void TimeslotInfoList-r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_tdd384_Type)
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__TimeslotInfo::ValueType v;
      _tdd384_Type.read(reader, v);
      value.set_tdd384(v);
   }
   else if (choosenType == &_tdd128_Type)
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__TimeslotInfo_LCR_r4::ValueType v;
      _tdd128_Type.read(reader, v);
      value.set_tdd128(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _tdd384_Type.toString() + ", " + _tdd128_Type.toString());
   }
}

void TimeslotInfoList-r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_tdd384_Choosen())
      _tdd384_Type.write(writer, value.get_tdd384());
   else if (value.has_tdd128_Choosen())
      _tdd128_Type.write(writer, value.get_tdd128());
}


void TimeslotWithISCP::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimeslotNumber::ValueType v;
      _timeslot_Type.read(reader, v);
      value.set_timeslot(v);
   }
   {
      asn1::generated::TimeslotISCP::ValueType v;
      _timeslotISCP_Type.read(reader, v);
      value.set_timeslotISCP(v);
   }

   reader.readSequenceEnd(*this);
}

void TimeslotWithISCP::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timeslot_Type.write(writer, value.get_timeslot());
   _timeslotISCP_Type.write(writer, value.get_timeslotISCP());

   writer.writeSequenceEnd();
}


void TrafficVolumeEventParam::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TrafficVolumeEventType::ValueType v;
      _eventID_Type.read(reader, v);
      value.set_eventID(v);
   }
   {
      asn1::generated::TrafficVolumeThreshold::ValueType v;
      _reportingThreshold_Type.read(reader, v);
      value.set_reportingThreshold(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::PendingTimeAfterTrigger::ValueType v;
      _pendingTimeAfterTrigger_Type.read(reader, v);
      value.set_pendingTimeAfterTrigger(v);
   }
   {
      asn1::generated::TX_InterruptionAfterTrigger::ValueType v;
      _tx_InterruptionAfterTrigger_Type.read(reader, v);
      value.set_tx_InterruptionAfterTrigger(v);
   }

   reader.readSequenceEnd(*this);
}

void TrafficVolumeEventParam::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _eventID_Type.write(writer, value.get_eventID());
   _reportingThreshold_Type.write(writer, value.get_reportingThreshold());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _pendingTimeAfterTrigger_Type.write(writer, value.get_pendingTimeAfterTrigger());
   _tx_InterruptionAfterTrigger_Type.write(writer, value.get_tx_InterruptionAfterTrigger());

   writer.writeSequenceEnd();
}


void TrafficVolumeEventResults::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_TrCH_Identity::ValueType v;
      _ul_transportChannelCausingEvent_Type.read(reader, v);
      value.set_ul_transportChannelCausingEvent(v);
   }
   {
      asn1::generated::TrafficVolumeEventType::ValueType v;
      _trafficVolumeEventIdentity_Type.read(reader, v);
      value.set_trafficVolumeEventIdentity(v);
   }

   reader.readSequenceEnd(*this);
}

void TrafficVolumeEventResults::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_transportChannelCausingEvent_Type.write(writer, value.get_ul_transportChannelCausingEvent());
   _trafficVolumeEventIdentity_Type.write(writer, value.get_trafficVolumeEventIdentity());

   writer.writeSequenceEnd();
}


void TrafficVolumeMeasQuantity::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_rlc-BufferPayload_Type)
   {
      asn1::NullType::ValueType v;
      _rlc_BufferPayload_Type.read(reader, v);
      value.set_rlc_BufferPayload(v);
   }
   else if (choosenType == &_averageRLC-BufferPayload_Type)
   {
      asn1::generated::TimeInterval::ValueType v;
      _averageRLC_BufferPayload_Type.read(reader, v);
      value.set_averageRLC_BufferPayload(v);
   }
   else if (choosenType == &_varianceOfRLC-BufferPayload_Type)
   {
      asn1::generated::TimeInterval::ValueType v;
      _varianceOfRLC_BufferPayload_Type.read(reader, v);
      value.set_varianceOfRLC_BufferPayload(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _rlc-BufferPayload_Type.toString() + ", " + _averageRLC-BufferPayload_Type.toString() + ", " + _varianceOfRLC-BufferPayload_Type.toString());
   }
}

void TrafficVolumeMeasQuantity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_rlc-BufferPayload_Choosen())
      _rlc-BufferPayload_Type.write(writer, value.get_rlc-BufferPayload());
   else if (value.has_averageRLC-BufferPayload_Choosen())
      _averageRLC-BufferPayload_Type.write(writer, value.get_averageRLC-BufferPayload());
   else if (value.has_varianceOfRLC-BufferPayload_Choosen())
      _varianceOfRLC-BufferPayload_Type.write(writer, value.get_varianceOfRLC-BufferPayload());
}


void TrafficVolumeMeasSysInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MeasurementIdentity::ValueType v;
      _trafficVolumeMeasurementID_Type.read(reader, v);
      value.set_trafficVolumeMeasurementID(v);
   }
   {
      asn1::generated::TrafficVolumeMeasurementObjectList::ValueType v;
      _trafficVolumeMeasurementObjectList_Type.read(reader, v);
      value.set_trafficVolumeMeasurementObjectList(v);
   }
   {
      asn1::generated::TrafficVolumeMeasQuantity::ValueType v;
      _trafficVolumeMeasQuantity_Type.read(reader, v);
      value.set_trafficVolumeMeasQuantity(v);
   }
   {
      asn1::generated::TrafficVolumeReportingQuantity::ValueType v;
      _trafficVolumeReportingQuantity_Type.read(reader, v);
      value.set_trafficVolumeReportingQuantity(v);
   }
   {
      asn1::generated::TrafficVolumeReportingCriteria::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::MeasurementValidity::ValueType v;
      _measurementValidity_Type.read(reader, v);
      value.set_measurementValidity(v);
   }
   {
      asn1::generated::MeasurementReportingMode::ValueType v;
      _measurementReportingMode_Type.read(reader, v);
      value.set_measurementReportingMode(v);
   }
   {
      asn1::generated::TrafficVolumeReportCriteriaSysInfo::ValueType v;
      _reportCriteriaSysInf_Type.read(reader, v);
      value.set_reportCriteriaSysInf(v);
   }

   reader.readSequenceEnd(*this);
}

void TrafficVolumeMeasSysInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _trafficVolumeMeasurementID_Type.write(writer, value.get_trafficVolumeMeasurementID());
   _trafficVolumeMeasurementObjectList_Type.write(writer, value.get_trafficVolumeMeasurementObjectList());
   _trafficVolumeMeasQuantity_Type.write(writer, value.get_trafficVolumeMeasQuantity());
   _trafficVolumeReportingQuantity_Type.write(writer, value.get_trafficVolumeReportingQuantity());
   _dummy_Type.write(writer, value.get_dummy());
   _measurementValidity_Type.write(writer, value.get_measurementValidity());
   _measurementReportingMode_Type.write(writer, value.get_measurementReportingMode());
   _reportCriteriaSysInf_Type.write(writer, value.get_reportCriteriaSysInf());

   writer.writeSequenceEnd();
}


void TrafficVolumeMeasuredResults::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::generated::RLC_BuffersPayload::ValueType v;
      _rlc_BuffersPayload_Type.read(reader, v);
      value.set_rlc_BuffersPayload(v);
   }
   {
      asn1::generated::AverageRLC_BufferPayload::ValueType v;
      _averageRLC_BufferPayload_Type.read(reader, v);
      value.set_averageRLC_BufferPayload(v);
   }
   {
      asn1::generated::VarianceOfRLC_BufferPayload::ValueType v;
      _varianceOfRLC_BufferPayload_Type.read(reader, v);
      value.set_varianceOfRLC_BufferPayload(v);
   }

   reader.readSequenceEnd(*this);
}

void TrafficVolumeMeasuredResults::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _rlc_BuffersPayload_Type.write(writer, value.get_rlc_BuffersPayload());
   _averageRLC_BufferPayload_Type.write(writer, value.get_averageRLC_BufferPayload());
   _varianceOfRLC_BufferPayload_Type.write(writer, value.get_varianceOfRLC_BufferPayload());

   writer.writeSequenceEnd();
}


void TrafficVolumeMeasurement::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TrafficVolumeMeasurementObjectList::ValueType v;
      _trafficVolumeMeasurementObjectList_Type.read(reader, v);
      value.set_trafficVolumeMeasurementObjectList(v);
   }
   {
      asn1::generated::TrafficVolumeMeasQuantity::ValueType v;
      _trafficVolumeMeasQuantity_Type.read(reader, v);
      value.set_trafficVolumeMeasQuantity(v);
   }
   {
      asn1::generated::TrafficVolumeReportingQuantity::ValueType v;
      _trafficVolumeReportingQuantity_Type.read(reader, v);
      value.set_trafficVolumeReportingQuantity(v);
   }
   {
      asn1::generated::MeasurementValidity::ValueType v;
      _measurementValidity_Type.read(reader, v);
      value.set_measurementValidity(v);
   }
   {
      asn1::generated::TrafficVolumeReportCriteria::ValueType v;
      _reportCriteria_Type.read(reader, v);
      value.set_reportCriteria(v);
   }

   reader.readSequenceEnd(*this);
}

void TrafficVolumeMeasurement::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _trafficVolumeMeasurementObjectList_Type.write(writer, value.get_trafficVolumeMeasurementObjectList());
   _trafficVolumeMeasQuantity_Type.write(writer, value.get_trafficVolumeMeasQuantity());
   _trafficVolumeReportingQuantity_Type.write(writer, value.get_trafficVolumeReportingQuantity());
   _measurementValidity_Type.write(writer, value.get_measurementValidity());
   _reportCriteria_Type.write(writer, value.get_reportCriteria());

   writer.writeSequenceEnd();
}


void TrafficVolumeReportCriteria::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_trafficVolumeReportingCriteria_Type)
   {
      asn1::generated::TrafficVolumeReportingCriteria::ValueType v;
      _trafficVolumeReportingCriteria_Type.read(reader, v);
      value.set_trafficVolumeReportingCriteria(v);
   }
   else if (choosenType == &_periodicalReportingCriteria_Type)
   {
      asn1::generated::PeriodicalReportingCriteria::ValueType v;
      _periodicalReportingCriteria_Type.read(reader, v);
      value.set_periodicalReportingCriteria(v);
   }
   else if (choosenType == &_noReporting_Type)
   {
      asn1::NullType::ValueType v;
      _noReporting_Type.read(reader, v);
      value.set_noReporting(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _trafficVolumeReportingCriteria_Type.toString() + ", " + _periodicalReportingCriteria_Type.toString() + ", " + _noReporting_Type.toString());
   }
}

void TrafficVolumeReportCriteria::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_trafficVolumeReportingCriteria_Choosen())
      _trafficVolumeReportingCriteria_Type.write(writer, value.get_trafficVolumeReportingCriteria());
   else if (value.has_periodicalReportingCriteria_Choosen())
      _periodicalReportingCriteria_Type.write(writer, value.get_periodicalReportingCriteria());
   else if (value.has_noReporting_Choosen())
      _noReporting_Type.write(writer, value.get_noReporting());
}


void TrafficVolumeReportCriteriaSysInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_trafficVolumeReportingCriteria_Type)
   {
      asn1::generated::TrafficVolumeReportingCriteria::ValueType v;
      _trafficVolumeReportingCriteria_Type.read(reader, v);
      value.set_trafficVolumeReportingCriteria(v);
   }
   else if (choosenType == &_periodicalReportingCriteria_Type)
   {
      asn1::generated::PeriodicalReportingCriteria::ValueType v;
      _periodicalReportingCriteria_Type.read(reader, v);
      value.set_periodicalReportingCriteria(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _trafficVolumeReportingCriteria_Type.toString() + ", " + _periodicalReportingCriteria_Type.toString());
   }
}

void TrafficVolumeReportCriteriaSysInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_trafficVolumeReportingCriteria_Choosen())
      _trafficVolumeReportingCriteria_Type.write(writer, value.get_trafficVolumeReportingCriteria());
   else if (value.has_periodicalReportingCriteria_Choosen())
      _periodicalReportingCriteria_Type.write(writer, value.get_periodicalReportingCriteria());
}


void TrafficVolumeReportingCriteria::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TransChCriteriaList::ValueType v;
      _transChCriteriaList_Type.read(reader, v);
      value.set_transChCriteriaList(v);
   }

   reader.readSequenceEnd(*this);
}

void TrafficVolumeReportingCriteria::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _transChCriteriaList_Type.write(writer, value.get_transChCriteriaList());

   writer.writeSequenceEnd();
}


void TrafficVolumeReportingQuantity::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _rlc_RB_BufferPayload_Type.read(reader, v);
      value.set_rlc_RB_BufferPayload(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _rlc_RB_BufferPayloadAverage_Type.read(reader, v);
      value.set_rlc_RB_BufferPayloadAverage(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _rlc_RB_BufferPayloadVariance_Type.read(reader, v);
      value.set_rlc_RB_BufferPayloadVariance(v);
   }

   reader.readSequenceEnd(*this);
}

void TrafficVolumeReportingQuantity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rlc_RB_BufferPayload_Type.write(writer, value.get_rlc_RB_BufferPayload());
   _rlc_RB_BufferPayloadAverage_Type.write(writer, value.get_rlc_RB_BufferPayloadAverage());
   _rlc_RB_BufferPayloadVariance_Type.write(writer, value.get_rlc_RB_BufferPayloadVariance());

   writer.writeSequenceEnd();
}


void TransChCriteria::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UL_TrCH_Identity::ValueType v;
      _ul_transportChannelID_Type.read(reader, v);
      value.set_ul_transportChannelID(v);
   }
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__TrafficVolumeEventParam::ValueType v;
      _eventSpecificParameters_Type.read(reader, v);
      value.set_eventSpecificParameters(v);
   }

   reader.readSequenceEnd(*this);
}

void TransChCriteria::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_transportChannelID_Type.write(writer, value.get_ul_transportChannelID());
   _eventSpecificParameters_Type.write(writer, value.get_eventSpecificParameters());

   writer.writeSequenceEnd();
}


void UE_6AB_Event::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::TransmittedPowerThreshold::ValueType v;
      _transmittedPowerThreshold_Type.read(reader, v);
      value.set_transmittedPowerThreshold(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_6AB_Event::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _transmittedPowerThreshold_Type.write(writer, value.get_transmittedPowerThreshold());

   writer.writeSequenceEnd();
}


void UE_6FG_Event::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::UE_RX_TX_TimeDifferenceThreshold::ValueType v;
      _ue_RX_TX_TimeDifferenceThreshold_Type.read(reader, v);
      value.set_ue_RX_TX_TimeDifferenceThreshold(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_6FG_Event::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _ue_RX_TX_TimeDifferenceThreshold_Type.write(writer, value.get_ue_RX_TX_TimeDifferenceThreshold());

   writer.writeSequenceEnd();
}


void UE-AutonomousUpdateMode::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_dummy_Type)
   {
      asn1::NullType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   else if (choosenType == &_onWithNoReporting_Type)
   {
      asn1::NullType::ValueType v;
      _onWithNoReporting_Type.read(reader, v);
      value.set_onWithNoReporting(v);
   }
   else if (choosenType == &_dummy2_Type)
   {
      asn1::generated::RL_InformationLists::ValueType v;
      _dummy2_Type.read(reader, v);
      value.set_dummy2(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _dummy_Type.toString() + ", " + _onWithNoReporting_Type.toString() + ", " + _dummy2_Type.toString());
   }
}

void UE-AutonomousUpdateMode::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_dummy_Choosen())
      _dummy_Type.write(writer, value.get_dummy());
   else if (value.has_onWithNoReporting_Choosen())
      _onWithNoReporting_Type.write(writer, value.get_onWithNoReporting());
   else if (value.has_dummy2_Choosen())
      _dummy2_Type.write(writer, value.get_dummy2());
}


void UE-InternalEventParam::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_event6a_Type)
   {
      asn1::generated::UE_6AB_Event::ValueType v;
      _event6a_Type.read(reader, v);
      value.set_event6a(v);
   }
   else if (choosenType == &_event6b_Type)
   {
      asn1::generated::UE_6AB_Event::ValueType v;
      _event6b_Type.read(reader, v);
      value.set_event6b(v);
   }
   else if (choosenType == &_event6c_Type)
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _event6c_Type.read(reader, v);
      value.set_event6c(v);
   }
   else if (choosenType == &_event6d_Type)
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _event6d_Type.read(reader, v);
      value.set_event6d(v);
   }
   else if (choosenType == &_event6e_Type)
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _event6e_Type.read(reader, v);
      value.set_event6e(v);
   }
   else if (choosenType == &_event6f_Type)
   {
      asn1::generated::UE_6FG_Event::ValueType v;
      _event6f_Type.read(reader, v);
      value.set_event6f(v);
   }
   else if (choosenType == &_event6g_Type)
   {
      asn1::generated::UE_6FG_Event::ValueType v;
      _event6g_Type.read(reader, v);
      value.set_event6g(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _event6a_Type.toString() + ", " + _event6b_Type.toString() + ", " + _event6c_Type.toString() + ", " + _event6d_Type.toString() + ", " + _event6e_Type.toString() + ", " + _event6f_Type.toString() + ", " + _event6g_Type.toString());
   }
}

void UE-InternalEventParam::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_event6a_Choosen())
      _event6a_Type.write(writer, value.get_event6a());
   else if (value.has_event6b_Choosen())
      _event6b_Type.write(writer, value.get_event6b());
   else if (value.has_event6c_Choosen())
      _event6c_Type.write(writer, value.get_event6c());
   else if (value.has_event6d_Choosen())
      _event6d_Type.write(writer, value.get_event6d());
   else if (value.has_event6e_Choosen())
      _event6e_Type.write(writer, value.get_event6e());
   else if (value.has_event6f_Choosen())
      _event6f_Type.write(writer, value.get_event6f());
   else if (value.has_event6g_Choosen())
      _event6g_Type.write(writer, value.get_event6g());
}


void UE-InternalEventResults::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_event6a_Type)
   {
      asn1::NullType::ValueType v;
      _event6a_Type.read(reader, v);
      value.set_event6a(v);
   }
   else if (choosenType == &_event6b_Type)
   {
      asn1::NullType::ValueType v;
      _event6b_Type.read(reader, v);
      value.set_event6b(v);
   }
   else if (choosenType == &_event6c_Type)
   {
      asn1::NullType::ValueType v;
      _event6c_Type.read(reader, v);
      value.set_event6c(v);
   }
   else if (choosenType == &_event6d_Type)
   {
      asn1::NullType::ValueType v;
      _event6d_Type.read(reader, v);
      value.set_event6d(v);
   }
   else if (choosenType == &_event6e_Type)
   {
      asn1::NullType::ValueType v;
      _event6e_Type.read(reader, v);
      value.set_event6e(v);
   }
   else if (choosenType == &_event6f_Type)
   {
      asn1::generated::PrimaryCPICH_Info::ValueType v;
      _event6f_Type.read(reader, v);
      value.set_event6f(v);
   }
   else if (choosenType == &_event6g_Type)
   {
      asn1::generated::PrimaryCPICH_Info::ValueType v;
      _event6g_Type.read(reader, v);
      value.set_event6g(v);
   }
   else if (choosenType == &_spare_Type)
   {
      asn1::NullType::ValueType v;
      _spare_Type.read(reader, v);
      value.set_spare(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _event6a_Type.toString() + ", " + _event6b_Type.toString() + ", " + _event6c_Type.toString() + ", " + _event6d_Type.toString() + ", " + _event6e_Type.toString() + ", " + _event6f_Type.toString() + ", " + _event6g_Type.toString() + ", " + _spare_Type.toString());
   }
}

void UE-InternalEventResults::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_event6a_Choosen())
      _event6a_Type.write(writer, value.get_event6a());
   else if (value.has_event6b_Choosen())
      _event6b_Type.write(writer, value.get_event6b());
   else if (value.has_event6c_Choosen())
      _event6c_Type.write(writer, value.get_event6c());
   else if (value.has_event6d_Choosen())
      _event6d_Type.write(writer, value.get_event6d());
   else if (value.has_event6e_Choosen())
      _event6e_Type.write(writer, value.get_event6e());
   else if (value.has_event6f_Choosen())
      _event6f_Type.write(writer, value.get_event6f());
   else if (value.has_event6g_Choosen())
      _event6g_Type.write(writer, value.get_event6g());
   else if (value.has_spare_Choosen())
      _spare_Type.write(writer, value.get_spare());
}


void UE_InternalMeasQuantity::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_MeasurementQuantity::ValueType v;
      _measurementQuantity_Type.read(reader, v);
      value.set_measurementQuantity(v);
   }
   {
      asn1::generated::FilterCoefficient::ValueType v;
      _filterCoefficient_Type.read(reader, v);
      value.set_filterCoefficient(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_InternalMeasQuantity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _measurementQuantity_Type.write(writer, value.get_measurementQuantity());
   _filterCoefficient_Type.write(writer, value.get_filterCoefficient());

   writer.writeSequenceEnd();
}


void UE_InternalMeasuredResults::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_ue-TransmittedPowerFDD_INTERNAL_asn1__generated__UE_TransmittedPower_ue-RX-TX-ReportEntryList_INTERNAL_asn1__generated__UE_RX_TX_ReportEntryList_tdd_INTERNAL__SequenceType_ue-TransmittedPowerTDD-List_INTERNAL_asn1__generated__UE_TransmittedPowerTDD_List_appliedTA_INTERNAL_asn1__generated__UL_TimingAdvance::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_InternalMeasuredResults::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void UE_InternalMeasuredResults_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_ue-TransmittedPowerFDD_INTERNAL_asn1__generated__UE_TransmittedPower_ue-RX-TX-ReportEntryList_INTERNAL_asn1__generated__UE_RX_TX_ReportEntryList_tdd_INTERNAL__SequenceType_ue-TransmittedPowerTDD-List_INTERNAL_asn1__generated__UE_TransmittedPowerTDD_List_appliedTA_INTERNAL_asn1__generated__UL_TimingAdvance_VHCR::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_InternalMeasuredResults_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void UE_InternalMeasuredResults_LCR_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_TransmittedPowerTDD_List::ValueType v;
      _ue_TransmittedPowerTDD_List_Type.read(reader, v);
      value.set_ue_TransmittedPowerTDD_List(v);
   }
   {
      asn1::generated::T_ADVinfo::ValueType v;
      _t_ADVinfo_Type.read(reader, v);
      value.set_t_ADVinfo(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_InternalMeasuredResults_LCR_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_TransmittedPowerTDD_List_Type.write(writer, value.get_ue_TransmittedPowerTDD_List());
   _t_ADVinfo_Type.write(writer, value.get_t_ADVinfo());

   writer.writeSequenceEnd();
}


void UE_InternalMeasurement::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_InternalMeasQuantity::ValueType v;
      _ue_InternalMeasQuantity_Type.read(reader, v);
      value.set_ue_InternalMeasQuantity(v);
   }
   {
      asn1::generated::UE_InternalReportingQuantity::ValueType v;
      _ue_InternalReportingQuantity_Type.read(reader, v);
      value.set_ue_InternalReportingQuantity(v);
   }
   {
      asn1::generated::UE_InternalReportCriteria::ValueType v;
      _reportCriteria_Type.read(reader, v);
      value.set_reportCriteria(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_InternalMeasurement::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_InternalMeasQuantity_Type.write(writer, value.get_ue_InternalMeasQuantity());
   _ue_InternalReportingQuantity_Type.write(writer, value.get_ue_InternalReportingQuantity());
   _reportCriteria_Type.write(writer, value.get_reportCriteria());

   writer.writeSequenceEnd();
}


void UE_InternalMeasurement_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_InternalMeasQuantity::ValueType v;
      _ue_InternalMeasQuantity_Type.read(reader, v);
      value.set_ue_InternalMeasQuantity(v);
   }
   {
      asn1::generated::UE_InternalReportingQuantity_r4::ValueType v;
      _ue_InternalReportingQuantity_Type.read(reader, v);
      value.set_ue_InternalReportingQuantity(v);
   }
   {
      asn1::generated::UE_InternalReportCriteria::ValueType v;
      _reportCriteria_Type.read(reader, v);
      value.set_reportCriteria(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_InternalMeasurement_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_InternalMeasQuantity_Type.write(writer, value.get_ue_InternalMeasQuantity());
   _ue_InternalReportingQuantity_Type.write(writer, value.get_ue_InternalReportingQuantity());
   _reportCriteria_Type.write(writer, value.get_reportCriteria());

   writer.writeSequenceEnd();
}


void UE_InternalMeasurementSysInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MeasurementIdentity::ValueType v;
      _ue_InternalMeasurementID_Type.read(reader, v);
      value.set_ue_InternalMeasurementID(v);
   }
   {
      asn1::generated::UE_InternalMeasQuantity::ValueType v;
      _ue_InternalMeasQuantity_Type.read(reader, v);
      value.set_ue_InternalMeasQuantity(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_InternalMeasurementSysInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_InternalMeasurementID_Type.write(writer, value.get_ue_InternalMeasurementID());
   _ue_InternalMeasQuantity_Type.write(writer, value.get_ue_InternalMeasQuantity());

   writer.writeSequenceEnd();
}


void UE-InternalReportCriteria::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_ue-InternalReportingCriteria_Type)
   {
      asn1::generated::UE_InternalReportingCriteria::ValueType v;
      _ue_InternalReportingCriteria_Type.read(reader, v);
      value.set_ue_InternalReportingCriteria(v);
   }
   else if (choosenType == &_periodicalReportingCriteria_Type)
   {
      asn1::generated::PeriodicalReportingCriteria::ValueType v;
      _periodicalReportingCriteria_Type.read(reader, v);
      value.set_periodicalReportingCriteria(v);
   }
   else if (choosenType == &_noReporting_Type)
   {
      asn1::NullType::ValueType v;
      _noReporting_Type.read(reader, v);
      value.set_noReporting(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _ue-InternalReportingCriteria_Type.toString() + ", " + _periodicalReportingCriteria_Type.toString() + ", " + _noReporting_Type.toString());
   }
}

void UE-InternalReportCriteria::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_ue-InternalReportingCriteria_Choosen())
      _ue-InternalReportingCriteria_Type.write(writer, value.get_ue-InternalReportingCriteria());
   else if (value.has_periodicalReportingCriteria_Choosen())
      _periodicalReportingCriteria_Type.write(writer, value.get_periodicalReportingCriteria());
   else if (value.has_noReporting_Choosen())
      _noReporting_Type.write(writer, value.get_noReporting());
}


void UE_InternalReportingCriteria::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_InternalEventParamList::ValueType v;
      _ue_InternalEventParamList_Type.read(reader, v);
      value.set_ue_InternalEventParamList(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_InternalReportingCriteria::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_InternalEventParamList_Type.write(writer, value.get_ue_InternalEventParamList());

   writer.writeSequenceEnd();
}


void UE_InternalReportingQuantity::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _ue_TransmittedPower_Type.read(reader, v);
      value.set_ue_TransmittedPower(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_ue-RX-TX-TimeDifference_INTERNAL_asn1__BooleanType_tdd_INTERNAL__SequenceType_appliedTA_INTERNAL_asn1__BooleanType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_InternalReportingQuantity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_TransmittedPower_Type.write(writer, value.get_ue_TransmittedPower());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void UE_InternalReportingQuantity_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _ue_TransmittedPower_Type.read(reader, v);
      value.set_ue_TransmittedPower(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_ue-RX-TX-TimeDifference_INTERNAL_asn1__BooleanType_tdd_INTERNAL__SequenceType_tddOption_INTERNAL__ChoiceType_tdd384_INTERNAL__SequenceType_appliedTA_INTERNAL_asn1__BooleanType_tdd128_INTERNAL__SequenceType_t-ADVinfo_INTERNAL_asn1__BooleanType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_InternalReportingQuantity_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_TransmittedPower_Type.write(writer, value.get_ue_TransmittedPower());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void UE_RX_TX_ReportEntry::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PrimaryCPICH_Info::ValueType v;
      _primaryCPICH_Info_Type.read(reader, v);
      value.set_primaryCPICH_Info(v);
   }
   {
      asn1::generated::UE_RX_TX_TimeDifferenceType1::ValueType v;
      _ue_RX_TX_TimeDifferenceType1_Type.read(reader, v);
      value.set_ue_RX_TX_TimeDifferenceType1(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RX_TX_ReportEntry::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _primaryCPICH_Info_Type.write(writer, value.get_primaryCPICH_Info());
   _ue_RX_TX_TimeDifferenceType1_Type.write(writer, value.get_ue_RX_TX_TimeDifferenceType1());

   writer.writeSequenceEnd();
}


void UE_RX_TX_TimeDifferenceType2Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RX_TX_TimeDifferenceType2::ValueType v;
      _ue_RX_TX_TimeDifferenceType2_Type.read(reader, v);
      value.set_ue_RX_TX_TimeDifferenceType2(v);
   }
   {
      asn1::generated::NeighbourQuality::ValueType v;
      _neighbourQuality_Type.read(reader, v);
      value.set_neighbourQuality(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RX_TX_TimeDifferenceType2Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RX_TX_TimeDifferenceType2_Type.write(writer, value.get_ue_RX_TX_TimeDifferenceType2());
   _neighbourQuality_Type.write(writer, value.get_neighbourQuality());

   writer.writeSequenceEnd();
}


void UL-TrCH-Identity::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_dch_Type)
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _dch_Type.read(reader, v);
      value.set_dch(v);
   }
   else if (choosenType == &_rachorcpch_Type)
   {
      asn1::NullType::ValueType v;
      _rachorcpch_Type.read(reader, v);
      value.set_rachorcpch(v);
   }
   else if (choosenType == &_usch_Type)
   {
      asn1::generated::TransportChannelIdentity::ValueType v;
      _usch_Type.read(reader, v);
      value.set_usch(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _dch_Type.toString() + ", " + _rachorcpch_Type.toString() + ", " + _usch_Type.toString());
   }
}

void UL-TrCH-Identity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_dch_Choosen())
      _dch_Type.write(writer, value.get_dch());
   else if (value.has_rachorcpch_Choosen())
      _rachorcpch_Type.write(writer, value.get_rachorcpch());
   else if (value.has_usch_Choosen())
      _usch_Type.write(writer, value.get_usch());
}


void UE_Positioning_CipherParameters::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _cipheringKeyFlag_Type.read(reader, v);
      value.set_cipheringKeyFlag(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _cipheringSerialNumber_Type.read(reader, v);
      value.set_cipheringSerialNumber(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_CipherParameters::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cipheringKeyFlag_Type.write(writer, value.get_cipheringKeyFlag());
   _cipheringSerialNumber_Type.write(writer, value.get_cipheringSerialNumber());

   writer.writeSequenceEnd();
}


void UE_Positioning_Error::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_ErrorCause::ValueType v;
      _errorReason_Type.read(reader, v);
      value.set_errorReason(v);
   }
   {
      asn1::generated::UE_Positioning_GPS_AdditionalAssistanceDataRequest::ValueType v;
      _ue_positioning_GPS_additionalAssistanceDataRequest_Type.read(reader, v);
      value.set_ue_positioning_GPS_additionalAssistanceDataRequest(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_Error::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _errorReason_Type.write(writer, value.get_errorReason());
   _ue_positioning_GPS_additionalAssistanceDataRequest_Type.write(writer, value.get_ue_positioning_GPS_additionalAssistanceDataRequest());

   writer.writeSequenceEnd();
}


void UE_Positioning_EventParam::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ReportingAmount::ValueType v;
      _reportingAmount_Type.read(reader, v);
      value.set_reportingAmount(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _reportFirstFix_Type.read(reader, v);
      value.set_reportFirstFix(v);
   }
   {
      asn1::generated::UE_Positioning_MeasurementInterval::ValueType v;
      _measurementInterval_Type.read(reader, v);
      value.set_measurementInterval(v);
   }
   {
      asn1::generated::UE_Positioning_EventSpecificInfo::ValueType v;
      _eventSpecificInfo_Type.read(reader, v);
      value.set_eventSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_EventParam::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _reportingAmount_Type.write(writer, value.get_reportingAmount());
   _reportFirstFix_Type.write(writer, value.get_reportFirstFix());
   _measurementInterval_Type.write(writer, value.get_measurementInterval());
   _eventSpecificInfo_Type.write(writer, value.get_eventSpecificInfo());

   writer.writeSequenceEnd();
}


void UE-Positioning-EventSpecificInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_e7a_Type)
   {
      asn1::generated::ThresholdPositionChange::ValueType v;
      _e7a_Type.read(reader, v);
      value.set_e7a(v);
   }
   else if (choosenType == &_e7b_Type)
   {
      asn1::generated::ThresholdSFN_SFN_Change::ValueType v;
      _e7b_Type.read(reader, v);
      value.set_e7b(v);
   }
   else if (choosenType == &_e7c_Type)
   {
      asn1::generated::ThresholdSFN_GPS_TOW::ValueType v;
      _e7c_Type.read(reader, v);
      value.set_e7c(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _e7a_Type.toString() + ", " + _e7b_Type.toString() + ", " + _e7c_Type.toString());
   }
}

void UE-Positioning-EventSpecificInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_e7a_Choosen())
      _e7a_Type.write(writer, value.get_e7a());
   else if (value.has_e7b_Choosen())
      _e7b_Type.write(writer, value.get_e7b());
   else if (value.has_e7c_Choosen())
      _e7c_Type.write(writer, value.get_e7c());
}


void UE_Positioning_GPS_AcquisitionAssistance::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _gps_ReferenceTime_Type.read(reader, v);
      value.set_gps_ReferenceTime(v);
   }
   {
      asn1::generated::UTRAN_GPSReferenceTime::ValueType v;
      _utran_GPSReferenceTime_Type.read(reader, v);
      value.set_utran_GPSReferenceTime(v);
   }
   {
      asn1::generated::AcquisitionSatInfoList::ValueType v;
      _satelliteInformationList_Type.read(reader, v);
      value.set_satelliteInformationList(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_GPS_AcquisitionAssistance::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _gps_ReferenceTime_Type.write(writer, value.get_gps_ReferenceTime());
   _utran_GPSReferenceTime_Type.write(writer, value.get_utran_GPSReferenceTime());
   _satelliteInformationList_Type.write(writer, value.get_satelliteInformationList());

   writer.writeSequenceEnd();
}


void UE_Positioning_GPS_AdditionalAssistanceDataRequest::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _almanacRequest_Type.read(reader, v);
      value.set_almanacRequest(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _utcModelRequest_Type.read(reader, v);
      value.set_utcModelRequest(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _ionosphericModelRequest_Type.read(reader, v);
      value.set_ionosphericModelRequest(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _navigationModelRequest_Type.read(reader, v);
      value.set_navigationModelRequest(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _dgpsCorrectionsRequest_Type.read(reader, v);
      value.set_dgpsCorrectionsRequest(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _referenceLocationRequest_Type.read(reader, v);
      value.set_referenceLocationRequest(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _referenceTimeRequest_Type.read(reader, v);
      value.set_referenceTimeRequest(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _aquisitionAssistanceRequest_Type.read(reader, v);
      value.set_aquisitionAssistanceRequest(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _realTimeIntegrityRequest_Type.read(reader, v);
      value.set_realTimeIntegrityRequest(v);
   }
   {
      asn1::generated::UE_Positioning_GPS_NavModelAddDataReq::ValueType v;
      _navModelAddDataRequest_Type.read(reader, v);
      value.set_navModelAddDataRequest(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_GPS_AdditionalAssistanceDataRequest::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _almanacRequest_Type.write(writer, value.get_almanacRequest());
   _utcModelRequest_Type.write(writer, value.get_utcModelRequest());
   _ionosphericModelRequest_Type.write(writer, value.get_ionosphericModelRequest());
   _navigationModelRequest_Type.write(writer, value.get_navigationModelRequest());
   _dgpsCorrectionsRequest_Type.write(writer, value.get_dgpsCorrectionsRequest());
   _referenceLocationRequest_Type.write(writer, value.get_referenceLocationRequest());
   _referenceTimeRequest_Type.write(writer, value.get_referenceTimeRequest());
   _aquisitionAssistanceRequest_Type.write(writer, value.get_aquisitionAssistanceRequest());
   _realTimeIntegrityRequest_Type.write(writer, value.get_realTimeIntegrityRequest());
   _navModelAddDataRequest_Type.write(writer, value.get_navModelAddDataRequest());

   writer.writeSequenceEnd();
}


void UE_Positioning_GPS_Almanac::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _wn_a_Type.read(reader, v);
      value.set_wn_a(v);
   }
   {
      asn1::generated::AlmanacSatInfoList::ValueType v;
      _almanacSatInfoList_Type.read(reader, v);
      value.set_almanacSatInfoList(v);
   }
   {
      _INTERNAL_::ValueType v;
      _sv_GlobalHealth_Type.read(reader, v);
      value.set_sv_GlobalHealth(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_GPS_Almanac::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _wn_a_Type.write(writer, value.get_wn_a());
   _almanacSatInfoList_Type.write(writer, value.get_almanacSatInfoList());
   _sv_GlobalHealth_Type.write(writer, value.get_sv_GlobalHealth());

   writer.writeSequenceEnd();
}


void UE_Positioning_GPS_AssistanceData::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_GPS_ReferenceTime::ValueType v;
      _ue_positioning_GPS_ReferenceTime_Type.read(reader, v);
      value.set_ue_positioning_GPS_ReferenceTime(v);
   }
   {
      asn1::generated::ReferenceLocation::ValueType v;
      _ue_positioning_GPS_ReferenceLocation_Type.read(reader, v);
      value.set_ue_positioning_GPS_ReferenceLocation(v);
   }
   {
      asn1::generated::UE_Positioning_GPS_DGPS_Corrections::ValueType v;
      _ue_positioning_GPS_DGPS_Corrections_Type.read(reader, v);
      value.set_ue_positioning_GPS_DGPS_Corrections(v);
   }
   {
      asn1::generated::UE_Positioning_GPS_NavigationModel::ValueType v;
      _ue_positioning_GPS_NavigationModel_Type.read(reader, v);
      value.set_ue_positioning_GPS_NavigationModel(v);
   }
   {
      asn1::generated::UE_Positioning_GPS_IonosphericModel::ValueType v;
      _ue_positioning_GPS_IonosphericModel_Type.read(reader, v);
      value.set_ue_positioning_GPS_IonosphericModel(v);
   }
   {
      asn1::generated::UE_Positioning_GPS_UTC_Model::ValueType v;
      _ue_positioning_GPS_UTC_Model_Type.read(reader, v);
      value.set_ue_positioning_GPS_UTC_Model(v);
   }
   {
      asn1::generated::UE_Positioning_GPS_Almanac::ValueType v;
      _ue_positioning_GPS_Almanac_Type.read(reader, v);
      value.set_ue_positioning_GPS_Almanac(v);
   }
   {
      asn1::generated::UE_Positioning_GPS_AcquisitionAssistance::ValueType v;
      _ue_positioning_GPS_AcquisitionAssistance_Type.read(reader, v);
      value.set_ue_positioning_GPS_AcquisitionAssistance(v);
   }
   {
      asn1::generated::BadSatList::ValueType v;
      _ue_positioning_GPS_Real_timeIntegrity_Type.read(reader, v);
      value.set_ue_positioning_GPS_Real_timeIntegrity(v);
   }
   {
      asn1::generated::UE_Positioning_GPS_ReferenceCellInfo::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_GPS_AssistanceData::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_positioning_GPS_ReferenceTime_Type.write(writer, value.get_ue_positioning_GPS_ReferenceTime());
   _ue_positioning_GPS_ReferenceLocation_Type.write(writer, value.get_ue_positioning_GPS_ReferenceLocation());
   _ue_positioning_GPS_DGPS_Corrections_Type.write(writer, value.get_ue_positioning_GPS_DGPS_Corrections());
   _ue_positioning_GPS_NavigationModel_Type.write(writer, value.get_ue_positioning_GPS_NavigationModel());
   _ue_positioning_GPS_IonosphericModel_Type.write(writer, value.get_ue_positioning_GPS_IonosphericModel());
   _ue_positioning_GPS_UTC_Model_Type.write(writer, value.get_ue_positioning_GPS_UTC_Model());
   _ue_positioning_GPS_Almanac_Type.write(writer, value.get_ue_positioning_GPS_Almanac());
   _ue_positioning_GPS_AcquisitionAssistance_Type.write(writer, value.get_ue_positioning_GPS_AcquisitionAssistance());
   _ue_positioning_GPS_Real_timeIntegrity_Type.write(writer, value.get_ue_positioning_GPS_Real_timeIntegrity());
   _dummy_Type.write(writer, value.get_dummy());

   writer.writeSequenceEnd();
}


void UE_Positioning_GPS_DGPS_Corrections::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _gps_TOW_Type.read(reader, v);
      value.set_gps_TOW(v);
   }
   {
      asn1::generated::DiffCorrectionStatus::ValueType v;
      _statusHealth_Type.read(reader, v);
      value.set_statusHealth(v);
   }
   {
      asn1::generated::DGPS_CorrectionSatInfoList::ValueType v;
      _dgps_CorrectionSatInfoList_Type.read(reader, v);
      value.set_dgps_CorrectionSatInfoList(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_GPS_DGPS_Corrections::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _gps_TOW_Type.write(writer, value.get_gps_TOW());
   _statusHealth_Type.write(writer, value.get_statusHealth());
   _dgps_CorrectionSatInfoList_Type.write(writer, value.get_dgps_CorrectionSatInfoList());

   writer.writeSequenceEnd();
}


void UE_Positioning_GPS_IonosphericModel::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _alfa0_Type.read(reader, v);
      value.set_alfa0(v);
   }
   {
      _INTERNAL_::ValueType v;
      _alfa1_Type.read(reader, v);
      value.set_alfa1(v);
   }
   {
      _INTERNAL_::ValueType v;
      _alfa2_Type.read(reader, v);
      value.set_alfa2(v);
   }
   {
      _INTERNAL_::ValueType v;
      _alfa3_Type.read(reader, v);
      value.set_alfa3(v);
   }
   {
      _INTERNAL_::ValueType v;
      _beta0_Type.read(reader, v);
      value.set_beta0(v);
   }
   {
      _INTERNAL_::ValueType v;
      _beta1_Type.read(reader, v);
      value.set_beta1(v);
   }
   {
      _INTERNAL_::ValueType v;
      _beta2_Type.read(reader, v);
      value.set_beta2(v);
   }
   {
      _INTERNAL_::ValueType v;
      _beta3_Type.read(reader, v);
      value.set_beta3(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_GPS_IonosphericModel::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _alfa0_Type.write(writer, value.get_alfa0());
   _alfa1_Type.write(writer, value.get_alfa1());
   _alfa2_Type.write(writer, value.get_alfa2());
   _alfa3_Type.write(writer, value.get_alfa3());
   _beta0_Type.write(writer, value.get_beta0());
   _beta1_Type.write(writer, value.get_beta1());
   _beta2_Type.write(writer, value.get_beta2());
   _beta3_Type.write(writer, value.get_beta3());

   writer.writeSequenceEnd();
}


void UE_Positioning_GPS_MeasurementResults::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_utran-GPSReferenceTimeResult_INTERNAL_asn1__generated__UTRAN_GPSReferenceTimeResult_gps-ReferenceTimeOnly_INTERNAL_asn1__IntegerType::ValueType v;
      _referenceTime_Type.read(reader, v);
      value.set_referenceTime(v);
   }
   {
      asn1::generated::GPS_MeasurementParamList::ValueType v;
      _gps_MeasurementParamList_Type.read(reader, v);
      value.set_gps_MeasurementParamList(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_GPS_MeasurementResults::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _referenceTime_Type.write(writer, value.get_referenceTime());
   _gps_MeasurementParamList_Type.write(writer, value.get_gps_MeasurementParamList());

   writer.writeSequenceEnd();
}


void UE_Positioning_GPS_NavigationModel::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::NavigationModelSatInfoList::ValueType v;
      _navigationModelSatInfoList_Type.read(reader, v);
      value.set_navigationModelSatInfoList(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_GPS_NavigationModel::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _navigationModelSatInfoList_Type.write(writer, value.get_navigationModelSatInfoList());

   writer.writeSequenceEnd();
}


void UE_Positioning_GPS_NavModelAddDataReq::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _gps_Week_Type.read(reader, v);
      value.set_gps_Week(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _gps_Toe_Type.read(reader, v);
      value.set_gps_Toe(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _tToeLimit_Type.read(reader, v);
      value.set_tToeLimit(v);
   }
   {
      asn1::generated::SatDataList::ValueType v;
      _satDataList_Type.read(reader, v);
      value.set_satDataList(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_GPS_NavModelAddDataReq::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _gps_Week_Type.write(writer, value.get_gps_Week());
   _gps_Toe_Type.write(writer, value.get_gps_Toe());
   _tToeLimit_Type.write(writer, value.get_tToeLimit());
   _satDataList_Type.write(writer, value.get_satDataList());

   writer.writeSequenceEnd();
}


void UE_Positioning_GPS_ReferenceCellInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_referenceIdentity_INTERNAL_asn1__generated__PrimaryCPICH_Info_tdd_INTERNAL__SequenceType_referenceIdentity_INTERNAL_asn1__generated__CellParametersID::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_GPS_ReferenceCellInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());

   writer.writeSequenceEnd();
}


void UE_Positioning_GPS_ReferenceTime::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _gps_Week_Type.read(reader, v);
      value.set_gps_Week(v);
   }
   {
      asn1::generated::GPS_TOW_1msec::ValueType v;
      _gps_tow_1msec_Type.read(reader, v);
      value.set_gps_tow_1msec(v);
   }
   {
      asn1::generated::UTRAN_GPSReferenceTime::ValueType v;
      _utran_GPSReferenceTime_Type.read(reader, v);
      value.set_utran_GPSReferenceTime(v);
   }
   {
      asn1::generated::SFN_TOW_Uncertainty::ValueType v;
      _sfn_tow_Uncertainty_Type.read(reader, v);
      value.set_sfn_tow_Uncertainty(v);
   }
   {
      asn1::generated::UTRAN_GPS_DriftRate::ValueType v;
      _utran_GPS_DriftRate_Type.read(reader, v);
      value.set_utran_GPS_DriftRate(v);
   }
   {
      asn1::generated::GPS_TOW_AssistList::ValueType v;
      _gps_TOW_AssistList_Type.read(reader, v);
      value.set_gps_TOW_AssistList(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_GPS_ReferenceTime::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _gps_Week_Type.write(writer, value.get_gps_Week());
   _gps_tow_1msec_Type.write(writer, value.get_gps_tow_1msec());
   _utran_GPSReferenceTime_Type.write(writer, value.get_utran_GPSReferenceTime());
   _sfn_tow_Uncertainty_Type.write(writer, value.get_sfn_tow_Uncertainty());
   _utran_GPS_DriftRate_Type.write(writer, value.get_utran_GPS_DriftRate());
   _gps_TOW_AssistList_Type.write(writer, value.get_gps_TOW_AssistList());

   writer.writeSequenceEnd();
}


void UE_Positioning_GPS_UTC_Model::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _a1_Type.read(reader, v);
      value.set_a1(v);
   }
   {
      _INTERNAL_::ValueType v;
      _a0_Type.read(reader, v);
      value.set_a0(v);
   }
   {
      _INTERNAL_::ValueType v;
      _t_ot_Type.read(reader, v);
      value.set_t_ot(v);
   }
   {
      _INTERNAL_::ValueType v;
      _wn_t_Type.read(reader, v);
      value.set_wn_t(v);
   }
   {
      _INTERNAL_::ValueType v;
      _delta_t_LS_Type.read(reader, v);
      value.set_delta_t_LS(v);
   }
   {
      _INTERNAL_::ValueType v;
      _wn_lsf_Type.read(reader, v);
      value.set_wn_lsf(v);
   }
   {
      _INTERNAL_::ValueType v;
      _dn_Type.read(reader, v);
      value.set_dn(v);
   }
   {
      _INTERNAL_::ValueType v;
      _delta_t_LSF_Type.read(reader, v);
      value.set_delta_t_LSF(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_GPS_UTC_Model::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _a1_Type.write(writer, value.get_a1());
   _a0_Type.write(writer, value.get_a0());
   _t_ot_Type.write(writer, value.get_t_ot());
   _wn_t_Type.write(writer, value.get_wn_t());
   _delta_t_LS_Type.write(writer, value.get_delta_t_LS());
   _wn_lsf_Type.write(writer, value.get_wn_lsf());
   _dn_Type.write(writer, value.get_dn());
   _delta_t_LSF_Type.write(writer, value.get_delta_t_LSF());

   writer.writeSequenceEnd();
}


void UE_Positioning_IPDL_Parameters::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IP_Spacing::ValueType v;
      _ip_Spacing_Type.read(reader, v);
      value.set_ip_Spacing(v);
   }
   {
      asn1::generated::IP_Length::ValueType v;
      _ip_Length_Type.read(reader, v);
      value.set_ip_Length(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _ip_Offset_Type.read(reader, v);
      value.set_ip_Offset(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _seed_Type.read(reader, v);
      value.set_seed(v);
   }
   {
      asn1::generated::BurstModeParameters::ValueType v;
      _burstModeParameters_Type.read(reader, v);
      value.set_burstModeParameters(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_IPDL_Parameters::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ip_Spacing_Type.write(writer, value.get_ip_Spacing());
   _ip_Length_Type.write(writer, value.get_ip_Length());
   _ip_Offset_Type.write(writer, value.get_ip_Offset());
   _seed_Type.write(writer, value.get_seed());
   _burstModeParameters_Type.write(writer, value.get_burstModeParameters());

   writer.writeSequenceEnd();
}


void UE_Positioning_IPDL_Parameters_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_ip-Spacing_INTERNAL_asn1__generated__IP_Spacing_ip-Length_INTERNAL_asn1__generated__IP_Length_ip-Offset_INTERNAL_asn1__IntegerType_seed_INTERNAL_asn1__IntegerType_tdd_INTERNAL__SequenceType_ip-Spacing-TDD_INTERNAL_asn1__generated__IP_Spacing_TDD_ip-slot_INTERNAL_asn1__IntegerType_ip-Start_INTERNAL_asn1__IntegerType_ip-PCCPCG_INTERNAL_asn1__generated__IP_PCCPCH_r4::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::BurstModeParameters::ValueType v;
      _burstModeParameters_Type.read(reader, v);
      value.set_burstModeParameters(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_IPDL_Parameters_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _burstModeParameters_Type.write(writer, value.get_burstModeParameters());

   writer.writeSequenceEnd();
}


void UE_Positioning_IPDL_Parameters_TDD_r4_ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IP_Spacing_TDD::ValueType v;
      _ip_Spacing_Type.read(reader, v);
      value.set_ip_Spacing(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _ip_slot_Type.read(reader, v);
      value.set_ip_slot(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _ip_Start_Type.read(reader, v);
      value.set_ip_Start(v);
   }
   {
      asn1::generated::IP_PCCPCH_r4::ValueType v;
      _ip_PCCPCG_Type.read(reader, v);
      value.set_ip_PCCPCG(v);
   }
   {
      asn1::generated::BurstModeParameters::ValueType v;
      _burstModeParameters_Type.read(reader, v);
      value.set_burstModeParameters(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_IPDL_Parameters_TDD_r4_ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ip_Spacing_Type.write(writer, value.get_ip_Spacing());
   _ip_slot_Type.write(writer, value.get_ip_slot());
   _ip_Start_Type.write(writer, value.get_ip_Start());
   _ip_PCCPCG_Type.write(writer, value.get_ip_PCCPCG());
   _burstModeParameters_Type.write(writer, value.get_burstModeParameters());

   writer.writeSequenceEnd();
}


void UE_Positioning_MeasuredResults::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_OTDOA_Measurement::ValueType v;
      _ue_positioning_OTDOA_Measurement_Type.read(reader, v);
      value.set_ue_positioning_OTDOA_Measurement(v);
   }
   {
      asn1::generated::UE_Positioning_PositionEstimateInfo::ValueType v;
      _ue_positioning_PositionEstimateInfo_Type.read(reader, v);
      value.set_ue_positioning_PositionEstimateInfo(v);
   }
   {
      asn1::generated::UE_Positioning_GPS_MeasurementResults::ValueType v;
      _ue_positioning_GPS_Measurement_Type.read(reader, v);
      value.set_ue_positioning_GPS_Measurement(v);
   }
   {
      asn1::generated::UE_Positioning_Error::ValueType v;
      _ue_positioning_Error_Type.read(reader, v);
      value.set_ue_positioning_Error(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_MeasuredResults::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_positioning_OTDOA_Measurement_Type.write(writer, value.get_ue_positioning_OTDOA_Measurement());
   _ue_positioning_PositionEstimateInfo_Type.write(writer, value.get_ue_positioning_PositionEstimateInfo());
   _ue_positioning_GPS_Measurement_Type.write(writer, value.get_ue_positioning_GPS_Measurement());
   _ue_positioning_Error_Type.write(writer, value.get_ue_positioning_Error());

   writer.writeSequenceEnd();
}


void UE_Positioning_MeasuredResults_v390ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_OTDOA_Measurement_v390ext::ValueType v;
      _ue_Positioning_OTDOA_Measurement_v390ext_Type.read(reader, v);
      value.set_ue_Positioning_OTDOA_Measurement_v390ext(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_MeasuredResults_v390ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_Positioning_OTDOA_Measurement_v390ext_Type.write(writer, value.get_ue_Positioning_OTDOA_Measurement_v390ext());

   writer.writeSequenceEnd();
}


void UE_Positioning_Measurement::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_ReportingQuantity::ValueType v;
      _ue_positioning_ReportingQuantity_Type.read(reader, v);
      value.set_ue_positioning_ReportingQuantity(v);
   }
   {
      asn1::generated::UE_Positioning_ReportCriteria::ValueType v;
      _reportCriteria_Type.read(reader, v);
      value.set_reportCriteria(v);
   }
   {
      asn1::generated::UE_Positioning_OTDOA_AssistanceData::ValueType v;
      _ue_positioning_OTDOA_AssistanceData_Type.read(reader, v);
      value.set_ue_positioning_OTDOA_AssistanceData(v);
   }
   {
      asn1::generated::UE_Positioning_GPS_AssistanceData::ValueType v;
      _ue_positioning_GPS_AssistanceData_Type.read(reader, v);
      value.set_ue_positioning_GPS_AssistanceData(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_Measurement::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_positioning_ReportingQuantity_Type.write(writer, value.get_ue_positioning_ReportingQuantity());
   _reportCriteria_Type.write(writer, value.get_reportCriteria());
   _ue_positioning_OTDOA_AssistanceData_Type.write(writer, value.get_ue_positioning_OTDOA_AssistanceData());
   _ue_positioning_GPS_AssistanceData_Type.write(writer, value.get_ue_positioning_GPS_AssistanceData());

   writer.writeSequenceEnd();
}


void UE_Positioning_Measurement_v390ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_ReportingQuantity_v390ext::ValueType v;
      _ue_positioning_ReportingQuantity_v390ext_Type.read(reader, v);
      value.set_ue_positioning_ReportingQuantity_v390ext(v);
   }
   {
      asn1::generated::MeasurementValidity::ValueType v;
      _measurementValidity_Type.read(reader, v);
      value.set_measurementValidity(v);
   }
   {
      asn1::generated::UE_Positioning_OTDOA_AssistanceData_UEB::ValueType v;
      _ue_positioning_OTDOA_AssistanceData_UEB_Type.read(reader, v);
      value.set_ue_positioning_OTDOA_AssistanceData_UEB(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_Measurement_v390ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_positioning_ReportingQuantity_v390ext_Type.write(writer, value.get_ue_positioning_ReportingQuantity_v390ext());
   _measurementValidity_Type.write(writer, value.get_measurementValidity());
   _ue_positioning_OTDOA_AssistanceData_UEB_Type.write(writer, value.get_ue_positioning_OTDOA_AssistanceData_UEB());

   writer.writeSequenceEnd();
}


void UE_Positioning_Measurement_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_ReportingQuantity_r4::ValueType v;
      _ue_positioning_ReportingQuantity_Type.read(reader, v);
      value.set_ue_positioning_ReportingQuantity(v);
   }
   {
      asn1::generated::MeasurementValidity::ValueType v;
      _measurementValidity_Type.read(reader, v);
      value.set_measurementValidity(v);
   }
   {
      asn1::generated::UE_Positioning_ReportCriteria::ValueType v;
      _reportCriteria_Type.read(reader, v);
      value.set_reportCriteria(v);
   }
   {
      asn1::generated::UE_Positioning_OTDOA_AssistanceData_r4::ValueType v;
      _ue_positioning_OTDOA_AssistanceData_Type.read(reader, v);
      value.set_ue_positioning_OTDOA_AssistanceData(v);
   }
   {
      asn1::generated::UE_Positioning_GPS_AssistanceData::ValueType v;
      _ue_positioning_GPS_AssistanceData_Type.read(reader, v);
      value.set_ue_positioning_GPS_AssistanceData(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_Measurement_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_positioning_ReportingQuantity_Type.write(writer, value.get_ue_positioning_ReportingQuantity());
   _measurementValidity_Type.write(writer, value.get_measurementValidity());
   _reportCriteria_Type.write(writer, value.get_reportCriteria());
   _ue_positioning_OTDOA_AssistanceData_Type.write(writer, value.get_ue_positioning_OTDOA_AssistanceData());
   _ue_positioning_GPS_AssistanceData_Type.write(writer, value.get_ue_positioning_GPS_AssistanceData());

   writer.writeSequenceEnd();
}


void UE_Positioning_Measurement_v7xyext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_ReportingQuantity_v7xyext::ValueType v;
      _ue_positioning_ReportingQuantity_Type.read(reader, v);
      value.set_ue_positioning_ReportingQuantity(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_Measurement_v7xyext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_positioning_ReportingQuantity_Type.write(writer, value.get_ue_positioning_ReportingQuantity());

   writer.writeSequenceEnd();
}


void UE-Positioning-MeasurementEventResults::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_event7a_Type)
   {
      asn1::generated::UE_Positioning_PositionEstimateInfo::ValueType v;
      _event7a_Type.read(reader, v);
      value.set_event7a(v);
   }
   else if (choosenType == &_event7b_Type)
   {
      asn1::generated::UE_Positioning_OTDOA_Measurement::ValueType v;
      _event7b_Type.read(reader, v);
      value.set_event7b(v);
   }
   else if (choosenType == &_event7c_Type)
   {
      asn1::generated::UE_Positioning_GPS_MeasurementResults::ValueType v;
      _event7c_Type.read(reader, v);
      value.set_event7c(v);
   }
   else if (choosenType == &_spare_Type)
   {
      asn1::NullType::ValueType v;
      _spare_Type.read(reader, v);
      value.set_spare(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _event7a_Type.toString() + ", " + _event7b_Type.toString() + ", " + _event7c_Type.toString() + ", " + _spare_Type.toString());
   }
}

void UE-Positioning-MeasurementEventResults::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_event7a_Choosen())
      _event7a_Type.write(writer, value.get_event7a());
   else if (value.has_event7b_Choosen())
      _event7b_Type.write(writer, value.get_event7b());
   else if (value.has_event7c_Choosen())
      _event7c_Type.write(writer, value.get_event7c());
   else if (value.has_spare_Choosen())
      _spare_Type.write(writer, value.get_spare());
}


void UE_Positioning_OTDOA_AssistanceData::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_OTDOA_ReferenceCellInfo::ValueType v;
      _ue_positioning_OTDOA_ReferenceCellInfo_Type.read(reader, v);
      value.set_ue_positioning_OTDOA_ReferenceCellInfo(v);
   }
   {
      asn1::generated::UE_Positioning_OTDOA_NeighbourCellList::ValueType v;
      _ue_positioning_OTDOA_NeighbourCellList_Type.read(reader, v);
      value.set_ue_positioning_OTDOA_NeighbourCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_OTDOA_AssistanceData::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_positioning_OTDOA_ReferenceCellInfo_Type.write(writer, value.get_ue_positioning_OTDOA_ReferenceCellInfo());
   _ue_positioning_OTDOA_NeighbourCellList_Type.write(writer, value.get_ue_positioning_OTDOA_NeighbourCellList());

   writer.writeSequenceEnd();
}


void UE_Positioning_OTDOA_AssistanceData_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_OTDOA_ReferenceCellInfo_r4::ValueType v;
      _ue_positioning_OTDOA_ReferenceCellInfo_Type.read(reader, v);
      value.set_ue_positioning_OTDOA_ReferenceCellInfo(v);
   }
   {
      asn1::generated::UE_Positioning_OTDOA_NeighbourCellList_r4::ValueType v;
      _ue_positioning_OTDOA_NeighbourCellList_Type.read(reader, v);
      value.set_ue_positioning_OTDOA_NeighbourCellList(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_OTDOA_AssistanceData_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_positioning_OTDOA_ReferenceCellInfo_Type.write(writer, value.get_ue_positioning_OTDOA_ReferenceCellInfo());
   _ue_positioning_OTDOA_NeighbourCellList_Type.write(writer, value.get_ue_positioning_OTDOA_NeighbourCellList());

   writer.writeSequenceEnd();
}


void UE_Positioning_OTDOA_AssistanceData_r4ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_IPDL_Parameters_TDD_r4_ext::ValueType v;
      _ue_Positioning_IPDL_Parameters_TDD_r4_ext_Type.read(reader, v);
      value.set_ue_Positioning_IPDL_Parameters_TDD_r4_ext(v);
   }
   {
      asn1::generated::UE_Positioning_IPDL_Parameters_TDDList_r4_ext::ValueType v;
      _ue_Positioning_IPDL_Parameters_TDDList_r4_ext_Type.read(reader, v);
      value.set_ue_Positioning_IPDL_Parameters_TDDList_r4_ext(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_OTDOA_AssistanceData_r4ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_Positioning_IPDL_Parameters_TDD_r4_ext_Type.write(writer, value.get_ue_Positioning_IPDL_Parameters_TDD_r4_ext());
   _ue_Positioning_IPDL_Parameters_TDDList_r4_ext_Type.write(writer, value.get_ue_Positioning_IPDL_Parameters_TDDList_r4_ext());

   writer.writeSequenceEnd();
}


void UE_Positioning_OTDOA_AssistanceData_UEB::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_OTDOA_ReferenceCellInfo_UEB::ValueType v;
      _ue_positioning_OTDOA_ReferenceCellInfo_UEB_Type.read(reader, v);
      value.set_ue_positioning_OTDOA_ReferenceCellInfo_UEB(v);
   }
   {
      asn1::generated::UE_Positioning_OTDOA_NeighbourCellList_UEB::ValueType v;
      _ue_positioning_OTDOA_NeighbourCellList_UEB_Type.read(reader, v);
      value.set_ue_positioning_OTDOA_NeighbourCellList_UEB(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_OTDOA_AssistanceData_UEB::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_positioning_OTDOA_ReferenceCellInfo_UEB_Type.write(writer, value.get_ue_positioning_OTDOA_ReferenceCellInfo_UEB());
   _ue_positioning_OTDOA_NeighbourCellList_UEB_Type.write(writer, value.get_ue_positioning_OTDOA_NeighbourCellList_UEB());

   writer.writeSequenceEnd();
}


void UE_Positioning_OTDOA_Measurement::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _sfn_Type.read(reader, v);
      value.set_sfn(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_referenceCellIDentity_INTERNAL_asn1__generated__PrimaryCPICH_Info_ue-RX-TX-TimeDifferenceType2Info_INTERNAL_asn1__generated__UE_RX_TX_TimeDifferenceType2Info_tdd_INTERNAL__SequenceType_referenceCellIdentity_INTERNAL_asn1__generated__CellParametersID::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::NeighbourList::ValueType v;
      _neighbourList_Type.read(reader, v);
      value.set_neighbourList(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_OTDOA_Measurement::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sfn_Type.write(writer, value.get_sfn());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _neighbourList_Type.write(writer, value.get_neighbourList());

   writer.writeSequenceEnd();
}


void UE_Positioning_OTDOA_Measurement_v390ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::NeighbourList_v390ext::ValueType v;
      _neighbourList_v390ext_Type.read(reader, v);
      value.set_neighbourList_v390ext(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_OTDOA_Measurement_v390ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _neighbourList_v390ext_Type.write(writer, value.get_neighbourList_v390ext());

   writer.writeSequenceEnd();
}


void UE_Positioning_OTDOA_NeighbourCellInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-Info_INTERNAL_asn1__generated__PrimaryCPICH_Info_tdd_INTERNAL__SequenceType_cellAndChannelIdentity_INTERNAL_asn1__generated__CellAndChannelIdentity::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::UE_Positioning_IPDL_Parameters::ValueType v;
      _ue_positioning_IPDL_Paremeters_Type.read(reader, v);
      value.set_ue_positioning_IPDL_Paremeters(v);
   }
   {
      asn1::generated::SFN_SFN_RelTimeDifference1::ValueType v;
      _sfn_SFN_RelTimeDifference_Type.read(reader, v);
      value.set_sfn_SFN_RelTimeDifference(v);
   }
   {
      asn1::generated::SFN_SFN_Drift::ValueType v;
      _sfn_SFN_Drift_Type.read(reader, v);
      value.set_sfn_SFN_Drift(v);
   }
   {
      asn1::generated::OTDOA_SearchWindowSize::ValueType v;
      _searchWindowSize_Type.read(reader, v);
      value.set_searchWindowSize(v);
   }
   {
      _INTERNAL__ChoiceType_ueBased_INTERNAL__SequenceType_ueAssisted_INTERNAL__SequenceType::ValueType v;
      _positioningMode_Type.read(reader, v);
      value.set_positioningMode(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_OTDOA_NeighbourCellInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _ue_positioning_IPDL_Paremeters_Type.write(writer, value.get_ue_positioning_IPDL_Paremeters());
   _sfn_SFN_RelTimeDifference_Type.write(writer, value.get_sfn_SFN_RelTimeDifference());
   _sfn_SFN_Drift_Type.write(writer, value.get_sfn_SFN_Drift());
   _searchWindowSize_Type.write(writer, value.get_searchWindowSize());
   _positioningMode_Type.write(writer, value.get_positioningMode());

   writer.writeSequenceEnd();
}


void UE_Positioning_OTDOA_NeighbourCellInfo_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-Info_INTERNAL_asn1__generated__PrimaryCPICH_Info_tdd_INTERNAL__SequenceType_cellAndChannelIdentity_INTERNAL_asn1__generated__CellAndChannelIdentity::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::UE_Positioning_IPDL_Parameters_r4::ValueType v;
      _ue_positioning_IPDL_Paremeters_Type.read(reader, v);
      value.set_ue_positioning_IPDL_Paremeters(v);
   }
   {
      asn1::generated::SFN_SFN_RelTimeDifference1::ValueType v;
      _sfn_SFN_RelTimeDifference_Type.read(reader, v);
      value.set_sfn_SFN_RelTimeDifference(v);
   }
   {
      asn1::generated::SFN_Offset_Validity::ValueType v;
      _sfn_Offset_Validity_Type.read(reader, v);
      value.set_sfn_Offset_Validity(v);
   }
   {
      asn1::generated::SFN_SFN_Drift::ValueType v;
      _sfn_SFN_Drift_Type.read(reader, v);
      value.set_sfn_SFN_Drift(v);
   }
   {
      asn1::generated::OTDOA_SearchWindowSize::ValueType v;
      _searchWindowSize_Type.read(reader, v);
      value.set_searchWindowSize(v);
   }
   {
      _INTERNAL__ChoiceType_ueBased_INTERNAL__SequenceType_relativeNorth_INTERNAL_asn1__IntegerType_relativeEast_INTERNAL_asn1__IntegerType_relativeAltitude_INTERNAL_asn1__IntegerType_fineSFN-SFN_INTERNAL_asn1__generated__FineSFN_SFN_roundTripTime_INTERNAL_asn1__IntegerType_ueAssisted_INTERNAL__SequenceType::ValueType v;
      _positioningMode_Type.read(reader, v);
      value.set_positioningMode(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_OTDOA_NeighbourCellInfo_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _ue_positioning_IPDL_Paremeters_Type.write(writer, value.get_ue_positioning_IPDL_Paremeters());
   _sfn_SFN_RelTimeDifference_Type.write(writer, value.get_sfn_SFN_RelTimeDifference());
   _sfn_Offset_Validity_Type.write(writer, value.get_sfn_Offset_Validity());
   _sfn_SFN_Drift_Type.write(writer, value.get_sfn_SFN_Drift());
   _searchWindowSize_Type.write(writer, value.get_searchWindowSize());
   _positioningMode_Type.write(writer, value.get_positioningMode());

   writer.writeSequenceEnd();
}


void UE_Positioning_OTDOA_NeighbourCellInfo_UEB::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-Info_INTERNAL_asn1__generated__PrimaryCPICH_Info_tdd_INTERNAL__SequenceType_cellAndChannelIdentity_INTERNAL_asn1__generated__CellAndChannelIdentity::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::UE_Positioning_IPDL_Parameters::ValueType v;
      _ue_positioning_IPDL_Paremeters_Type.read(reader, v);
      value.set_ue_positioning_IPDL_Paremeters(v);
   }
   {
      asn1::generated::SFN_SFN_RelTimeDifference1::ValueType v;
      _sfn_SFN_RelTimeDifference_Type.read(reader, v);
      value.set_sfn_SFN_RelTimeDifference(v);
   }
   {
      asn1::generated::SFN_SFN_Drift::ValueType v;
      _sfn_SFN_Drift_Type.read(reader, v);
      value.set_sfn_SFN_Drift(v);
   }
   {
      asn1::generated::OTDOA_SearchWindowSize::ValueType v;
      _searchWindowSize_Type.read(reader, v);
      value.set_searchWindowSize(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _relativeNorth_Type.read(reader, v);
      value.set_relativeNorth(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _relativeEast_Type.read(reader, v);
      value.set_relativeEast(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _relativeAltitude_Type.read(reader, v);
      value.set_relativeAltitude(v);
   }
   {
      asn1::generated::FineSFN_SFN::ValueType v;
      _fineSFN_SFN_Type.read(reader, v);
      value.set_fineSFN_SFN(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _roundTripTime_Type.read(reader, v);
      value.set_roundTripTime(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_OTDOA_NeighbourCellInfo_UEB::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _ue_positioning_IPDL_Paremeters_Type.write(writer, value.get_ue_positioning_IPDL_Paremeters());
   _sfn_SFN_RelTimeDifference_Type.write(writer, value.get_sfn_SFN_RelTimeDifference());
   _sfn_SFN_Drift_Type.write(writer, value.get_sfn_SFN_Drift());
   _searchWindowSize_Type.write(writer, value.get_searchWindowSize());
   _relativeNorth_Type.write(writer, value.get_relativeNorth());
   _relativeEast_Type.write(writer, value.get_relativeEast());
   _relativeAltitude_Type.write(writer, value.get_relativeAltitude());
   _fineSFN_SFN_Type.write(writer, value.get_fineSFN_SFN());
   _roundTripTime_Type.write(writer, value.get_roundTripTime());

   writer.writeSequenceEnd();
}


void UE_Positioning_OTDOA_Quality::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _stdResolution_Type.read(reader, v);
      value.set_stdResolution(v);
   }
   {
      _INTERNAL_::ValueType v;
      _numberOfOTDOA_Measurements_Type.read(reader, v);
      value.set_numberOfOTDOA_Measurements(v);
   }
   {
      _INTERNAL_::ValueType v;
      _stdOfOTDOA_Measurements_Type.read(reader, v);
      value.set_stdOfOTDOA_Measurements(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_OTDOA_Quality::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _stdResolution_Type.write(writer, value.get_stdResolution());
   _numberOfOTDOA_Measurements_Type.write(writer, value.get_numberOfOTDOA_Measurements());
   _stdOfOTDOA_Measurements_Type.write(writer, value.get_stdOfOTDOA_Measurements());

   writer.writeSequenceEnd();
}


void UE_Positioning_OTDOA_ReferenceCellInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _sfn_Type.read(reader, v);
      value.set_sfn(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-Info_INTERNAL_asn1__generated__PrimaryCPICH_Info_tdd_INTERNAL__SequenceType_cellAndChannelIdentity_INTERNAL_asn1__generated__CellAndChannelIdentity::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      _INTERNAL__ChoiceType_ueBased_INTERNAL__SequenceType_ueAssisted_INTERNAL__SequenceType::ValueType v;
      _positioningMode_Type.read(reader, v);
      value.set_positioningMode(v);
   }
   {
      asn1::generated::UE_Positioning_IPDL_Parameters::ValueType v;
      _ue_positioning_IPDL_Paremeters_Type.read(reader, v);
      value.set_ue_positioning_IPDL_Paremeters(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_OTDOA_ReferenceCellInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sfn_Type.write(writer, value.get_sfn());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _positioningMode_Type.write(writer, value.get_positioningMode());
   _ue_positioning_IPDL_Paremeters_Type.write(writer, value.get_ue_positioning_IPDL_Paremeters());

   writer.writeSequenceEnd();
}


void UE_Positioning_OTDOA_ReferenceCellInfo_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _sfn_Type.read(reader, v);
      value.set_sfn(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-Info_INTERNAL_asn1__generated__PrimaryCPICH_Info_tdd_INTERNAL__SequenceType_cellAndChannelIdentity_INTERNAL_asn1__generated__CellAndChannelIdentity::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      _INTERNAL__ChoiceType_ueBased_INTERNAL__SequenceType_cellPosition_INTERNAL_asn1__generated__ReferenceCellPosition_roundTripTime_INTERNAL_asn1__IntegerType_ueAssisted_INTERNAL__SequenceType::ValueType v;
      _positioningMode_Type.read(reader, v);
      value.set_positioningMode(v);
   }
   {
      asn1::generated::UE_Positioning_IPDL_Parameters_r4::ValueType v;
      _ue_positioning_IPDL_Paremeters_Type.read(reader, v);
      value.set_ue_positioning_IPDL_Paremeters(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_OTDOA_ReferenceCellInfo_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sfn_Type.write(writer, value.get_sfn());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _positioningMode_Type.write(writer, value.get_positioningMode());
   _ue_positioning_IPDL_Paremeters_Type.write(writer, value.get_ue_positioning_IPDL_Paremeters());

   writer.writeSequenceEnd();
}


void UE_Positioning_OTDOA_ReferenceCellInfo_UEB::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _sfn_Type.read(reader, v);
      value.set_sfn(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-Info_INTERNAL_asn1__generated__PrimaryCPICH_Info_tdd_INTERNAL__SequenceType_cellAndChannelIdentity_INTERNAL_asn1__generated__CellAndChannelIdentity::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::FrequencyInfo::ValueType v;
      _frequencyInfo_Type.read(reader, v);
      value.set_frequencyInfo(v);
   }
   {
      asn1::generated::ReferenceCellPosition::ValueType v;
      _cellPosition_Type.read(reader, v);
      value.set_cellPosition(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _roundTripTime_Type.read(reader, v);
      value.set_roundTripTime(v);
   }
   {
      asn1::generated::UE_Positioning_IPDL_Parameters::ValueType v;
      _ue_positioning_IPDL_Paremeters_Type.read(reader, v);
      value.set_ue_positioning_IPDL_Paremeters(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_OTDOA_ReferenceCellInfo_UEB::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sfn_Type.write(writer, value.get_sfn());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _frequencyInfo_Type.write(writer, value.get_frequencyInfo());
   _cellPosition_Type.write(writer, value.get_cellPosition());
   _roundTripTime_Type.write(writer, value.get_roundTripTime());
   _ue_positioning_IPDL_Paremeters_Type.write(writer, value.get_ue_positioning_IPDL_Paremeters());

   writer.writeSequenceEnd();
}


void UE_Positioning_PositionEstimateInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_utran-GPSReferenceTimeResult_INTERNAL_asn1__generated__UTRAN_GPSReferenceTimeResult_gps-ReferenceTimeOnly_INTERNAL_asn1__IntegerType_cell-Timing_INTERNAL__SequenceType_sfn_INTERNAL_asn1__IntegerType_modeSpecificInfo_INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_primaryCPICH-Info_INTERNAL_asn1__generated__PrimaryCPICH_Info_tdd_INTERNAL__SequenceType_cellAndChannelIdentity_INTERNAL_asn1__generated__CellAndChannelIdentity::ValueType v;
      _referenceTime_Type.read(reader, v);
      value.set_referenceTime(v);
   }
   {
      asn1::generated::PositionEstimate::ValueType v;
      _positionEstimate_Type.read(reader, v);
      value.set_positionEstimate(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_PositionEstimateInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _referenceTime_Type.write(writer, value.get_referenceTime());
   _positionEstimate_Type.write(writer, value.get_positionEstimate());

   writer.writeSequenceEnd();
}


void UE-Positioning-ReportCriteria::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_ue-positioning-ReportingCriteria_Type)
   {
      asn1::generated::UE_Positioning_EventParamList::ValueType v;
      _ue_positioning_ReportingCriteria_Type.read(reader, v);
      value.set_ue_positioning_ReportingCriteria(v);
   }
   else if (choosenType == &_periodicalReportingCriteria_Type)
   {
      asn1::generated::PeriodicalReportingCriteria::ValueType v;
      _periodicalReportingCriteria_Type.read(reader, v);
      value.set_periodicalReportingCriteria(v);
   }
   else if (choosenType == &_noReporting_Type)
   {
      asn1::NullType::ValueType v;
      _noReporting_Type.read(reader, v);
      value.set_noReporting(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _ue-positioning-ReportingCriteria_Type.toString() + ", " + _periodicalReportingCriteria_Type.toString() + ", " + _noReporting_Type.toString());
   }
}

void UE-Positioning-ReportCriteria::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_ue-positioning-ReportingCriteria_Choosen())
      _ue-positioning-ReportingCriteria_Type.write(writer, value.get_ue-positioning-ReportingCriteria());
   else if (value.has_periodicalReportingCriteria_Choosen())
      _periodicalReportingCriteria_Type.write(writer, value.get_periodicalReportingCriteria());
   else if (value.has_noReporting_Choosen())
      _noReporting_Type.write(writer, value.get_noReporting());
}


void UE_Positioning_ReportingQuantity::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_MethodType::ValueType v;
      _methodType_Type.read(reader, v);
      value.set_methodType(v);
   }
   {
      asn1::generated::PositioningMethod::ValueType v;
      _positioningMethod_Type.read(reader, v);
      value.set_positioningMethod(v);
   }
   {
      asn1::generated::UE_Positioning_ResponseTime::ValueType v;
      _dummy1_Type.read(reader, v);
      value.set_dummy1(v);
   }
   {
      asn1::generated::UE_Positioning_Accuracy::ValueType v;
      _horizontal_Accuracy_Type.read(reader, v);
      value.set_horizontal_Accuracy(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _gps_TimingOfCellWanted_Type.read(reader, v);
      value.set_gps_TimingOfCellWanted(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _dummy2_Type.read(reader, v);
      value.set_dummy2(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _additionalAssistanceDataRequest_Type.read(reader, v);
      value.set_additionalAssistanceDataRequest(v);
   }
   {
      asn1::generated::EnvironmentCharacterisation::ValueType v;
      _environmentCharacterisation_Type.read(reader, v);
      value.set_environmentCharacterisation(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_ReportingQuantity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _methodType_Type.write(writer, value.get_methodType());
   _positioningMethod_Type.write(writer, value.get_positioningMethod());
   _dummy1_Type.write(writer, value.get_dummy1());
   _horizontal_Accuracy_Type.write(writer, value.get_horizontal_Accuracy());
   _gps_TimingOfCellWanted_Type.write(writer, value.get_gps_TimingOfCellWanted());
   _dummy2_Type.write(writer, value.get_dummy2());
   _additionalAssistanceDataRequest_Type.write(writer, value.get_additionalAssistanceDataRequest());
   _environmentCharacterisation_Type.write(writer, value.get_environmentCharacterisation());

   writer.writeSequenceEnd();
}


void UE_Positioning_ReportingQuantity_v390ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_Accuracy::ValueType v;
      _vertical_Accuracy_Type.read(reader, v);
      value.set_vertical_Accuracy(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_ReportingQuantity_v390ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _vertical_Accuracy_Type.write(writer, value.get_vertical_Accuracy());

   writer.writeSequenceEnd();
}


void UE_Positioning_ReportingQuantity_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_MethodType::ValueType v;
      _methodType_Type.read(reader, v);
      value.set_methodType(v);
   }
   {
      asn1::generated::PositioningMethod::ValueType v;
      _positioningMethod_Type.read(reader, v);
      value.set_positioningMethod(v);
   }
   {
      asn1::generated::UE_Positioning_Accuracy::ValueType v;
      _horizontalAccuracy_Type.read(reader, v);
      value.set_horizontalAccuracy(v);
   }
   {
      asn1::generated::UE_Positioning_Accuracy::ValueType v;
      _verticalAccuracy_Type.read(reader, v);
      value.set_verticalAccuracy(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _gps_TimingOfCellWanted_Type.read(reader, v);
      value.set_gps_TimingOfCellWanted(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _additionalAssistanceDataReq_Type.read(reader, v);
      value.set_additionalAssistanceDataReq(v);
   }
   {
      asn1::generated::EnvironmentCharacterisation::ValueType v;
      _environmentCharacterisation_Type.read(reader, v);
      value.set_environmentCharacterisation(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_ReportingQuantity_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _methodType_Type.write(writer, value.get_methodType());
   _positioningMethod_Type.write(writer, value.get_positioningMethod());
   _horizontalAccuracy_Type.write(writer, value.get_horizontalAccuracy());
   _verticalAccuracy_Type.write(writer, value.get_verticalAccuracy());
   _gps_TimingOfCellWanted_Type.write(writer, value.get_gps_TimingOfCellWanted());
   _additionalAssistanceDataReq_Type.write(writer, value.get_additionalAssistanceDataReq());
   _environmentCharacterisation_Type.write(writer, value.get_environmentCharacterisation());

   writer.writeSequenceEnd();
}


void UE_Positioning_ReportingQuantity_v7xyext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__EnumeratedType::ValueType v;
      _velocityRequested_Type.read(reader, v);
      value.set_velocityRequested(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_ReportingQuantity_v7xyext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _velocityRequested_Type.write(writer, value.get_velocityRequested());

   writer.writeSequenceEnd();
}


void UTRAN_GPSReferenceTime::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__SequenceType_ms-part_INTERNAL_asn1__IntegerType_ls-part_INTERNAL_asn1__IntegerType::ValueType v;
      _utran_GPSTimingOfCell_Type.read(reader, v);
      value.set_utran_GPSTimingOfCell(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_referenceIdentity_INTERNAL_asn1__generated__PrimaryCPICH_Info_tdd_INTERNAL__SequenceType_referenceIdentity_INTERNAL_asn1__generated__CellParametersID::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _sfn_Type.read(reader, v);
      value.set_sfn(v);
   }

   reader.readSequenceEnd(*this);
}

void UTRAN_GPSReferenceTime::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _utran_GPSTimingOfCell_Type.write(writer, value.get_utran_GPSTimingOfCell());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _sfn_Type.write(writer, value.get_sfn());

   writer.writeSequenceEnd();
}


void UTRAN_GPSReferenceTimeResult::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__SequenceType_ms-part_INTERNAL_asn1__IntegerType_ls-part_INTERNAL_asn1__IntegerType::ValueType v;
      _ue_GPSTimingOfCell_Type.read(reader, v);
      value.set_ue_GPSTimingOfCell(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_referenceIdentity_INTERNAL_asn1__generated__PrimaryCPICH_Info_tdd_INTERNAL__SequenceType_referenceIdentity_INTERNAL_asn1__generated__CellParametersID::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _sfn_Type.read(reader, v);
      value.set_sfn(v);
   }

   reader.readSequenceEnd(*this);
}

void UTRAN_GPSReferenceTimeResult::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_GPSTimingOfCell_Type.write(writer, value.get_ue_GPSTimingOfCell());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _sfn_Type.write(writer, value.get_sfn());

   writer.writeSequenceEnd();
}


void VelocityEstimate::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_horizontalVelocity_Type)
   {
      asn1::generated::HorizontalVelocity::ValueType v;
      _horizontalVelocity_Type.read(reader, v);
      value.set_horizontalVelocity(v);
   }
   else if (choosenType == &_horizontalWithVerticalVelocity_Type)
   {
      asn1::generated::HorizontalWithVerticalVelocity::ValueType v;
      _horizontalWithVerticalVelocity_Type.read(reader, v);
      value.set_horizontalWithVerticalVelocity(v);
   }
   else if (choosenType == &_horizontalVelocityWithUncertainty_Type)
   {
      asn1::generated::HorizontalVelocityWithUncertainty::ValueType v;
      _horizontalVelocityWithUncertainty_Type.read(reader, v);
      value.set_horizontalVelocityWithUncertainty(v);
   }
   else if (choosenType == &_horizontalWithVerticalVelocityAndUncertainty_Type)
   {
      asn1::generated::HorizontalWithVerticalVelocityAndUncertainty::ValueType v;
      _horizontalWithVerticalVelocityAndUncertainty_Type.read(reader, v);
      value.set_horizontalWithVerticalVelocityAndUncertainty(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _horizontalVelocity_Type.toString() + ", " + _horizontalWithVerticalVelocity_Type.toString() + ", " + _horizontalVelocityWithUncertainty_Type.toString() + ", " + _horizontalWithVerticalVelocityAndUncertainty_Type.toString());
   }
}

void VelocityEstimate::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_horizontalVelocity_Choosen())
      _horizontalVelocity_Type.write(writer, value.get_horizontalVelocity());
   else if (value.has_horizontalWithVerticalVelocity_Choosen())
      _horizontalWithVerticalVelocity_Type.write(writer, value.get_horizontalWithVerticalVelocity());
   else if (value.has_horizontalVelocityWithUncertainty_Choosen())
      _horizontalVelocityWithUncertainty_Type.write(writer, value.get_horizontalVelocityWithUncertainty());
   else if (value.has_horizontalWithVerticalVelocityAndUncertainty_Choosen())
      _horizontalWithVerticalVelocityAndUncertainty_Type.write(writer, value.get_horizontalWithVerticalVelocityAndUncertainty());
}


void BCCH_ModificationInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MIB_ValueTag::ValueType v;
      _mib_ValueTag_Type.read(reader, v);
      value.set_mib_ValueTag(v);
   }
   {
      asn1::generated::BCCH_ModificationTime::ValueType v;
      _bcch_ModificationTime_Type.read(reader, v);
      value.set_bcch_ModificationTime(v);
   }

   reader.readSequenceEnd(*this);
}

void BCCH_ModificationInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mib_ValueTag_Type.write(writer, value.get_mib_ValueTag());
   _bcch_ModificationTime_Type.write(writer, value.get_bcch_ModificationTime());

   writer.writeSequenceEnd();
}


void BSIC::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::NCC::ValueType v;
      _ncc_Type.read(reader, v);
      value.set_ncc(v);
   }
   {
      asn1::generated::BCC::ValueType v;
      _bcc_Type.read(reader, v);
      value.set_bcc(v);
   }

   reader.readSequenceEnd(*this);
}

void BSIC::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ncc_Type.write(writer, value.get_ncc());
   _bcc_Type.write(writer, value.get_bcc());

   writer.writeSequenceEnd();
}


void CBS_DRX_Level1Information::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _ctch_AllocationPeriod_Type.read(reader, v);
      value.set_ctch_AllocationPeriod(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _cbs_FrameOffset_Type.read(reader, v);
      value.set_cbs_FrameOffset(v);
   }

   reader.readSequenceEnd(*this);
}

void CBS_DRX_Level1Information::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ctch_AllocationPeriod_Type.write(writer, value.get_ctch_AllocationPeriod());
   _cbs_FrameOffset_Type.write(writer, value.get_cbs_FrameOffset());

   writer.writeSequenceEnd();
}


void CDMA2000_Message::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _msg_Type_Type.read(reader, v);
      value.set_msg_Type(v);
   }
   {
      _INTERNAL_::ValueType v;
      _payload_Type.read(reader, v);
      value.set_payload(v);
   }

   reader.readSequenceEnd(*this);
}

void CDMA2000_Message::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _msg_Type_Type.write(writer, value.get_msg_Type());
   _payload_Type.write(writer, value.get_payload());

   writer.writeSequenceEnd();
}


void FrequencyInfoCDMA2000::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _band_Class_Type.read(reader, v);
      value.set_band_Class(v);
   }
   {
      _INTERNAL_::ValueType v;
      _cdma_Freq_Type.read(reader, v);
      value.set_cdma_Freq(v);
   }

   reader.readSequenceEnd(*this);
}

void FrequencyInfoCDMA2000::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _band_Class_Type.write(writer, value.get_band_Class());
   _cdma_Freq_Type.write(writer, value.get_cdma_Freq());

   writer.writeSequenceEnd();
}


void GSM_BA_Range::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UARFCN::ValueType v;
      _gsmLowRangeUARFCN_Type.read(reader, v);
      value.set_gsmLowRangeUARFCN(v);
   }
   {
      asn1::generated::UARFCN::ValueType v;
      _gsmUpRangeUARFCN_Type.read(reader, v);
      value.set_gsmUpRangeUARFCN(v);
   }

   reader.readSequenceEnd(*this);
}

void GSM_BA_Range::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _gsmLowRangeUARFCN_Type.write(writer, value.get_gsmLowRangeUARFCN());
   _gsmUpRangeUARFCN_Type.write(writer, value.get_gsmUpRangeUARFCN());

   writer.writeSequenceEnd();
}


void GSM_TargetCellInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::BCCH_ARFCN::ValueType v;
      _bcch_ARFCN_Type.read(reader, v);
      value.set_bcch_ARFCN(v);
   }
   {
      asn1::generated::Frequency_Band::ValueType v;
      _frequency_band_Type.read(reader, v);
      value.set_frequency_band(v);
   }
   {
      asn1::generated::BSIC::ValueType v;
      _bsic_Type.read(reader, v);
      value.set_bsic(v);
   }

   reader.readSequenceEnd(*this);
}

void GSM_TargetCellInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _bcch_ARFCN_Type.write(writer, value.get_bcch_ARFCN());
   _frequency_band_Type.write(writer, value.get_frequency_band());
   _bsic_Type.write(writer, value.get_bsic());

   writer.writeSequenceEnd();
}


void IdentificationOfReceivedMessage::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RRC_TransactionIdentifier::ValueType v;
      _rrc_TransactionIdentifier_Type.read(reader, v);
      value.set_rrc_TransactionIdentifier(v);
   }
   {
      asn1::generated::ReceivedMessageType::ValueType v;
      _receivedMessageType_Type.read(reader, v);
      value.set_receivedMessageType(v);
   }

   reader.readSequenceEnd(*this);
}

void IdentificationOfReceivedMessage::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rrc_TransactionIdentifier_Type.write(writer, value.get_rrc_TransactionIdentifier());
   _receivedMessageType_Type.write(writer, value.get_receivedMessageType());

   writer.writeSequenceEnd();
}


void InterRAT-ChangeFailureCause::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_configurationUnacceptable_Type)
   {
      asn1::NullType::ValueType v;
      _configurationUnacceptable_Type.read(reader, v);
      value.set_configurationUnacceptable(v);
   }
   else if (choosenType == &_physicalChannelFailure_Type)
   {
      asn1::NullType::ValueType v;
      _physicalChannelFailure_Type.read(reader, v);
      value.set_physicalChannelFailure(v);
   }
   else if (choosenType == &_protocolError_Type)
   {
      asn1::generated::ProtocolErrorInformation::ValueType v;
      _protocolError_Type.read(reader, v);
      value.set_protocolError(v);
   }
   else if (choosenType == &_unspecified_Type)
   {
      asn1::NullType::ValueType v;
      _unspecified_Type.read(reader, v);
      value.set_unspecified(v);
   }
   else if (choosenType == &_spare4_Type)
   {
      asn1::NullType::ValueType v;
      _spare4_Type.read(reader, v);
      value.set_spare4(v);
   }
   else if (choosenType == &_spare3_Type)
   {
      asn1::NullType::ValueType v;
      _spare3_Type.read(reader, v);
      value.set_spare3(v);
   }
   else if (choosenType == &_spare2_Type)
   {
      asn1::NullType::ValueType v;
      _spare2_Type.read(reader, v);
      value.set_spare2(v);
   }
   else if (choosenType == &_spare1_Type)
   {
      asn1::NullType::ValueType v;
      _spare1_Type.read(reader, v);
      value.set_spare1(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _configurationUnacceptable_Type.toString() + ", " + _physicalChannelFailure_Type.toString() + ", " + _protocolError_Type.toString() + ", " + _unspecified_Type.toString() + ", " + _spare4_Type.toString() + ", " + _spare3_Type.toString() + ", " + _spare2_Type.toString() + ", " + _spare1_Type.toString());
   }
}

void InterRAT-ChangeFailureCause::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_configurationUnacceptable_Choosen())
      _configurationUnacceptable_Type.write(writer, value.get_configurationUnacceptable());
   else if (value.has_physicalChannelFailure_Choosen())
      _physicalChannelFailure_Type.write(writer, value.get_physicalChannelFailure());
   else if (value.has_protocolError_Choosen())
      _protocolError_Type.write(writer, value.get_protocolError());
   else if (value.has_unspecified_Choosen())
      _unspecified_Type.write(writer, value.get_unspecified());
   else if (value.has_spare4_Choosen())
      _spare4_Type.write(writer, value.get_spare4());
   else if (value.has_spare3_Choosen())
      _spare3_Type.write(writer, value.get_spare3());
   else if (value.has_spare2_Choosen())
      _spare2_Type.write(writer, value.get_spare2());
   else if (value.has_spare1_Choosen())
      _spare1_Type.write(writer, value.get_spare1());
}


void InterRAT-UE-RadioAccessCapability::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_gsm_Type)
   {
      _INTERNAL__SequenceType_gsm-Classmark2_INTERNAL_asn1__generated__GSM_Classmark2_gsm-Classmark3_INTERNAL_asn1__generated__GSM_Classmark3::ValueType v;
      _gsm_Type.read(reader, v);
      value.set_gsm(v);
   }
   else if (choosenType == &_cdma2000_Type)
   {
      _INTERNAL__SequenceType_cdma2000-MessageList_INTERNAL_asn1__generated__CDMA2000_MessageList::ValueType v;
      _cdma2000_Type.read(reader, v);
      value.set_cdma2000(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _gsm_Type.toString() + ", " + _cdma2000_Type.toString());
   }
}

void InterRAT-UE-RadioAccessCapability::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_gsm_Choosen())
      _gsm_Type.write(writer, value.get_gsm());
   else if (value.has_cdma2000_Choosen())
      _cdma2000_Type.write(writer, value.get_cdma2000());
}


void InterRAT_UE_RadioAccessCapability_v590ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::GERANIu_RadioAccessCapability::ValueType v;
      _geranIu_RadioAccessCapability_Type.read(reader, v);
      value.set_geranIu_RadioAccessCapability(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRAT_UE_RadioAccessCapability_v590ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _geranIu_RadioAccessCapability_Type.write(writer, value.get_geranIu_RadioAccessCapability());

   writer.writeSequenceEnd();
}


void InterRAT_UE_RadioAccessCapability_v690ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__EnumeratedType::ValueType v;
      _supportOfInter_RAT_PS_Handover_Type.read(reader, v);
      value.set_supportOfInter_RAT_PS_Handover(v);
   }
   {
      asn1::generated::GSM_MS_RadioAccessCapability::ValueType v;
      _gsm_MS_RadioAccessCapability_Type.read(reader, v);
      value.set_gsm_MS_RadioAccessCapability(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRAT_UE_RadioAccessCapability_v690ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _supportOfInter_RAT_PS_Handover_Type.write(writer, value.get_supportOfInter_RAT_PS_Handover());
   _gsm_MS_RadioAccessCapability_Type.write(writer, value.get_gsm_MS_RadioAccessCapability());

   writer.writeSequenceEnd();
}


void InterRAT-UE-SecurityCapability::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_gsm_Type)
   {
      _INTERNAL__SequenceType_gsmSecurityCapability_INTERNAL_asn1__generated__GsmSecurityCapability::ValueType v;
      _gsm_Type.read(reader, v);
      value.set_gsm(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _gsm_Type.toString());
   }
}

void InterRAT-UE-SecurityCapability::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_gsm_Choosen())
      _gsm_Type.write(writer, value.get_gsm());
}


void InterRAT-HO-FailureCause::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_configurationUnacceptable_Type)
   {
      asn1::NullType::ValueType v;
      _configurationUnacceptable_Type.read(reader, v);
      value.set_configurationUnacceptable(v);
   }
   else if (choosenType == &_physicalChannelFailure_Type)
   {
      asn1::NullType::ValueType v;
      _physicalChannelFailure_Type.read(reader, v);
      value.set_physicalChannelFailure(v);
   }
   else if (choosenType == &_protocolError_Type)
   {
      asn1::generated::ProtocolErrorInformation::ValueType v;
      _protocolError_Type.read(reader, v);
      value.set_protocolError(v);
   }
   else if (choosenType == &_interRAT-ProtocolError_Type)
   {
      asn1::NullType::ValueType v;
      _interRAT_ProtocolError_Type.read(reader, v);
      value.set_interRAT_ProtocolError(v);
   }
   else if (choosenType == &_unspecified_Type)
   {
      asn1::NullType::ValueType v;
      _unspecified_Type.read(reader, v);
      value.set_unspecified(v);
   }
   else if (choosenType == &_spare11_Type)
   {
      asn1::NullType::ValueType v;
      _spare11_Type.read(reader, v);
      value.set_spare11(v);
   }
   else if (choosenType == &_spare10_Type)
   {
      asn1::NullType::ValueType v;
      _spare10_Type.read(reader, v);
      value.set_spare10(v);
   }
   else if (choosenType == &_spare9_Type)
   {
      asn1::NullType::ValueType v;
      _spare9_Type.read(reader, v);
      value.set_spare9(v);
   }
   else if (choosenType == &_spare8_Type)
   {
      asn1::NullType::ValueType v;
      _spare8_Type.read(reader, v);
      value.set_spare8(v);
   }
   else if (choosenType == &_spare7_Type)
   {
      asn1::NullType::ValueType v;
      _spare7_Type.read(reader, v);
      value.set_spare7(v);
   }
   else if (choosenType == &_spare6_Type)
   {
      asn1::NullType::ValueType v;
      _spare6_Type.read(reader, v);
      value.set_spare6(v);
   }
   else if (choosenType == &_spare5_Type)
   {
      asn1::NullType::ValueType v;
      _spare5_Type.read(reader, v);
      value.set_spare5(v);
   }
   else if (choosenType == &_spare4_Type)
   {
      asn1::NullType::ValueType v;
      _spare4_Type.read(reader, v);
      value.set_spare4(v);
   }
   else if (choosenType == &_spare3_Type)
   {
      asn1::NullType::ValueType v;
      _spare3_Type.read(reader, v);
      value.set_spare3(v);
   }
   else if (choosenType == &_spare2_Type)
   {
      asn1::NullType::ValueType v;
      _spare2_Type.read(reader, v);
      value.set_spare2(v);
   }
   else if (choosenType == &_spare1_Type)
   {
      asn1::NullType::ValueType v;
      _spare1_Type.read(reader, v);
      value.set_spare1(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _configurationUnacceptable_Type.toString() + ", " + _physicalChannelFailure_Type.toString() + ", " + _protocolError_Type.toString() + ", " + _interRAT-ProtocolError_Type.toString() + ", " + _unspecified_Type.toString() + ", " + _spare11_Type.toString() + ", " + _spare10_Type.toString() + ", " + _spare9_Type.toString() + ", " + _spare8_Type.toString() + ", " + _spare7_Type.toString() + ", " + _spare6_Type.toString() + ", " + _spare5_Type.toString() + ", " + _spare4_Type.toString() + ", " + _spare3_Type.toString() + ", " + _spare2_Type.toString() + ", " + _spare1_Type.toString());
   }
}

void InterRAT-HO-FailureCause::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_configurationUnacceptable_Choosen())
      _configurationUnacceptable_Type.write(writer, value.get_configurationUnacceptable());
   else if (value.has_physicalChannelFailure_Choosen())
      _physicalChannelFailure_Type.write(writer, value.get_physicalChannelFailure());
   else if (value.has_protocolError_Choosen())
      _protocolError_Type.write(writer, value.get_protocolError());
   else if (value.has_interRAT-ProtocolError_Choosen())
      _interRAT-ProtocolError_Type.write(writer, value.get_interRAT-ProtocolError());
   else if (value.has_unspecified_Choosen())
      _unspecified_Type.write(writer, value.get_unspecified());
   else if (value.has_spare11_Choosen())
      _spare11_Type.write(writer, value.get_spare11());
   else if (value.has_spare10_Choosen())
      _spare10_Type.write(writer, value.get_spare10());
   else if (value.has_spare9_Choosen())
      _spare9_Type.write(writer, value.get_spare9());
   else if (value.has_spare8_Choosen())
      _spare8_Type.write(writer, value.get_spare8());
   else if (value.has_spare7_Choosen())
      _spare7_Type.write(writer, value.get_spare7());
   else if (value.has_spare6_Choosen())
      _spare6_Type.write(writer, value.get_spare6());
   else if (value.has_spare5_Choosen())
      _spare5_Type.write(writer, value.get_spare5());
   else if (value.has_spare4_Choosen())
      _spare4_Type.write(writer, value.get_spare4());
   else if (value.has_spare3_Choosen())
      _spare3_Type.write(writer, value.get_spare3());
   else if (value.has_spare2_Choosen())
      _spare2_Type.write(writer, value.get_spare2());
   else if (value.has_spare1_Choosen())
      _spare1_Type.write(writer, value.get_spare1());
}


void MasterInformationBlock::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MIB_ValueTag::ValueType v;
      _mib_ValueTag_Type.read(reader, v);
      value.set_mib_ValueTag(v);
   }
   {
      asn1::generated::PLMN_Type::ValueType v;
      _plmn_Type_Type.read(reader, v);
      value.set_plmn_Type(v);
   }
   {
      asn1::generated::SIBSb_ReferenceList::ValueType v;
      _sibSb_ReferenceList_Type.read(reader, v);
      value.set_sibSb_ReferenceList(v);
   }
   {
      _INTERNAL__SequenceType_masterInformationBlock-v690ext_INTERNAL_asn1__generated__MasterInformationBlock_v690ext_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v690NonCriticalExtensions_Type.read(reader, v);
      value.set_v690NonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void MasterInformationBlock::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mib_ValueTag_Type.write(writer, value.get_mib_ValueTag());
   _plmn_Type_Type.write(writer, value.get_plmn_Type());
   _sibSb_ReferenceList_Type.write(writer, value.get_sibSb_ReferenceList());
   _v690NonCriticalExtensions_Type.write(writer, value.get_v690NonCriticalExtensions());

   writer.writeSequenceEnd();
}


void MasterInformationBlock_v690ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MultiplePLMN_List_r6::ValueType v;
      _multiplePLMN_List_Type.read(reader, v);
      value.set_multiplePLMN_List(v);
   }

   reader.readSequenceEnd(*this);
}

void MasterInformationBlock_v690ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _multiplePLMN_List_Type.write(writer, value.get_multiplePLMN_List());

   writer.writeSequenceEnd();
}


void PredefinedConfigIdentityAndValueTag::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PredefinedConfigIdentity::ValueType v;
      _predefinedConfigIdentity_Type.read(reader, v);
      value.set_predefinedConfigIdentity(v);
   }
   {
      asn1::generated::PredefinedConfigValueTag::ValueType v;
      _predefinedConfigValueTag_Type.read(reader, v);
      value.set_predefinedConfigValueTag(v);
   }

   reader.readSequenceEnd(*this);
}

void PredefinedConfigIdentityAndValueTag::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _predefinedConfigIdentity_Type.write(writer, value.get_predefinedConfigIdentity());
   _predefinedConfigValueTag_Type.write(writer, value.get_predefinedConfigValueTag());

   writer.writeSequenceEnd();
}


void ProtocolErrorInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_type1_INTERNAL__SequenceType_protocolErrorCause_INTERNAL_asn1__generated__ProtocolErrorCause_spare_INTERNAL_asn1__NullType::ValueType v;
      _diagnosticsType_Type.read(reader, v);
      value.set_diagnosticsType(v);
   }

   reader.readSequenceEnd(*this);
}

void ProtocolErrorInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _diagnosticsType_Type.write(writer, value.get_diagnosticsType());

   writer.writeSequenceEnd();
}


void Rplmn_Information::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::GSM_BA_Range_List::ValueType v;
      _gsm_BA_Range_List_Type.read(reader, v);
      value.set_gsm_BA_Range_List(v);
   }
   {
      asn1::generated::FDD_UMTS_Frequency_List::ValueType v;
      _fdd_UMTS_Frequency_List_Type.read(reader, v);
      value.set_fdd_UMTS_Frequency_List(v);
   }
   {
      asn1::generated::TDD_UMTS_Frequency_List::ValueType v;
      _tdd_UMTS_Frequency_List_Type.read(reader, v);
      value.set_tdd_UMTS_Frequency_List(v);
   }
   {
      asn1::generated::CDMA2000_UMTS_Frequency_List::ValueType v;
      _cdma2000_UMTS_Frequency_List_Type.read(reader, v);
      value.set_cdma2000_UMTS_Frequency_List(v);
   }

   reader.readSequenceEnd(*this);
}

void Rplmn_Information::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _gsm_BA_Range_List_Type.write(writer, value.get_gsm_BA_Range_List());
   _fdd_UMTS_Frequency_List_Type.write(writer, value.get_fdd_UMTS_Frequency_List());
   _tdd_UMTS_Frequency_List_Type.write(writer, value.get_tdd_UMTS_Frequency_List());
   _cdma2000_UMTS_Frequency_List_Type.write(writer, value.get_cdma2000_UMTS_Frequency_List());

   writer.writeSequenceEnd();
}


void Rplmn_Information_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::GSM_BA_Range_List::ValueType v;
      _gsm_BA_Range_List_Type.read(reader, v);
      value.set_gsm_BA_Range_List(v);
   }
   {
      asn1::generated::FDD_UMTS_Frequency_List::ValueType v;
      _fdd_UMTS_Frequency_List_Type.read(reader, v);
      value.set_fdd_UMTS_Frequency_List(v);
   }
   {
      asn1::generated::TDD_UMTS_Frequency_List::ValueType v;
      _tdd384_UMTS_Frequency_List_Type.read(reader, v);
      value.set_tdd384_UMTS_Frequency_List(v);
   }
   {
      asn1::generated::TDD_UMTS_Frequency_List::ValueType v;
      _tdd128_UMTS_Frequency_List_Type.read(reader, v);
      value.set_tdd128_UMTS_Frequency_List(v);
   }
   {
      asn1::generated::CDMA2000_UMTS_Frequency_List::ValueType v;
      _cdma2000_UMTS_Frequency_List_Type.read(reader, v);
      value.set_cdma2000_UMTS_Frequency_List(v);
   }

   reader.readSequenceEnd(*this);
}

void Rplmn_Information_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _gsm_BA_Range_List_Type.write(writer, value.get_gsm_BA_Range_List());
   _fdd_UMTS_Frequency_List_Type.write(writer, value.get_fdd_UMTS_Frequency_List());
   _tdd384_UMTS_Frequency_List_Type.write(writer, value.get_tdd384_UMTS_Frequency_List());
   _tdd128_UMTS_Frequency_List_Type.write(writer, value.get_tdd128_UMTS_Frequency_List());
   _cdma2000_UMTS_Frequency_List_Type.write(writer, value.get_cdma2000_UMTS_Frequency_List());

   writer.writeSequenceEnd();
}


void SchedulingInformation::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__SequenceType_segCount_INTERNAL_asn1__generated__SegCount_sib-Pos_INTERNAL__ChoiceType_rep4_INTERNAL_asn1__IntegerType_rep8_INTERNAL_asn1__IntegerType_rep16_INTERNAL_asn1__IntegerType_rep32_INTERNAL_asn1__IntegerType_rep64_INTERNAL_asn1__IntegerType_rep128_INTERNAL_asn1__IntegerType_rep256_INTERNAL_asn1__IntegerType_rep512_INTERNAL_asn1__IntegerType_rep1024_INTERNAL_asn1__IntegerType_rep2048_INTERNAL_asn1__IntegerType_rep4096_INTERNAL_asn1__IntegerType_sib-PosOffsetInfo_INTERNAL_asn1__generated__SibOFF_List::ValueType v;
      _scheduling_Type.read(reader, v);
      value.set_scheduling(v);
   }

   reader.readSequenceEnd(*this);
}

void SchedulingInformation::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _scheduling_Type.write(writer, value.get_scheduling());

   writer.writeSequenceEnd();
}


void SchedulingInformationSIB::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SIB_TypeAndTag::ValueType v;
      _sib_Type_Type.read(reader, v);
      value.set_sib_Type(v);
   }
   {
      asn1::generated::SchedulingInformation::ValueType v;
      _scheduling_Type.read(reader, v);
      value.set_scheduling(v);
   }

   reader.readSequenceEnd(*this);
}

void SchedulingInformationSIB::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sib_Type_Type.write(writer, value.get_sib_Type());
   _scheduling_Type.write(writer, value.get_scheduling());

   writer.writeSequenceEnd();
}


void SchedulingInformationSIBSb::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SIBSb_TypeAndTag::ValueType v;
      _sibSb_Type_Type.read(reader, v);
      value.set_sibSb_Type(v);
   }
   {
      asn1::generated::SchedulingInformation::ValueType v;
      _scheduling_Type.read(reader, v);
      value.set_scheduling(v);
   }

   reader.readSequenceEnd(*this);
}

void SchedulingInformationSIBSb::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sibSb_Type_Type.write(writer, value.get_sibSb_Type());
   _scheduling_Type.write(writer, value.get_scheduling());

   writer.writeSequenceEnd();
}


void SIBOccurrenceIdentityAndValueTag::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SIBOccurIdentity::ValueType v;
      _sibOccurIdentity_Type.read(reader, v);
      value.set_sibOccurIdentity(v);
   }
   {
      asn1::generated::SIBOccurValueTag::ValueType v;
      _sibOccurValueTag_Type.read(reader, v);
      value.set_sibOccurValueTag(v);
   }

   reader.readSequenceEnd(*this);
}

void SIBOccurrenceIdentityAndValueTag::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sibOccurIdentity_Type.write(writer, value.get_sibOccurIdentity());
   _sibOccurValueTag_Type.write(writer, value.get_sibOccurValueTag());

   writer.writeSequenceEnd();
}


void SIB-TypeAndTag::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_sysInfoType1_Type)
   {
      asn1::generated::PLMN_ValueTag::ValueType v;
      _sysInfoType1_Type.read(reader, v);
      value.set_sysInfoType1(v);
   }
   else if (choosenType == &_sysInfoType2_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType2_Type.read(reader, v);
      value.set_sysInfoType2(v);
   }
   else if (choosenType == &_sysInfoType3_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType3_Type.read(reader, v);
      value.set_sysInfoType3(v);
   }
   else if (choosenType == &_sysInfoType4_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType4_Type.read(reader, v);
      value.set_sysInfoType4(v);
   }
   else if (choosenType == &_sysInfoType5_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType5_Type.read(reader, v);
      value.set_sysInfoType5(v);
   }
   else if (choosenType == &_sysInfoType6_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType6_Type.read(reader, v);
      value.set_sysInfoType6(v);
   }
   else if (choosenType == &_sysInfoType7_Type)
   {
      asn1::NullType::ValueType v;
      _sysInfoType7_Type.read(reader, v);
      value.set_sysInfoType7(v);
   }
   else if (choosenType == &_dummy_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   else if (choosenType == &_dummy2_Type)
   {
      asn1::NullType::ValueType v;
      _dummy2_Type.read(reader, v);
      value.set_dummy2(v);
   }
   else if (choosenType == &_dummy3_Type)
   {
      asn1::NullType::ValueType v;
      _dummy3_Type.read(reader, v);
      value.set_dummy3(v);
   }
   else if (choosenType == &_sysInfoType11_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType11_Type.read(reader, v);
      value.set_sysInfoType11(v);
   }
   else if (choosenType == &_sysInfoType12_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType12_Type.read(reader, v);
      value.set_sysInfoType12(v);
   }
   else if (choosenType == &_sysInfoType13_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType13_Type.read(reader, v);
      value.set_sysInfoType13(v);
   }
   else if (choosenType == &_sysInfoType13-1_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType13_1_Type.read(reader, v);
      value.set_sysInfoType13_1(v);
   }
   else if (choosenType == &_sysInfoType13-2_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType13_2_Type.read(reader, v);
      value.set_sysInfoType13_2(v);
   }
   else if (choosenType == &_sysInfoType13-3_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType13_3_Type.read(reader, v);
      value.set_sysInfoType13_3(v);
   }
   else if (choosenType == &_sysInfoType13-4_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType13_4_Type.read(reader, v);
      value.set_sysInfoType13_4(v);
   }
   else if (choosenType == &_sysInfoType14_Type)
   {
      asn1::NullType::ValueType v;
      _sysInfoType14_Type.read(reader, v);
      value.set_sysInfoType14(v);
   }
   else if (choosenType == &_sysInfoType15_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType15_Type.read(reader, v);
      value.set_sysInfoType15(v);
   }
   else if (choosenType == &_sysInfoType16_Type)
   {
      asn1::generated::PredefinedConfigIdentityAndValueTag::ValueType v;
      _sysInfoType16_Type.read(reader, v);
      value.set_sysInfoType16(v);
   }
   else if (choosenType == &_sysInfoType17_Type)
   {
      asn1::NullType::ValueType v;
      _sysInfoType17_Type.read(reader, v);
      value.set_sysInfoType17(v);
   }
   else if (choosenType == &_sysInfoType15-1_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType15_1_Type.read(reader, v);
      value.set_sysInfoType15_1(v);
   }
   else if (choosenType == &_sysInfoType15-2_Type)
   {
      asn1::generated::SIBOccurrenceIdentityAndValueTag::ValueType v;
      _sysInfoType15_2_Type.read(reader, v);
      value.set_sysInfoType15_2(v);
   }
   else if (choosenType == &_sysInfoType15-3_Type)
   {
      asn1::generated::SIBOccurrenceIdentityAndValueTag::ValueType v;
      _sysInfoType15_3_Type.read(reader, v);
      value.set_sysInfoType15_3(v);
   }
   else if (choosenType == &_sysInfoType15-4_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType15_4_Type.read(reader, v);
      value.set_sysInfoType15_4(v);
   }
   else if (choosenType == &_sysInfoType18_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType18_Type.read(reader, v);
      value.set_sysInfoType18(v);
   }
   else if (choosenType == &_sysInfoType15-5_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType15_5_Type.read(reader, v);
      value.set_sysInfoType15_5(v);
   }
   else if (choosenType == &_sysInfoType5bis_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType5bis_Type.read(reader, v);
      value.set_sysInfoType5bis(v);
   }
   else if (choosenType == &_spare4_Type)
   {
      asn1::NullType::ValueType v;
      _spare4_Type.read(reader, v);
      value.set_spare4(v);
   }
   else if (choosenType == &_spare3_Type)
   {
      asn1::NullType::ValueType v;
      _spare3_Type.read(reader, v);
      value.set_spare3(v);
   }
   else if (choosenType == &_spare2_Type)
   {
      asn1::NullType::ValueType v;
      _spare2_Type.read(reader, v);
      value.set_spare2(v);
   }
   else if (choosenType == &_spare1_Type)
   {
      asn1::NullType::ValueType v;
      _spare1_Type.read(reader, v);
      value.set_spare1(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _sysInfoType1_Type.toString() + ", " + _sysInfoType2_Type.toString() + ", " + _sysInfoType3_Type.toString() + ", " + _sysInfoType4_Type.toString() + ", " + _sysInfoType5_Type.toString() + ", " + _sysInfoType6_Type.toString() + ", " + _sysInfoType7_Type.toString() + ", " + _dummy_Type.toString() + ", " + _dummy2_Type.toString() + ", " + _dummy3_Type.toString() + ", " + _sysInfoType11_Type.toString() + ", " + _sysInfoType12_Type.toString() + ", " + _sysInfoType13_Type.toString() + ", " + _sysInfoType13-1_Type.toString() + ", " + _sysInfoType13-2_Type.toString() + ", " + _sysInfoType13-3_Type.toString() + ", " + _sysInfoType13-4_Type.toString() + ", " + _sysInfoType14_Type.toString() + ", " + _sysInfoType15_Type.toString() + ", " + _sysInfoType16_Type.toString() + ", " + _sysInfoType17_Type.toString() + ", " + _sysInfoType15-1_Type.toString() + ", " + _sysInfoType15-2_Type.toString() + ", " + _sysInfoType15-3_Type.toString() + ", " + _sysInfoType15-4_Type.toString() + ", " + _sysInfoType18_Type.toString() + ", " + _sysInfoType15-5_Type.toString() + ", " + _sysInfoType5bis_Type.toString() + ", " + _spare4_Type.toString() + ", " + _spare3_Type.toString() + ", " + _spare2_Type.toString() + ", " + _spare1_Type.toString());
   }
}

void SIB-TypeAndTag::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_sysInfoType1_Choosen())
      _sysInfoType1_Type.write(writer, value.get_sysInfoType1());
   else if (value.has_sysInfoType2_Choosen())
      _sysInfoType2_Type.write(writer, value.get_sysInfoType2());
   else if (value.has_sysInfoType3_Choosen())
      _sysInfoType3_Type.write(writer, value.get_sysInfoType3());
   else if (value.has_sysInfoType4_Choosen())
      _sysInfoType4_Type.write(writer, value.get_sysInfoType4());
   else if (value.has_sysInfoType5_Choosen())
      _sysInfoType5_Type.write(writer, value.get_sysInfoType5());
   else if (value.has_sysInfoType6_Choosen())
      _sysInfoType6_Type.write(writer, value.get_sysInfoType6());
   else if (value.has_sysInfoType7_Choosen())
      _sysInfoType7_Type.write(writer, value.get_sysInfoType7());
   else if (value.has_dummy_Choosen())
      _dummy_Type.write(writer, value.get_dummy());
   else if (value.has_dummy2_Choosen())
      _dummy2_Type.write(writer, value.get_dummy2());
   else if (value.has_dummy3_Choosen())
      _dummy3_Type.write(writer, value.get_dummy3());
   else if (value.has_sysInfoType11_Choosen())
      _sysInfoType11_Type.write(writer, value.get_sysInfoType11());
   else if (value.has_sysInfoType12_Choosen())
      _sysInfoType12_Type.write(writer, value.get_sysInfoType12());
   else if (value.has_sysInfoType13_Choosen())
      _sysInfoType13_Type.write(writer, value.get_sysInfoType13());
   else if (value.has_sysInfoType13-1_Choosen())
      _sysInfoType13-1_Type.write(writer, value.get_sysInfoType13-1());
   else if (value.has_sysInfoType13-2_Choosen())
      _sysInfoType13-2_Type.write(writer, value.get_sysInfoType13-2());
   else if (value.has_sysInfoType13-3_Choosen())
      _sysInfoType13-3_Type.write(writer, value.get_sysInfoType13-3());
   else if (value.has_sysInfoType13-4_Choosen())
      _sysInfoType13-4_Type.write(writer, value.get_sysInfoType13-4());
   else if (value.has_sysInfoType14_Choosen())
      _sysInfoType14_Type.write(writer, value.get_sysInfoType14());
   else if (value.has_sysInfoType15_Choosen())
      _sysInfoType15_Type.write(writer, value.get_sysInfoType15());
   else if (value.has_sysInfoType16_Choosen())
      _sysInfoType16_Type.write(writer, value.get_sysInfoType16());
   else if (value.has_sysInfoType17_Choosen())
      _sysInfoType17_Type.write(writer, value.get_sysInfoType17());
   else if (value.has_sysInfoType15-1_Choosen())
      _sysInfoType15-1_Type.write(writer, value.get_sysInfoType15-1());
   else if (value.has_sysInfoType15-2_Choosen())
      _sysInfoType15-2_Type.write(writer, value.get_sysInfoType15-2());
   else if (value.has_sysInfoType15-3_Choosen())
      _sysInfoType15-3_Type.write(writer, value.get_sysInfoType15-3());
   else if (value.has_sysInfoType15-4_Choosen())
      _sysInfoType15-4_Type.write(writer, value.get_sysInfoType15-4());
   else if (value.has_sysInfoType18_Choosen())
      _sysInfoType18_Type.write(writer, value.get_sysInfoType18());
   else if (value.has_sysInfoType15-5_Choosen())
      _sysInfoType15-5_Type.write(writer, value.get_sysInfoType15-5());
   else if (value.has_sysInfoType5bis_Choosen())
      _sysInfoType5bis_Type.write(writer, value.get_sysInfoType5bis());
   else if (value.has_spare4_Choosen())
      _spare4_Type.write(writer, value.get_spare4());
   else if (value.has_spare3_Choosen())
      _spare3_Type.write(writer, value.get_spare3());
   else if (value.has_spare2_Choosen())
      _spare2_Type.write(writer, value.get_spare2());
   else if (value.has_spare1_Choosen())
      _spare1_Type.write(writer, value.get_spare1());
}


void SIBSb-TypeAndTag::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_sysInfoType1_Type)
   {
      asn1::generated::PLMN_ValueTag::ValueType v;
      _sysInfoType1_Type.read(reader, v);
      value.set_sysInfoType1(v);
   }
   else if (choosenType == &_sysInfoType2_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType2_Type.read(reader, v);
      value.set_sysInfoType2(v);
   }
   else if (choosenType == &_sysInfoType3_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType3_Type.read(reader, v);
      value.set_sysInfoType3(v);
   }
   else if (choosenType == &_sysInfoType4_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType4_Type.read(reader, v);
      value.set_sysInfoType4(v);
   }
   else if (choosenType == &_sysInfoType5_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType5_Type.read(reader, v);
      value.set_sysInfoType5(v);
   }
   else if (choosenType == &_sysInfoType6_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType6_Type.read(reader, v);
      value.set_sysInfoType6(v);
   }
   else if (choosenType == &_sysInfoType7_Type)
   {
      asn1::NullType::ValueType v;
      _sysInfoType7_Type.read(reader, v);
      value.set_sysInfoType7(v);
   }
   else if (choosenType == &_dummy_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   else if (choosenType == &_dummy2_Type)
   {
      asn1::NullType::ValueType v;
      _dummy2_Type.read(reader, v);
      value.set_dummy2(v);
   }
   else if (choosenType == &_dummy3_Type)
   {
      asn1::NullType::ValueType v;
      _dummy3_Type.read(reader, v);
      value.set_dummy3(v);
   }
   else if (choosenType == &_sysInfoType11_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType11_Type.read(reader, v);
      value.set_sysInfoType11(v);
   }
   else if (choosenType == &_sysInfoType12_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType12_Type.read(reader, v);
      value.set_sysInfoType12(v);
   }
   else if (choosenType == &_sysInfoType13_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType13_Type.read(reader, v);
      value.set_sysInfoType13(v);
   }
   else if (choosenType == &_sysInfoType13-1_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType13_1_Type.read(reader, v);
      value.set_sysInfoType13_1(v);
   }
   else if (choosenType == &_sysInfoType13-2_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType13_2_Type.read(reader, v);
      value.set_sysInfoType13_2(v);
   }
   else if (choosenType == &_sysInfoType13-3_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType13_3_Type.read(reader, v);
      value.set_sysInfoType13_3(v);
   }
   else if (choosenType == &_sysInfoType13-4_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType13_4_Type.read(reader, v);
      value.set_sysInfoType13_4(v);
   }
   else if (choosenType == &_sysInfoType14_Type)
   {
      asn1::NullType::ValueType v;
      _sysInfoType14_Type.read(reader, v);
      value.set_sysInfoType14(v);
   }
   else if (choosenType == &_sysInfoType15_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType15_Type.read(reader, v);
      value.set_sysInfoType15(v);
   }
   else if (choosenType == &_sysInfoType16_Type)
   {
      asn1::generated::PredefinedConfigIdentityAndValueTag::ValueType v;
      _sysInfoType16_Type.read(reader, v);
      value.set_sysInfoType16(v);
   }
   else if (choosenType == &_sysInfoType17_Type)
   {
      asn1::NullType::ValueType v;
      _sysInfoType17_Type.read(reader, v);
      value.set_sysInfoType17(v);
   }
   else if (choosenType == &_sysInfoTypeSB1_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoTypeSB1_Type.read(reader, v);
      value.set_sysInfoTypeSB1(v);
   }
   else if (choosenType == &_sysInfoTypeSB2_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoTypeSB2_Type.read(reader, v);
      value.set_sysInfoTypeSB2(v);
   }
   else if (choosenType == &_sysInfoType15-1_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType15_1_Type.read(reader, v);
      value.set_sysInfoType15_1(v);
   }
   else if (choosenType == &_sysInfoType15-2_Type)
   {
      asn1::generated::SIBOccurrenceIdentityAndValueTag::ValueType v;
      _sysInfoType15_2_Type.read(reader, v);
      value.set_sysInfoType15_2(v);
   }
   else if (choosenType == &_sysInfoType15-3_Type)
   {
      asn1::generated::SIBOccurrenceIdentityAndValueTag::ValueType v;
      _sysInfoType15_3_Type.read(reader, v);
      value.set_sysInfoType15_3(v);
   }
   else if (choosenType == &_sysInfoType15-4_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType15_4_Type.read(reader, v);
      value.set_sysInfoType15_4(v);
   }
   else if (choosenType == &_sysInfoType18_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType18_Type.read(reader, v);
      value.set_sysInfoType18(v);
   }
   else if (choosenType == &_sysInfoType15-5_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType15_5_Type.read(reader, v);
      value.set_sysInfoType15_5(v);
   }
   else if (choosenType == &_sysInfoType5bis_Type)
   {
      asn1::generated::CellValueTag::ValueType v;
      _sysInfoType5bis_Type.read(reader, v);
      value.set_sysInfoType5bis(v);
   }
   else if (choosenType == &_spare2_Type)
   {
      asn1::NullType::ValueType v;
      _spare2_Type.read(reader, v);
      value.set_spare2(v);
   }
   else if (choosenType == &_spare1_Type)
   {
      asn1::NullType::ValueType v;
      _spare1_Type.read(reader, v);
      value.set_spare1(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _sysInfoType1_Type.toString() + ", " + _sysInfoType2_Type.toString() + ", " + _sysInfoType3_Type.toString() + ", " + _sysInfoType4_Type.toString() + ", " + _sysInfoType5_Type.toString() + ", " + _sysInfoType6_Type.toString() + ", " + _sysInfoType7_Type.toString() + ", " + _dummy_Type.toString() + ", " + _dummy2_Type.toString() + ", " + _dummy3_Type.toString() + ", " + _sysInfoType11_Type.toString() + ", " + _sysInfoType12_Type.toString() + ", " + _sysInfoType13_Type.toString() + ", " + _sysInfoType13-1_Type.toString() + ", " + _sysInfoType13-2_Type.toString() + ", " + _sysInfoType13-3_Type.toString() + ", " + _sysInfoType13-4_Type.toString() + ", " + _sysInfoType14_Type.toString() + ", " + _sysInfoType15_Type.toString() + ", " + _sysInfoType16_Type.toString() + ", " + _sysInfoType17_Type.toString() + ", " + _sysInfoTypeSB1_Type.toString() + ", " + _sysInfoTypeSB2_Type.toString() + ", " + _sysInfoType15-1_Type.toString() + ", " + _sysInfoType15-2_Type.toString() + ", " + _sysInfoType15-3_Type.toString() + ", " + _sysInfoType15-4_Type.toString() + ", " + _sysInfoType18_Type.toString() + ", " + _sysInfoType15-5_Type.toString() + ", " + _sysInfoType5bis_Type.toString() + ", " + _spare2_Type.toString() + ", " + _spare1_Type.toString());
   }
}

void SIBSb-TypeAndTag::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_sysInfoType1_Choosen())
      _sysInfoType1_Type.write(writer, value.get_sysInfoType1());
   else if (value.has_sysInfoType2_Choosen())
      _sysInfoType2_Type.write(writer, value.get_sysInfoType2());
   else if (value.has_sysInfoType3_Choosen())
      _sysInfoType3_Type.write(writer, value.get_sysInfoType3());
   else if (value.has_sysInfoType4_Choosen())
      _sysInfoType4_Type.write(writer, value.get_sysInfoType4());
   else if (value.has_sysInfoType5_Choosen())
      _sysInfoType5_Type.write(writer, value.get_sysInfoType5());
   else if (value.has_sysInfoType6_Choosen())
      _sysInfoType6_Type.write(writer, value.get_sysInfoType6());
   else if (value.has_sysInfoType7_Choosen())
      _sysInfoType7_Type.write(writer, value.get_sysInfoType7());
   else if (value.has_dummy_Choosen())
      _dummy_Type.write(writer, value.get_dummy());
   else if (value.has_dummy2_Choosen())
      _dummy2_Type.write(writer, value.get_dummy2());
   else if (value.has_dummy3_Choosen())
      _dummy3_Type.write(writer, value.get_dummy3());
   else if (value.has_sysInfoType11_Choosen())
      _sysInfoType11_Type.write(writer, value.get_sysInfoType11());
   else if (value.has_sysInfoType12_Choosen())
      _sysInfoType12_Type.write(writer, value.get_sysInfoType12());
   else if (value.has_sysInfoType13_Choosen())
      _sysInfoType13_Type.write(writer, value.get_sysInfoType13());
   else if (value.has_sysInfoType13-1_Choosen())
      _sysInfoType13-1_Type.write(writer, value.get_sysInfoType13-1());
   else if (value.has_sysInfoType13-2_Choosen())
      _sysInfoType13-2_Type.write(writer, value.get_sysInfoType13-2());
   else if (value.has_sysInfoType13-3_Choosen())
      _sysInfoType13-3_Type.write(writer, value.get_sysInfoType13-3());
   else if (value.has_sysInfoType13-4_Choosen())
      _sysInfoType13-4_Type.write(writer, value.get_sysInfoType13-4());
   else if (value.has_sysInfoType14_Choosen())
      _sysInfoType14_Type.write(writer, value.get_sysInfoType14());
   else if (value.has_sysInfoType15_Choosen())
      _sysInfoType15_Type.write(writer, value.get_sysInfoType15());
   else if (value.has_sysInfoType16_Choosen())
      _sysInfoType16_Type.write(writer, value.get_sysInfoType16());
   else if (value.has_sysInfoType17_Choosen())
      _sysInfoType17_Type.write(writer, value.get_sysInfoType17());
   else if (value.has_sysInfoTypeSB1_Choosen())
      _sysInfoTypeSB1_Type.write(writer, value.get_sysInfoTypeSB1());
   else if (value.has_sysInfoTypeSB2_Choosen())
      _sysInfoTypeSB2_Type.write(writer, value.get_sysInfoTypeSB2());
   else if (value.has_sysInfoType15-1_Choosen())
      _sysInfoType15-1_Type.write(writer, value.get_sysInfoType15-1());
   else if (value.has_sysInfoType15-2_Choosen())
      _sysInfoType15-2_Type.write(writer, value.get_sysInfoType15-2());
   else if (value.has_sysInfoType15-3_Choosen())
      _sysInfoType15-3_Type.write(writer, value.get_sysInfoType15-3());
   else if (value.has_sysInfoType15-4_Choosen())
      _sysInfoType15-4_Type.write(writer, value.get_sysInfoType15-4());
   else if (value.has_sysInfoType18_Choosen())
      _sysInfoType18_Type.write(writer, value.get_sysInfoType18());
   else if (value.has_sysInfoType15-5_Choosen())
      _sysInfoType15-5_Type.write(writer, value.get_sysInfoType15-5());
   else if (value.has_sysInfoType5bis_Choosen())
      _sysInfoType5bis_Type.write(writer, value.get_sysInfoType5bis());
   else if (value.has_spare2_Choosen())
      _spare2_Type.write(writer, value.get_spare2());
   else if (value.has_spare1_Choosen())
      _spare1_Type.write(writer, value.get_spare1());
}


void SysInfoType1::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::NAS_SystemInformationGSM_MAP::ValueType v;
      _cn_CommonGSM_MAP_NAS_SysInfo_Type.read(reader, v);
      value.set_cn_CommonGSM_MAP_NAS_SysInfo(v);
   }
   {
      asn1::generated::CN_DomainSysInfoList::ValueType v;
      _cn_DomainSysInfoList_Type.read(reader, v);
      value.set_cn_DomainSysInfoList(v);
   }
   {
      asn1::generated::UE_ConnTimersAndConstants::ValueType v;
      _ue_ConnTimersAndConstants_Type.read(reader, v);
      value.set_ue_ConnTimersAndConstants(v);
   }
   {
      asn1::generated::UE_IdleTimersAndConstants::ValueType v;
      _ue_IdleTimersAndConstants_Type.read(reader, v);
      value.set_ue_IdleTimersAndConstants(v);
   }
   {
      _INTERNAL__SequenceType_sysInfoType1-v3a0ext_INTERNAL_asn1__generated__SysInfoType1_v3a0ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v3a0NonCriticalExtensions_Type.read(reader, v);
      value.set_v3a0NonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType1::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cn_CommonGSM_MAP_NAS_SysInfo_Type.write(writer, value.get_cn_CommonGSM_MAP_NAS_SysInfo());
   _cn_DomainSysInfoList_Type.write(writer, value.get_cn_DomainSysInfoList());
   _ue_ConnTimersAndConstants_Type.write(writer, value.get_ue_ConnTimersAndConstants());
   _ue_IdleTimersAndConstants_Type.write(writer, value.get_ue_IdleTimersAndConstants());
   _v3a0NonCriticalExtensions_Type.write(writer, value.get_v3a0NonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType1_v3a0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_ConnTimersAndConstants_v3a0ext::ValueType v;
      _ue_ConnTimersAndConstants_v3a0ext_Type.read(reader, v);
      value.set_ue_ConnTimersAndConstants_v3a0ext(v);
   }
   {
      asn1::generated::UE_IdleTimersAndConstants_v3a0ext::ValueType v;
      _ue_IdleTimersAndConstants_v3a0ext_Type.read(reader, v);
      value.set_ue_IdleTimersAndConstants_v3a0ext(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType1_v3a0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_ConnTimersAndConstants_v3a0ext_Type.write(writer, value.get_ue_ConnTimersAndConstants_v3a0ext());
   _ue_IdleTimersAndConstants_v3a0ext_Type.write(writer, value.get_ue_IdleTimersAndConstants_v3a0ext());

   writer.writeSequenceEnd();
}


void SysInfoType2::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::URA_IdentityList::ValueType v;
      _ura_IdentityList_Type.read(reader, v);
      value.set_ura_IdentityList(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType2::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ura_IdentityList_Type.write(writer, value.get_ura_IdentityList());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType3::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _sib4indicator_Type.read(reader, v);
      value.set_sib4indicator(v);
   }
   {
      asn1::generated::CellIdentity::ValueType v;
      _cellIdentity_Type.read(reader, v);
      value.set_cellIdentity(v);
   }
   {
      asn1::generated::CellSelectReselectInfoSIB_3_4::ValueType v;
      _cellSelectReselectInfo_Type.read(reader, v);
      value.set_cellSelectReselectInfo(v);
   }
   {
      asn1::generated::CellAccessRestriction::ValueType v;
      _cellAccessRestriction_Type.read(reader, v);
      value.set_cellAccessRestriction(v);
   }
   {
      _INTERNAL__SequenceType_sysInfoType3-v4b0ext_INTERNAL_asn1__generated__SysInfoType3_v4b0ext_IEs_v590NonCriticalExtension_INTERNAL__SequenceType_sysInfoType3-v590ext_INTERNAL_asn1__generated__SysInfoType3_v590ext_v5c0NoncriticalExtension_INTERNAL__SequenceType_sysInfoType3-v5c0ext_INTERNAL_asn1__generated__SysInfoType3_v5c0ext_IEs_v670NonCriticalExtension_INTERNAL__SequenceType_sysInfoType3-v670ext_INTERNAL_asn1__generated__SysInfoType3_v670ext_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v4b0NonCriticalExtensions_Type.read(reader, v);
      value.set_v4b0NonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType3::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sib4indicator_Type.write(writer, value.get_sib4indicator());
   _cellIdentity_Type.write(writer, value.get_cellIdentity());
   _cellSelectReselectInfo_Type.write(writer, value.get_cellSelectReselectInfo());
   _cellAccessRestriction_Type.write(writer, value.get_cellAccessRestriction());
   _v4b0NonCriticalExtensions_Type.write(writer, value.get_v4b0NonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType3_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Mapping_LCR_r4::ValueType v;
      _mapping_LCR_Type.read(reader, v);
      value.set_mapping_LCR(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType3_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mapping_LCR_Type.write(writer, value.get_mapping_LCR());

   writer.writeSequenceEnd();
}


void SysInfoType3_v590ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CellSelectReselectInfo_v590ext::ValueType v;
      _cellSelectReselectInfo_v590ext_Type.read(reader, v);
      value.set_cellSelectReselectInfo_v590ext(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType3_v590ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cellSelectReselectInfo_v590ext_Type.write(writer, value.get_cellSelectReselectInfo_v590ext());

   writer.writeSequenceEnd();
}


void SysInfoType3_v5c0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CellSelectReselectInfoTreselectionScaling_v5c0ext::ValueType v;
      _cellSelectReselectInfoTreselectionScaling_v5c0ext_Type.read(reader, v);
      value.set_cellSelectReselectInfoTreselectionScaling_v5c0ext(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType3_v5c0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cellSelectReselectInfoTreselectionScaling_v5c0ext_Type.write(writer, value.get_cellSelectReselectInfoTreselectionScaling_v5c0ext());

   writer.writeSequenceEnd();
}


void SysInfoType3_v670ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DomainSpecificAccessRestrictionParam_v670ext::ValueType v;
      _domainSpecificAccessRestrictionParametersForPLMNOfMIB_Type.read(reader, v);
      value.set_domainSpecificAccessRestrictionParametersForPLMNOfMIB(v);
   }
   {
      asn1::generated::DomainSpecificAccessRestrictionForSharedNetwork_v670ext::ValueType v;
      _domainSpecificAccessRestictionForSharedNetwork_Type.read(reader, v);
      value.set_domainSpecificAccessRestictionForSharedNetwork(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType3_v670ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _domainSpecificAccessRestrictionParametersForPLMNOfMIB_Type.write(writer, value.get_domainSpecificAccessRestrictionParametersForPLMNOfMIB());
   _domainSpecificAccessRestictionForSharedNetwork_Type.write(writer, value.get_domainSpecificAccessRestictionForSharedNetwork());

   writer.writeSequenceEnd();
}


void SysInfoType4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CellIdentity::ValueType v;
      _cellIdentity_Type.read(reader, v);
      value.set_cellIdentity(v);
   }
   {
      asn1::generated::CellSelectReselectInfoSIB_3_4::ValueType v;
      _cellSelectReselectInfo_Type.read(reader, v);
      value.set_cellSelectReselectInfo(v);
   }
   {
      asn1::generated::CellAccessRestriction::ValueType v;
      _cellAccessRestriction_Type.read(reader, v);
      value.set_cellAccessRestriction(v);
   }
   {
      _INTERNAL__SequenceType_sysInfoType4-v4b0ext_INTERNAL_asn1__generated__SysInfoType4_v4b0ext_IEs_v590NonCriticalExtension_INTERNAL__SequenceType_sysInfoType4-v590ext_INTERNAL_asn1__generated__SysInfoType4_v590ext_v5b0NonCriticalExtension_INTERNAL__SequenceType_sysInfoType4-v5b0ext_INTERNAL_asn1__generated__SysInfoType4_v5b0ext_IEs_v5c0NonCriticalExtension_INTERNAL__SequenceType_sysInfoType4-v5c0ext_INTERNAL_asn1__generated__SysInfoType4_v5c0ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v4b0NonCriticalExtensions_Type.read(reader, v);
      value.set_v4b0NonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cellIdentity_Type.write(writer, value.get_cellIdentity());
   _cellSelectReselectInfo_Type.write(writer, value.get_cellSelectReselectInfo());
   _cellAccessRestriction_Type.write(writer, value.get_cellAccessRestriction());
   _v4b0NonCriticalExtensions_Type.write(writer, value.get_v4b0NonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType4_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Mapping_LCR_r4::ValueType v;
      _mapping_LCR_Type.read(reader, v);
      value.set_mapping_LCR(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType4_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mapping_LCR_Type.write(writer, value.get_mapping_LCR());

   writer.writeSequenceEnd();
}


void SysInfoType4_v590ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CellSelectReselectInfo_v590ext::ValueType v;
      _cellSelectReselectInfo_v590ext_Type.read(reader, v);
      value.set_cellSelectReselectInfo_v590ext(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType4_v590ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cellSelectReselectInfo_v590ext_Type.write(writer, value.get_cellSelectReselectInfo_v590ext());

   writer.writeSequenceEnd();
}


void SysInfoType4_v5b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CellSelectReselectInfoPCHFACH_v5b0ext::ValueType v;
      _cellSelectReselectInfoPCHFACH_v5b0ext_Type.read(reader, v);
      value.set_cellSelectReselectInfoPCHFACH_v5b0ext(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType4_v5b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cellSelectReselectInfoPCHFACH_v5b0ext_Type.write(writer, value.get_cellSelectReselectInfoPCHFACH_v5b0ext());

   writer.writeSequenceEnd();
}


void SysInfoType4_v5c0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CellSelectReselectInfoTreselectionScaling_v5c0ext::ValueType v;
      _cellSelectReselectInfoTreselectionScaling_v5c0ext_Type.read(reader, v);
      value.set_cellSelectReselectInfoTreselectionScaling_v5c0ext(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType4_v5c0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cellSelectReselectInfoTreselectionScaling_v5c0ext_Type.write(writer, value.get_cellSelectReselectInfoTreselectionScaling_v5c0ext());

   writer.writeSequenceEnd();
}


void SysInfoType5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _sib6indicator_Type.read(reader, v);
      value.set_sib6indicator(v);
   }
   {
      asn1::generated::PICH_PowerOffset::ValueType v;
      _pich_PowerOffset_Type.read(reader, v);
      value.set_pich_PowerOffset(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_aich-PowerOffset_INTERNAL_asn1__generated__AICH_PowerOffset_tdd_INTERNAL__SequenceType_pusch-SysInfoList-SFN_INTERNAL_asn1__generated__PUSCH_SysInfoList_SFN_pdsch-SysInfoList-SFN_INTERNAL_asn1__generated__PDSCH_SysInfoList_SFN_openLoopPowerControl-TDD_INTERNAL_asn1__generated__OpenLoopPowerControl_TDD::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::PrimaryCCPCH_Info::ValueType v;
      _primaryCCPCH_Info_Type.read(reader, v);
      value.set_primaryCCPCH_Info(v);
   }
   {
      asn1::generated::PRACH_SystemInformationList::ValueType v;
      _prach_SystemInformationList_Type.read(reader, v);
      value.set_prach_SystemInformationList(v);
   }
   {
      asn1::generated::SCCPCH_SystemInformationList::ValueType v;
      _sCCPCH_SystemInformationList_Type.read(reader, v);
      value.set_sCCPCH_SystemInformationList(v);
   }
   {
      asn1::generated::CBS_DRX_Level1Information::ValueType v;
      _cbs_DRX_Level1Information_Type.read(reader, v);
      value.set_cbs_DRX_Level1Information(v);
   }
   {
      _INTERNAL__SequenceType_sysInfoType5-v4b0ext_INTERNAL_asn1__generated__SysInfoType5_v4b0ext_IEs_v590NonCriticalExtensions_INTERNAL__SequenceType_sysInfoType5-v590ext_INTERNAL_asn1__generated__SysInfoType5_v590ext_IEs_v650NonCriticalExtensions_INTERNAL__SequenceType_sysInfoType5-v650ext_INTERNAL_asn1__generated__SysInfoType5_v650ext_IEs_v680NonCriticalExtensions_INTERNAL__SequenceType_sysInfoType5-v680ext_INTERNAL_asn1__generated__SysInfoType5_v680ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_sysInfoType5-v690ext_INTERNAL_asn1__generated__SysInfoType5_v690ext_IEs_v7xyNonCriticalExtensions_INTERNAL__SequenceType_sysInfoType5-v7xyext_INTERNAL_asn1__generated__SysInfoType5_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v4b0NonCriticalExtensions_Type.read(reader, v);
      value.set_v4b0NonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sib6indicator_Type.write(writer, value.get_sib6indicator());
   _pich_PowerOffset_Type.write(writer, value.get_pich_PowerOffset());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _primaryCCPCH_Info_Type.write(writer, value.get_primaryCCPCH_Info());
   _prach_SystemInformationList_Type.write(writer, value.get_prach_SystemInformationList());
   _sCCPCH_SystemInformationList_Type.write(writer, value.get_sCCPCH_SystemInformationList());
   _cbs_DRX_Level1Information_Type.write(writer, value.get_cbs_DRX_Level1Information());
   _v4b0NonCriticalExtensions_Type.write(writer, value.get_v4b0NonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType5_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PNBSCH_Allocation_r4::ValueType v;
      _pNBSCH_Allocation_r4_Type.read(reader, v);
      value.set_pNBSCH_Allocation_r4(v);
   }
   {
      asn1::generated::OpenLoopPowerControl_IPDL_TDD_r4::ValueType v;
      _openLoopPowerControl_IPDL_TDD_Type.read(reader, v);
      value.set_openLoopPowerControl_IPDL_TDD(v);
   }
   {
      asn1::generated::PRACH_SystemInformationList_LCR_r4::ValueType v;
      _prach_SystemInformationList_LCR_r4_Type.read(reader, v);
      value.set_prach_SystemInformationList_LCR_r4(v);
   }
   {
      _INTERNAL__SequenceType_pusch-SysInfoList-SFN_INTERNAL_asn1__generated__PUSCH_SysInfoList_SFN_LCR_r4_pdsch-SysInfoList-SFN_INTERNAL_asn1__generated__PDSCH_SysInfoList_SFN_LCR_r4_pCCPCH-LCR-Extensions_INTERNAL_asn1__generated__PrimaryCCPCH_Info_LCR_r4_ext_sCCPCH-LCR-ExtensionsList_INTERNAL_asn1__generated__SCCPCH_SystemInformationList_LCR_r4_ext::ValueType v;
      _tdd128SpecificInfo_Type.read(reader, v);
      value.set_tdd128SpecificInfo(v);
   }
   {
      asn1::generated::RadioFrequencyBandFDD::ValueType v;
      _frequencyBandIndicator_Type.read(reader, v);
      value.set_frequencyBandIndicator(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType5_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pNBSCH_Allocation_r4_Type.write(writer, value.get_pNBSCH_Allocation_r4());
   _openLoopPowerControl_IPDL_TDD_Type.write(writer, value.get_openLoopPowerControl_IPDL_TDD());
   _prach_SystemInformationList_LCR_r4_Type.write(writer, value.get_prach_SystemInformationList_LCR_r4());
   _tdd128SpecificInfo_Type.write(writer, value.get_tdd128SpecificInfo());
   _frequencyBandIndicator_Type.write(writer, value.get_frequencyBandIndicator());

   writer.writeSequenceEnd();
}


void SysInfoType5_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__SequenceType_pusch-SysInfoList-SFN_INTERNAL_asn1__generated__PUSCH_SysInfoList_SFN_HCR_r5_pdsch-SysInfoList-SFN_INTERNAL_asn1__generated__PDSCH_SysInfoList_SFN_HCR_r5::ValueType v;
      _hcr_r5_SpecificInfo_Type.read(reader, v);
      value.set_hcr_r5_SpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType5_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _hcr_r5_SpecificInfo_Type.write(writer, value.get_hcr_r5_SpecificInfo());

   writer.writeSequenceEnd();
}


void SysInfoType5_v650ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RadioFrequencyBandFDD2::ValueType v;
      _frequencyBandIndicator2_Type.read(reader, v);
      value.set_frequencyBandIndicator2(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType5_v650ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _frequencyBandIndicator2_Type.write(writer, value.get_frequencyBandIndicator2());

   writer.writeSequenceEnd();
}


void SysInfoType5_v680ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__EnumeratedType::ValueType v;
      _hsdpa_CellIndicator_Type.read(reader, v);
      value.set_hsdpa_CellIndicator(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType5_v680ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _hsdpa_CellIndicator_Type.write(writer, value.get_hsdpa_CellIndicator());

   writer.writeSequenceEnd();
}


void SysInfoType5_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__EnumeratedType::ValueType v;
      _edch_CellIndicator_Type.read(reader, v);
      value.set_edch_CellIndicator(v);
   }
   {
      _INTERNAL__ChoiceType_mcchOnSCCPCHusedForNonMBMS_INTERNAL_asn1__generated__MBMS_MCCH_ConfigurationInfo_r6_mcchOnSCCPCHusedOnlyForMBMS_INTERNAL_asn1__generated__SCCPCH_SystemInformation_MBMS_r6::ValueType v;
      _sccpch_SystemInformation_MBMS_Type.read(reader, v);
      value.set_sccpch_SystemInformation_MBMS(v);
   }
   {
      asn1::generated::AdditionalPRACH_TF_and_TFCS_CCCH_List::ValueType v;
      _additionalPRACH_TF_and_TFCS_CCCH_List_Type.read(reader, v);
      value.set_additionalPRACH_TF_and_TFCS_CCCH_List(v);
   }
   {
      asn1::generated::CBS_DRX_Level1Information_extension_r6::ValueType v;
      _cBS_DRX_Level1Information_extension_Type.read(reader, v);
      value.set_cBS_DRX_Level1Information_extension(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType5_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _edch_CellIndicator_Type.write(writer, value.get_edch_CellIndicator());
   _sccpch_SystemInformation_MBMS_Type.write(writer, value.get_sccpch_SystemInformation_MBMS());
   _additionalPRACH_TF_and_TFCS_CCCH_List_Type.write(writer, value.get_additionalPRACH_TF_and_TFCS_CCCH_List());
   _cBS_DRX_Level1Information_extension_Type.write(writer, value.get_cBS_DRX_Level1Information_extension());

   writer.writeSequenceEnd();
}


void SysInfoType5_v7xyext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PUSCH_SysInfoList_SFN_VHCR::ValueType v;
      _pusch_SysInfoList_SFN_VHCR_Type.read(reader, v);
      value.set_pusch_SysInfoList_SFN_VHCR(v);
   }
   {
      asn1::generated::PRACH_SystemInformationList_r7::ValueType v;
      _prach_SystemInformationList_r7_Type.read(reader, v);
      value.set_prach_SystemInformationList_r7(v);
   }
   {
      asn1::generated::PDSCH_SysInfoList_r7::ValueType v;
      _pdsch_SysInfoList_SFN_r7_Type.read(reader, v);
      value.set_pdsch_SysInfoList_SFN_r7(v);
   }
   {
      _INTERNAL__ChoiceType_mcchOnSCCPCHusedForNonMBMS_INTERNAL_asn1__generated__MBMS_MCCH_ConfigurationInfo_r6_mcchOnSCCPCHusedOnlyForMBMS_INTERNAL_asn1__generated__SCCPCH_SystemInformation_MBMS_r7::ValueType v;
      _sccpch_SystemInformation_MBMS_Type.read(reader, v);
      value.set_sccpch_SystemInformation_MBMS(v);
   }
   {
      asn1::generated::SCCPCH_SystemInformationList_r7::ValueType v;
      _sCCPCH_SystemInformationList_r7_Type.read(reader, v);
      value.set_sCCPCH_SystemInformationList_r7(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType5_v7xyext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pusch_SysInfoList_SFN_VHCR_Type.write(writer, value.get_pusch_SysInfoList_SFN_VHCR());
   _prach_SystemInformationList_r7_Type.write(writer, value.get_prach_SystemInformationList_r7());
   _pdsch_SysInfoList_SFN_r7_Type.write(writer, value.get_pdsch_SysInfoList_SFN_r7());
   _sccpch_SystemInformation_MBMS_Type.write(writer, value.get_sccpch_SystemInformation_MBMS());
   _sCCPCH_SystemInformationList_r7_Type.write(writer, value.get_sCCPCH_SystemInformationList_r7());

   writer.writeSequenceEnd();
}


void SysInfoType6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PICH_PowerOffset::ValueType v;
      _pich_PowerOffset_Type.read(reader, v);
      value.set_pich_PowerOffset(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_aich-PowerOffset_INTERNAL_asn1__generated__AICH_PowerOffset_dummy_INTERNAL_asn1__generated__CSICH_PowerOffset_tdd_INTERNAL__SequenceType_pusch-SysInfoList-SFN_INTERNAL_asn1__generated__PUSCH_SysInfoList_SFN_pdsch-SysInfoList-SFN_INTERNAL_asn1__generated__PDSCH_SysInfoList_SFN_openLoopPowerControl-TDD_INTERNAL_asn1__generated__OpenLoopPowerControl_TDD::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::PrimaryCCPCH_Info::ValueType v;
      _primaryCCPCH_Info_Type.read(reader, v);
      value.set_primaryCCPCH_Info(v);
   }
   {
      asn1::generated::PRACH_SystemInformationList::ValueType v;
      _prach_SystemInformationList_Type.read(reader, v);
      value.set_prach_SystemInformationList(v);
   }
   {
      asn1::generated::SCCPCH_SystemInformationList::ValueType v;
      _sCCPCH_SystemInformationList_Type.read(reader, v);
      value.set_sCCPCH_SystemInformationList(v);
   }
   {
      asn1::generated::CBS_DRX_Level1Information::ValueType v;
      _cbs_DRX_Level1Information_Type.read(reader, v);
      value.set_cbs_DRX_Level1Information(v);
   }
   {
      _INTERNAL__SequenceType_sysInfoType6-v4b0ext_INTERNAL_asn1__generated__SysInfoType6_v4b0ext_IEs_v590NonCriticalExtensions_INTERNAL__SequenceType_sysInfoType6-v590ext_INTERNAL_asn1__generated__SysInfoType6_v590ext_IEs_v650nonCriticalExtensions_INTERNAL__SequenceType_sysInfoType6-v650ext_INTERNAL_asn1__generated__SysInfoType6_v650ext_IEs_v690nonCriticalExtensions_INTERNAL__SequenceType_sysInfoType6-v690ext_INTERNAL_asn1__generated__SysInfoType6_v690ext_IEs_v7xyNonCriticalExtensions_INTERNAL__SequenceType_sysInfoType6-v7xyext_INTERNAL_asn1__generated__SysInfoType6_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v4b0NonCriticalExtensions_Type.read(reader, v);
      value.set_v4b0NonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pich_PowerOffset_Type.write(writer, value.get_pich_PowerOffset());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _primaryCCPCH_Info_Type.write(writer, value.get_primaryCCPCH_Info());
   _prach_SystemInformationList_Type.write(writer, value.get_prach_SystemInformationList());
   _sCCPCH_SystemInformationList_Type.write(writer, value.get_sCCPCH_SystemInformationList());
   _cbs_DRX_Level1Information_Type.write(writer, value.get_cbs_DRX_Level1Information());
   _v4b0NonCriticalExtensions_Type.write(writer, value.get_v4b0NonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType6_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::OpenLoopPowerControl_IPDL_TDD_r4::ValueType v;
      _openLoopPowerControl_IPDL_TDD_Type.read(reader, v);
      value.set_openLoopPowerControl_IPDL_TDD(v);
   }
   {
      asn1::generated::PRACH_SystemInformationList_LCR_r4::ValueType v;
      _prach_SystemInformationList_LCR_r4_Type.read(reader, v);
      value.set_prach_SystemInformationList_LCR_r4(v);
   }
   {
      _INTERNAL__SequenceType_pusch-SysInfoList-SFN_INTERNAL_asn1__generated__PUSCH_SysInfoList_SFN_LCR_r4_pdsch-SysInfoList-SFN_INTERNAL_asn1__generated__PDSCH_SysInfoList_SFN_LCR_r4_pCCPCH-LCR-Extensions_INTERNAL_asn1__generated__PrimaryCCPCH_Info_LCR_r4_ext_sCCPCH-LCR-ExtensionsList_INTERNAL_asn1__generated__SCCPCH_SystemInformationList_LCR_r4_ext::ValueType v;
      _tdd128SpecificInfo_Type.read(reader, v);
      value.set_tdd128SpecificInfo(v);
   }
   {
      asn1::generated::RadioFrequencyBandFDD::ValueType v;
      _frequencyBandIndicator_Type.read(reader, v);
      value.set_frequencyBandIndicator(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType6_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _openLoopPowerControl_IPDL_TDD_Type.write(writer, value.get_openLoopPowerControl_IPDL_TDD());
   _prach_SystemInformationList_LCR_r4_Type.write(writer, value.get_prach_SystemInformationList_LCR_r4());
   _tdd128SpecificInfo_Type.write(writer, value.get_tdd128SpecificInfo());
   _frequencyBandIndicator_Type.write(writer, value.get_frequencyBandIndicator());

   writer.writeSequenceEnd();
}


void SysInfoType6_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__SequenceType_pusch-SysInfoList-SFN_INTERNAL_asn1__generated__PUSCH_SysInfoList_SFN_HCR_r5_pdsch-SysInfoList-SFN_INTERNAL_asn1__generated__PDSCH_SysInfoList_SFN_HCR_r5::ValueType v;
      _hcr_r5_SpecificInfo_Type.read(reader, v);
      value.set_hcr_r5_SpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType6_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _hcr_r5_SpecificInfo_Type.write(writer, value.get_hcr_r5_SpecificInfo());

   writer.writeSequenceEnd();
}


void SysInfoType6_v650ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RadioFrequencyBandFDD2::ValueType v;
      _frequencyBandIndicator2_Type.read(reader, v);
      value.set_frequencyBandIndicator2(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType6_v650ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _frequencyBandIndicator2_Type.write(writer, value.get_frequencyBandIndicator2());

   writer.writeSequenceEnd();
}


void SysInfoType6_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::AdditionalPRACH_TF_and_TFCS_CCCH_List::ValueType v;
      _additionalPRACH_TF_and_TFCS_CCCH_List_Type.read(reader, v);
      value.set_additionalPRACH_TF_and_TFCS_CCCH_List(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType6_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _additionalPRACH_TF_and_TFCS_CCCH_List_Type.write(writer, value.get_additionalPRACH_TF_and_TFCS_CCCH_List());

   writer.writeSequenceEnd();
}


void SysInfoType6_v7xyext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PUSCH_SysInfoList_SFN_VHCR::ValueType v;
      _pusch_SysInfoList_SFN_VHCR_Type.read(reader, v);
      value.set_pusch_SysInfoList_SFN_VHCR(v);
   }
   {
      asn1::generated::PDSCH_SysInfoList_r7::ValueType v;
      _pdsch_SysInfoList_SFN_r7_Type.read(reader, v);
      value.set_pdsch_SysInfoList_SFN_r7(v);
   }
   {
      asn1::generated::PRACH_SystemInformationList_r7::ValueType v;
      _prach_SystemInformationList_r7_Type.read(reader, v);
      value.set_prach_SystemInformationList_r7(v);
   }
   {
      asn1::generated::SCCPCH_SystemInformationList_r7::ValueType v;
      _sCCPCH_SystemInformationList_r7_Type.read(reader, v);
      value.set_sCCPCH_SystemInformationList_r7(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType6_v7xyext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pusch_SysInfoList_SFN_VHCR_Type.write(writer, value.get_pusch_SysInfoList_SFN_VHCR());
   _pdsch_SysInfoList_SFN_r7_Type.write(writer, value.get_pdsch_SysInfoList_SFN_r7());
   _prach_SystemInformationList_r7_Type.write(writer, value.get_prach_SystemInformationList_r7());
   _sCCPCH_SystemInformationList_r7_Type.write(writer, value.get_sCCPCH_SystemInformationList_r7());

   writer.writeSequenceEnd();
}


void SysInfoType7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_ul-Interference_INTERNAL_asn1__generated__UL_Interference_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::DynamicPersistenceLevelList::ValueType v;
      _prach_Information_SIB5_List_Type.read(reader, v);
      value.set_prach_Information_SIB5_List(v);
   }
   {
      asn1::generated::DynamicPersistenceLevelList::ValueType v;
      _prach_Information_SIB6_List_Type.read(reader, v);
      value.set_prach_Information_SIB6_List(v);
   }
   {
      asn1::generated::ExpirationTimeFactor::ValueType v;
      _expirationTimeFactor_Type.read(reader, v);
      value.set_expirationTimeFactor(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _prach_Information_SIB5_List_Type.write(writer, value.get_prach_Information_SIB5_List());
   _prach_Information_SIB6_List_Type.write(writer, value.get_prach_Information_SIB6_List());
   _expirationTimeFactor_Type.write(writer, value.get_expirationTimeFactor());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType8::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CPCH_Parameters::ValueType v;
      _dummy1_Type.read(reader, v);
      value.set_dummy1(v);
   }
   {
      asn1::generated::CPCH_SetInfoList::ValueType v;
      _dummy2_Type.read(reader, v);
      value.set_dummy2(v);
   }
   {
      asn1::generated::CSICH_PowerOffset::ValueType v;
      _dummy3_Type.read(reader, v);
      value.set_dummy3(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType8::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dummy1_Type.write(writer, value.get_dummy1());
   _dummy2_Type.write(writer, value.get_dummy2());
   _dummy3_Type.write(writer, value.get_dummy3());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType9::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CPCH_PersistenceLevelsList::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType9::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dummy_Type.write(writer, value.get_dummy());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType10::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::DRAC_SysInfoList::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType10::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dummy_Type.write(writer, value.get_dummy());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType11::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _sib12indicator_Type.read(reader, v);
      value.set_sib12indicator(v);
   }
   {
      asn1::generated::FACH_MeasurementOccasionInfo::ValueType v;
      _fach_MeasurementOccasionInfo_Type.read(reader, v);
      value.set_fach_MeasurementOccasionInfo(v);
   }
   {
      asn1::generated::MeasurementControlSysInfo::ValueType v;
      _measurementControlSysInfo_Type.read(reader, v);
      value.set_measurementControlSysInfo(v);
   }
   {
      _INTERNAL__SequenceType_sysInfoType11-v4b0ext_INTERNAL_asn1__generated__SysInfoType11_v4b0ext_IEs_v590NonCriticalExtension_INTERNAL__SequenceType_sysInfoType11-v590ext_INTERNAL_asn1__generated__SysInfoType11_v590ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_sysInfoType11-v690ext_INTERNAL_asn1__generated__SysInfoType11_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v4b0NonCriticalExtensions_Type.read(reader, v);
      value.set_v4b0NonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType11::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sib12indicator_Type.write(writer, value.get_sib12indicator());
   _fach_MeasurementOccasionInfo_Type.write(writer, value.get_fach_MeasurementOccasionInfo());
   _measurementControlSysInfo_Type.write(writer, value.get_measurementControlSysInfo());
   _v4b0NonCriticalExtensions_Type.write(writer, value.get_v4b0NonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType11_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::FACH_MeasurementOccasionInfo_LCR_r4_ext::ValueType v;
      _fach_MeasurementOccasionInfo_LCR_Ext_Type.read(reader, v);
      value.set_fach_MeasurementOccasionInfo_LCR_Ext(v);
   }
   {
      asn1::generated::MeasurementControlSysInfo_LCR_r4_ext::ValueType v;
      _measurementControlSysInfo_LCR_Type.read(reader, v);
      value.set_measurementControlSysInfo_LCR(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType11_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _fach_MeasurementOccasionInfo_LCR_Ext_Type.write(writer, value.get_fach_MeasurementOccasionInfo_LCR_Ext());
   _measurementControlSysInfo_LCR_Type.write(writer, value.get_measurementControlSysInfo_LCR());

   writer.writeSequenceEnd();
}


void SysInfoType11_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__CellSelectReselectInfo_v590ext::ValueType v;
      _newIntraFrequencyCellInfoList_v590ext_Type.read(reader, v);
      value.set_newIntraFrequencyCellInfoList_v590ext(v);
   }
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__CellSelectReselectInfo_v590ext::ValueType v;
      _newInterFrequencyCellInfoList_v590ext_Type.read(reader, v);
      value.set_newInterFrequencyCellInfoList_v590ext(v);
   }
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__CellSelectReselectInfo_v590ext::ValueType v;
      _newInterRATCellInfoList_v590ext_Type.read(reader, v);
      value.set_newInterRATCellInfoList_v590ext(v);
   }
   {
      asn1::generated::Intra_FreqEventCriteriaList_v590ext::ValueType v;
      _intraFreqEventCriteriaList_v590ext_Type.read(reader, v);
      value.set_intraFreqEventCriteriaList_v590ext(v);
   }
   {
      asn1::generated::IntraFreqReportingCriteria_1b_r5::ValueType v;
      _intraFreqReportingCriteria_1b_r5_Type.read(reader, v);
      value.set_intraFreqReportingCriteria_1b_r5(v);
   }
   {
      asn1::generated::IntraFreqEvent_1d_r5::ValueType v;
      _intraFreqEvent_1d_r5_Type.read(reader, v);
      value.set_intraFreqEvent_1d_r5(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType11_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _newIntraFrequencyCellInfoList_v590ext_Type.write(writer, value.get_newIntraFrequencyCellInfoList_v590ext());
   _newInterFrequencyCellInfoList_v590ext_Type.write(writer, value.get_newInterFrequencyCellInfoList_v590ext());
   _newInterRATCellInfoList_v590ext_Type.write(writer, value.get_newInterRATCellInfoList_v590ext());
   _intraFreqEventCriteriaList_v590ext_Type.write(writer, value.get_intraFreqEventCriteriaList_v590ext());
   _intraFreqReportingCriteria_1b_r5_Type.write(writer, value.get_intraFreqReportingCriteria_1b_r5());
   _intraFreqEvent_1d_r5_Type.write(writer, value.get_intraFreqEvent_1d_r5());

   writer.writeSequenceEnd();
}


void SysInfoType11_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqRACHReportingInfo::ValueType v;
      _interFreqRACHReportingInfo_Type.read(reader, v);
      value.set_interFreqRACHReportingInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType11_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqRACHReportingInfo_Type.write(writer, value.get_interFreqRACHReportingInfo());

   writer.writeSequenceEnd();
}


void SysInfoType12::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::FACH_MeasurementOccasionInfo::ValueType v;
      _fach_MeasurementOccasionInfo_Type.read(reader, v);
      value.set_fach_MeasurementOccasionInfo(v);
   }
   {
      asn1::generated::MeasurementControlSysInfo::ValueType v;
      _measurementControlSysInfo_Type.read(reader, v);
      value.set_measurementControlSysInfo(v);
   }
   {
      _INTERNAL__SequenceType_sysInfoType12-v4b0ext_INTERNAL_asn1__generated__SysInfoType12_v4b0ext_IEs_v590NonCriticalExtension_INTERNAL__SequenceType_sysInfoType12-v590ext_INTERNAL_asn1__generated__SysInfoType12_v590ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_sysInfoType12-v690ext_INTERNAL_asn1__generated__SysInfoType12_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v4b0NonCriticalExtensions_Type.read(reader, v);
      value.set_v4b0NonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType12::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _fach_MeasurementOccasionInfo_Type.write(writer, value.get_fach_MeasurementOccasionInfo());
   _measurementControlSysInfo_Type.write(writer, value.get_measurementControlSysInfo());
   _v4b0NonCriticalExtensions_Type.write(writer, value.get_v4b0NonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType12_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::FACH_MeasurementOccasionInfo_LCR_r4_ext::ValueType v;
      _fach_MeasurementOccasionInfo_LCR_Ext_Type.read(reader, v);
      value.set_fach_MeasurementOccasionInfo_LCR_Ext(v);
   }
   {
      asn1::generated::MeasurementControlSysInfo_LCR_r4_ext::ValueType v;
      _measurementControlSysInfo_LCR_Type.read(reader, v);
      value.set_measurementControlSysInfo_LCR(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType12_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _fach_MeasurementOccasionInfo_LCR_Ext_Type.write(writer, value.get_fach_MeasurementOccasionInfo_LCR_Ext());
   _measurementControlSysInfo_LCR_Type.write(writer, value.get_measurementControlSysInfo_LCR());

   writer.writeSequenceEnd();
}


void SysInfoType12_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__CellSelectReselectInfo_v590ext::ValueType v;
      _newIntraFrequencyCellInfoList_v590ext_Type.read(reader, v);
      value.set_newIntraFrequencyCellInfoList_v590ext(v);
   }
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__CellSelectReselectInfo_v590ext::ValueType v;
      _newInterFrequencyCellInfoList_v590ext_Type.read(reader, v);
      value.set_newInterFrequencyCellInfoList_v590ext(v);
   }
   {
      _INTERNAL__SequenceOfType_INTERNAL_asn1__generated__CellSelectReselectInfo_v590ext::ValueType v;
      _newInterRATCellInfoList_v590ext_Type.read(reader, v);
      value.set_newInterRATCellInfoList_v590ext(v);
   }
   {
      asn1::generated::Intra_FreqEventCriteriaList_v590ext::ValueType v;
      _intraFreqEventCriteriaList_v590ext_Type.read(reader, v);
      value.set_intraFreqEventCriteriaList_v590ext(v);
   }
   {
      asn1::generated::IntraFreqReportingCriteria_1b_r5::ValueType v;
      _intraFreqReportingCriteria_1b_r5_Type.read(reader, v);
      value.set_intraFreqReportingCriteria_1b_r5(v);
   }
   {
      asn1::generated::IntraFreqEvent_1d_r5::ValueType v;
      _intraFreqEvent_1d_r5_Type.read(reader, v);
      value.set_intraFreqEvent_1d_r5(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType12_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _newIntraFrequencyCellInfoList_v590ext_Type.write(writer, value.get_newIntraFrequencyCellInfoList_v590ext());
   _newInterFrequencyCellInfoList_v590ext_Type.write(writer, value.get_newInterFrequencyCellInfoList_v590ext());
   _newInterRATCellInfoList_v590ext_Type.write(writer, value.get_newInterRATCellInfoList_v590ext());
   _intraFreqEventCriteriaList_v590ext_Type.write(writer, value.get_intraFreqEventCriteriaList_v590ext());
   _intraFreqReportingCriteria_1b_r5_Type.write(writer, value.get_intraFreqReportingCriteria_1b_r5());
   _intraFreqEvent_1d_r5_Type.write(writer, value.get_intraFreqEvent_1d_r5());

   writer.writeSequenceEnd();
}


void SysInfoType12_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterFreqRACHReportingInfo::ValueType v;
      _interFreqRACHReportingInfo_Type.read(reader, v);
      value.set_interFreqRACHReportingInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType12_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interFreqRACHReportingInfo_Type.write(writer, value.get_interFreqRACHReportingInfo());

   writer.writeSequenceEnd();
}


void SysInfoType13::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CN_DomainSysInfoList::ValueType v;
      _cn_DomainSysInfoList_Type.read(reader, v);
      value.set_cn_DomainSysInfoList(v);
   }
   {
      asn1::generated::UE_IdleTimersAndConstants::ValueType v;
      _ue_IdleTimersAndConstants_Type.read(reader, v);
      value.set_ue_IdleTimersAndConstants(v);
   }
   {
      asn1::generated::CapabilityUpdateRequirement::ValueType v;
      _capabilityUpdateRequirement_Type.read(reader, v);
      value.set_capabilityUpdateRequirement(v);
   }
   {
      _INTERNAL__SequenceType_sysInfoType13-v3a0ext_INTERNAL_asn1__generated__SysInfoType13_v3a0ext_IEs_v4b0NonCriticalExtensions_INTERNAL__SequenceType_sysInfoType13-v4b0ext_INTERNAL_asn1__generated__SysInfoType13_v4b0ext_IEs_v7xyNonCriticalExtensions_INTERNAL__SequenceType_sysInfoType13-v7xyext_INTERNAL_asn1__generated__SysInfoType13_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v3a0NonCriticalExtensions_Type.read(reader, v);
      value.set_v3a0NonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType13::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cn_DomainSysInfoList_Type.write(writer, value.get_cn_DomainSysInfoList());
   _ue_IdleTimersAndConstants_Type.write(writer, value.get_ue_IdleTimersAndConstants());
   _capabilityUpdateRequirement_Type.write(writer, value.get_capabilityUpdateRequirement());
   _v3a0NonCriticalExtensions_Type.write(writer, value.get_v3a0NonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType13_v3a0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_IdleTimersAndConstants_v3a0ext::ValueType v;
      _ue_IdleTimersAndConstants_v3a0ext_Type.read(reader, v);
      value.set_ue_IdleTimersAndConstants_v3a0ext(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType13_v3a0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_IdleTimersAndConstants_v3a0ext_Type.write(writer, value.get_ue_IdleTimersAndConstants_v3a0ext());

   writer.writeSequenceEnd();
}


void SysInfoType13_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CapabilityUpdateRequirement_r4_ext::ValueType v;
      _capabilityUpdateRequirement_r4Ext_Type.read(reader, v);
      value.set_capabilityUpdateRequirement_r4Ext(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType13_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _capabilityUpdateRequirement_r4Ext_Type.write(writer, value.get_capabilityUpdateRequirement_r4Ext());

   writer.writeSequenceEnd();
}


void SysInfoType13_v7xyext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CapabilityUpdateRequirement_r7_ext::ValueType v;
      _capabilityUpdateRequirement_r7Ext_Type.read(reader, v);
      value.set_capabilityUpdateRequirement_r7Ext(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType13_v7xyext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _capabilityUpdateRequirement_r7Ext_Type.write(writer, value.get_capabilityUpdateRequirement_r7Ext());

   writer.writeSequenceEnd();
}


void SysInfoType13_1::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ANSI_41_RAND_Information::ValueType v;
      _ansi_41_RAND_Information_Type.read(reader, v);
      value.set_ansi_41_RAND_Information(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType13_1::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ansi_41_RAND_Information_Type.write(writer, value.get_ansi_41_RAND_Information());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType13_2::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ANSI_41_UserZoneID_Information::ValueType v;
      _ansi_41_UserZoneID_Information_Type.read(reader, v);
      value.set_ansi_41_UserZoneID_Information(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType13_2::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ansi_41_UserZoneID_Information_Type.write(writer, value.get_ansi_41_UserZoneID_Information());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType13_3::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ANSI_41_PrivateNeighbourListInfo::ValueType v;
      _ansi_41_PrivateNeighbourListInfo_Type.read(reader, v);
      value.set_ansi_41_PrivateNeighbourListInfo(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType13_3::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ansi_41_PrivateNeighbourListInfo_Type.write(writer, value.get_ansi_41_PrivateNeighbourListInfo());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType13_4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::ANSI_41_GlobalServiceRedirectInfo::ValueType v;
      _ansi_41_GlobalServiceRedirectInfo_Type.read(reader, v);
      value.set_ansi_41_GlobalServiceRedirectInfo(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType13_4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ansi_41_GlobalServiceRedirectInfo_Type.write(writer, value.get_ansi_41_GlobalServiceRedirectInfo());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType14::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::IndividualTS_InterferenceList::ValueType v;
      _individualTS_InterferenceList_Type.read(reader, v);
      value.set_individualTS_InterferenceList(v);
   }
   {
      asn1::generated::ExpirationTimeFactor::ValueType v;
      _expirationTimeFactor_Type.read(reader, v);
      value.set_expirationTimeFactor(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType14::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _individualTS_InterferenceList_Type.write(writer, value.get_individualTS_InterferenceList());
   _expirationTimeFactor_Type.write(writer, value.get_expirationTimeFactor());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType15::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_CipherParameters::ValueType v;
      _ue_positioning_GPS_CipherParameters_Type.read(reader, v);
      value.set_ue_positioning_GPS_CipherParameters(v);
   }
   {
      asn1::generated::ReferenceLocation::ValueType v;
      _ue_positioning_GPS_ReferenceLocation_Type.read(reader, v);
      value.set_ue_positioning_GPS_ReferenceLocation(v);
   }
   {
      asn1::generated::UE_Positioning_GPS_ReferenceTime::ValueType v;
      _ue_positioning_GPS_ReferenceTime_Type.read(reader, v);
      value.set_ue_positioning_GPS_ReferenceTime(v);
   }
   {
      asn1::generated::BadSatList::ValueType v;
      _ue_positioning_GPS_Real_timeIntegrity_Type.read(reader, v);
      value.set_ue_positioning_GPS_Real_timeIntegrity(v);
   }
   {
      _INTERNAL__SequenceType_sysInfoType15-v4b0ext_INTERNAL_asn1__generated__SysInfoType15_v4b0ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v4b0NonCriticalExtensions_Type.read(reader, v);
      value.set_v4b0NonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType15::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_positioning_GPS_CipherParameters_Type.write(writer, value.get_ue_positioning_GPS_CipherParameters());
   _ue_positioning_GPS_ReferenceLocation_Type.write(writer, value.get_ue_positioning_GPS_ReferenceLocation());
   _ue_positioning_GPS_ReferenceTime_Type.write(writer, value.get_ue_positioning_GPS_ReferenceTime());
   _ue_positioning_GPS_Real_timeIntegrity_Type.write(writer, value.get_ue_positioning_GPS_Real_timeIntegrity());
   _v4b0NonCriticalExtensions_Type.write(writer, value.get_v4b0NonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType15_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_IPDL_Parameters_TDD_r4_ext::ValueType v;
      _up_Ipdl_Parameters_TDD_Type.read(reader, v);
      value.set_up_Ipdl_Parameters_TDD(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType15_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _up_Ipdl_Parameters_TDD_Type.write(writer, value.get_up_Ipdl_Parameters_TDD());

   writer.writeSequenceEnd();
}


void SysInfoType15_1::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_GPS_DGPS_Corrections::ValueType v;
      _ue_positioning_GPS_DGPS_Corrections_Type.read(reader, v);
      value.set_ue_positioning_GPS_DGPS_Corrections(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType15_1::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_positioning_GPS_DGPS_Corrections_Type.write(writer, value.get_ue_positioning_GPS_DGPS_Corrections());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType15_2::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _transmissionTOW_Type.read(reader, v);
      value.set_transmissionTOW(v);
   }
   {
      asn1::generated::SatID::ValueType v;
      _satID_Type.read(reader, v);
      value.set_satID(v);
   }
   {
      asn1::generated::EphemerisParameter::ValueType v;
      _ephemerisParameter_Type.read(reader, v);
      value.set_ephemerisParameter(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType15_2::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _transmissionTOW_Type.write(writer, value.get_transmissionTOW());
   _satID_Type.write(writer, value.get_satID());
   _ephemerisParameter_Type.write(writer, value.get_ephemerisParameter());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType15_3::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _transmissionTOW_Type.read(reader, v);
      value.set_transmissionTOW(v);
   }
   {
      asn1::generated::UE_Positioning_GPS_Almanac::ValueType v;
      _ue_positioning_GPS_Almanac_Type.read(reader, v);
      value.set_ue_positioning_GPS_Almanac(v);
   }
   {
      asn1::generated::UE_Positioning_GPS_IonosphericModel::ValueType v;
      _ue_positioning_GPS_IonosphericModel_Type.read(reader, v);
      value.set_ue_positioning_GPS_IonosphericModel(v);
   }
   {
      asn1::generated::UE_Positioning_GPS_UTC_Model::ValueType v;
      _ue_positioning_GPS_UTC_Model_Type.read(reader, v);
      value.set_ue_positioning_GPS_UTC_Model(v);
   }
   {
      _INTERNAL_::ValueType v;
      _satMask_Type.read(reader, v);
      value.set_satMask(v);
   }
   {
      _INTERNAL_::ValueType v;
      _lsbTOW_Type.read(reader, v);
      value.set_lsbTOW(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType15_3::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _transmissionTOW_Type.write(writer, value.get_transmissionTOW());
   _ue_positioning_GPS_Almanac_Type.write(writer, value.get_ue_positioning_GPS_Almanac());
   _ue_positioning_GPS_IonosphericModel_Type.write(writer, value.get_ue_positioning_GPS_IonosphericModel());
   _ue_positioning_GPS_UTC_Model_Type.write(writer, value.get_ue_positioning_GPS_UTC_Model());
   _satMask_Type.write(writer, value.get_satMask());
   _lsbTOW_Type.write(writer, value.get_lsbTOW());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType15_4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_CipherParameters::ValueType v;
      _ue_positioning_OTDOA_CipherParameters_Type.read(reader, v);
      value.set_ue_positioning_OTDOA_CipherParameters(v);
   }
   {
      asn1::generated::UE_Positioning_OTDOA_AssistanceData::ValueType v;
      _ue_positioning_OTDOA_AssistanceData_Type.read(reader, v);
      value.set_ue_positioning_OTDOA_AssistanceData(v);
   }
   {
      _INTERNAL__SequenceType_sysInfoType15-4-v3a0ext_INTERNAL_asn1__generated__SysInfoType15_4_v3a0ext_v4b0NonCriticalExtensions_INTERNAL__SequenceType_sysInfoType15-4-v4b0ext_INTERNAL_asn1__generated__SysInfoType15_4_v4b0ext_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v3a0NonCriticalExtensions_Type.read(reader, v);
      value.set_v3a0NonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType15_4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_positioning_OTDOA_CipherParameters_Type.write(writer, value.get_ue_positioning_OTDOA_CipherParameters());
   _ue_positioning_OTDOA_AssistanceData_Type.write(writer, value.get_ue_positioning_OTDOA_AssistanceData());
   _v3a0NonCriticalExtensions_Type.write(writer, value.get_v3a0NonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType15_4_v3a0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SFN_Offset_Validity::ValueType v;
      _sfn_Offset_Validity_Type.read(reader, v);
      value.set_sfn_Offset_Validity(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType15_4_v3a0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sfn_Offset_Validity_Type.write(writer, value.get_sfn_Offset_Validity());

   writer.writeSequenceEnd();
}


void SysInfoType15_4_v4b0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_OTDOA_AssistanceData_r4ext::ValueType v;
      _ue_Positioning_OTDOA_AssistanceData_r4ext_Type.read(reader, v);
      value.set_ue_Positioning_OTDOA_AssistanceData_r4ext(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType15_4_v4b0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_Positioning_OTDOA_AssistanceData_r4ext_Type.write(writer, value.get_ue_Positioning_OTDOA_AssistanceData_r4ext());

   writer.writeSequenceEnd();
}


void SysInfoType15_5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_Positioning_OTDOA_AssistanceData_UEB::ValueType v;
      _ue_positioning_OTDOA_AssistanceData_UEB_Type.read(reader, v);
      value.set_ue_positioning_OTDOA_AssistanceData_UEB(v);
   }
   {
      _INTERNAL__SequenceType_sysInfoType15-5-v3a0ext_INTERNAL_asn1__generated__SysInfoType15_5_v3a0ext_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v3a0NonCriticalExtensions_Type.read(reader, v);
      value.set_v3a0NonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType15_5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_positioning_OTDOA_AssistanceData_UEB_Type.write(writer, value.get_ue_positioning_OTDOA_AssistanceData_UEB());
   _v3a0NonCriticalExtensions_Type.write(writer, value.get_v3a0NonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType15_5_v3a0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SFN_Offset_Validity::ValueType v;
      _sfn_Offset_Validity_Type.read(reader, v);
      value.set_sfn_Offset_Validity(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType15_5_v3a0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sfn_Offset_Validity_Type.write(writer, value.get_sfn_Offset_Validity());

   writer.writeSequenceEnd();
}


void SysInfoType16::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PreDefRadioConfiguration::ValueType v;
      _preDefinedRadioConfiguration_Type.read(reader, v);
      value.set_preDefinedRadioConfiguration(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType16::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _preDefinedRadioConfiguration_Type.write(writer, value.get_preDefinedRadioConfiguration());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType17::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PUSCH_SysInfoList::ValueType v;
      _pusch_SysInfoList_Type.read(reader, v);
      value.set_pusch_SysInfoList(v);
   }
   {
      asn1::generated::PDSCH_SysInfoList::ValueType v;
      _pdsch_SysInfoList_Type.read(reader, v);
      value.set_pdsch_SysInfoList(v);
   }
   {
      _INTERNAL__SequenceType_sysInfoType17-v4b0ext_INTERNAL_asn1__generated__SysInfoType17_v4b0ext_IEs_v590NonCriticalExtensions_INTERNAL__SequenceType_sysInfoType17-v590ext_INTERNAL_asn1__generated__SysInfoType17_v590ext_IEs_v7xyNonCriticalExtensions_INTERNAL__SequenceType_sysInfoType17-v7xyext_INTERNAL_asn1__generated__SysInfoType17_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _v4b0NonCriticalExtensions_Type.read(reader, v);
      value.set_v4b0NonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType17::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pusch_SysInfoList_Type.write(writer, value.get_pusch_SysInfoList());
   _pdsch_SysInfoList_Type.write(writer, value.get_pdsch_SysInfoList());
   _v4b0NonCriticalExtensions_Type.write(writer, value.get_v4b0NonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoType17_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__SequenceType_pusch-SysInfoList_INTERNAL_asn1__generated__PUSCH_SysInfoList_LCR_r4_pdsch-SysInfoList_INTERNAL_asn1__generated__PDSCH_SysInfoList_LCR_r4::ValueType v;
      _tdd128SpecificInfo_Type.read(reader, v);
      value.set_tdd128SpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType17_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tdd128SpecificInfo_Type.write(writer, value.get_tdd128SpecificInfo());

   writer.writeSequenceEnd();
}


void SysInfoType17_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__SequenceType_pusch-SysInfoList_INTERNAL_asn1__generated__PUSCH_SysInfoList_HCR_r5_pdsch-SysInfoList_INTERNAL_asn1__generated__PDSCH_SysInfoList_HCR_r5::ValueType v;
      _hcr_r5_SpecificInfo_Type.read(reader, v);
      value.set_hcr_r5_SpecificInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType17_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _hcr_r5_SpecificInfo_Type.write(writer, value.get_hcr_r5_SpecificInfo());

   writer.writeSequenceEnd();
}


void SysInfoType17_v7xyext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PUSCH_SysInfoList_SFN_VHCR::ValueType v;
      _pusch_SysInfoList_SFN_VHCR_Type.read(reader, v);
      value.set_pusch_SysInfoList_SFN_VHCR(v);
   }
   {
      asn1::generated::PDSCH_SysInfoList_r7::ValueType v;
      _pdsch_SysInfoList_r7_Type.read(reader, v);
      value.set_pdsch_SysInfoList_r7(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType17_v7xyext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _pusch_SysInfoList_SFN_VHCR_Type.write(writer, value.get_pusch_SysInfoList_SFN_VHCR());
   _pdsch_SysInfoList_r7_Type.write(writer, value.get_pdsch_SysInfoList_r7());

   writer.writeSequenceEnd();
}


void SysInfoType18::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PLMNIdentitiesOfNeighbourCells::ValueType v;
      _idleModePLMNIdentities_Type.read(reader, v);
      value.set_idleModePLMNIdentities(v);
   }
   {
      asn1::generated::PLMNIdentitiesOfNeighbourCells::ValueType v;
      _connectedModePLMNIdentities_Type.read(reader, v);
      value.set_connectedModePLMNIdentities(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoType18::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _idleModePLMNIdentities_Type.write(writer, value.get_idleModePLMNIdentities());
   _connectedModePLMNIdentities_Type.write(writer, value.get_connectedModePLMNIdentities());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoTypeSB1::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SIB_ReferenceList::ValueType v;
      _sib_ReferenceList_Type.read(reader, v);
      value.set_sib_ReferenceList(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoTypeSB1::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sib_ReferenceList_Type.write(writer, value.get_sib_ReferenceList());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void SysInfoTypeSB2::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::SIB_ReferenceList::ValueType v;
      _sib_ReferenceList_Type.read(reader, v);
      value.set_sib_ReferenceList(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtensions_Type.read(reader, v);
      value.set_nonCriticalExtensions(v);
   }

   reader.readSequenceEnd(*this);
}

void SysInfoTypeSB2::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sib_ReferenceList_Type.write(writer, value.get_sib_ReferenceList());
   _nonCriticalExtensions_Type.write(writer, value.get_nonCriticalExtensions());

   writer.writeSequenceEnd();
}


void MBMS_CommonRBInformation_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_CommonRBIdentity::ValueType v;
      _commonRBIdentity_Type.read(reader, v);
      value.set_commonRBIdentity(v);
   }
   {
      asn1::generated::PDCP_Info_r4::ValueType v;
      _pdcp_Info_Type.read(reader, v);
      value.set_pdcp_Info(v);
   }
   {
      asn1::generated::RLC_Info_MTCH_r6::ValueType v;
      _rlc_Info_Type.read(reader, v);
      value.set_rlc_Info(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_CommonRBInformation_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _commonRBIdentity_Type.write(writer, value.get_commonRBIdentity());
   _pdcp_Info_Type.write(writer, value.get_pdcp_Info());
   _rlc_Info_Type.write(writer, value.get_rlc_Info());

   writer.writeSequenceEnd();
}


void MBMS_ConnectedModeCountingScope::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _countingForUraPCH_Type.read(reader, v);
      value.set_countingForUraPCH(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _countingForCellPCH_Type.read(reader, v);
      value.set_countingForCellPCH(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _countingForCellFACH_Type.read(reader, v);
      value.set_countingForCellFACH(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_ConnectedModeCountingScope::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _countingForUraPCH_Type.write(writer, value.get_countingForUraPCH());
   _countingForCellPCH_Type.write(writer, value.get_countingForCellPCH());
   _countingForCellFACH_Type.write(writer, value.get_countingForCellFACH());

   writer.writeSequenceEnd();
}


void MBMS_CurrentCell_SCCPCH_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_SCCPCHIdentity::ValueType v;
      _sccpchIdentity_Type.read(reader, v);
      value.set_sccpchIdentity(v);
   }
   {
      asn1::generated::MBMS_CommonPhyChIdentity::ValueType v;
      _secondaryCCPCH_Info_Type.read(reader, v);
      value.set_secondaryCCPCH_Info(v);
   }
   {
      asn1::generated::MBMS_SoftComb_TimingOffset::ValueType v;
      _softComb_TimingOffset_Type.read(reader, v);
      value.set_softComb_TimingOffset(v);
   }
   {
      asn1::generated::MBMS_CommonCCTrChIdentity::ValueType v;
      _transpCh_InfoCommonForAllTrCh_Type.read(reader, v);
      value.set_transpCh_InfoCommonForAllTrCh(v);
   }
   {
      asn1::generated::MBMS_TrCHInformation_CurrList::ValueType v;
      _transpCHInformation_Type.read(reader, v);
      value.set_transpCHInformation(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_CurrentCell_SCCPCH_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sccpchIdentity_Type.write(writer, value.get_sccpchIdentity());
   _secondaryCCPCH_Info_Type.write(writer, value.get_secondaryCCPCH_Info());
   _softComb_TimingOffset_Type.write(writer, value.get_softComb_TimingOffset());
   _transpCh_InfoCommonForAllTrCh_Type.write(writer, value.get_transpCh_InfoCommonForAllTrCh());
   _transpCHInformation_Type.write(writer, value.get_transpCHInformation());

   writer.writeSequenceEnd();
}


void MBMS_JoinedInformation_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::P_TMSI_GSM_MAP::ValueType v;
      _p_TMSI_Type.read(reader, v);
      value.set_p_TMSI(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_JoinedInformation_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _p_TMSI_Type.write(writer, value.get_p_TMSI());

   writer.writeSequenceEnd();
}


void MBMS_L1CombiningSchedule_32::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _cycleOffset_Type.read(reader, v);
      value.set_cycleOffset(v);
   }
   {
      _INTERNAL__SequenceOfType_INTERNAL__SequenceType_periodStart_INTERNAL_asn1__IntegerType_periodDuration_INTERNAL_asn1__IntegerType::ValueType v;
      _mtch_L1CombiningPeriodList_Type.read(reader, v);
      value.set_mtch_L1CombiningPeriodList(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_L1CombiningSchedule_32::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cycleOffset_Type.write(writer, value.get_cycleOffset());
   _mtch_L1CombiningPeriodList_Type.write(writer, value.get_mtch_L1CombiningPeriodList());

   writer.writeSequenceEnd();
}


void MBMS_L1CombiningSchedule_64::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _cycleOffset_Type.read(reader, v);
      value.set_cycleOffset(v);
   }
   {
      _INTERNAL__SequenceOfType_INTERNAL__SequenceType_periodStart_INTERNAL_asn1__IntegerType_periodDuration_INTERNAL_asn1__IntegerType::ValueType v;
      _mtch_L1CombiningPeriodList_Type.read(reader, v);
      value.set_mtch_L1CombiningPeriodList(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_L1CombiningSchedule_64::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cycleOffset_Type.write(writer, value.get_cycleOffset());
   _mtch_L1CombiningPeriodList_Type.write(writer, value.get_mtch_L1CombiningPeriodList());

   writer.writeSequenceEnd();
}


void MBMS_L1CombiningSchedule_128::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _cycleOffset_Type.read(reader, v);
      value.set_cycleOffset(v);
   }
   {
      _INTERNAL__SequenceOfType_INTERNAL__SequenceType_periodStart_INTERNAL_asn1__IntegerType_periodDuration_INTERNAL_asn1__IntegerType::ValueType v;
      _mtch_L1CombiningPeriodList_Type.read(reader, v);
      value.set_mtch_L1CombiningPeriodList(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_L1CombiningSchedule_128::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cycleOffset_Type.write(writer, value.get_cycleOffset());
   _mtch_L1CombiningPeriodList_Type.write(writer, value.get_mtch_L1CombiningPeriodList());

   writer.writeSequenceEnd();
}


void MBMS_L1CombiningSchedule_256::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _cycleOffset_Type.read(reader, v);
      value.set_cycleOffset(v);
   }
   {
      _INTERNAL__SequenceOfType_INTERNAL__SequenceType_periodStart_INTERNAL_asn1__IntegerType_periodDuration_INTERNAL_asn1__IntegerType::ValueType v;
      _mtch_L1CombiningPeriodList_Type.read(reader, v);
      value.set_mtch_L1CombiningPeriodList(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_L1CombiningSchedule_256::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cycleOffset_Type.write(writer, value.get_cycleOffset());
   _mtch_L1CombiningPeriodList_Type.write(writer, value.get_mtch_L1CombiningPeriodList());

   writer.writeSequenceEnd();
}


void MBMS_L1CombiningSchedule_512::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _cycleOffset_Type.read(reader, v);
      value.set_cycleOffset(v);
   }
   {
      _INTERNAL__SequenceOfType_INTERNAL__SequenceType_periodStart_INTERNAL_asn1__IntegerType_periodDuration_INTERNAL_asn1__IntegerType::ValueType v;
      _mtch_L1CombiningPeriodList_Type.read(reader, v);
      value.set_mtch_L1CombiningPeriodList(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_L1CombiningSchedule_512::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cycleOffset_Type.write(writer, value.get_cycleOffset());
   _mtch_L1CombiningPeriodList_Type.write(writer, value.get_mtch_L1CombiningPeriodList());

   writer.writeSequenceEnd();
}


void MBMS_L1CombiningSchedule_1024::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _cycleOffset_Type.read(reader, v);
      value.set_cycleOffset(v);
   }
   {
      _INTERNAL__SequenceOfType_INTERNAL__SequenceType_periodStart_INTERNAL_asn1__IntegerType_periodDuration_INTERNAL_asn1__IntegerType::ValueType v;
      _mtch_L1CombiningPeriodList_Type.read(reader, v);
      value.set_mtch_L1CombiningPeriodList(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_L1CombiningSchedule_1024::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cycleOffset_Type.write(writer, value.get_cycleOffset());
   _mtch_L1CombiningPeriodList_Type.write(writer, value.get_mtch_L1CombiningPeriodList());

   writer.writeSequenceEnd();
}


void MBMS-L1CombiningSchedule::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_cycleLength-32_Type)
   {
      asn1::generated::MBMS_L1CombiningSchedule_32::ValueType v;
      _cycleLength_32_Type.read(reader, v);
      value.set_cycleLength_32(v);
   }
   else if (choosenType == &_cycleLength-64_Type)
   {
      asn1::generated::MBMS_L1CombiningSchedule_64::ValueType v;
      _cycleLength_64_Type.read(reader, v);
      value.set_cycleLength_64(v);
   }
   else if (choosenType == &_cycleLength-128_Type)
   {
      asn1::generated::MBMS_L1CombiningSchedule_128::ValueType v;
      _cycleLength_128_Type.read(reader, v);
      value.set_cycleLength_128(v);
   }
   else if (choosenType == &_cycleLength-256_Type)
   {
      asn1::generated::MBMS_L1CombiningSchedule_256::ValueType v;
      _cycleLength_256_Type.read(reader, v);
      value.set_cycleLength_256(v);
   }
   else if (choosenType == &_cycleLength-512_Type)
   {
      asn1::generated::MBMS_L1CombiningSchedule_512::ValueType v;
      _cycleLength_512_Type.read(reader, v);
      value.set_cycleLength_512(v);
   }
   else if (choosenType == &_cycleLength-1024_Type)
   {
      asn1::generated::MBMS_L1CombiningSchedule_1024::ValueType v;
      _cycleLength_1024_Type.read(reader, v);
      value.set_cycleLength_1024(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _cycleLength-32_Type.toString() + ", " + _cycleLength-64_Type.toString() + ", " + _cycleLength-128_Type.toString() + ", " + _cycleLength-256_Type.toString() + ", " + _cycleLength-512_Type.toString() + ", " + _cycleLength-1024_Type.toString());
   }
}

void MBMS-L1CombiningSchedule::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_cycleLength-32_Choosen())
      _cycleLength-32_Type.write(writer, value.get_cycleLength-32());
   else if (value.has_cycleLength-64_Choosen())
      _cycleLength-64_Type.write(writer, value.get_cycleLength-64());
   else if (value.has_cycleLength-128_Choosen())
      _cycleLength-128_Type.write(writer, value.get_cycleLength-128());
   else if (value.has_cycleLength-256_Choosen())
      _cycleLength-256_Type.write(writer, value.get_cycleLength-256());
   else if (value.has_cycleLength-512_Choosen())
      _cycleLength-512_Type.write(writer, value.get_cycleLength-512());
   else if (value.has_cycleLength-1024_Choosen())
      _cycleLength-1024_Type.write(writer, value.get_cycleLength-1024());
}


void MBMS-L23Configuration::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_sameAsCurrent_Type)
   {
      _INTERNAL__SequenceType_currentCell-SCCPCH_INTERNAL_asn1__generated__MBMS_SCCPCHIdentity_msch-ConfigurationInfo_INTERNAL_asn1__generated__MBMS_MSCH_ConfigurationInfo_r6::ValueType v;
      _sameAsCurrent_Type.read(reader, v);
      value.set_sameAsCurrent(v);
   }
   else if (choosenType == &_different_Type)
   {
      _INTERNAL__SequenceType_transpCh-InfoCommonForAllTrCh_INTERNAL_asn1__generated__MBMS_CommonCCTrChIdentity_transpCHInformation_INTERNAL_asn1__generated__MBMS_TrCHInformation_NeighbList::ValueType v;
      _different_Type.read(reader, v);
      value.set_different(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _sameAsCurrent_Type.toString() + ", " + _different_Type.toString());
   }
}

void MBMS-L23Configuration::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_sameAsCurrent_Choosen())
      _sameAsCurrent_Type.write(writer, value.get_sameAsCurrent());
   else if (value.has_different_Choosen())
      _different_Type.write(writer, value.get_different());
}


void MBMS_MCCH_ConfigurationInfo_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _accessInfoPeriodCoefficient_Type.read(reader, v);
      value.set_accessInfoPeriodCoefficient(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _repetitionPeriodCoefficient_Type.read(reader, v);
      value.set_repetitionPeriodCoefficient(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _modificationPeriodCoefficient_Type.read(reader, v);
      value.set_modificationPeriodCoefficient(v);
   }
   {
      asn1::generated::RLC_Info_MCCH_r6::ValueType v;
      _rlc_Info_Type.read(reader, v);
      value.set_rlc_Info(v);
   }
   {
      asn1::generated::MBMS_TCTF_Presence::ValueType v;
      _tctf_Presence_Type.read(reader, v);
      value.set_tctf_Presence(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_MCCH_ConfigurationInfo_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _accessInfoPeriodCoefficient_Type.write(writer, value.get_accessInfoPeriodCoefficient());
   _repetitionPeriodCoefficient_Type.write(writer, value.get_repetitionPeriodCoefficient());
   _modificationPeriodCoefficient_Type.write(writer, value.get_modificationPeriodCoefficient());
   _rlc_Info_Type.write(writer, value.get_rlc_Info());
   _tctf_Presence_Type.write(writer, value.get_tctf_Presence());

   writer.writeSequenceEnd();
}


void MBMS_MICHConfigurationInfo_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_MICHPowerOffset::ValueType v;
      _michPowerOffset_Type.read(reader, v);
      value.set_michPowerOffset(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_channelisationCode256_INTERNAL_asn1__generated__ChannelisationCode256_ni-CountPerFrame_INTERNAL_asn1__generated__MBMS_NI_CountPerFrame_sttd-Indicator_INTERNAL_asn1__BooleanType_tdd384_INTERNAL__SequenceType_timeslot_INTERNAL_asn1__generated__TimeslotNumber_midambleShiftAndBurstType_INTERNAL_asn1__generated__MidambleShiftAndBurstType_channelisationCode_INTERNAL_asn1__generated__DL_TS_ChannelisationCode_repetitionPeriodLengthOffset_INTERNAL_asn1__generated__RepPerLengthOffset_MICH_mbmsNotificationIndLength_INTERNAL_asn1__generated__MBMS_MICHNotificationIndLength_tdd128_INTERNAL__SequenceType_timeslot_INTERNAL_asn1__generated__TimeslotNumber_LCR_r4_midambleShiftAndBurstType_INTERNAL_asn1__generated__MidambleShiftAndBurstType_LCR_r4_channelisationCodeList_INTERNAL__SequenceOfType_INTERNAL_asn1__generated__DL_TS_ChannelisationCode_repetitionPeriodLengthOffset_INTERNAL_asn1__generated__RepPerLengthOffset_MICH_mbmsNotificationIndLength_INTERNAL_asn1__generated__MBMS_MICHNotificationIndLength::ValueType v;
      _mode_Type.read(reader, v);
      value.set_mode(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_MICHConfigurationInfo_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _michPowerOffset_Type.write(writer, value.get_michPowerOffset());
   _mode_Type.write(writer, value.get_mode());

   writer.writeSequenceEnd();
}


void MBMS_MICHConfigurationInfo_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_MICHPowerOffset::ValueType v;
      _michPowerOffset_Type.read(reader, v);
      value.set_michPowerOffset(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_channelisationCode256_INTERNAL_asn1__generated__ChannelisationCode256_ni-CountPerFrame_INTERNAL_asn1__generated__MBMS_NI_CountPerFrame_sttd-Indicator_INTERNAL_asn1__BooleanType_tdd384_INTERNAL__SequenceType_timeslot_INTERNAL_asn1__generated__TimeslotNumber_midambleShiftAndBurstType_INTERNAL_asn1__generated__MidambleShiftAndBurstType_channelisationCode_INTERNAL_asn1__generated__DL_TS_ChannelisationCode_repetitionPeriodLengthOffset_INTERNAL_asn1__generated__RepPerLengthOffset_MICH_mbmsNotificationIndLength_INTERNAL_asn1__generated__MBMS_MICHNotificationIndLength_tdd768_INTERNAL__SequenceType_timeslot_INTERNAL_asn1__generated__TimeslotNumber_midambleShiftAndBurstType_INTERNAL_asn1__generated__MidambleShiftAndBurstType_VHCR_channelisationCode_INTERNAL_asn1__generated__DL_TS_ChannelisationCode_repetitionPeriodLengthOffset_INTERNAL_asn1__generated__RepPerLengthOffset_MICH_mbmsNotificationIndLength_INTERNAL_asn1__generated__MBMS_MICHNotificationIndLength_tdd128_INTERNAL__SequenceType_timeslot_INTERNAL_asn1__generated__TimeslotNumber_LCR_r4_midambleShiftAndBurstType_INTERNAL_asn1__generated__MidambleShiftAndBurstType_LCR_r4_channelisationCodeList_INTERNAL__SequenceOfType_INTERNAL_asn1__generated__DL_TS_ChannelisationCode_repetitionPeriodLengthOffset_INTERNAL_asn1__generated__RepPerLengthOffset_MICH_mbmsNotificationIndLength_INTERNAL_asn1__generated__MBMS_MICHNotificationIndLength::ValueType v;
      _mode_Type.read(reader, v);
      value.set_mode(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_MICHConfigurationInfo_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _michPowerOffset_Type.write(writer, value.get_michPowerOffset());
   _mode_Type.write(writer, value.get_mode());

   writer.writeSequenceEnd();
}


void MBMS_ModifedService_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_TransmissionIdentity::ValueType v;
      _mbms_TransmissionIdentity_Type.read(reader, v);
      value.set_mbms_TransmissionIdentity(v);
   }
   {
      asn1::generated::MBMS_RequiredUEAction_Mod::ValueType v;
      _mbms_RequiredUEAction_Type.read(reader, v);
      value.set_mbms_RequiredUEAction(v);
   }
   {
      _INTERNAL__ChoiceType_mcch_INTERNAL_asn1__generated__MBMS_PFLIndex_dcch_INTERNAL_asn1__generated__MBMS_PFLInfo::ValueType v;
      _mbms_PreferredFrequency_Type.read(reader, v);
      value.set_mbms_PreferredFrequency(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _mbms_DispersionIndicator_Type.read(reader, v);
      value.set_mbms_DispersionIndicator(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _continueMCCHReading_Type.read(reader, v);
      value.set_continueMCCHReading(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_ModifedService_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mbms_TransmissionIdentity_Type.write(writer, value.get_mbms_TransmissionIdentity());
   _mbms_RequiredUEAction_Type.write(writer, value.get_mbms_RequiredUEAction());
   _mbms_PreferredFrequency_Type.write(writer, value.get_mbms_PreferredFrequency());
   _mbms_DispersionIndicator_Type.write(writer, value.get_mbms_DispersionIndicator());
   _continueMCCHReading_Type.write(writer, value.get_continueMCCHReading());

   writer.writeSequenceEnd();
}


void MBMS_MSCH_ConfigurationInfo_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_MSCHSchedulingInfo::ValueType v;
      _mschShedulingInfo_Type.read(reader, v);
      value.set_mschShedulingInfo(v);
   }
   {
      asn1::generated::RLC_Info_MSCH_r6::ValueType v;
      _rlc_Info_Type.read(reader, v);
      value.set_rlc_Info(v);
   }
   {
      asn1::generated::MBMS_TCTF_Presence::ValueType v;
      _tctf_Presence_Type.read(reader, v);
      value.set_tctf_Presence(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_MSCH_ConfigurationInfo_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mschShedulingInfo_Type.write(writer, value.get_mschShedulingInfo());
   _rlc_Info_Type.write(writer, value.get_rlc_Info());
   _tctf_Presence_Type.write(writer, value.get_tctf_Presence());

   writer.writeSequenceEnd();
}


void MBMS-MSCHSchedulingInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_schedulingPeriod-32-Offset_Type)
   {
      asn1::IntegerType::ValueType v;
      _schedulingPeriod_32_Offset_Type.read(reader, v);
      value.set_schedulingPeriod_32_Offset(v);
   }
   else if (choosenType == &_schedulingPeriod-64-Offset_Type)
   {
      asn1::IntegerType::ValueType v;
      _schedulingPeriod_64_Offset_Type.read(reader, v);
      value.set_schedulingPeriod_64_Offset(v);
   }
   else if (choosenType == &_schedulingPeriod-128-Offset_Type)
   {
      asn1::IntegerType::ValueType v;
      _schedulingPeriod_128_Offset_Type.read(reader, v);
      value.set_schedulingPeriod_128_Offset(v);
   }
   else if (choosenType == &_schedulingPeriod-256-Offset_Type)
   {
      asn1::IntegerType::ValueType v;
      _schedulingPeriod_256_Offset_Type.read(reader, v);
      value.set_schedulingPeriod_256_Offset(v);
   }
   else if (choosenType == &_schedulingPeriod-512-Offset_Type)
   {
      asn1::IntegerType::ValueType v;
      _schedulingPeriod_512_Offset_Type.read(reader, v);
      value.set_schedulingPeriod_512_Offset(v);
   }
   else if (choosenType == &_schedulingPeriod-1024-Offset_Type)
   {
      asn1::IntegerType::ValueType v;
      _schedulingPeriod_1024_Offset_Type.read(reader, v);
      value.set_schedulingPeriod_1024_Offset(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _schedulingPeriod-32-Offset_Type.toString() + ", " + _schedulingPeriod-64-Offset_Type.toString() + ", " + _schedulingPeriod-128-Offset_Type.toString() + ", " + _schedulingPeriod-256-Offset_Type.toString() + ", " + _schedulingPeriod-512-Offset_Type.toString() + ", " + _schedulingPeriod-1024-Offset_Type.toString());
   }
}

void MBMS-MSCHSchedulingInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_schedulingPeriod-32-Offset_Choosen())
      _schedulingPeriod-32-Offset_Type.write(writer, value.get_schedulingPeriod-32-Offset());
   else if (value.has_schedulingPeriod-64-Offset_Choosen())
      _schedulingPeriod-64-Offset_Type.write(writer, value.get_schedulingPeriod-64-Offset());
   else if (value.has_schedulingPeriod-128-Offset_Choosen())
      _schedulingPeriod-128-Offset_Type.write(writer, value.get_schedulingPeriod-128-Offset());
   else if (value.has_schedulingPeriod-256-Offset_Choosen())
      _schedulingPeriod-256-Offset_Type.write(writer, value.get_schedulingPeriod-256-Offset());
   else if (value.has_schedulingPeriod-512-Offset_Choosen())
      _schedulingPeriod-512-Offset_Type.write(writer, value.get_schedulingPeriod-512-Offset());
   else if (value.has_schedulingPeriod-1024-Offset_Choosen())
      _schedulingPeriod-1024-Offset_Type.write(writer, value.get_schedulingPeriod-1024-Offset());
}


void MBMS_NeighbouringCellSCCPCH_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_CommonPhyChIdentity::ValueType v;
      _secondaryCCPCH_Info_Type.read(reader, v);
      value.set_secondaryCCPCH_Info(v);
   }
   {
      asn1::generated::MBMS_SCCPCHPwrOffsetDiff::ValueType v;
      _secondaryCCPCHPwrOffsetDiff_Type.read(reader, v);
      value.set_secondaryCCPCHPwrOffsetDiff(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_softComb-TimingOffset_INTERNAL_asn1__generated__MBMS_SoftComb_TimingOffset_mbms-L1CombiningTransmTimeDiff_INTERNAL_asn1__generated__MBMS_L1CombiningTransmTimeDiff_mbms-L1CombiningSchedule_INTERNAL_asn1__generated__MBMS_L1CombiningSchedule_tdd_INTERNAL_asn1__NullType::ValueType v;
      _layer1Combining_Type.read(reader, v);
      value.set_layer1Combining(v);
   }
   {
      asn1::generated::MBMS_L23Configuration::ValueType v;
      _mbms_L23Configuration_Type.read(reader, v);
      value.set_mbms_L23Configuration(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_NeighbouringCellSCCPCH_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _secondaryCCPCH_Info_Type.write(writer, value.get_secondaryCCPCH_Info());
   _secondaryCCPCHPwrOffsetDiff_Type.write(writer, value.get_secondaryCCPCHPwrOffsetDiff());
   _layer1Combining_Type.write(writer, value.get_layer1Combining());
   _mbms_L23Configuration_Type.write(writer, value.get_mbms_L23Configuration());

   writer.writeSequenceEnd();
}


void MBMS_PhyChInformation_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_CommonPhyChIdentity::ValueType v;
      _mbms_CommonPhyChIdentity_Type.read(reader, v);
      value.set_mbms_CommonPhyChIdentity(v);
   }
   {
      asn1::generated::SecondaryCCPCHInfo_MBMS_r6::ValueType v;
      _secondaryCCPCHInfo_MBMS_Type.read(reader, v);
      value.set_secondaryCCPCHInfo_MBMS(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_PhyChInformation_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mbms_CommonPhyChIdentity_Type.write(writer, value.get_mbms_CommonPhyChIdentity());
   _secondaryCCPCHInfo_MBMS_Type.write(writer, value.get_secondaryCCPCHInfo_MBMS());

   writer.writeSequenceEnd();
}


void MBMS_PreferredFreqRequest_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::FrequencyInfo::ValueType v;
      _preferredFreqRequest_Type.read(reader, v);
      value.set_preferredFreqRequest(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_PreferredFreqRequest_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _preferredFreqRequest_Type.write(writer, value.get_preferredFreqRequest());

   writer.writeSequenceEnd();
}


void MBMS_PreferredFrequencyInfo_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _mbmsPreferredFrequency_Type.read(reader, v);
      value.set_mbmsPreferredFrequency(v);
   }
   {
      _INTERNAL__ChoiceType_mbms-Qoffset_INTERNAL_asn1__generated__MBMS_Qoffset_mbms-HCSoffset_INTERNAL_asn1__IntegerType::ValueType v;
      _layerConvergenceInformation_Type.read(reader, v);
      value.set_layerConvergenceInformation(v);
   }
   {
      asn1::generated::MBMS_PL_ServiceRestrictInfo_r6::ValueType v;
      _mbms_PL_ServiceRestrictInfo_Type.read(reader, v);
      value.set_mbms_PL_ServiceRestrictInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_PreferredFrequencyInfo_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mbmsPreferredFrequency_Type.write(writer, value.get_mbmsPreferredFrequency());
   _layerConvergenceInformation_Type.write(writer, value.get_layerConvergenceInformation());
   _mbms_PL_ServiceRestrictInfo_Type.write(writer, value.get_mbms_PL_ServiceRestrictInfo());

   writer.writeSequenceEnd();
}


void MBMS_PTM_RBInformation_C::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_CommonRBIdentity::ValueType v;
      _rbInformation_Type.read(reader, v);
      value.set_rbInformation(v);
   }
   {
      asn1::generated::MBMS_ShortTransmissionID::ValueType v;
      _shortTransmissionID_Type.read(reader, v);
      value.set_shortTransmissionID(v);
   }
   {
      asn1::generated::MBMS_LogicalChIdentity::ValueType v;
      _logicalChIdentity_Type.read(reader, v);
      value.set_logicalChIdentity(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_PTM_RBInformation_C::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rbInformation_Type.write(writer, value.get_rbInformation());
   _shortTransmissionID_Type.write(writer, value.get_shortTransmissionID());
   _logicalChIdentity_Type.write(writer, value.get_logicalChIdentity());

   writer.writeSequenceEnd();
}


void MBMS_PTM_RBInformation_N::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_ShortTransmissionID::ValueType v;
      _shortTransmissionID_Type.read(reader, v);
      value.set_shortTransmissionID(v);
   }
   {
      asn1::generated::MBMS_LogicalChIdentity::ValueType v;
      _logicalChIdentity_Type.read(reader, v);
      value.set_logicalChIdentity(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _layer1_CombiningStatus_Type.read(reader, v);
      value.set_layer1_CombiningStatus(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_PTM_RBInformation_N::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _shortTransmissionID_Type.write(writer, value.get_shortTransmissionID());
   _logicalChIdentity_Type.write(writer, value.get_logicalChIdentity());
   _layer1_CombiningStatus_Type.write(writer, value.get_layer1_CombiningStatus());

   writer.writeSequenceEnd();
}


void MBMS_ServiceAccessInfo_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_ShortTransmissionID::ValueType v;
      _shortTransmissionID_Type.read(reader, v);
      value.set_shortTransmissionID(v);
   }
   {
      asn1::generated::MBMS_AccessProbabilityFactor::ValueType v;
      _accessprobabilityFactor_Idle_Type.read(reader, v);
      value.set_accessprobabilityFactor_Idle(v);
   }
   {
      asn1::generated::MBMS_AccessProbabilityFactor::ValueType v;
      _accessprobabilityFactor_UraPCH_Type.read(reader, v);
      value.set_accessprobabilityFactor_UraPCH(v);
   }
   {
      asn1::generated::MBMS_ConnectedModeCountingScope::ValueType v;
      _mbms_ConnectedModeCountingScope_Type.read(reader, v);
      value.set_mbms_ConnectedModeCountingScope(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_ServiceAccessInfo_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _shortTransmissionID_Type.write(writer, value.get_shortTransmissionID());
   _accessprobabilityFactor_Idle_Type.write(writer, value.get_accessprobabilityFactor_Idle());
   _accessprobabilityFactor_UraPCH_Type.write(writer, value.get_accessprobabilityFactor_UraPCH());
   _mbms_ConnectedModeCountingScope_Type.write(writer, value.get_mbms_ConnectedModeCountingScope());

   writer.writeSequenceEnd();
}


void MBMS_ServiceIdentity_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::OctetStringType::ValueType v;
      _serviceIdentity_Type.read(reader, v);
      value.set_serviceIdentity(v);
   }
   {
      _INTERNAL__ChoiceType_sameAsMIB-PLMN-Id_INTERNAL_asn1__NullType_other_INTERNAL__ChoiceType_sameAsMIB-MultiPLMN-Id_INTERNAL_asn1__IntegerType_explicitPLMN-Id_INTERNAL_asn1__generated__PLMN_Identity::ValueType v;
      _plmn_Identity_Type.read(reader, v);
      value.set_plmn_Identity(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_ServiceIdentity_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _serviceIdentity_Type.write(writer, value.get_serviceIdentity());
   _plmn_Identity_Type.write(writer, value.get_plmn_Identity());

   writer.writeSequenceEnd();
}


void MBMS_ServiceSchedulingInfo_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_TransmissionIdentity::ValueType v;
      _mbms_TransmissionIdentity_Type.read(reader, v);
      value.set_mbms_TransmissionIdentity(v);
   }
   {
      asn1::generated::MBMS_ServiceTransmInfoList::ValueType v;
      _mbms_ServiceTransmInfoList_Type.read(reader, v);
      value.set_mbms_ServiceTransmInfoList(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _nextSchedulingperiod_Type.read(reader, v);
      value.set_nextSchedulingperiod(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_ServiceSchedulingInfo_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mbms_TransmissionIdentity_Type.write(writer, value.get_mbms_TransmissionIdentity());
   _mbms_ServiceTransmInfoList_Type.write(writer, value.get_mbms_ServiceTransmInfoList());
   _nextSchedulingperiod_Type.write(writer, value.get_nextSchedulingperiod());

   writer.writeSequenceEnd();
}


void MBMS_ServiceTransmInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _start_Type.read(reader, v);
      value.set_start(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _duration_Type.read(reader, v);
      value.set_duration(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_ServiceTransmInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _start_Type.write(writer, value.get_start());
   _duration_Type.write(writer, value.get_duration());

   writer.writeSequenceEnd();
}


void MBMS_SIBType5_SCCPCH_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_SCCPCHIdentity::ValueType v;
      _sccpchIdentity_Type.read(reader, v);
      value.set_sccpchIdentity(v);
   }
   {
      asn1::generated::MBMS_TrCHInformation_SIB5List::ValueType v;
      _transpCHInformation_Type.read(reader, v);
      value.set_transpCHInformation(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_SIBType5_SCCPCH_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sccpchIdentity_Type.write(writer, value.get_sccpchIdentity());
   _transpCHInformation_Type.write(writer, value.get_transpCHInformation());

   writer.writeSequenceEnd();
}


void MBMS_TimersAndCounters_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::T_318::ValueType v;
      _t_318_Type.read(reader, v);
      value.set_t_318(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_TimersAndCounters_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _t_318_Type.write(writer, value.get_t_318());

   writer.writeSequenceEnd();
}


void MBMS_TransmissionIdentity::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_ServiceIdentity_r6::ValueType v;
      _mbms_ServiceIdentity_Type.read(reader, v);
      value.set_mbms_ServiceIdentity(v);
   }
   {
      asn1::generated::MBMS_SessionIdentity::ValueType v;
      _mbms_SessionIdentity_Type.read(reader, v);
      value.set_mbms_SessionIdentity(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_TransmissionIdentity::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mbms_ServiceIdentity_Type.write(writer, value.get_mbms_ServiceIdentity());
   _mbms_SessionIdentity_Type.write(writer, value.get_mbms_SessionIdentity());

   writer.writeSequenceEnd();
}


void MBMS_TranspChInfoForCCTrCh_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_CommonCCTrChIdentity::ValueType v;
      _commonCCTrChIdentity_Type.read(reader, v);
      value.set_commonCCTrChIdentity(v);
   }
   {
      asn1::generated::TFCS::ValueType v;
      _transportFormatCombinationSet_Type.read(reader, v);
      value.set_transportFormatCombinationSet(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_TranspChInfoForCCTrCh_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _commonCCTrChIdentity_Type.write(writer, value.get_commonCCTrChIdentity());
   _transportFormatCombinationSet_Type.write(writer, value.get_transportFormatCombinationSet());

   writer.writeSequenceEnd();
}


void MBMS_TranspChInfoForTrCh_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_CommonTrChIdentity::ValueType v;
      _commonTrChIdentity_Type.read(reader, v);
      value.set_commonTrChIdentity(v);
   }
   {
      asn1::generated::TransportFormatSet::ValueType v;
      _transportFormatSet_Type.read(reader, v);
      value.set_transportFormatSet(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_TranspChInfoForTrCh_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _commonTrChIdentity_Type.write(writer, value.get_commonTrChIdentity());
   _transportFormatSet_Type.write(writer, value.get_transportFormatSet());

   writer.writeSequenceEnd();
}


void MBMS_TrCHInformation_Curr::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_CommonTrChIdentity::ValueType v;
      _transpCh_Info_Type.read(reader, v);
      value.set_transpCh_Info(v);
   }
   {
      asn1::generated::MBMS_PTM_RBInformation_CList::ValueType v;
      _rbInformation_Type.read(reader, v);
      value.set_rbInformation(v);
   }
   {
      asn1::generated::MBMS_MSCH_ConfigurationInfo_r6::ValueType v;
      _msch_ConfigurationInfo_Type.read(reader, v);
      value.set_msch_ConfigurationInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_TrCHInformation_Curr::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _transpCh_Info_Type.write(writer, value.get_transpCh_Info());
   _rbInformation_Type.write(writer, value.get_rbInformation());
   _msch_ConfigurationInfo_Type.write(writer, value.get_msch_ConfigurationInfo());

   writer.writeSequenceEnd();
}


void MBMS_TrCHInformation_Neighb::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_CommonTrChIdentity::ValueType v;
      _transpCh_Info_Type.read(reader, v);
      value.set_transpCh_Info(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _transpCh_CombiningStatus_Type.read(reader, v);
      value.set_transpCh_CombiningStatus(v);
   }
   {
      asn1::generated::MBMS_PTM_RBInformation_NList::ValueType v;
      _rbInformation_Type.read(reader, v);
      value.set_rbInformation(v);
   }
   {
      asn1::generated::MBMS_MSCH_ConfigurationInfo_r6::ValueType v;
      _msch_ConfigurationInfo_Type.read(reader, v);
      value.set_msch_ConfigurationInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_TrCHInformation_Neighb::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _transpCh_Info_Type.write(writer, value.get_transpCh_Info());
   _transpCh_CombiningStatus_Type.write(writer, value.get_transpCh_CombiningStatus());
   _rbInformation_Type.write(writer, value.get_rbInformation());
   _msch_ConfigurationInfo_Type.write(writer, value.get_msch_ConfigurationInfo());

   writer.writeSequenceEnd();
}


void MBMS_TrCHInformation_SIB5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _transpCh_Identity_Type.read(reader, v);
      value.set_transpCh_Identity(v);
   }
   {
      asn1::generated::MBMS_PTM_RBInformation_CList::ValueType v;
      _rbInformation_Type.read(reader, v);
      value.set_rbInformation(v);
   }
   {
      asn1::generated::MBMS_MSCH_ConfigurationInfo_r6::ValueType v;
      _msch_ConfigurationInfo_Type.read(reader, v);
      value.set_msch_ConfigurationInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_TrCHInformation_SIB5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _transpCh_Identity_Type.write(writer, value.get_transpCh_Identity());
   _rbInformation_Type.write(writer, value.get_rbInformation());
   _msch_ConfigurationInfo_Type.write(writer, value.get_msch_ConfigurationInfo());

   writer.writeSequenceEnd();
}


void MBMS_UnmodifiedService_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MBMS_TransmissionIdentity::ValueType v;
      _mbms_TransmissionIdentity_Type.read(reader, v);
      value.set_mbms_TransmissionIdentity(v);
   }
   {
      asn1::generated::MBMS_RequiredUEAction_UMod::ValueType v;
      _mbms_RequiredUEAction_Type.read(reader, v);
      value.set_mbms_RequiredUEAction(v);
   }
   {
      asn1::generated::MBMS_PFLIndex::ValueType v;
      _mbms_PreferredFrequency_Type.read(reader, v);
      value.set_mbms_PreferredFrequency(v);
   }

   reader.readSequenceEnd(*this);
}

void MBMS_UnmodifiedService_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _mbms_TransmissionIdentity_Type.write(writer, value.get_mbms_TransmissionIdentity());
   _mbms_RequiredUEAction_Type.write(writer, value.get_mbms_RequiredUEAction());
   _mbms_PreferredFrequency_Type.write(writer, value.get_mbms_PreferredFrequency());

   writer.writeSequenceEnd();
}


void ToTargetRNC-Container::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_interRATHandoverInfo_Type)
   {
      asn1::generated::InterRATHandoverInfoWithInterRATCapabilities_r3::ValueType v;
      _interRATHandoverInfo_Type.read(reader, v);
      value.set_interRATHandoverInfo(v);
   }
   else if (choosenType == &_srncRelocation_Type)
   {
      asn1::generated::SRNC_RelocationInfo_r3::ValueType v;
      _srncRelocation_Type.read(reader, v);
      value.set_srncRelocation(v);
   }
   else if (choosenType == &_rfc3095-ContextInfo_Type)
   {
      asn1::generated::RFC3095_ContextInfo_r5::ValueType v;
      _rfc3095_ContextInfo_Type.read(reader, v);
      value.set_rfc3095_ContextInfo(v);
   }
   else if (choosenType == &_extension_Type)
   {
      asn1::NullType::ValueType v;
      _extension_Type.read(reader, v);
      value.set_extension(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _interRATHandoverInfo_Type.toString() + ", " + _srncRelocation_Type.toString() + ", " + _rfc3095-ContextInfo_Type.toString() + ", " + _extension_Type.toString());
   }
}

void ToTargetRNC-Container::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_interRATHandoverInfo_Choosen())
      _interRATHandoverInfo_Type.write(writer, value.get_interRATHandoverInfo());
   else if (value.has_srncRelocation_Choosen())
      _srncRelocation_Type.write(writer, value.get_srncRelocation());
   else if (value.has_rfc3095-ContextInfo_Choosen())
      _rfc3095-ContextInfo_Type.write(writer, value.get_rfc3095-ContextInfo());
   else if (value.has_extension_Choosen())
      _extension_Type.write(writer, value.get_extension());
}


void TargetRNC-ToSourceRNC-Container::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_radioBearerSetup_Type)
   {
      asn1::generated::RadioBearerSetup::ValueType v;
      _radioBearerSetup_Type.read(reader, v);
      value.set_radioBearerSetup(v);
   }
   else if (choosenType == &_radioBearerReconfiguration_Type)
   {
      asn1::generated::RadioBearerReconfiguration::ValueType v;
      _radioBearerReconfiguration_Type.read(reader, v);
      value.set_radioBearerReconfiguration(v);
   }
   else if (choosenType == &_radioBearerRelease_Type)
   {
      asn1::generated::RadioBearerRelease::ValueType v;
      _radioBearerRelease_Type.read(reader, v);
      value.set_radioBearerRelease(v);
   }
   else if (choosenType == &_transportChannelReconfiguration_Type)
   {
      asn1::generated::TransportChannelReconfiguration::ValueType v;
      _transportChannelReconfiguration_Type.read(reader, v);
      value.set_transportChannelReconfiguration(v);
   }
   else if (choosenType == &_physicalChannelReconfiguration_Type)
   {
      asn1::generated::PhysicalChannelReconfiguration::ValueType v;
      _physicalChannelReconfiguration_Type.read(reader, v);
      value.set_physicalChannelReconfiguration(v);
   }
   else if (choosenType == &_rrc-FailureInfo_Type)
   {
      asn1::generated::RRC_FailureInfo::ValueType v;
      _rrc_FailureInfo_Type.read(reader, v);
      value.set_rrc_FailureInfo(v);
   }
   else if (choosenType == &_dL-DCCHmessage_Type)
   {
      asn1::OctetStringType::ValueType v;
      _dL_DCCHmessage_Type.read(reader, v);
      value.set_dL_DCCHmessage(v);
   }
   else if (choosenType == &_extension_Type)
   {
      asn1::NullType::ValueType v;
      _extension_Type.read(reader, v);
      value.set_extension(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _radioBearerSetup_Type.toString() + ", " + _radioBearerReconfiguration_Type.toString() + ", " + _radioBearerRelease_Type.toString() + ", " + _transportChannelReconfiguration_Type.toString() + ", " + _physicalChannelReconfiguration_Type.toString() + ", " + _rrc-FailureInfo_Type.toString() + ", " + _dL-DCCHmessage_Type.toString() + ", " + _extension_Type.toString());
   }
}

void TargetRNC-ToSourceRNC-Container::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_radioBearerSetup_Choosen())
      _radioBearerSetup_Type.write(writer, value.get_radioBearerSetup());
   else if (value.has_radioBearerReconfiguration_Choosen())
      _radioBearerReconfiguration_Type.write(writer, value.get_radioBearerReconfiguration());
   else if (value.has_radioBearerRelease_Choosen())
      _radioBearerRelease_Type.write(writer, value.get_radioBearerRelease());
   else if (value.has_transportChannelReconfiguration_Choosen())
      _transportChannelReconfiguration_Type.write(writer, value.get_transportChannelReconfiguration());
   else if (value.has_physicalChannelReconfiguration_Choosen())
      _physicalChannelReconfiguration_Type.write(writer, value.get_physicalChannelReconfiguration());
   else if (value.has_rrc-FailureInfo_Choosen())
      _rrc-FailureInfo_Type.write(writer, value.get_rrc-FailureInfo());
   else if (value.has_dL-DCCHmessage_Choosen())
      _dL-DCCHmessage_Type.write(writer, value.get_dL-DCCHmessage());
   else if (value.has_extension_Choosen())
      _extension_Type.write(writer, value.get_extension());
}


void InterRATHandoverInfoWithInterRATCapabilities-r3::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_interRATHandoverInfo-r3_INTERNAL_asn1__generated__InterRATHandoverInfoWithInterRATCapabilities_r3_IEs_v390NonCriticalExtensions_INTERNAL__SequenceType_interRATHandoverInfoWithInterRATCapabilities-v390ext_INTERNAL_asn1__generated__InterRATHandoverInfoWithInterRATCapabilities_v390ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_interRATHandoverInfoWithInterRATCapabilities-v690ext_INTERNAL_asn1__generated__InterRATHandoverInfoWithInterRATCapabilities_v690ext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_criticalExtensions_Type)
   {
      _INTERNAL__SequenceType::ValueType v;
      _criticalExtensions_Type.read(reader, v);
      value.set_criticalExtensions(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _criticalExtensions_Type.toString());
   }
}

void InterRATHandoverInfoWithInterRATCapabilities-r3::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_criticalExtensions_Choosen())
      _criticalExtensions_Type.write(writer, value.get_criticalExtensions());
}


void InterRATHandoverInfoWithInterRATCapabilities_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterRAT_UE_RadioAccessCapabilityList::ValueType v;
      _ue_RATSpecificCapability_Type.read(reader, v);
      value.set_ue_RATSpecificCapability(v);
   }
   {
      asn1::OctetStringType::ValueType v;
      _interRATHandoverInfo_Type.read(reader, v);
      value.set_interRATHandoverInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATHandoverInfoWithInterRATCapabilities_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RATSpecificCapability_Type.write(writer, value.get_ue_RATSpecificCapability());
   _interRATHandoverInfo_Type.write(writer, value.get_interRATHandoverInfo());

   writer.writeSequenceEnd();
}


void InterRATHandoverInfoWithInterRATCapabilities_v390ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::FailureCauseWithProtErr::ValueType v;
      _failureCauseWithProtErr_Type.read(reader, v);
      value.set_failureCauseWithProtErr(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATHandoverInfoWithInterRATCapabilities_v390ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _failureCauseWithProtErr_Type.write(writer, value.get_failureCauseWithProtErr());

   writer.writeSequenceEnd();
}


void InterRATHandoverInfoWithInterRATCapabilities_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterRAT_UE_RadioAccessCapability_v690ext::ValueType v;
      _ue_RATSpecificCapability_v690ext_Type.read(reader, v);
      value.set_ue_RATSpecificCapability_v690ext(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRATHandoverInfoWithInterRATCapabilities_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RATSpecificCapability_v690ext_Type.write(writer, value.get_ue_RATSpecificCapability_v690ext());

   writer.writeSequenceEnd();
}


void RFC3095-ContextInfo-r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r5_Type)
   {
      _INTERNAL__SequenceType_rFC3095-ContextInfoList-r5_INTERNAL_asn1__generated__RFC3095_ContextInfoList_r5_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r5_Type.read(reader, v);
      value.set_r5(v);
   }
   else if (choosenType == &_criticalExtensions_Type)
   {
      _INTERNAL__SequenceType::ValueType v;
      _criticalExtensions_Type.read(reader, v);
      value.set_criticalExtensions(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r5_Type.toString() + ", " + _criticalExtensions_Type.toString());
   }
}

void RFC3095-ContextInfo-r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r5_Choosen())
      _r5_Type.write(writer, value.get_r5());
   else if (value.has_criticalExtensions_Choosen())
      _criticalExtensions_Type.write(writer, value.get_criticalExtensions());
}


void SRNC-RelocationInfo-r3::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_r3_Type)
   {
      _INTERNAL__SequenceType_sRNC-RelocationInfo-r3_INTERNAL_asn1__generated__SRNC_RelocationInfo_r3_IEs_v380NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v380ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v380ext_IEs_v390NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v390ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v390ext_IEs_v3a0NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v3a0ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v3a0ext_IEs_v3b0NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v3b0ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v3b0ext_IEs_v3c0NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v3c0ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v3c0ext_IEs_laterNonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v3d0ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v3d0ext_IEs_sRNC-RelocationInfo-r3-add-ext_INTERNAL__v3g0NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v3g0ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v3g0ext_IEs_v4b0NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v4b0ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v4b0ext_IEs_v590NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v590ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v590ext_IEs_v5a0NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v5a0ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v5a0ext_IEs_v5b0NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v5b0ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v5b0ext_IEs_v5c0NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v5c0ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v5c0ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v690ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v690ext_IEs_v7xyNonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v7xyext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType::ValueType v;
      _r3_Type.read(reader, v);
      value.set_r3(v);
   }
   else if (choosenType == &_later-than-r3_Type)
   {
      _INTERNAL__ChoiceType_r4_INTERNAL__SequenceType_sRNC-RelocationInfo-r4_INTERNAL_asn1__generated__SRNC_RelocationInfo_r4_IEs_v4d0NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v4d0ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v4d0ext_IEs_sRNC-RelocationInfo-r4-add-ext_INTERNAL__v590NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v590ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v590ext_IEs_v5a0NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v5a0ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v5a0ext_IEs_v5b0NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v5b0ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v5b0ext_IEs_v5c0NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v5c0ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v5c0ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v690ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v690ext_IEs_v7xyNonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v7xyext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r5_INTERNAL__SequenceType_sRNC-RelocationInfo-r5_INTERNAL_asn1__generated__SRNC_RelocationInfo_r5_IEs_sRNC-RelocationInfo-r5-add-ext_INTERNAL__v5a0NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v5a0ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v5a0ext_IEs_v5b0NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v5b0ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v5b0ext_IEs_v5c0NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v5c0ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v5c0ext_IEs_v690NonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v690ext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v690ext_IEs_v7xyNonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v7xyext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__ChoiceType_r6_INTERNAL__SequenceType_sRNC-RelocationInfo-r6_INTERNAL_asn1__generated__SRNC_RelocationInfo_r6_IEs_sRNC-RelocationInfo-r6-add-ext_INTERNAL__v7xyNonCriticalExtensions_INTERNAL__SequenceType_sRNC-RelocationInfo-v7xyext_INTERNAL_asn1__generated__SRNC_RelocationInfo_v7xyext_IEs_nonCriticalExtensions_INTERNAL__SequenceType_criticalExtensions_INTERNAL__SequenceType::ValueType v;
      _later_than_r3_Type.read(reader, v);
      value.set_later_than_r3(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _r3_Type.toString() + ", " + _later-than-r3_Type.toString());
   }
}

void SRNC-RelocationInfo-r3::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_r3_Choosen())
      _r3_Type.write(writer, value.get_r3());
   else if (value.has_later-than-r3_Choosen())
      _later-than-r3_Type.write(writer, value.get_later-than-r3());
}


void SRNC_RelocationInfo_r3_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::StateOfRRC::ValueType v;
      _stateOfRRC_Type.read(reader, v);
      value.set_stateOfRRC(v);
   }
   {
      asn1::generated::StateOfRRC_Procedure::ValueType v;
      _stateOfRRC_Procedure_Type.read(reader, v);
      value.set_stateOfRRC_Procedure(v);
   }
   {
      asn1::generated::CipheringStatus::ValueType v;
      _cipheringStatus_Type.read(reader, v);
      value.set_cipheringStatus(v);
   }
   {
      asn1::generated::CalculationTimeForCiphering::ValueType v;
      _calculationTimeForCiphering_Type.read(reader, v);
      value.set_calculationTimeForCiphering(v);
   }
   {
      asn1::generated::CipheringInfoPerRB_List::ValueType v;
      _cipheringInfoPerRB_List_Type.read(reader, v);
      value.set_cipheringInfoPerRB_List(v);
   }
   {
      asn1::generated::COUNT_C_List::ValueType v;
      _count_C_List_Type.read(reader, v);
      value.set_count_C_List(v);
   }
   {
      asn1::generated::IntegrityProtectionStatus::ValueType v;
      _integrityProtectionStatus_Type.read(reader, v);
      value.set_integrityProtectionStatus(v);
   }
   {
      asn1::generated::SRB_SpecificIntegrityProtInfoList::ValueType v;
      _srb_SpecificIntegrityProtInfo_Type.read(reader, v);
      value.set_srb_SpecificIntegrityProtInfo(v);
   }
   {
      asn1::generated::ImplementationSpecificParams::ValueType v;
      _implementationSpecificParams_Type.read(reader, v);
      value.set_implementationSpecificParams(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _u_RNTI_Type.read(reader, v);
      value.set_u_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _c_RNTI_Type.read(reader, v);
      value.set_c_RNTI(v);
   }
   {
      asn1::generated::UE_RadioAccessCapability::ValueType v;
      _ue_RadioAccessCapability_Type.read(reader, v);
      value.set_ue_RadioAccessCapability(v);
   }
   {
      asn1::generated::UE_Positioning_LastKnownPos::ValueType v;
      _ue_Positioning_LastKnownPos_Type.read(reader, v);
      value.set_ue_Positioning_LastKnownPos(v);
   }
   {
      asn1::generated::InterRAT_UE_RadioAccessCapabilityList::ValueType v;
      _ue_RATSpecificCapability_Type.read(reader, v);
      value.set_ue_RATSpecificCapability(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::NAS_SystemInformationGSM_MAP::ValueType v;
      _cn_CommonGSM_MAP_NAS_SysInfo_Type.read(reader, v);
      value.set_cn_CommonGSM_MAP_NAS_SysInfo(v);
   }
   {
      asn1::generated::CN_DomainInformationList::ValueType v;
      _cn_DomainInformationList_Type.read(reader, v);
      value.set_cn_DomainInformationList(v);
   }
   {
      asn1::generated::OngoingMeasRepList::ValueType v;
      _ongoingMeasRepList_Type.read(reader, v);
      value.set_ongoingMeasRepList(v);
   }
   {
      asn1::generated::PredefinedConfigStatusList::ValueType v;
      _predefinedConfigStatusList_Type.read(reader, v);
      value.set_predefinedConfigStatusList(v);
   }
   {
      asn1::generated::SRB_InformationSetupList::ValueType v;
      _srb_InformationList_Type.read(reader, v);
      value.set_srb_InformationList(v);
   }
   {
      asn1::generated::RAB_InformationSetupList::ValueType v;
      _rab_InformationList_Type.read(reader, v);
      value.set_rab_InformationList(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList::ValueType v;
      _ul_TransChInfoList_Type.read(reader, v);
      value.set_ul_TransChInfoList(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy_INTERNAL_asn1__generated__CPCH_SetID_dummy2_INTERNAL_asn1__generated__DRAC_StaticInformationList_tdd_INTERNAL_asn1__NullType::ValueType v;
      _modeSpecificInfo_Type.read(reader, v);
      value.set_modeSpecificInfo(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList::ValueType v;
      _dl_TransChInfoList_Type.read(reader, v);
      value.set_dl_TransChInfoList(v);
   }
   {
      asn1::generated::MeasurementReport::ValueType v;
      _measurementReport_Type.read(reader, v);
      value.set_measurementReport(v);
   }

   reader.readSequenceEnd(*this);
}

void SRNC_RelocationInfo_r3_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _stateOfRRC_Type.write(writer, value.get_stateOfRRC());
   _stateOfRRC_Procedure_Type.write(writer, value.get_stateOfRRC_Procedure());
   _cipheringStatus_Type.write(writer, value.get_cipheringStatus());
   _calculationTimeForCiphering_Type.write(writer, value.get_calculationTimeForCiphering());
   _cipheringInfoPerRB_List_Type.write(writer, value.get_cipheringInfoPerRB_List());
   _count_C_List_Type.write(writer, value.get_count_C_List());
   _integrityProtectionStatus_Type.write(writer, value.get_integrityProtectionStatus());
   _srb_SpecificIntegrityProtInfo_Type.write(writer, value.get_srb_SpecificIntegrityProtInfo());
   _implementationSpecificParams_Type.write(writer, value.get_implementationSpecificParams());
   _u_RNTI_Type.write(writer, value.get_u_RNTI());
   _c_RNTI_Type.write(writer, value.get_c_RNTI());
   _ue_RadioAccessCapability_Type.write(writer, value.get_ue_RadioAccessCapability());
   _ue_Positioning_LastKnownPos_Type.write(writer, value.get_ue_Positioning_LastKnownPos());
   _ue_RATSpecificCapability_Type.write(writer, value.get_ue_RATSpecificCapability());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _cn_CommonGSM_MAP_NAS_SysInfo_Type.write(writer, value.get_cn_CommonGSM_MAP_NAS_SysInfo());
   _cn_DomainInformationList_Type.write(writer, value.get_cn_DomainInformationList());
   _ongoingMeasRepList_Type.write(writer, value.get_ongoingMeasRepList());
   _predefinedConfigStatusList_Type.write(writer, value.get_predefinedConfigStatusList());
   _srb_InformationList_Type.write(writer, value.get_srb_InformationList());
   _rab_InformationList_Type.write(writer, value.get_rab_InformationList());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_TransChInfoList_Type.write(writer, value.get_ul_TransChInfoList());
   _modeSpecificInfo_Type.write(writer, value.get_modeSpecificInfo());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_TransChInfoList_Type.write(writer, value.get_dl_TransChInfoList());
   _measurementReport_Type.write(writer, value.get_measurementReport());

   writer.writeSequenceEnd();
}


void SRNC_RelocationInfo_v380ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _cn_DomainIdentity_Type.read(reader, v);
      value.set_cn_DomainIdentity(v);
   }
   {
      asn1::generated::CipheringStatusList::ValueType v;
      _cipheringStatusList_Type.read(reader, v);
      value.set_cipheringStatusList(v);
   }

   reader.readSequenceEnd(*this);
}

void SRNC_RelocationInfo_v380ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cn_DomainIdentity_Type.write(writer, value.get_cn_DomainIdentity());
   _cipheringStatusList_Type.write(writer, value.get_cipheringStatusList());

   writer.writeSequenceEnd();
}


void SRNC_RelocationInfo_v390ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CN_DomainInformationList_v390ext::ValueType v;
      _cn_DomainInformationList_v390ext_Type.read(reader, v);
      value.set_cn_DomainInformationList_v390ext(v);
   }
   {
      asn1::generated::UE_RadioAccessCapability_v370ext::ValueType v;
      _ue_RadioAccessCapability_v370ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v370ext(v);
   }
   {
      asn1::generated::UE_RadioAccessCapability_v380ext::ValueType v;
      _ue_RadioAccessCapability_v380ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v380ext(v);
   }
   {
      asn1::generated::DL_PhysChCapabilityFDD_v380ext::ValueType v;
      _dl_PhysChCapabilityFDD_v380ext_Type.read(reader, v);
      value.set_dl_PhysChCapabilityFDD_v380ext(v);
   }
   {
      asn1::generated::FailureCauseWithProtErr::ValueType v;
      _failureCauseWithProtErr_Type.read(reader, v);
      value.set_failureCauseWithProtErr(v);
   }

   reader.readSequenceEnd(*this);
}

void SRNC_RelocationInfo_v390ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cn_DomainInformationList_v390ext_Type.write(writer, value.get_cn_DomainInformationList_v390ext());
   _ue_RadioAccessCapability_v370ext_Type.write(writer, value.get_ue_RadioAccessCapability_v370ext());
   _ue_RadioAccessCapability_v380ext_Type.write(writer, value.get_ue_RadioAccessCapability_v380ext());
   _dl_PhysChCapabilityFDD_v380ext_Type.write(writer, value.get_dl_PhysChCapabilityFDD_v380ext());
   _failureCauseWithProtErr_Type.write(writer, value.get_failureCauseWithProtErr());

   writer.writeSequenceEnd();
}


void SRNC_RelocationInfo_v3a0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CipheringInfoPerRB_List_v3a0ext::ValueType v;
      _cipheringInfoForSRB1_v3a0ext_Type.read(reader, v);
      value.set_cipheringInfoForSRB1_v3a0ext(v);
   }
   {
      asn1::generated::UE_RadioAccessCapability_v3a0ext::ValueType v;
      _ue_RadioAccessCapability_v3a0ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v3a0ext(v);
   }
   {
      asn1::generated::START_Value::ValueType v;
      _startValueForCiphering_v3a0ext_Type.read(reader, v);
      value.set_startValueForCiphering_v3a0ext(v);
   }

   reader.readSequenceEnd(*this);
}

void SRNC_RelocationInfo_v3a0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cipheringInfoForSRB1_v3a0ext_Type.write(writer, value.get_cipheringInfoForSRB1_v3a0ext());
   _ue_RadioAccessCapability_v3a0ext_Type.write(writer, value.get_ue_RadioAccessCapability_v3a0ext());
   _startValueForCiphering_v3a0ext_Type.write(writer, value.get_startValueForCiphering_v3a0ext());

   writer.writeSequenceEnd();
}


void SRNC_RelocationInfo_v3b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _cn_DomainIdentity_Type.read(reader, v);
      value.set_cn_DomainIdentity(v);
   }
   {
      asn1::generated::STARTList2::ValueType v;
      _startValueForCiphering_v3b0ext_Type.read(reader, v);
      value.set_startValueForCiphering_v3b0ext(v);
   }

   reader.readSequenceEnd(*this);
}

void SRNC_RelocationInfo_v3b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cn_DomainIdentity_Type.write(writer, value.get_cn_DomainIdentity());
   _startValueForCiphering_v3b0ext_Type.write(writer, value.get_startValueForCiphering_v3b0ext());

   writer.writeSequenceEnd();
}


void SRNC_RelocationInfo_v3c0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_IdentityForHOMessage_Type.read(reader, v);
      value.set_rb_IdentityForHOMessage(v);
   }

   reader.readSequenceEnd(*this);
}

void SRNC_RelocationInfo_v3c0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_IdentityForHOMessage_Type.write(writer, value.get_rb_IdentityForHOMessage());

   writer.writeSequenceEnd();
}


void SRNC_RelocationInfo_v3d0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UESpecificBehaviourInformation1idle::ValueType v;
      _uESpecificBehaviourInformation1idle_Type.read(reader, v);
      value.set_uESpecificBehaviourInformation1idle(v);
   }
   {
      asn1::generated::UESpecificBehaviourInformation1interRAT::ValueType v;
      _uESpecificBehaviourInformation1interRAT_Type.read(reader, v);
      value.set_uESpecificBehaviourInformation1interRAT(v);
   }

   reader.readSequenceEnd(*this);
}

void SRNC_RelocationInfo_v3d0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _uESpecificBehaviourInformation1idle_Type.write(writer, value.get_uESpecificBehaviourInformation1idle());
   _uESpecificBehaviourInformation1interRAT_Type.write(writer, value.get_uESpecificBehaviourInformation1interRAT());

   writer.writeSequenceEnd();
}


void SRNC_RelocationInfo_v3g0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v3g0ext::ValueType v;
      _ue_RadioAccessCapability_v3g0ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v3g0ext(v);
   }

   reader.readSequenceEnd(*this);
}

void SRNC_RelocationInfo_v3g0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v3g0ext_Type.write(writer, value.get_ue_RadioAccessCapability_v3g0ext());

   writer.writeSequenceEnd();
}


void SRNC_RelocationInfo_v3h0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TPC_CombinationInfoList::ValueType v;
      _tpc_CombinationInfoList_Type.read(reader, v);
      value.set_tpc_CombinationInfoList(v);
   }
   {
      _INTERNAL__SequenceType::ValueType v;
      _nonCriticalExtension_Type.read(reader, v);
      value.set_nonCriticalExtension(v);
   }

   reader.readSequenceEnd(*this);
}

void SRNC_RelocationInfo_v3h0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tpc_CombinationInfoList_Type.write(writer, value.get_tpc_CombinationInfoList());
   _nonCriticalExtension_Type.write(writer, value.get_nonCriticalExtension());

   writer.writeSequenceEnd();
}


void SRNC_RelocationInfo_v4d0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TPC_CombinationInfoList::ValueType v;
      _tpc_CombinationInfoList_Type.read(reader, v);
      value.set_tpc_CombinationInfoList(v);
   }

   reader.readSequenceEnd(*this);
}

void SRNC_RelocationInfo_v4d0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tpc_CombinationInfoList_Type.write(writer, value.get_tpc_CombinationInfoList());

   writer.writeSequenceEnd();
}


void SRNC_RelocationInfo_v4b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v4b0ext::ValueType v;
      _ue_RadioAccessCapability_v4b0ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v4b0ext(v);
   }

   reader.readSequenceEnd(*this);
}

void SRNC_RelocationInfo_v4b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v4b0ext_Type.write(writer, value.get_ue_RadioAccessCapability_v4b0ext());

   writer.writeSequenceEnd();
}


void SRNC_RelocationInfo_v590ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v590ext::ValueType v;
      _ue_RadioAccessCapability_v590ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v590ext(v);
   }
   {
      asn1::generated::InterRAT_UE_RadioAccessCapability_v590ext::ValueType v;
      _ue_RATSpecificCapability_v590ext_Type.read(reader, v);
      value.set_ue_RATSpecificCapability_v590ext(v);
   }

   reader.readSequenceEnd(*this);
}

void SRNC_RelocationInfo_v590ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v590ext_Type.write(writer, value.get_ue_RadioAccessCapability_v590ext());
   _ue_RATSpecificCapability_v590ext_Type.write(writer, value.get_ue_RATSpecificCapability_v590ext());

   writer.writeSequenceEnd();
}


void SRNC_RelocationInfo_v5a0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::StoredCompressedModeInfo::ValueType v;
      _storedCompressedModeInfo_Type.read(reader, v);
      value.set_storedCompressedModeInfo(v);
   }

   reader.readSequenceEnd(*this);
}

void SRNC_RelocationInfo_v5a0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _storedCompressedModeInfo_Type.write(writer, value.get_storedCompressedModeInfo());

   writer.writeSequenceEnd();
}


void SRNC_RelocationInfo_v5b0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterRATCellInfoIndication::ValueType v;
      _interRATCellInfoIndication_Type.read(reader, v);
      value.set_interRATCellInfoIndication(v);
   }

   reader.readSequenceEnd(*this);
}

void SRNC_RelocationInfo_v5b0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interRATCellInfoIndication_Type.write(writer, value.get_interRATCellInfoIndication());

   writer.writeSequenceEnd();
}


void SRNC_RelocationInfo_v5c0ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v5c0ext::ValueType v;
      _ue_RadioAccessCapability_v5c0ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v5c0ext(v);
   }

   reader.readSequenceEnd(*this);
}

void SRNC_RelocationInfo_v5c0ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v5c0ext_Type.write(writer, value.get_ue_RadioAccessCapability_v5c0ext());

   writer.writeSequenceEnd();
}


void SRNC_RelocationInfo_v7xyext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::UE_RadioAccessCapability_v7xyext::ValueType v;
      _ue_RadioAccessCapability_v7xyext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_v7xyext(v);
   }

   reader.readSequenceEnd(*this);
}

void SRNC_RelocationInfo_v7xyext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ue_RadioAccessCapability_v7xyext_Type.write(writer, value.get_ue_RadioAccessCapability_v7xyext());

   writer.writeSequenceEnd();
}


void CipheringInfoPerRB_List_v3a0ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _dl_UM_SN_Type.read(reader, v);
      value.set_dl_UM_SN(v);
   }

   reader.readSequenceEnd(*this);
}

void CipheringInfoPerRB_List_v3a0ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_UM_SN_Type.write(writer, value.get_dl_UM_SN());

   writer.writeSequenceEnd();
}


void CipheringStatusCNdomain::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _cn_DomainIdentity_Type.read(reader, v);
      value.set_cn_DomainIdentity(v);
   }
   {
      asn1::generated::CipheringStatus::ValueType v;
      _cipheringStatus_Type.read(reader, v);
      value.set_cipheringStatus(v);
   }

   reader.readSequenceEnd(*this);
}

void CipheringStatusCNdomain::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cn_DomainIdentity_Type.write(writer, value.get_cn_DomainIdentity());
   _cipheringStatus_Type.write(writer, value.get_cipheringStatus());

   writer.writeSequenceEnd();
}


void CodeChangeStatus::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PrimaryCPICH_Info::ValueType v;
      _primaryCPICH_Info_Type.read(reader, v);
      value.set_primaryCPICH_Info(v);
   }
   {
      asn1::generated::ScramblingCodeChange::ValueType v;
      _scramblingCodeChange_Type.read(reader, v);
      value.set_scramblingCodeChange(v);
   }

   reader.readSequenceEnd(*this);
}

void CodeChangeStatus::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _primaryCPICH_Info_Type.write(writer, value.get_primaryCPICH_Info());
   _scramblingCodeChange_Type.write(writer, value.get_scramblingCodeChange());

   writer.writeSequenceEnd();
}


void StoredCompressedModeInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::StoredTGP_SequenceList::ValueType v;
      _storedTGP_SequenceList_Type.read(reader, v);
      value.set_storedTGP_SequenceList(v);
   }
   {
      asn1::generated::CodeChangeStatusList::ValueType v;
      _codeChangeStatusList_Type.read(reader, v);
      value.set_codeChangeStatusList(v);
   }

   reader.readSequenceEnd(*this);
}

void StoredCompressedModeInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _storedTGP_SequenceList_Type.write(writer, value.get_storedTGP_SequenceList());
   _codeChangeStatusList_Type.write(writer, value.get_codeChangeStatusList());

   writer.writeSequenceEnd();
}


void StoredTGP_Sequence::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TGPSI::ValueType v;
      _tgpsi_Type.read(reader, v);
      value.set_tgpsi(v);
   }
   {
      _INTERNAL__ChoiceType_active_INTERNAL__SequenceType_tgcfn_INTERNAL_asn1__generated__TGCFN_inactive_INTERNAL_asn1__NullType::ValueType v;
      _current_tgps_Status_Type.read(reader, v);
      value.set_current_tgps_Status(v);
   }
   {
      asn1::generated::TGPS_ConfigurationParams::ValueType v;
      _tgps_ConfigurationParams_Type.read(reader, v);
      value.set_tgps_ConfigurationParams(v);
   }

   reader.readSequenceEnd(*this);
}

void StoredTGP_Sequence::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _tgpsi_Type.write(writer, value.get_tgpsi());
   _current_tgps_Status_Type.write(writer, value.get_current_tgps_Status());
   _tgps_ConfigurationParams_Type.write(writer, value.get_tgps_ConfigurationParams());

   writer.writeSequenceEnd();
}


void SRNC_RelocationInfo_r4_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_IdentityForHOMessage_Type.read(reader, v);
      value.set_rb_IdentityForHOMessage(v);
   }
   {
      asn1::generated::StateOfRRC::ValueType v;
      _stateOfRRC_Type.read(reader, v);
      value.set_stateOfRRC(v);
   }
   {
      asn1::generated::StateOfRRC_Procedure::ValueType v;
      _stateOfRRC_Procedure_Type.read(reader, v);
      value.set_stateOfRRC_Procedure(v);
   }
   {
      asn1::generated::CipheringStatusList_r4::ValueType v;
      _cipheringStatusList_Type.read(reader, v);
      value.set_cipheringStatusList(v);
   }
   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _latestConfiguredCN_Domain_Type.read(reader, v);
      value.set_latestConfiguredCN_Domain(v);
   }
   {
      asn1::generated::CalculationTimeForCiphering::ValueType v;
      _calculationTimeForCiphering_Type.read(reader, v);
      value.set_calculationTimeForCiphering(v);
   }
   {
      asn1::generated::COUNT_C_List::ValueType v;
      _count_C_List_Type.read(reader, v);
      value.set_count_C_List(v);
   }
   {
      asn1::generated::CipheringInfoPerRB_List_r4::ValueType v;
      _cipheringInfoPerRB_List_Type.read(reader, v);
      value.set_cipheringInfoPerRB_List(v);
   }
   {
      asn1::generated::IntegrityProtectionStatus::ValueType v;
      _integrityProtectionStatus_Type.read(reader, v);
      value.set_integrityProtectionStatus(v);
   }
   {
      asn1::generated::SRB_SpecificIntegrityProtInfoList::ValueType v;
      _srb_SpecificIntegrityProtInfo_Type.read(reader, v);
      value.set_srb_SpecificIntegrityProtInfo(v);
   }
   {
      asn1::generated::ImplementationSpecificParams::ValueType v;
      _implementationSpecificParams_Type.read(reader, v);
      value.set_implementationSpecificParams(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _u_RNTI_Type.read(reader, v);
      value.set_u_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _c_RNTI_Type.read(reader, v);
      value.set_c_RNTI(v);
   }
   {
      asn1::generated::UE_RadioAccessCapability_r4::ValueType v;
      _ue_RadioAccessCapability_Type.read(reader, v);
      value.set_ue_RadioAccessCapability(v);
   }
   {
      asn1::generated::UE_RadioAccessCapabBandFDDList::ValueType v;
      _ue_RadioAccessCapability_ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_ext(v);
   }
   {
      asn1::generated::UE_Positioning_LastKnownPos::ValueType v;
      _ue_Positioning_LastKnownPos_Type.read(reader, v);
      value.set_ue_Positioning_LastKnownPos(v);
   }
   {
      asn1::generated::UESpecificBehaviourInformation1idle::ValueType v;
      _uESpecificBehaviourInformation1idle_Type.read(reader, v);
      value.set_uESpecificBehaviourInformation1idle(v);
   }
   {
      asn1::generated::UESpecificBehaviourInformation1interRAT::ValueType v;
      _uESpecificBehaviourInformation1interRAT_Type.read(reader, v);
      value.set_uESpecificBehaviourInformation1interRAT(v);
   }
   {
      asn1::generated::InterRAT_UE_RadioAccessCapabilityList::ValueType v;
      _ue_RATSpecificCapability_Type.read(reader, v);
      value.set_ue_RATSpecificCapability(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::NAS_SystemInformationGSM_MAP::ValueType v;
      _cn_CommonGSM_MAP_NAS_SysInfo_Type.read(reader, v);
      value.set_cn_CommonGSM_MAP_NAS_SysInfo(v);
   }
   {
      asn1::generated::CN_DomainInformationListFull::ValueType v;
      _cn_DomainInformationList_Type.read(reader, v);
      value.set_cn_DomainInformationList(v);
   }
   {
      asn1::generated::OngoingMeasRepList_r4::ValueType v;
      _ongoingMeasRepList_Type.read(reader, v);
      value.set_ongoingMeasRepList(v);
   }
   {
      asn1::generated::PredefinedConfigStatusList::ValueType v;
      _predefinedConfigStatusList_Type.read(reader, v);
      value.set_predefinedConfigStatusList(v);
   }
   {
      asn1::generated::SRB_InformationSetupList::ValueType v;
      _srb_InformationList_Type.read(reader, v);
      value.set_srb_InformationList(v);
   }
   {
      asn1::generated::RAB_InformationSetupList_r4::ValueType v;
      _rab_InformationList_Type.read(reader, v);
      value.set_rab_InformationList(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo_r4::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList::ValueType v;
      _ul_TransChInfoList_Type.read(reader, v);
      value.set_ul_TransChInfoList(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy1_INTERNAL_asn1__generated__CPCH_SetID_dummy2_INTERNAL_asn1__generated__DRAC_StaticInformationList_tdd_INTERNAL_asn1__NullType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo_r4::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList_r4::ValueType v;
      _dl_TransChInfoList_Type.read(reader, v);
      value.set_dl_TransChInfoList(v);
   }
   {
      asn1::generated::MeasurementReport::ValueType v;
      _measurementReport_Type.read(reader, v);
      value.set_measurementReport(v);
   }
   {
      asn1::generated::FailureCauseWithProtErr::ValueType v;
      _failureCause_Type.read(reader, v);
      value.set_failureCause(v);
   }

   reader.readSequenceEnd(*this);
}

void SRNC_RelocationInfo_r4_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_IdentityForHOMessage_Type.write(writer, value.get_rb_IdentityForHOMessage());
   _stateOfRRC_Type.write(writer, value.get_stateOfRRC());
   _stateOfRRC_Procedure_Type.write(writer, value.get_stateOfRRC_Procedure());
   _cipheringStatusList_Type.write(writer, value.get_cipheringStatusList());
   _latestConfiguredCN_Domain_Type.write(writer, value.get_latestConfiguredCN_Domain());
   _calculationTimeForCiphering_Type.write(writer, value.get_calculationTimeForCiphering());
   _count_C_List_Type.write(writer, value.get_count_C_List());
   _cipheringInfoPerRB_List_Type.write(writer, value.get_cipheringInfoPerRB_List());
   _integrityProtectionStatus_Type.write(writer, value.get_integrityProtectionStatus());
   _srb_SpecificIntegrityProtInfo_Type.write(writer, value.get_srb_SpecificIntegrityProtInfo());
   _implementationSpecificParams_Type.write(writer, value.get_implementationSpecificParams());
   _u_RNTI_Type.write(writer, value.get_u_RNTI());
   _c_RNTI_Type.write(writer, value.get_c_RNTI());
   _ue_RadioAccessCapability_Type.write(writer, value.get_ue_RadioAccessCapability());
   _ue_RadioAccessCapability_ext_Type.write(writer, value.get_ue_RadioAccessCapability_ext());
   _ue_Positioning_LastKnownPos_Type.write(writer, value.get_ue_Positioning_LastKnownPos());
   _uESpecificBehaviourInformation1idle_Type.write(writer, value.get_uESpecificBehaviourInformation1idle());
   _uESpecificBehaviourInformation1interRAT_Type.write(writer, value.get_uESpecificBehaviourInformation1interRAT());
   _ue_RATSpecificCapability_Type.write(writer, value.get_ue_RATSpecificCapability());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _cn_CommonGSM_MAP_NAS_SysInfo_Type.write(writer, value.get_cn_CommonGSM_MAP_NAS_SysInfo());
   _cn_DomainInformationList_Type.write(writer, value.get_cn_DomainInformationList());
   _ongoingMeasRepList_Type.write(writer, value.get_ongoingMeasRepList());
   _predefinedConfigStatusList_Type.write(writer, value.get_predefinedConfigStatusList());
   _srb_InformationList_Type.write(writer, value.get_srb_InformationList());
   _rab_InformationList_Type.write(writer, value.get_rab_InformationList());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_TransChInfoList_Type.write(writer, value.get_ul_TransChInfoList());
   _dummy_Type.write(writer, value.get_dummy());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_TransChInfoList_Type.write(writer, value.get_dl_TransChInfoList());
   _measurementReport_Type.write(writer, value.get_measurementReport());
   _failureCause_Type.write(writer, value.get_failureCause());

   writer.writeSequenceEnd();
}


void SRNC_RelocationInfo_r5_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_IdentityForHOMessage_Type.read(reader, v);
      value.set_rb_IdentityForHOMessage(v);
   }
   {
      asn1::generated::StateOfRRC::ValueType v;
      _stateOfRRC_Type.read(reader, v);
      value.set_stateOfRRC(v);
   }
   {
      asn1::generated::StateOfRRC_Procedure::ValueType v;
      _stateOfRRC_Procedure_Type.read(reader, v);
      value.set_stateOfRRC_Procedure(v);
   }
   {
      asn1::generated::CipheringStatusList_r4::ValueType v;
      _cipheringStatusList_Type.read(reader, v);
      value.set_cipheringStatusList(v);
   }
   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _latestConfiguredCN_Domain_Type.read(reader, v);
      value.set_latestConfiguredCN_Domain(v);
   }
   {
      asn1::generated::CalculationTimeForCiphering::ValueType v;
      _calculationTimeForCiphering_Type.read(reader, v);
      value.set_calculationTimeForCiphering(v);
   }
   {
      asn1::generated::COUNT_C_List::ValueType v;
      _count_C_List_Type.read(reader, v);
      value.set_count_C_List(v);
   }
   {
      asn1::generated::CipheringInfoPerRB_List_r4::ValueType v;
      _cipheringInfoPerRB_List_Type.read(reader, v);
      value.set_cipheringInfoPerRB_List(v);
   }
   {
      asn1::generated::IntegrityProtectionStatus::ValueType v;
      _integrityProtectionStatus_Type.read(reader, v);
      value.set_integrityProtectionStatus(v);
   }
   {
      asn1::generated::SRB_SpecificIntegrityProtInfoList::ValueType v;
      _srb_SpecificIntegrityProtInfo_Type.read(reader, v);
      value.set_srb_SpecificIntegrityProtInfo(v);
   }
   {
      asn1::generated::ImplementationSpecificParams::ValueType v;
      _implementationSpecificParams_Type.read(reader, v);
      value.set_implementationSpecificParams(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _u_RNTI_Type.read(reader, v);
      value.set_u_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _c_RNTI_Type.read(reader, v);
      value.set_c_RNTI(v);
   }
   {
      asn1::generated::UE_RadioAccessCapability_r5::ValueType v;
      _ue_RadioAccessCapability_Type.read(reader, v);
      value.set_ue_RadioAccessCapability(v);
   }
   {
      asn1::generated::UE_RadioAccessCapabBandFDDList::ValueType v;
      _ue_RadioAccessCapability_ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_ext(v);
   }
   {
      asn1::generated::UE_Positioning_LastKnownPos::ValueType v;
      _ue_Positioning_LastKnownPos_Type.read(reader, v);
      value.set_ue_Positioning_LastKnownPos(v);
   }
   {
      asn1::generated::UESpecificBehaviourInformation1idle::ValueType v;
      _uESpecificBehaviourInformation1idle_Type.read(reader, v);
      value.set_uESpecificBehaviourInformation1idle(v);
   }
   {
      asn1::generated::UESpecificBehaviourInformation1interRAT::ValueType v;
      _uESpecificBehaviourInformation1interRAT_Type.read(reader, v);
      value.set_uESpecificBehaviourInformation1interRAT(v);
   }
   {
      asn1::generated::InterRAT_UE_RadioAccessCapabilityList_r5::ValueType v;
      _ue_RATSpecificCapability_Type.read(reader, v);
      value.set_ue_RATSpecificCapability(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::NAS_SystemInformationGSM_MAP::ValueType v;
      _cn_CommonGSM_MAP_NAS_SysInfo_Type.read(reader, v);
      value.set_cn_CommonGSM_MAP_NAS_SysInfo(v);
   }
   {
      asn1::generated::CN_DomainInformationListFull::ValueType v;
      _cn_DomainInformationList_Type.read(reader, v);
      value.set_cn_DomainInformationList(v);
   }
   {
      asn1::generated::OngoingMeasRepList_r5::ValueType v;
      _ongoingMeasRepList_Type.read(reader, v);
      value.set_ongoingMeasRepList(v);
   }
   {
      asn1::generated::PredefinedConfigStatusList::ValueType v;
      _predefinedConfigStatusList_Type.read(reader, v);
      value.set_predefinedConfigStatusList(v);
   }
   {
      asn1::generated::SRB_InformationSetupList_r5::ValueType v;
      _srb_InformationList_Type.read(reader, v);
      value.set_srb_InformationList(v);
   }
   {
      asn1::generated::RAB_InformationSetupList_r5::ValueType v;
      _rab_InformationList_Type.read(reader, v);
      value.set_rab_InformationList(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo_r4::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList::ValueType v;
      _ul_TransChInfoList_Type.read(reader, v);
      value.set_ul_TransChInfoList(v);
   }
   {
      _INTERNAL__ChoiceType_fdd_INTERNAL__SequenceType_dummy1_INTERNAL_asn1__generated__CPCH_SetID_dummy2_INTERNAL_asn1__generated__DRAC_StaticInformationList_tdd_INTERNAL_asn1__NullType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo_r4::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList_r5::ValueType v;
      _dl_TransChInfoList_Type.read(reader, v);
      value.set_dl_TransChInfoList(v);
   }
   {
      asn1::generated::TPC_CombinationInfoList::ValueType v;
      _tpc_CombinationInfoList_Type.read(reader, v);
      value.set_tpc_CombinationInfoList(v);
   }
   {
      asn1::generated::MeasurementReport::ValueType v;
      _measurementReport_Type.read(reader, v);
      value.set_measurementReport(v);
   }
   {
      asn1::generated::FailureCauseWithProtErr::ValueType v;
      _failureCause_Type.read(reader, v);
      value.set_failureCause(v);
   }

   reader.readSequenceEnd(*this);
}

void SRNC_RelocationInfo_r5_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_IdentityForHOMessage_Type.write(writer, value.get_rb_IdentityForHOMessage());
   _stateOfRRC_Type.write(writer, value.get_stateOfRRC());
   _stateOfRRC_Procedure_Type.write(writer, value.get_stateOfRRC_Procedure());
   _cipheringStatusList_Type.write(writer, value.get_cipheringStatusList());
   _latestConfiguredCN_Domain_Type.write(writer, value.get_latestConfiguredCN_Domain());
   _calculationTimeForCiphering_Type.write(writer, value.get_calculationTimeForCiphering());
   _count_C_List_Type.write(writer, value.get_count_C_List());
   _cipheringInfoPerRB_List_Type.write(writer, value.get_cipheringInfoPerRB_List());
   _integrityProtectionStatus_Type.write(writer, value.get_integrityProtectionStatus());
   _srb_SpecificIntegrityProtInfo_Type.write(writer, value.get_srb_SpecificIntegrityProtInfo());
   _implementationSpecificParams_Type.write(writer, value.get_implementationSpecificParams());
   _u_RNTI_Type.write(writer, value.get_u_RNTI());
   _c_RNTI_Type.write(writer, value.get_c_RNTI());
   _ue_RadioAccessCapability_Type.write(writer, value.get_ue_RadioAccessCapability());
   _ue_RadioAccessCapability_ext_Type.write(writer, value.get_ue_RadioAccessCapability_ext());
   _ue_Positioning_LastKnownPos_Type.write(writer, value.get_ue_Positioning_LastKnownPos());
   _uESpecificBehaviourInformation1idle_Type.write(writer, value.get_uESpecificBehaviourInformation1idle());
   _uESpecificBehaviourInformation1interRAT_Type.write(writer, value.get_uESpecificBehaviourInformation1interRAT());
   _ue_RATSpecificCapability_Type.write(writer, value.get_ue_RATSpecificCapability());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _cn_CommonGSM_MAP_NAS_SysInfo_Type.write(writer, value.get_cn_CommonGSM_MAP_NAS_SysInfo());
   _cn_DomainInformationList_Type.write(writer, value.get_cn_DomainInformationList());
   _ongoingMeasRepList_Type.write(writer, value.get_ongoingMeasRepList());
   _predefinedConfigStatusList_Type.write(writer, value.get_predefinedConfigStatusList());
   _srb_InformationList_Type.write(writer, value.get_srb_InformationList());
   _rab_InformationList_Type.write(writer, value.get_rab_InformationList());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_TransChInfoList_Type.write(writer, value.get_ul_TransChInfoList());
   _dummy_Type.write(writer, value.get_dummy());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_TransChInfoList_Type.write(writer, value.get_dl_TransChInfoList());
   _tpc_CombinationInfoList_Type.write(writer, value.get_tpc_CombinationInfoList());
   _measurementReport_Type.write(writer, value.get_measurementReport());
   _failureCause_Type.write(writer, value.get_failureCause());

   writer.writeSequenceEnd();
}


void SRNC_RelocationInfo_v690ext_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _ueCapabilityContainer_Type.read(reader, v);
      value.set_ueCapabilityContainer(v);
   }
   {
      _INTERNAL_::ValueType v;
      _ueCapabilityContainer_RSC_Type.read(reader, v);
      value.set_ueCapabilityContainer_RSC(v);
   }
   {
      _INTERNAL_::ValueType v;
      _ueCapabilityContainer_UCI_Type.read(reader, v);
      value.set_ueCapabilityContainer_UCI(v);
   }
   {
      asn1::generated::RAB_InformationSetupList_r6_ext::ValueType v;
      _rab_InformationSetupList_Type.read(reader, v);
      value.set_rab_InformationSetupList(v);
   }
   {
      asn1::generated::MeasuredResultsOnRACHinterFreq::ValueType v;
      _measuredResultsOnRACHinterFreq_Type.read(reader, v);
      value.set_measuredResultsOnRACHinterFreq(v);
   }
   {
      asn1::generated::MBMS_JoinedInformation_r6::ValueType v;
      _mbms_JoinedInformation_Type.read(reader, v);
      value.set_mbms_JoinedInformation(v);
   }
   {
      asn1::generated::IntraFreqReportingCriteria_r6_ext::ValueType v;
      _intraFreqReportingCriteria_Type.read(reader, v);
      value.set_intraFreqReportingCriteria(v);
   }

   reader.readSequenceEnd(*this);
}

void SRNC_RelocationInfo_v690ext_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ueCapabilityContainer_Type.write(writer, value.get_ueCapabilityContainer());
   _ueCapabilityContainer_RSC_Type.write(writer, value.get_ueCapabilityContainer_RSC());
   _ueCapabilityContainer_UCI_Type.write(writer, value.get_ueCapabilityContainer_UCI());
   _rab_InformationSetupList_Type.write(writer, value.get_rab_InformationSetupList());
   _measuredResultsOnRACHinterFreq_Type.write(writer, value.get_measuredResultsOnRACHinterFreq());
   _mbms_JoinedInformation_Type.write(writer, value.get_mbms_JoinedInformation());
   _intraFreqReportingCriteria_Type.write(writer, value.get_intraFreqReportingCriteria());

   writer.writeSequenceEnd();
}


void SRNC_RelocationInfo_r6_IEs::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_IdentityForHOMessage_Type.read(reader, v);
      value.set_rb_IdentityForHOMessage(v);
   }
   {
      asn1::generated::StateOfRRC::ValueType v;
      _stateOfRRC_Type.read(reader, v);
      value.set_stateOfRRC(v);
   }
   {
      asn1::generated::StateOfRRC_Procedure::ValueType v;
      _stateOfRRC_Procedure_Type.read(reader, v);
      value.set_stateOfRRC_Procedure(v);
   }
   {
      asn1::generated::CipheringStatusList_r4::ValueType v;
      _cipheringStatusList_Type.read(reader, v);
      value.set_cipheringStatusList(v);
   }
   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _latestConfiguredCN_Domain_Type.read(reader, v);
      value.set_latestConfiguredCN_Domain(v);
   }
   {
      asn1::generated::CalculationTimeForCiphering::ValueType v;
      _calculationTimeForCiphering_Type.read(reader, v);
      value.set_calculationTimeForCiphering(v);
   }
   {
      asn1::generated::COUNT_C_List::ValueType v;
      _count_C_List_Type.read(reader, v);
      value.set_count_C_List(v);
   }
   {
      asn1::generated::CipheringInfoPerRB_List_r4::ValueType v;
      _cipheringInfoPerRB_List_Type.read(reader, v);
      value.set_cipheringInfoPerRB_List(v);
   }
   {
      asn1::generated::IntegrityProtectionStatus::ValueType v;
      _integrityProtectionStatus_Type.read(reader, v);
      value.set_integrityProtectionStatus(v);
   }
   {
      asn1::generated::SRB_SpecificIntegrityProtInfoList::ValueType v;
      _srb_SpecificIntegrityProtInfo_Type.read(reader, v);
      value.set_srb_SpecificIntegrityProtInfo(v);
   }
   {
      asn1::generated::ImplementationSpecificParams::ValueType v;
      _implementationSpecificParams_Type.read(reader, v);
      value.set_implementationSpecificParams(v);
   }
   {
      asn1::generated::U_RNTI::ValueType v;
      _u_RNTI_Type.read(reader, v);
      value.set_u_RNTI(v);
   }
   {
      asn1::generated::C_RNTI::ValueType v;
      _c_RNTI_Type.read(reader, v);
      value.set_c_RNTI(v);
   }
   {
      asn1::generated::UE_RadioAccessCapability_r6::ValueType v;
      _ue_RadioAccessCapability_Type.read(reader, v);
      value.set_ue_RadioAccessCapability(v);
   }
   {
      asn1::generated::UE_RadioAccessCapabBandFDDList::ValueType v;
      _ue_RadioAccessCapability_ext_Type.read(reader, v);
      value.set_ue_RadioAccessCapability_ext(v);
   }
   {
      asn1::generated::UE_Positioning_LastKnownPos::ValueType v;
      _ue_Positioning_LastKnownPos_Type.read(reader, v);
      value.set_ue_Positioning_LastKnownPos(v);
   }
   {
      asn1::generated::UESpecificBehaviourInformation1idle::ValueType v;
      _uESpecificBehaviourInformation1idle_Type.read(reader, v);
      value.set_uESpecificBehaviourInformation1idle(v);
   }
   {
      asn1::generated::UESpecificBehaviourInformation1interRAT::ValueType v;
      _uESpecificBehaviourInformation1interRAT_Type.read(reader, v);
      value.set_uESpecificBehaviourInformation1interRAT(v);
   }
   {
      _INTERNAL_::ValueType v;
      _ueCapabilityContainer_Type.read(reader, v);
      value.set_ueCapabilityContainer(v);
   }
   {
      _INTERNAL_::ValueType v;
      _ueCapabilityContainer_RSC_Type.read(reader, v);
      value.set_ueCapabilityContainer_RSC(v);
   }
   {
      _INTERNAL_::ValueType v;
      _ueCapabilityContainer_UCI_Type.read(reader, v);
      value.set_ueCapabilityContainer_UCI(v);
   }
   {
      asn1::generated::InterRAT_UE_RadioAccessCapabilityList_r5::ValueType v;
      _ue_RATSpecificCapability_Type.read(reader, v);
      value.set_ue_RATSpecificCapability(v);
   }
   {
      asn1::generated::URA_Identity::ValueType v;
      _ura_Identity_Type.read(reader, v);
      value.set_ura_Identity(v);
   }
   {
      asn1::generated::NAS_SystemInformationGSM_MAP::ValueType v;
      _cn_CommonGSM_MAP_NAS_SysInfo_Type.read(reader, v);
      value.set_cn_CommonGSM_MAP_NAS_SysInfo(v);
   }
   {
      asn1::generated::CN_DomainInformationListFull::ValueType v;
      _cn_DomainInformationList_Type.read(reader, v);
      value.set_cn_DomainInformationList(v);
   }
   {
      asn1::generated::OngoingMeasRepList_r6::ValueType v;
      _ongoingMeasRepList_Type.read(reader, v);
      value.set_ongoingMeasRepList(v);
   }
   {
      asn1::generated::InterRATCellInfoIndication::ValueType v;
      _interRATCellInfoIndication_Type.read(reader, v);
      value.set_interRATCellInfoIndication(v);
   }
   {
      asn1::generated::PredefinedConfigStatusList::ValueType v;
      _predefinedConfigStatusList_Type.read(reader, v);
      value.set_predefinedConfigStatusList(v);
   }
   {
      asn1::generated::SRB_InformationSetupList_r6::ValueType v;
      _srb_InformationList_Type.read(reader, v);
      value.set_srb_InformationList(v);
   }
   {
      asn1::generated::RAB_InformationSetupList_r6::ValueType v;
      _rab_InformationList_Type.read(reader, v);
      value.set_rab_InformationList(v);
   }
   {
      asn1::generated::UL_CommonTransChInfo_r4::ValueType v;
      _ul_CommonTransChInfo_Type.read(reader, v);
      value.set_ul_CommonTransChInfo(v);
   }
   {
      asn1::generated::UL_AddReconfTransChInfoList_r6::ValueType v;
      _ul_TransChInfoList_Type.read(reader, v);
      value.set_ul_TransChInfoList(v);
   }
   {
      asn1::generated::DL_CommonTransChInfo_r4::ValueType v;
      _dl_CommonTransChInfo_Type.read(reader, v);
      value.set_dl_CommonTransChInfo(v);
   }
   {
      asn1::generated::DL_AddReconfTransChInfoList_r5::ValueType v;
      _dl_TransChInfoList_Type.read(reader, v);
      value.set_dl_TransChInfoList(v);
   }
   {
      asn1::generated::TPC_CombinationInfoList::ValueType v;
      _tpc_CombinationInfoList_Type.read(reader, v);
      value.set_tpc_CombinationInfoList(v);
   }
   {
      asn1::generated::StoredCompressedModeInfo::ValueType v;
      _storedCompressedModeInfo_Type.read(reader, v);
      value.set_storedCompressedModeInfo(v);
   }
   {
      _INTERNAL_::ValueType v;
      _measurementReport_Type.read(reader, v);
      value.set_measurementReport(v);
   }
   {
      asn1::generated::FailureCauseWithProtErr::ValueType v;
      _failureCause_Type.read(reader, v);
      value.set_failureCause(v);
   }
   {
      asn1::generated::MBMS_JoinedInformation_r6::ValueType v;
      _mbms_JoinedInformation_Type.read(reader, v);
      value.set_mbms_JoinedInformation(v);
   }

   reader.readSequenceEnd(*this);
}

void SRNC_RelocationInfo_r6_IEs::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_IdentityForHOMessage_Type.write(writer, value.get_rb_IdentityForHOMessage());
   _stateOfRRC_Type.write(writer, value.get_stateOfRRC());
   _stateOfRRC_Procedure_Type.write(writer, value.get_stateOfRRC_Procedure());
   _cipheringStatusList_Type.write(writer, value.get_cipheringStatusList());
   _latestConfiguredCN_Domain_Type.write(writer, value.get_latestConfiguredCN_Domain());
   _calculationTimeForCiphering_Type.write(writer, value.get_calculationTimeForCiphering());
   _count_C_List_Type.write(writer, value.get_count_C_List());
   _cipheringInfoPerRB_List_Type.write(writer, value.get_cipheringInfoPerRB_List());
   _integrityProtectionStatus_Type.write(writer, value.get_integrityProtectionStatus());
   _srb_SpecificIntegrityProtInfo_Type.write(writer, value.get_srb_SpecificIntegrityProtInfo());
   _implementationSpecificParams_Type.write(writer, value.get_implementationSpecificParams());
   _u_RNTI_Type.write(writer, value.get_u_RNTI());
   _c_RNTI_Type.write(writer, value.get_c_RNTI());
   _ue_RadioAccessCapability_Type.write(writer, value.get_ue_RadioAccessCapability());
   _ue_RadioAccessCapability_ext_Type.write(writer, value.get_ue_RadioAccessCapability_ext());
   _ue_Positioning_LastKnownPos_Type.write(writer, value.get_ue_Positioning_LastKnownPos());
   _uESpecificBehaviourInformation1idle_Type.write(writer, value.get_uESpecificBehaviourInformation1idle());
   _uESpecificBehaviourInformation1interRAT_Type.write(writer, value.get_uESpecificBehaviourInformation1interRAT());
   _ueCapabilityContainer_Type.write(writer, value.get_ueCapabilityContainer());
   _ueCapabilityContainer_RSC_Type.write(writer, value.get_ueCapabilityContainer_RSC());
   _ueCapabilityContainer_UCI_Type.write(writer, value.get_ueCapabilityContainer_UCI());
   _ue_RATSpecificCapability_Type.write(writer, value.get_ue_RATSpecificCapability());
   _ura_Identity_Type.write(writer, value.get_ura_Identity());
   _cn_CommonGSM_MAP_NAS_SysInfo_Type.write(writer, value.get_cn_CommonGSM_MAP_NAS_SysInfo());
   _cn_DomainInformationList_Type.write(writer, value.get_cn_DomainInformationList());
   _ongoingMeasRepList_Type.write(writer, value.get_ongoingMeasRepList());
   _interRATCellInfoIndication_Type.write(writer, value.get_interRATCellInfoIndication());
   _predefinedConfigStatusList_Type.write(writer, value.get_predefinedConfigStatusList());
   _srb_InformationList_Type.write(writer, value.get_srb_InformationList());
   _rab_InformationList_Type.write(writer, value.get_rab_InformationList());
   _ul_CommonTransChInfo_Type.write(writer, value.get_ul_CommonTransChInfo());
   _ul_TransChInfoList_Type.write(writer, value.get_ul_TransChInfoList());
   _dl_CommonTransChInfo_Type.write(writer, value.get_dl_CommonTransChInfo());
   _dl_TransChInfoList_Type.write(writer, value.get_dl_TransChInfoList());
   _tpc_CombinationInfoList_Type.write(writer, value.get_tpc_CombinationInfoList());
   _storedCompressedModeInfo_Type.write(writer, value.get_storedCompressedModeInfo());
   _measurementReport_Type.write(writer, value.get_measurementReport());
   _failureCause_Type.write(writer, value.get_failureCause());
   _mbms_JoinedInformation_Type.write(writer, value.get_mbms_JoinedInformation());

   writer.writeSequenceEnd();
}


void CalculationTimeForCiphering::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CellIdentity::ValueType v;
      _cell_Id_Type.read(reader, v);
      value.set_cell_Id(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _sfn_Type.read(reader, v);
      value.set_sfn(v);
   }

   reader.readSequenceEnd(*this);
}

void CalculationTimeForCiphering::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cell_Id_Type.write(writer, value.get_cell_Id());
   _sfn_Type.write(writer, value.get_sfn());

   writer.writeSequenceEnd();
}


void CipheringInfoPerRB::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _dl_HFN_Type.read(reader, v);
      value.set_dl_HFN(v);
   }
   {
      _INTERNAL_::ValueType v;
      _ul_HFN_Type.read(reader, v);
      value.set_ul_HFN(v);
   }

   reader.readSequenceEnd(*this);
}

void CipheringInfoPerRB::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _dl_HFN_Type.write(writer, value.get_dl_HFN());
   _ul_HFN_Type.write(writer, value.get_ul_HFN());

   writer.writeSequenceEnd();
}


void CipheringInfoPerRB_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      _INTERNAL_::ValueType v;
      _dl_HFN_Type.read(reader, v);
      value.set_dl_HFN(v);
   }
   {
      _INTERNAL_::ValueType v;
      _dl_UM_SN_Type.read(reader, v);
      value.set_dl_UM_SN(v);
   }
   {
      _INTERNAL_::ValueType v;
      _ul_HFN_Type.read(reader, v);
      value.set_ul_HFN(v);
   }

   reader.readSequenceEnd(*this);
}

void CipheringInfoPerRB_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _dl_HFN_Type.write(writer, value.get_dl_HFN());
   _dl_UM_SN_Type.write(writer, value.get_dl_UM_SN());
   _ul_HFN_Type.write(writer, value.get_ul_HFN());

   writer.writeSequenceEnd();
}


void CipheringStatusCNdomain_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _cn_DomainIdentity_Type.read(reader, v);
      value.set_cn_DomainIdentity(v);
   }
   {
      asn1::generated::CipheringStatus::ValueType v;
      _cipheringStatus_Type.read(reader, v);
      value.set_cipheringStatus(v);
   }
   {
      asn1::generated::START_Value::ValueType v;
      _start_Value_Type.read(reader, v);
      value.set_start_Value(v);
   }

   reader.readSequenceEnd(*this);
}

void CipheringStatusCNdomain_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cn_DomainIdentity_Type.write(writer, value.get_cn_DomainIdentity());
   _cipheringStatus_Type.write(writer, value.get_cipheringStatus());
   _start_Value_Type.write(writer, value.get_start_Value());

   writer.writeSequenceEnd();
}


void CN_DomainInformation_v390ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CN_DRX_CycleLengthCoefficient::ValueType v;
      _cn_DRX_CycleLengthCoeff_Type.read(reader, v);
      value.set_cn_DRX_CycleLengthCoeff(v);
   }

   reader.readSequenceEnd(*this);
}

void CN_DomainInformation_v390ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cn_DRX_CycleLengthCoeff_Type.write(writer, value.get_cn_DRX_CycleLengthCoeff());

   writer.writeSequenceEnd();
}


void CompressedModeMeasCapability_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _fdd_Measurements_Type.read(reader, v);
      value.set_fdd_Measurements(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _tdd384_Measurements_Type.read(reader, v);
      value.set_tdd384_Measurements(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _tdd128_Measurements_Type.read(reader, v);
      value.set_tdd128_Measurements(v);
   }
   {
      asn1::generated::GSM_Measurements::ValueType v;
      _gsm_Measurements_Type.read(reader, v);
      value.set_gsm_Measurements(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _multiCarrierMeasurements_Type.read(reader, v);
      value.set_multiCarrierMeasurements(v);
   }

   reader.readSequenceEnd(*this);
}

void CompressedModeMeasCapability_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _fdd_Measurements_Type.write(writer, value.get_fdd_Measurements());
   _tdd384_Measurements_Type.write(writer, value.get_tdd384_Measurements());
   _tdd128_Measurements_Type.write(writer, value.get_tdd128_Measurements());
   _gsm_Measurements_Type.write(writer, value.get_gsm_Measurements());
   _multiCarrierMeasurements_Type.write(writer, value.get_multiCarrierMeasurements());

   writer.writeSequenceEnd();
}


void COUNT_CSingle::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CN_DomainIdentity::ValueType v;
      _cn_DomainIdentity_Type.read(reader, v);
      value.set_cn_DomainIdentity(v);
   }
   {
      _INTERNAL_::ValueType v;
      _count_C_Type.read(reader, v);
      value.set_count_C(v);
   }

   reader.readSequenceEnd(*this);
}

void COUNT_CSingle::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _cn_DomainIdentity_Type.write(writer, value.get_cn_DomainIdentity());
   _count_C_Type.write(writer, value.get_count_C());

   writer.writeSequenceEnd();
}


void DL_PhysChCapabilityFDD_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _maxNoDPCH_PDSCH_Codes_Type.read(reader, v);
      value.set_maxNoDPCH_PDSCH_Codes(v);
   }
   {
      asn1::generated::MaxNoPhysChBitsReceived::ValueType v;
      _maxNoPhysChBitsReceived_Type.read(reader, v);
      value.set_maxNoPhysChBitsReceived(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _supportForSF_512_Type.read(reader, v);
      value.set_supportForSF_512(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::SimultaneousSCCPCH_DPCH_Reception::ValueType v;
      _dummy2_Type.read(reader, v);
      value.set_dummy2(v);
   }
   {
      asn1::generated::SupportOfDedicatedPilotsForChEstimation::ValueType v;
      _dummy3_Type.read(reader, v);
      value.set_dummy3(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_PhysChCapabilityFDD_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _maxNoDPCH_PDSCH_Codes_Type.write(writer, value.get_maxNoDPCH_PDSCH_Codes());
   _maxNoPhysChBitsReceived_Type.write(writer, value.get_maxNoPhysChBitsReceived());
   _supportForSF_512_Type.write(writer, value.get_supportForSF_512());
   _dummy_Type.write(writer, value.get_dummy());
   _dummy2_Type.write(writer, value.get_dummy2());
   _dummy3_Type.write(writer, value.get_dummy3());

   writer.writeSequenceEnd();
}


void DL_PhysChCapabilityFDD_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _maxNoDPCH_PDSCH_Codes_Type.read(reader, v);
      value.set_maxNoDPCH_PDSCH_Codes(v);
   }
   {
      asn1::generated::MaxNoPhysChBitsReceived::ValueType v;
      _maxNoPhysChBitsReceived_Type.read(reader, v);
      value.set_maxNoPhysChBitsReceived(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _supportForSF_512_Type.read(reader, v);
      value.set_supportForSF_512(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _dummy_Type.read(reader, v);
      value.set_dummy(v);
   }
   {
      asn1::generated::SimultaneousSCCPCH_DPCH_Reception::ValueType v;
      _dummy2_Type.read(reader, v);
      value.set_dummy2(v);
   }
   {
      asn1::generated::SupportOfDedicatedPilotsForChEstimation::ValueType v;
      _dummy3_Type.read(reader, v);
      value.set_dummy3(v);
   }
   {
      _INTERNAL__ChoiceType_supported_INTERNAL__SequenceType_hsdsch-physical-layer-category_INTERNAL_asn1__generated__HSDSCH_physical_layer_category_dummy_INTERNAL_asn1__BooleanType_dummy2_INTERNAL_asn1__BooleanType_unsupported_INTERNAL_asn1__NullType::ValueType v;
      _fdd_hspdsch_Type.read(reader, v);
      value.set_fdd_hspdsch(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_PhysChCapabilityFDD_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _maxNoDPCH_PDSCH_Codes_Type.write(writer, value.get_maxNoDPCH_PDSCH_Codes());
   _maxNoPhysChBitsReceived_Type.write(writer, value.get_maxNoPhysChBitsReceived());
   _supportForSF_512_Type.write(writer, value.get_supportForSF_512());
   _dummy_Type.write(writer, value.get_dummy());
   _dummy2_Type.write(writer, value.get_dummy2());
   _dummy3_Type.write(writer, value.get_dummy3());
   _fdd_hspdsch_Type.write(writer, value.get_fdd_hspdsch());

   writer.writeSequenceEnd();
}


void DL_PhysChCapabilityTDD_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MaxTS_PerFrame::ValueType v;
      _maxTS_PerFrame_Type.read(reader, v);
      value.set_maxTS_PerFrame(v);
   }
   {
      asn1::generated::MaxPhysChPerFrame::ValueType v;
      _maxPhysChPerFrame_Type.read(reader, v);
      value.set_maxPhysChPerFrame(v);
   }
   {
      asn1::generated::MinimumSF_DL::ValueType v;
      _minimumSF_Type.read(reader, v);
      value.set_minimumSF(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _supportOfPDSCH_Type.read(reader, v);
      value.set_supportOfPDSCH(v);
   }
   {
      asn1::generated::MaxPhysChPerTS::ValueType v;
      _maxPhysChPerTS_Type.read(reader, v);
      value.set_maxPhysChPerTS(v);
   }
   {
      _INTERNAL__ChoiceType_supported_INTERNAL_asn1__generated__HSDSCH_physical_layer_category_unsupported_INTERNAL_asn1__NullType::ValueType v;
      _tdd384_hspdsch_Type.read(reader, v);
      value.set_tdd384_hspdsch(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_PhysChCapabilityTDD_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _maxTS_PerFrame_Type.write(writer, value.get_maxTS_PerFrame());
   _maxPhysChPerFrame_Type.write(writer, value.get_maxPhysChPerFrame());
   _minimumSF_Type.write(writer, value.get_minimumSF());
   _supportOfPDSCH_Type.write(writer, value.get_supportOfPDSCH());
   _maxPhysChPerTS_Type.write(writer, value.get_maxPhysChPerTS());
   _tdd384_hspdsch_Type.write(writer, value.get_tdd384_hspdsch());

   writer.writeSequenceEnd();
}


void DL_PhysChCapabilityTDD_LCR_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MaxTS_PerSubFrame_r4::ValueType v;
      _maxTS_PerSubFrame_Type.read(reader, v);
      value.set_maxTS_PerSubFrame(v);
   }
   {
      asn1::generated::MaxPhysChPerSubFrame_r4::ValueType v;
      _maxPhysChPerFrame_Type.read(reader, v);
      value.set_maxPhysChPerFrame(v);
   }
   {
      asn1::generated::MinimumSF_DL::ValueType v;
      _minimumSF_Type.read(reader, v);
      value.set_minimumSF(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _supportOfPDSCH_Type.read(reader, v);
      value.set_supportOfPDSCH(v);
   }
   {
      asn1::generated::MaxPhysChPerTS::ValueType v;
      _maxPhysChPerTS_Type.read(reader, v);
      value.set_maxPhysChPerTS(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _supportOf8PSK_Type.read(reader, v);
      value.set_supportOf8PSK(v);
   }
   {
      _INTERNAL__ChoiceType_supported_INTERNAL_asn1__generated__HSDSCH_physical_layer_category_unsupported_INTERNAL_asn1__NullType::ValueType v;
      _tdd128_hspdsch_Type.read(reader, v);
      value.set_tdd128_hspdsch(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_PhysChCapabilityTDD_LCR_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _maxTS_PerSubFrame_Type.write(writer, value.get_maxTS_PerSubFrame());
   _maxPhysChPerFrame_Type.write(writer, value.get_maxPhysChPerFrame());
   _minimumSF_Type.write(writer, value.get_minimumSF());
   _supportOfPDSCH_Type.write(writer, value.get_supportOfPDSCH());
   _maxPhysChPerTS_Type.write(writer, value.get_maxPhysChPerTS());
   _supportOf8PSK_Type.write(writer, value.get_supportOf8PSK());
   _tdd128_hspdsch_Type.write(writer, value.get_tdd128_hspdsch());

   writer.writeSequenceEnd();
}


void DL_RFC3095_Context::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _rfc3095_Context_Identity_Type.read(reader, v);
      value.set_rfc3095_Context_Identity(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _dl_mode_Type.read(reader, v);
      value.set_dl_mode(v);
   }
   {
      asn1::OctetStringType::ValueType v;
      _dl_ref_ir_Type.read(reader, v);
      value.set_dl_ref_ir(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _dl_ref_time_Type.read(reader, v);
      value.set_dl_ref_time(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _dl_curr_time_Type.read(reader, v);
      value.set_dl_curr_time(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _dl_syn_offset_id_Type.read(reader, v);
      value.set_dl_syn_offset_id(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _dl_syn_slope_ts_Type.read(reader, v);
      value.set_dl_syn_slope_ts(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _dl_dyn_changed_Type.read(reader, v);
      value.set_dl_dyn_changed(v);
   }

   reader.readSequenceEnd(*this);
}

void DL_RFC3095_Context::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rfc3095_Context_Identity_Type.write(writer, value.get_rfc3095_Context_Identity());
   _dl_mode_Type.write(writer, value.get_dl_mode());
   _dl_ref_ir_Type.write(writer, value.get_dl_ref_ir());
   _dl_ref_time_Type.write(writer, value.get_dl_ref_time());
   _dl_curr_time_Type.write(writer, value.get_dl_curr_time());
   _dl_syn_offset_id_Type.write(writer, value.get_dl_syn_offset_id());
   _dl_syn_slope_ts_Type.write(writer, value.get_dl_syn_slope_ts());
   _dl_dyn_changed_Type.write(writer, value.get_dl_dyn_changed());

   writer.writeSequenceEnd();
}


void InterRAT_UE_RadioAccessCapabilityList_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::InterRAT_UE_RadioAccessCapabilityList::ValueType v;
      _interRAT_UE_RadioAccessCapability_Type.read(reader, v);
      value.set_interRAT_UE_RadioAccessCapability(v);
   }
   {
      asn1::generated::GERANIu_RadioAccessCapability::ValueType v;
      _geranIu_RadioAccessCapability_Type.read(reader, v);
      value.set_geranIu_RadioAccessCapability(v);
   }

   reader.readSequenceEnd(*this);
}

void InterRAT_UE_RadioAccessCapabilityList_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _interRAT_UE_RadioAccessCapability_Type.write(writer, value.get_interRAT_UE_RadioAccessCapability());
   _geranIu_RadioAccessCapability_Type.write(writer, value.get_geranIu_RadioAccessCapability());

   writer.writeSequenceEnd();
}


void IntraFreqReportingCriteria_r6_ext::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::Event1j_r6::ValueType v;
      _event_Type.read(reader, v);
      value.set_event(v);
   }
   {
      asn1::generated::Hysteresis::ValueType v;
      _hysteresis_Type.read(reader, v);
      value.set_hysteresis(v);
   }
   {
      asn1::generated::TimeToTrigger::ValueType v;
      _timeToTrigger_Type.read(reader, v);
      value.set_timeToTrigger(v);
   }
   {
      asn1::generated::ReportingCellStatus::ValueType v;
      _reportingCellStatus_Type.read(reader, v);
      value.set_reportingCellStatus(v);
   }

   reader.readSequenceEnd(*this);
}

void IntraFreqReportingCriteria_r6_ext::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _event_Type.write(writer, value.get_event());
   _hysteresis_Type.write(writer, value.get_hysteresis());
   _timeToTrigger_Type.write(writer, value.get_timeToTrigger());
   _reportingCellStatus_Type.write(writer, value.get_reportingCellStatus());

   writer.writeSequenceEnd();
}


void MeasurementCapability_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::CompressedModeMeasCapability_r4::ValueType v;
      _downlinkCompressedMode_Type.read(reader, v);
      value.set_downlinkCompressedMode(v);
   }
   {
      asn1::generated::CompressedModeMeasCapability_r4::ValueType v;
      _uplinkCompressedMode_Type.read(reader, v);
      value.set_uplinkCompressedMode(v);
   }

   reader.readSequenceEnd(*this);
}

void MeasurementCapability_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _downlinkCompressedMode_Type.write(writer, value.get_downlinkCompressedMode());
   _uplinkCompressedMode_Type.write(writer, value.get_uplinkCompressedMode());

   writer.writeSequenceEnd();
}


void MeasurementCommandWithType::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_setup_Type)
   {
      asn1::generated::MeasurementType::ValueType v;
      _setup_Type.read(reader, v);
      value.set_setup(v);
   }
   else if (choosenType == &_modify_Type)
   {
      asn1::NullType::ValueType v;
      _modify_Type.read(reader, v);
      value.set_modify(v);
   }
   else if (choosenType == &_release_Type)
   {
      asn1::NullType::ValueType v;
      _release_Type.read(reader, v);
      value.set_release(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _setup_Type.toString() + ", " + _modify_Type.toString() + ", " + _release_Type.toString());
   }
}

void MeasurementCommandWithType::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_setup_Choosen())
      _setup_Type.write(writer, value.get_setup());
   else if (value.has_modify_Choosen())
      _modify_Type.write(writer, value.get_modify());
   else if (value.has_release_Choosen())
      _release_Type.write(writer, value.get_release());
}


void MeasurementCommandWithType-r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_setup_Type)
   {
      asn1::generated::MeasurementType_r4::ValueType v;
      _setup_Type.read(reader, v);
      value.set_setup(v);
   }
   else if (choosenType == &_modify_Type)
   {
      asn1::NullType::ValueType v;
      _modify_Type.read(reader, v);
      value.set_modify(v);
   }
   else if (choosenType == &_release_Type)
   {
      asn1::NullType::ValueType v;
      _release_Type.read(reader, v);
      value.set_release(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _setup_Type.toString() + ", " + _modify_Type.toString() + ", " + _release_Type.toString());
   }
}

void MeasurementCommandWithType-r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_setup_Choosen())
      _setup_Type.write(writer, value.get_setup());
   else if (value.has_modify_Choosen())
      _modify_Type.write(writer, value.get_modify());
   else if (value.has_release_Choosen())
      _release_Type.write(writer, value.get_release());
}


void MeasurementCommandWithType-r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   asn1::Type* choosenType = NULL;
   reader.readChoice(*this, &choosenType);

   if (choosenType == &_setup_Type)
   {
      asn1::generated::MeasurementType_r6::ValueType v;
      _setup_Type.read(reader, v);
      value.set_setup(v);
   }
   else if (choosenType == &_modify_Type)
   {
      asn1::NullType::ValueType v;
      _modify_Type.read(reader, v);
      value.set_modify(v);
   }
   else if (choosenType == &_release_Type)
   {
      asn1::NullType::ValueType v;
      _release_Type.read(reader, v);
      value.set_release(v);
   }
   else
   {
      throw ASN1Exception("Expected " + toString() + " must be one of: "
          + _setup_Type.toString() + ", " + _modify_Type.toString() + ", " + _release_Type.toString());
   }
}

void MeasurementCommandWithType-r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   if (value.has_setup_Choosen())
      _setup_Type.write(writer, value.get_setup());
   else if (value.has_modify_Choosen())
      _modify_Type.write(writer, value.get_modify());
   else if (value.has_release_Choosen())
      _release_Type.write(writer, value.get_release());
}


void OngoingMeasRep::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MeasurementIdentity::ValueType v;
      _measurementIdentity_Type.read(reader, v);
      value.set_measurementIdentity(v);
   }
   {
      asn1::generated::MeasurementCommandWithType::ValueType v;
      _measurementCommandWithType_Type.read(reader, v);
      value.set_measurementCommandWithType(v);
   }
   {
      asn1::generated::MeasurementReportingMode::ValueType v;
      _measurementReportingMode_Type.read(reader, v);
      value.set_measurementReportingMode(v);
   }
   {
      asn1::generated::AdditionalMeasurementID_List::ValueType v;
      _additionalMeasurementID_List_Type.read(reader, v);
      value.set_additionalMeasurementID_List(v);
   }

   reader.readSequenceEnd(*this);
}

void OngoingMeasRep::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _measurementIdentity_Type.write(writer, value.get_measurementIdentity());
   _measurementCommandWithType_Type.write(writer, value.get_measurementCommandWithType());
   _measurementReportingMode_Type.write(writer, value.get_measurementReportingMode());
   _additionalMeasurementID_List_Type.write(writer, value.get_additionalMeasurementID_List());

   writer.writeSequenceEnd();
}


void OngoingMeasRep_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MeasurementIdentity::ValueType v;
      _measurementIdentity_Type.read(reader, v);
      value.set_measurementIdentity(v);
   }
   {
      asn1::generated::MeasurementCommandWithType_r4::ValueType v;
      _measurementCommandWithType_Type.read(reader, v);
      value.set_measurementCommandWithType(v);
   }
   {
      asn1::generated::MeasurementReportingMode::ValueType v;
      _measurementReportingMode_Type.read(reader, v);
      value.set_measurementReportingMode(v);
   }
   {
      asn1::generated::AdditionalMeasurementID_List::ValueType v;
      _additionalMeasurementID_List_Type.read(reader, v);
      value.set_additionalMeasurementID_List(v);
   }

   reader.readSequenceEnd(*this);
}

void OngoingMeasRep_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _measurementIdentity_Type.write(writer, value.get_measurementIdentity());
   _measurementCommandWithType_Type.write(writer, value.get_measurementCommandWithType());
   _measurementReportingMode_Type.write(writer, value.get_measurementReportingMode());
   _additionalMeasurementID_List_Type.write(writer, value.get_additionalMeasurementID_List());

   writer.writeSequenceEnd();
}


void OngoingMeasRep_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MeasurementIdentity::ValueType v;
      _measurementIdentity_Type.read(reader, v);
      value.set_measurementIdentity(v);
   }
   {
      asn1::generated::MeasurementCommandWithType_r4::ValueType v;
      _measurementCommandWithType_Type.read(reader, v);
      value.set_measurementCommandWithType(v);
   }
   {
      asn1::generated::MeasurementReportingMode::ValueType v;
      _measurementReportingMode_Type.read(reader, v);
      value.set_measurementReportingMode(v);
   }
   {
      asn1::generated::AdditionalMeasurementID_List::ValueType v;
      _additionalMeasurementID_List_Type.read(reader, v);
      value.set_additionalMeasurementID_List(v);
   }
   {
      _INTERNAL__ChoiceType_intra-frequency_INTERNAL_asn1__generated__Intra_FreqEventCriteriaList_v590ext_inter-frequency_INTERNAL_asn1__generated__Inter_FreqEventCriteriaList_v590ext::ValueType v;
      _measurementCommand_v590ext_Type.read(reader, v);
      value.set_measurementCommand_v590ext(v);
   }
   {
      asn1::generated::IntraFreqReportingCriteria_1b_r5::ValueType v;
      _intraFreqReportingCriteria_1b_r5_Type.read(reader, v);
      value.set_intraFreqReportingCriteria_1b_r5(v);
   }
   {
      asn1::generated::IntraFreqEvent_1d_r5::ValueType v;
      _intraFreqEvent_1d_r5_Type.read(reader, v);
      value.set_intraFreqEvent_1d_r5(v);
   }

   reader.readSequenceEnd(*this);
}

void OngoingMeasRep_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _measurementIdentity_Type.write(writer, value.get_measurementIdentity());
   _measurementCommandWithType_Type.write(writer, value.get_measurementCommandWithType());
   _measurementReportingMode_Type.write(writer, value.get_measurementReportingMode());
   _additionalMeasurementID_List_Type.write(writer, value.get_additionalMeasurementID_List());
   _measurementCommand_v590ext_Type.write(writer, value.get_measurementCommand_v590ext());
   _intraFreqReportingCriteria_1b_r5_Type.write(writer, value.get_intraFreqReportingCriteria_1b_r5());
   _intraFreqEvent_1d_r5_Type.write(writer, value.get_intraFreqEvent_1d_r5());

   writer.writeSequenceEnd();
}


void OngoingMeasRep_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MeasurementIdentity::ValueType v;
      _measurementIdentity_Type.read(reader, v);
      value.set_measurementIdentity(v);
   }
   {
      asn1::generated::MeasurementCommandWithType_r6::ValueType v;
      _measurementCommandWithType_Type.read(reader, v);
      value.set_measurementCommandWithType(v);
   }
   {
      asn1::generated::MeasurementReportingMode::ValueType v;
      _measurementReportingMode_Type.read(reader, v);
      value.set_measurementReportingMode(v);
   }
   {
      asn1::generated::AdditionalMeasurementID_List::ValueType v;
      _additionalMeasurementID_List_Type.read(reader, v);
      value.set_additionalMeasurementID_List(v);
   }

   reader.readSequenceEnd(*this);
}

void OngoingMeasRep_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _measurementIdentity_Type.write(writer, value.get_measurementIdentity());
   _measurementCommandWithType_Type.write(writer, value.get_measurementCommandWithType());
   _measurementReportingMode_Type.write(writer, value.get_measurementReportingMode());
   _additionalMeasurementID_List_Type.write(writer, value.get_additionalMeasurementID_List());

   writer.writeSequenceEnd();
}


void PDCP_Capability_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _losslessSRNS_RelocationSupport_Type.read(reader, v);
      value.set_losslessSRNS_RelocationSupport(v);
   }
   {
      _INTERNAL__ChoiceType_notSupported_INTERNAL_asn1__NullType_supported_INTERNAL_asn1__generated__MaxHcContextSpace::ValueType v;
      _supportForRfc2507_Type.read(reader, v);
      value.set_supportForRfc2507(v);
   }
   {
      _INTERNAL__ChoiceType_notSupported_INTERNAL_asn1__NullType_supported_INTERNAL__SequenceType_maxROHC-ContextSessions_INTERNAL_asn1__generated__MaxROHC_ContextSessions_r4_reverseCompressionDepth_INTERNAL_asn1__IntegerType::ValueType v;
      _supportForRfc3095_Type.read(reader, v);
      value.set_supportForRfc3095(v);
   }

   reader.readSequenceEnd(*this);
}

void PDCP_Capability_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _losslessSRNS_RelocationSupport_Type.write(writer, value.get_losslessSRNS_RelocationSupport());
   _supportForRfc2507_Type.write(writer, value.get_supportForRfc2507());
   _supportForRfc3095_Type.write(writer, value.get_supportForRfc3095());

   writer.writeSequenceEnd();
}


void PDCP_Capability_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _losslessSRNS_RelocationSupport_Type.read(reader, v);
      value.set_losslessSRNS_RelocationSupport(v);
   }
   {
      _INTERNAL__ChoiceType_notSupported_INTERNAL_asn1__NullType_supported_INTERNAL_asn1__generated__MaxHcContextSpace_r5::ValueType v;
      _supportForRfc2507_Type.read(reader, v);
      value.set_supportForRfc2507(v);
   }
   {
      _INTERNAL__ChoiceType_notSupported_INTERNAL_asn1__NullType_supported_INTERNAL__SequenceType_maxROHC-ContextSessions_INTERNAL_asn1__generated__MaxROHC_ContextSessions_r4_reverseCompressionDepth_INTERNAL_asn1__IntegerType_supportForRfc3095ContextRelocation_INTERNAL_asn1__BooleanType::ValueType v;
      _supportForRfc3095_Type.read(reader, v);
      value.set_supportForRfc3095(v);
   }

   reader.readSequenceEnd(*this);
}

void PDCP_Capability_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _losslessSRNS_RelocationSupport_Type.write(writer, value.get_losslessSRNS_RelocationSupport());
   _supportForRfc2507_Type.write(writer, value.get_supportForRfc2507());
   _supportForRfc3095_Type.write(writer, value.get_supportForRfc3095());

   writer.writeSequenceEnd();
}


void PDCP_Capability_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _losslessSRNS_RelocationSupport_Type.read(reader, v);
      value.set_losslessSRNS_RelocationSupport(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _losslessDLRLC_PDUSizeChange_Type.read(reader, v);
      value.set_losslessDLRLC_PDUSizeChange(v);
   }
   {
      _INTERNAL__ChoiceType_notSupported_INTERNAL_asn1__NullType_supported_INTERNAL_asn1__generated__MaxHcContextSpace_r5::ValueType v;
      _supportForRfc2507_Type.read(reader, v);
      value.set_supportForRfc2507(v);
   }
   {
      _INTERNAL__ChoiceType_notSupported_INTERNAL_asn1__NullType_supported_INTERNAL__SequenceType_maxROHC-ContextSessions_INTERNAL_asn1__generated__MaxROHC_ContextSessions_r4_reverseCompressionDepth_INTERNAL_asn1__IntegerType_supportForRfc3095ContextRelocation_INTERNAL_asn1__BooleanType::ValueType v;
      _supportForRfc3095_Type.read(reader, v);
      value.set_supportForRfc3095(v);
   }

   reader.readSequenceEnd(*this);
}

void PDCP_Capability_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _losslessSRNS_RelocationSupport_Type.write(writer, value.get_losslessSRNS_RelocationSupport());
   _losslessDLRLC_PDUSizeChange_Type.write(writer, value.get_losslessDLRLC_PDUSizeChange());
   _supportForRfc2507_Type.write(writer, value.get_supportForRfc2507());
   _supportForRfc3095_Type.write(writer, value.get_supportForRfc3095());

   writer.writeSequenceEnd();
}


void PhysicalChannelCapability_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__SequenceType_downlinkPhysChCapability_INTERNAL_asn1__generated__DL_PhysChCapabilityFDD_r4_uplinkPhysChCapability_INTERNAL_asn1__generated__UL_PhysChCapabilityFDD::ValueType v;
      _fddPhysChCapability_Type.read(reader, v);
      value.set_fddPhysChCapability(v);
   }
   {
      _INTERNAL__SequenceType_downlinkPhysChCapability_INTERNAL_asn1__generated__DL_PhysChCapabilityTDD_uplinkPhysChCapability_INTERNAL_asn1__generated__UL_PhysChCapabilityTDD::ValueType v;
      _tdd384_PhysChCapability_Type.read(reader, v);
      value.set_tdd384_PhysChCapability(v);
   }
   {
      _INTERNAL__SequenceType_downlinkPhysChCapability_INTERNAL_asn1__generated__DL_PhysChCapabilityTDD_LCR_r4_uplinkPhysChCapability_INTERNAL_asn1__generated__UL_PhysChCapabilityTDD_LCR_r4::ValueType v;
      _tdd128_PhysChCapability_Type.read(reader, v);
      value.set_tdd128_PhysChCapability(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalChannelCapability_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _fddPhysChCapability_Type.write(writer, value.get_fddPhysChCapability());
   _tdd384_PhysChCapability_Type.write(writer, value.get_tdd384_PhysChCapability());
   _tdd128_PhysChCapability_Type.write(writer, value.get_tdd128_PhysChCapability());

   writer.writeSequenceEnd();
}


void PhysicalChannelCapability_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__SequenceType_downlinkPhysChCapability_INTERNAL_asn1__generated__DL_PhysChCapabilityFDD_r5_uplinkPhysChCapability_INTERNAL_asn1__generated__UL_PhysChCapabilityFDD::ValueType v;
      _fddPhysChCapability_Type.read(reader, v);
      value.set_fddPhysChCapability(v);
   }
   {
      _INTERNAL__SequenceType_downlinkPhysChCapability_INTERNAL_asn1__generated__DL_PhysChCapabilityTDD_r5_uplinkPhysChCapability_INTERNAL_asn1__generated__UL_PhysChCapabilityTDD::ValueType v;
      _tdd384_PhysChCapability_Type.read(reader, v);
      value.set_tdd384_PhysChCapability(v);
   }
   {
      _INTERNAL__SequenceType_downlinkPhysChCapability_INTERNAL_asn1__generated__DL_PhysChCapabilityTDD_LCR_r5_uplinkPhysChCapability_INTERNAL_asn1__generated__UL_PhysChCapabilityTDD_LCR_r4::ValueType v;
      _tdd128_PhysChCapability_Type.read(reader, v);
      value.set_tdd128_PhysChCapability(v);
   }

   reader.readSequenceEnd(*this);
}

void PhysicalChannelCapability_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _fddPhysChCapability_Type.write(writer, value.get_fddPhysChCapability());
   _tdd384_PhysChCapability_Type.write(writer, value.get_tdd384_PhysChCapability());
   _tdd128_PhysChCapability_Type.write(writer, value.get_tdd128_PhysChCapability());

   writer.writeSequenceEnd();
}


void RF_Capability_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL__SequenceType_ue-PowerClass_INTERNAL_asn1__generated__UE_PowerClassExt_txRxFrequencySeparation_INTERNAL_asn1__generated__TxRxFrequencySeparation::ValueType v;
      _fddRF_Capability_Type.read(reader, v);
      value.set_fddRF_Capability(v);
   }
   {
      _INTERNAL__SequenceType_ue-PowerClass_INTERNAL_asn1__generated__UE_PowerClassExt_radioFrequencyBandTDDList_INTERNAL_asn1__generated__RadioFrequencyBandTDDList_chipRateCapability_INTERNAL_asn1__generated__ChipRateCapability::ValueType v;
      _tdd384_RF_Capability_Type.read(reader, v);
      value.set_tdd384_RF_Capability(v);
   }
   {
      _INTERNAL__SequenceType_ue-PowerClass_INTERNAL_asn1__generated__UE_PowerClassExt_radioFrequencyBandTDDList_INTERNAL_asn1__generated__RadioFrequencyBandTDDList_chipRateCapability_INTERNAL_asn1__generated__ChipRateCapability::ValueType v;
      _tdd128_RF_Capability_Type.read(reader, v);
      value.set_tdd128_RF_Capability(v);
   }

   reader.readSequenceEnd(*this);
}

void RF_Capability_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _fddRF_Capability_Type.write(writer, value.get_fddRF_Capability());
   _tdd384_RF_Capability_Type.write(writer, value.get_tdd384_RF_Capability());
   _tdd128_RF_Capability_Type.write(writer, value.get_tdd128_RF_Capability());

   writer.writeSequenceEnd();
}


void RFC3095_ContextInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::RB_Identity::ValueType v;
      _rb_Identity_Type.read(reader, v);
      value.set_rb_Identity(v);
   }
   {
      asn1::generated::RFC3095_Context_List::ValueType v;
      _rfc3095_Context_List_Type.read(reader, v);
      value.set_rfc3095_Context_List(v);
   }

   reader.readSequenceEnd(*this);
}

void RFC3095_ContextInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rb_Identity_Type.write(writer, value.get_rb_Identity());
   _rfc3095_Context_List_Type.write(writer, value.get_rfc3095_Context_List());

   writer.writeSequenceEnd();
}


void RLC_Capability_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::TotalRLC_AM_BufferSize_r5::ValueType v;
      _totalRLC_AM_BufferSize_Type.read(reader, v);
      value.set_totalRLC_AM_BufferSize(v);
   }
   {
      asn1::generated::MaximumRLC_WindowSize::ValueType v;
      _maximumRLC_WindowSize_Type.read(reader, v);
      value.set_maximumRLC_WindowSize(v);
   }
   {
      asn1::generated::MaximumAM_EntityNumberRLC_Cap::ValueType v;
      _maximumAM_EntityNumber_Type.read(reader, v);
      value.set_maximumAM_EntityNumber(v);
   }

   reader.readSequenceEnd(*this);
}

void RLC_Capability_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _totalRLC_AM_BufferSize_Type.write(writer, value.get_totalRLC_AM_BufferSize());
   _maximumRLC_WindowSize_Type.write(writer, value.get_maximumRLC_WindowSize());
   _maximumAM_EntityNumber_Type.write(writer, value.get_maximumAM_EntityNumber());

   writer.writeSequenceEnd();
}


void SRB_SpecificIntegrityProtInfo::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      _INTERNAL_::ValueType v;
      _ul_RRC_HFN_Type.read(reader, v);
      value.set_ul_RRC_HFN(v);
   }
   {
      _INTERNAL_::ValueType v;
      _dl_RRC_HFN_Type.read(reader, v);
      value.set_dl_RRC_HFN(v);
   }
   {
      asn1::generated::RRC_MessageSequenceNumber::ValueType v;
      _ul_RRC_SequenceNumber_Type.read(reader, v);
      value.set_ul_RRC_SequenceNumber(v);
   }
   {
      asn1::generated::RRC_MessageSequenceNumber::ValueType v;
      _dl_RRC_SequenceNumber_Type.read(reader, v);
      value.set_dl_RRC_SequenceNumber(v);
   }

   reader.readSequenceEnd(*this);
}

void SRB_SpecificIntegrityProtInfo::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _ul_RRC_HFN_Type.write(writer, value.get_ul_RRC_HFN());
   _dl_RRC_HFN_Type.write(writer, value.get_dl_RRC_HFN());
   _ul_RRC_SequenceNumber_Type.write(writer, value.get_ul_RRC_SequenceNumber());
   _dl_RRC_SequenceNumber_Type.write(writer, value.get_dl_RRC_SequenceNumber());

   writer.writeSequenceEnd();
}


void TPC_Combination_Info::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::PrimaryCPICH_Info::ValueType v;
      _primaryCPICH_Info_Type.read(reader, v);
      value.set_primaryCPICH_Info(v);
   }
   {
      asn1::generated::TPC_CombinationIndex::ValueType v;
      _tpc_CombinationIndex_Type.read(reader, v);
      value.set_tpc_CombinationIndex(v);
   }

   reader.readSequenceEnd(*this);
}

void TPC_Combination_Info::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _primaryCPICH_Info_Type.write(writer, value.get_primaryCPICH_Info());
   _tpc_CombinationIndex_Type.write(writer, value.get_tpc_CombinationIndex());

   writer.writeSequenceEnd();
}


void UE_MultiModeRAT_Capability_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::MultiRAT_Capability::ValueType v;
      _multiRAT_CapabilityList_Type.read(reader, v);
      value.set_multiRAT_CapabilityList(v);
   }
   {
      asn1::generated::MultiModeCapability::ValueType v;
      _multiModeCapability_Type.read(reader, v);
      value.set_multiModeCapability(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _supportOfUTRAN_ToGERAN_NACC_Type.read(reader, v);
      value.set_supportOfUTRAN_ToGERAN_NACC(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_MultiModeRAT_Capability_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _multiRAT_CapabilityList_Type.write(writer, value.get_multiRAT_CapabilityList());
   _multiModeCapability_Type.write(writer, value.get_multiModeCapability());
   _supportOfUTRAN_ToGERAN_NACC_Type.write(writer, value.get_supportOfUTRAN_ToGERAN_NACC());

   writer.writeSequenceEnd();
}


void UE_Positioning_Capability_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::BooleanType::ValueType v;
      _standaloneLocMethodsSupported_Type.read(reader, v);
      value.set_standaloneLocMethodsSupported(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _ue_BasedOTDOA_Supported_Type.read(reader, v);
      value.set_ue_BasedOTDOA_Supported(v);
   }
   {
      asn1::generated::NetworkAssistedGPS_Supported::ValueType v;
      _networkAssistedGPS_Supported_Type.read(reader, v);
      value.set_networkAssistedGPS_Supported(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _supportForUE_GPS_TimingOfCellFrames_Type.read(reader, v);
      value.set_supportForUE_GPS_TimingOfCellFrames(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _supportForIPDL_Type.read(reader, v);
      value.set_supportForIPDL(v);
   }
   {
      asn1::BooleanType::ValueType v;
      _rx_tx_TimeDifferenceType2Capable_Type.read(reader, v);
      value.set_rx_tx_TimeDifferenceType2Capable(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _validity_CellPCH_UraPCH_Type.read(reader, v);
      value.set_validity_CellPCH_UraPCH(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _sfn_sfnType2Capability_Type.read(reader, v);
      value.set_sfn_sfnType2Capability(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_Capability_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _standaloneLocMethodsSupported_Type.write(writer, value.get_standaloneLocMethodsSupported());
   _ue_BasedOTDOA_Supported_Type.write(writer, value.get_ue_BasedOTDOA_Supported());
   _networkAssistedGPS_Supported_Type.write(writer, value.get_networkAssistedGPS_Supported());
   _supportForUE_GPS_TimingOfCellFrames_Type.write(writer, value.get_supportForUE_GPS_TimingOfCellFrames());
   _supportForIPDL_Type.write(writer, value.get_supportForIPDL());
   _rx_tx_TimeDifferenceType2Capable_Type.write(writer, value.get_rx_tx_TimeDifferenceType2Capable());
   _validity_CellPCH_UraPCH_Type.write(writer, value.get_validity_CellPCH_UraPCH());
   _sfn_sfnType2Capability_Type.write(writer, value.get_sfn_sfnType2Capability());

   writer.writeSequenceEnd();
}


void UE_Positioning_LastKnownPos::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _sfn_Type.read(reader, v);
      value.set_sfn(v);
   }
   {
      asn1::generated::CellIdentity::ValueType v;
      _cell_id_Type.read(reader, v);
      value.set_cell_id(v);
   }
   {
      asn1::generated::PositionEstimate::ValueType v;
      _positionEstimate_Type.read(reader, v);
      value.set_positionEstimate(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_Positioning_LastKnownPos::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _sfn_Type.write(writer, value.get_sfn());
   _cell_id_Type.write(writer, value.get_cell_id());
   _positionEstimate_Type.write(writer, value.get_positionEstimate());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapability_r4::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::AccessStratumReleaseIndicator::ValueType v;
      _accessStratumReleaseIndicator_Type.read(reader, v);
      value.set_accessStratumReleaseIndicator(v);
   }
   {
      asn1::generated::PDCP_Capability_r4::ValueType v;
      _pdcp_Capability_Type.read(reader, v);
      value.set_pdcp_Capability(v);
   }
   {
      asn1::generated::RLC_Capability::ValueType v;
      _rlc_Capability_Type.read(reader, v);
      value.set_rlc_Capability(v);
   }
   {
      asn1::generated::TransportChannelCapability::ValueType v;
      _transportChannelCapability_Type.read(reader, v);
      value.set_transportChannelCapability(v);
   }
   {
      asn1::generated::RF_Capability_r4::ValueType v;
      _rf_Capability_Type.read(reader, v);
      value.set_rf_Capability(v);
   }
   {
      asn1::generated::PhysicalChannelCapability_r4::ValueType v;
      _physicalChannelCapability_Type.read(reader, v);
      value.set_physicalChannelCapability(v);
   }
   {
      asn1::generated::UE_MultiModeRAT_Capability::ValueType v;
      _ue_MultiModeRAT_Capability_Type.read(reader, v);
      value.set_ue_MultiModeRAT_Capability(v);
   }
   {
      asn1::generated::SecurityCapability::ValueType v;
      _securityCapability_Type.read(reader, v);
      value.set_securityCapability(v);
   }
   {
      asn1::generated::UE_Positioning_Capability_r4::ValueType v;
      _ue_positioning_Capability_Type.read(reader, v);
      value.set_ue_positioning_Capability(v);
   }
   {
      asn1::generated::MeasurementCapability_r4::ValueType v;
      _measurementCapability_Type.read(reader, v);
      value.set_measurementCapability(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapability_r4::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _accessStratumReleaseIndicator_Type.write(writer, value.get_accessStratumReleaseIndicator());
   _pdcp_Capability_Type.write(writer, value.get_pdcp_Capability());
   _rlc_Capability_Type.write(writer, value.get_rlc_Capability());
   _transportChannelCapability_Type.write(writer, value.get_transportChannelCapability());
   _rf_Capability_Type.write(writer, value.get_rf_Capability());
   _physicalChannelCapability_Type.write(writer, value.get_physicalChannelCapability());
   _ue_MultiModeRAT_Capability_Type.write(writer, value.get_ue_MultiModeRAT_Capability());
   _securityCapability_Type.write(writer, value.get_securityCapability());
   _ue_positioning_Capability_Type.write(writer, value.get_ue_positioning_Capability());
   _measurementCapability_Type.write(writer, value.get_measurementCapability());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapability_r5::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::AccessStratumReleaseIndicator::ValueType v;
      _accessStratumReleaseIndicator_Type.read(reader, v);
      value.set_accessStratumReleaseIndicator(v);
   }
   {
      asn1::generated::DL_CapabilityWithSimultaneousHS_DSCHConfig::ValueType v;
      _dl_CapabilityWithSimultaneousHS_DSCHConfig_Type.read(reader, v);
      value.set_dl_CapabilityWithSimultaneousHS_DSCHConfig(v);
   }
   {
      asn1::generated::PDCP_Capability_r5::ValueType v;
      _pdcp_Capability_Type.read(reader, v);
      value.set_pdcp_Capability(v);
   }
   {
      asn1::generated::RLC_Capability_r5::ValueType v;
      _rlc_Capability_Type.read(reader, v);
      value.set_rlc_Capability(v);
   }
   {
      asn1::generated::TransportChannelCapability::ValueType v;
      _transportChannelCapability_Type.read(reader, v);
      value.set_transportChannelCapability(v);
   }
   {
      asn1::generated::RF_Capability_r4::ValueType v;
      _rf_Capability_Type.read(reader, v);
      value.set_rf_Capability(v);
   }
   {
      asn1::generated::PhysicalChannelCapability_r5::ValueType v;
      _physicalChannelCapability_Type.read(reader, v);
      value.set_physicalChannelCapability(v);
   }
   {
      asn1::generated::UE_MultiModeRAT_Capability_r5::ValueType v;
      _ue_MultiModeRAT_Capability_Type.read(reader, v);
      value.set_ue_MultiModeRAT_Capability(v);
   }
   {
      asn1::generated::SecurityCapability::ValueType v;
      _securityCapability_Type.read(reader, v);
      value.set_securityCapability(v);
   }
   {
      asn1::generated::UE_Positioning_Capability_r4::ValueType v;
      _ue_positioning_Capability_Type.read(reader, v);
      value.set_ue_positioning_Capability(v);
   }
   {
      asn1::generated::MeasurementCapability_r4::ValueType v;
      _measurementCapability_Type.read(reader, v);
      value.set_measurementCapability(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapability_r5::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _accessStratumReleaseIndicator_Type.write(writer, value.get_accessStratumReleaseIndicator());
   _dl_CapabilityWithSimultaneousHS_DSCHConfig_Type.write(writer, value.get_dl_CapabilityWithSimultaneousHS_DSCHConfig());
   _pdcp_Capability_Type.write(writer, value.get_pdcp_Capability());
   _rlc_Capability_Type.write(writer, value.get_rlc_Capability());
   _transportChannelCapability_Type.write(writer, value.get_transportChannelCapability());
   _rf_Capability_Type.write(writer, value.get_rf_Capability());
   _physicalChannelCapability_Type.write(writer, value.get_physicalChannelCapability());
   _ue_MultiModeRAT_Capability_Type.write(writer, value.get_ue_MultiModeRAT_Capability());
   _securityCapability_Type.write(writer, value.get_securityCapability());
   _ue_positioning_Capability_Type.write(writer, value.get_ue_positioning_Capability());
   _measurementCapability_Type.write(writer, value.get_measurementCapability());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapability_r6::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::AccessStratumReleaseIndicator::ValueType v;
      _accessStratumReleaseIndicator_Type.read(reader, v);
      value.set_accessStratumReleaseIndicator(v);
   }
   {
      asn1::generated::DL_CapabilityWithSimultaneousHS_DSCHConfig::ValueType v;
      _dl_CapabilityWithSimultaneousHS_DSCHConfig_Type.read(reader, v);
      value.set_dl_CapabilityWithSimultaneousHS_DSCHConfig(v);
   }
   {
      asn1::generated::PDCP_Capability_r6::ValueType v;
      _pdcp_Capability_Type.read(reader, v);
      value.set_pdcp_Capability(v);
   }
   {
      asn1::generated::RLC_Capability_r5::ValueType v;
      _rlc_Capability_Type.read(reader, v);
      value.set_rlc_Capability(v);
   }
   {
      asn1::generated::TransportChannelCapability::ValueType v;
      _transportChannelCapability_Type.read(reader, v);
      value.set_transportChannelCapability(v);
   }
   {
      asn1::generated::RF_Capability_r4::ValueType v;
      _rf_Capability_Type.read(reader, v);
      value.set_rf_Capability(v);
   }
   {
      asn1::generated::PhysicalChannelCapability_r5::ValueType v;
      _physicalChannelCapability_Type.read(reader, v);
      value.set_physicalChannelCapability(v);
   }
   {
      asn1::generated::UE_MultiModeRAT_Capability_r5::ValueType v;
      _ue_MultiModeRAT_Capability_Type.read(reader, v);
      value.set_ue_MultiModeRAT_Capability(v);
   }
   {
      asn1::generated::SecurityCapability::ValueType v;
      _securityCapability_Type.read(reader, v);
      value.set_securityCapability(v);
   }
   {
      asn1::generated::UE_Positioning_Capability_r4::ValueType v;
      _ue_positioning_Capability_Type.read(reader, v);
      value.set_ue_positioning_Capability(v);
   }
   {
      asn1::generated::MeasurementCapability_r4::ValueType v;
      _measurementCapability_Type.read(reader, v);
      value.set_measurementCapability(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapability_r6::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _accessStratumReleaseIndicator_Type.write(writer, value.get_accessStratumReleaseIndicator());
   _dl_CapabilityWithSimultaneousHS_DSCHConfig_Type.write(writer, value.get_dl_CapabilityWithSimultaneousHS_DSCHConfig());
   _pdcp_Capability_Type.write(writer, value.get_pdcp_Capability());
   _rlc_Capability_Type.write(writer, value.get_rlc_Capability());
   _transportChannelCapability_Type.write(writer, value.get_transportChannelCapability());
   _rf_Capability_Type.write(writer, value.get_rf_Capability());
   _physicalChannelCapability_Type.write(writer, value.get_physicalChannelCapability());
   _ue_MultiModeRAT_Capability_Type.write(writer, value.get_ue_MultiModeRAT_Capability());
   _securityCapability_Type.write(writer, value.get_securityCapability());
   _ue_positioning_Capability_Type.write(writer, value.get_ue_positioning_Capability());
   _measurementCapability_Type.write(writer, value.get_measurementCapability());

   writer.writeSequenceEnd();
}


void UE_RadioAccessCapability_r7::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::generated::AccessStratumReleaseIndicator::ValueType v;
      _accessStratumReleaseIndicator_Type.read(reader, v);
      value.set_accessStratumReleaseIndicator(v);
   }
   {
      asn1::generated::DL_CapabilityWithSimultaneousHS_DSCHConfig::ValueType v;
      _dl_CapabilityWithSimultaneousHS_DSCHConfig_Type.read(reader, v);
      value.set_dl_CapabilityWithSimultaneousHS_DSCHConfig(v);
   }
   {
      asn1::generated::PDCP_Capability_r6::ValueType v;
      _pdcp_Capability_Type.read(reader, v);
      value.set_pdcp_Capability(v);
   }
   {
      asn1::generated::RLC_Capability_r5::ValueType v;
      _rlc_Capability_Type.read(reader, v);
      value.set_rlc_Capability(v);
   }
   {
      asn1::generated::TransportChannelCapability::ValueType v;
      _transportChannelCapability_Type.read(reader, v);
      value.set_transportChannelCapability(v);
   }
   {
      asn1::generated::RF_Capability_r7::ValueType v;
      _rf_Capability_Type.read(reader, v);
      value.set_rf_Capability(v);
   }
   {
      asn1::generated::PhysicalChannelCapability_r7::ValueType v;
      _physicalChannelCapability_Type.read(reader, v);
      value.set_physicalChannelCapability(v);
   }
   {
      asn1::generated::UE_MultiModeRAT_Capability_r5::ValueType v;
      _ue_MultiModeRAT_Capability_Type.read(reader, v);
      value.set_ue_MultiModeRAT_Capability(v);
   }
   {
      asn1::generated::SecurityCapability::ValueType v;
      _securityCapability_Type.read(reader, v);
      value.set_securityCapability(v);
   }
   {
      asn1::generated::UE_Positioning_Capability_r4::ValueType v;
      _ue_positioning_Capability_Type.read(reader, v);
      value.set_ue_positioning_Capability(v);
   }
   {
      asn1::generated::MeasurementCapability_r4::ValueType v;
      _measurementCapability_Type.read(reader, v);
      value.set_measurementCapability(v);
   }

   reader.readSequenceEnd(*this);
}

void UE_RadioAccessCapability_r7::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _accessStratumReleaseIndicator_Type.write(writer, value.get_accessStratumReleaseIndicator());
   _dl_CapabilityWithSimultaneousHS_DSCHConfig_Type.write(writer, value.get_dl_CapabilityWithSimultaneousHS_DSCHConfig());
   _pdcp_Capability_Type.write(writer, value.get_pdcp_Capability());
   _rlc_Capability_Type.write(writer, value.get_rlc_Capability());
   _transportChannelCapability_Type.write(writer, value.get_transportChannelCapability());
   _rf_Capability_Type.write(writer, value.get_rf_Capability());
   _physicalChannelCapability_Type.write(writer, value.get_physicalChannelCapability());
   _ue_MultiModeRAT_Capability_Type.write(writer, value.get_ue_MultiModeRAT_Capability());
   _securityCapability_Type.write(writer, value.get_securityCapability());
   _ue_positioning_Capability_Type.write(writer, value.get_ue_positioning_Capability());
   _measurementCapability_Type.write(writer, value.get_measurementCapability());

   writer.writeSequenceEnd();
}


void UL_RFC3095_Context::read(ASN1ValueReader& reader, ValueType& value) const
{
   reader.readSequenceBegin(*this);

   {
      asn1::IntegerType::ValueType v;
      _rfc3095_Context_Identity_Type.read(reader, v);
      value.set_rfc3095_Context_Identity(v);
   }
   {
      _INTERNAL__EnumeratedType::ValueType v;
      _ul_mode_Type.read(reader, v);
      value.set_ul_mode(v);
   }
   {
      asn1::OctetStringType::ValueType v;
      _ul_ref_ir_Type.read(reader, v);
      value.set_ul_ref_ir(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _ul_ref_time_Type.read(reader, v);
      value.set_ul_ref_time(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _ul_curr_time_Type.read(reader, v);
      value.set_ul_curr_time(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _ul_syn_offset_id_Type.read(reader, v);
      value.set_ul_syn_offset_id(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _ul_syn_slope_ts_Type.read(reader, v);
      value.set_ul_syn_slope_ts(v);
   }
   {
      asn1::IntegerType::ValueType v;
      _ul_ref_sn_1_Type.read(reader, v);
      value.set_ul_ref_sn_1(v);
   }

   reader.readSequenceEnd(*this);
}

void UL_RFC3095_Context::write(ASN1ValueWriter& writer, const ValueType& value) const
{
   writer.writeSequenceBegin(*this);

   _rfc3095_Context_Identity_Type.write(writer, value.get_rfc3095_Context_Identity());
   _ul_mode_Type.write(writer, value.get_ul_mode());
   _ul_ref_ir_Type.write(writer, value.get_ul_ref_ir());
   _ul_ref_time_Type.write(writer, value.get_ul_ref_time());
   _ul_curr_time_Type.write(writer, value.get_ul_curr_time());
   _ul_syn_offset_id_Type.write(writer, value.get_ul_syn_offset_id());
   _ul_syn_slope_ts_Type.write(writer, value.get_ul_syn_slope_ts());
   _ul_ref_sn_1_Type.write(writer, value.get_ul_ref_sn_1());

   writer.writeSequenceEnd();
}

}

}
